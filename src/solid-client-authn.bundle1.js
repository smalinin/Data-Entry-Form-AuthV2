var solidClientAuthentication;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ClientAuthentication.ts":
/*!*************************************!*\
  !*** ./src/ClientAuthentication.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const universal_fetch_1 = __webpack_require__(/*! @inrupt/universal-fetch */ "./node_modules/@inrupt/universal-fetch/dist/index-browser.js");
const oidc_client_ext_1 = __webpack_require__(/*! @inrupt/oidc-client-ext */ "../oidc-browser/dist/index.es.js");
const globalFetch = (request, init) => (0, universal_fetch_1.fetch)(request, init);
class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.login = async (options, eventEmitter) => {
            var _a, _b;
            await this.sessionInfoManager.clear(options.sessionId);
            const redirectUrl = (_a = options.redirectUrl) !== null && _a !== void 0 ? _a : (0, oidc_client_ext_1.removeOidcQueryParam)(window.location.href);
            if (!(0, solid_client_authn_core_1.isValidRedirectUrl)(redirectUrl)) {
                throw new Error(`${redirectUrl} is not a valid redirect URL, it is either a malformed IRI or it includes a hash fragment.`);
            }
            await this.loginHandler.handle({
                ...options,
                redirectUrl,
                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,
                eventEmitter,
            });
        };
        this.fetch = globalFetch;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = globalFetch;
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.validateCurrentSession = async (currentSessionId) => {
            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);
            if (sessionInfo === undefined ||
                sessionInfo.clientAppId === undefined ||
                sessionInfo.issuer === undefined) {
                return null;
            }
            return sessionInfo;
        };
        this.handleIncomingRedirect = async (url, eventEmitter) => {
            try {
                const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);
                this.fetch = redirectInfo.fetch.bind(window);
                this.cleanUrlAfterRedirect(url);
                return {
                    isLoggedIn: redirectInfo.isLoggedIn,
                    webId: redirectInfo.webId,
                    sessionId: redirectInfo.sessionId,
                    expirationDate: redirectInfo.expirationDate,
                };
            }
            catch (err) {
                this.cleanUrlAfterRedirect(url);
                eventEmitter.emit(solid_client_authn_core_1.EVENTS.ERROR, "redirect", err);
                return undefined;
            }
        };
    }
    cleanUrlAfterRedirect(url) {
        const cleanedUpUrl = new URL(url);
        cleanedUpUrl.searchParams.delete("state");
        cleanedUpUrl.searchParams.delete("code");
        cleanedUpUrl.searchParams.delete("id_token");
        cleanedUpUrl.searchParams.delete("access_token");
        cleanedUpUrl.searchParams.delete("error");
        cleanedUpUrl.searchParams.delete("error_description");
        cleanedUpUrl.searchParams.delete("iss");
        window.history.replaceState(null, "", cleanedUpUrl.toString());
    }
}
exports["default"] = ClientAuthentication;


/***/ }),

/***/ "./src/Session.ts":
/*!************************!*\
  !*** ./src/Session.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Session = exports.silentlyAuthenticate = void 0;
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/commonjs-browser/index.js");
const events_1 = __importDefault(__webpack_require__(/*! events */ "./node_modules/events/events.js"));
const dependencies_1 = __webpack_require__(/*! ./dependencies */ "./src/dependencies.ts");
const constant_1 = __webpack_require__(/*! ./constant */ "./src/constant.ts");
async function silentlyAuthenticate(sessionId, clientAuthn, session) {
    var _a;
    const storedSessionInfo = await clientAuthn.validateCurrentSession(sessionId);
    if (storedSessionInfo !== null) {
        window.localStorage.setItem(constant_1.KEY_CURRENT_URL, window.location.href);
        await clientAuthn.login({
            sessionId,
            prompt: "none",
            oidcIssuer: storedSessionInfo.issuer,
            redirectUrl: storedSessionInfo.redirectUrl,
            clientId: storedSessionInfo.clientAppId,
            clientSecret: storedSessionInfo.clientAppSecret,
            tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
        }, session.events);
        return true;
    }
    return false;
}
exports.silentlyAuthenticate = silentlyAuthenticate;
function isLoggedIn(sessionInfo) {
    return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);
}
class Session extends events_1.default {
    constructor(sessionOptions = {}, sessionId = undefined) {
        super();
        this.tokenRequestInProgress = false;
        this.login = async (options) => {
            var _a;
            await this.clientAuthentication.login({
                sessionId: this.info.sessionId,
                ...options,
                tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            }, this.events);
            return new Promise(() => { });
        };
        this.fetch = async (url, init) => {
            return this.clientAuthentication.fetch(url, init);
        };
        this.internalLogout = async (emitSignal) => {
            window.localStorage.removeItem(constant_1.KEY_CURRENT_SESSION);
            await this.clientAuthentication.logout(this.info.sessionId);
            this.info.isLoggedIn = false;
            if (emitSignal) {
                this.events.emit(solid_client_authn_core_1.EVENTS.LOGOUT);
            }
        };
        this.logout = async () => this.internalLogout(true);
        this.handleIncomingRedirect = async (inputOptions = {}) => {
            var _a;
            if (this.info.isLoggedIn) {
                return this.info;
            }
            if (this.tokenRequestInProgress) {
                return undefined;
            }
            const options = typeof inputOptions === "string" ? { url: inputOptions } : inputOptions;
            const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;
            this.tokenRequestInProgress = true;
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url, this.events);
            if (isLoggedIn(sessionInfo)) {
                this.setSessionInfo(sessionInfo);
                const currentUrl = window.localStorage.getItem(constant_1.KEY_CURRENT_URL);
                if (currentUrl === null) {
                    this.events.emit(solid_client_authn_core_1.EVENTS.LOGIN);
                }
                else {
                    window.localStorage.removeItem(constant_1.KEY_CURRENT_URL);
                    this.events.emit(solid_client_authn_core_1.EVENTS.SESSION_RESTORED, currentUrl);
                }
            }
            else if (options.restorePreviousSession === true) {
                const storedSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
                if (storedSessionId !== null) {
                    const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication, this);
                    if (attemptedSilentAuthentication) {
                        return new Promise(() => { });
                    }
                }
            }
            this.tokenRequestInProgress = false;
            return sessionInfo;
        };
        this.events = new Proxy(this, (0, solid_client_authn_core_1.buildProxyHandler)(Session.prototype, "events only implements ISessionEventListener"));
        if (sessionOptions.clientAuthentication) {
            this.clientAuthentication = sessionOptions.clientAuthentication;
        }
        else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {
            this.clientAuthentication = (0, dependencies_1.getClientAuthenticationWithDependencies)({
                secureStorage: sessionOptions.secureStorage,
                insecureStorage: sessionOptions.insecureStorage,
            });
        }
        else {
            this.clientAuthentication = (0, dependencies_1.getClientAuthenticationWithDependencies)({});
        }
        if (sessionOptions.sessionInfo) {
            this.info = {
                sessionId: sessionOptions.sessionInfo.sessionId,
                isLoggedIn: false,
                webId: sessionOptions.sessionInfo.webId,
            };
        }
        else {
            this.info = {
                sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : (0, uuid_1.v4)(),
                isLoggedIn: false,
            };
        }
        this.events.on(solid_client_authn_core_1.EVENTS.LOGIN, () => window.localStorage.setItem(constant_1.KEY_CURRENT_SESSION, this.info.sessionId));
        this.events.on(solid_client_authn_core_1.EVENTS.SESSION_EXPIRED, () => this.internalLogout(false));
        this.events.on(solid_client_authn_core_1.EVENTS.ERROR, () => this.internalLogout(false));
    }
    onLogin(callback) {
        this.events.on(solid_client_authn_core_1.EVENTS.LOGIN, callback);
    }
    onLogout(callback) {
        this.events.on(solid_client_authn_core_1.EVENTS.LOGOUT, callback);
    }
    onError(callback) {
        this.events.on(solid_client_authn_core_1.EVENTS.ERROR, callback);
    }
    onSessionRestore(callback) {
        this.events.on(solid_client_authn_core_1.EVENTS.SESSION_RESTORED, callback);
    }
    onSessionExpiration(callback) {
        this.events.on(solid_client_authn_core_1.EVENTS.SESSION_EXPIRED, callback);
    }
    setSessionInfo(sessionInfo) {
        this.info.isLoggedIn = sessionInfo.isLoggedIn;
        this.info.webId = sessionInfo.webId;
        this.info.sessionId = sessionInfo.sessionId;
        this.info.expirationDate = sessionInfo.expirationDate;
        this.events.on(solid_client_authn_core_1.EVENTS.SESSION_EXTENDED, (expiresIn) => {
            this.info.expirationDate = Date.now() + expiresIn * 1000;
        });
    }
}
exports.Session = Session;


/***/ }),

/***/ "./src/constant.ts":
/*!*************************!*\
  !*** ./src/constant.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KEY_CURRENT_URL = exports.KEY_CURRENT_SESSION = void 0;
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
exports.KEY_CURRENT_SESSION = `${solid_client_authn_core_1.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentSession`;
exports.KEY_CURRENT_URL = `${solid_client_authn_core_1.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentUrl`;


/***/ }),

/***/ "./src/defaultSession.ts":
/*!*******************************!*\
  !*** ./src/defaultSession.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.events = exports.onSessionRestore = exports.onLogout = exports.onLogin = exports.handleIncomingRedirect = exports.logout = exports.login = exports.fetch = exports.getDefaultSession = void 0;
const Session_1 = __webpack_require__(/*! ./Session */ "./src/Session.ts");
let defaultSession;
function getDefaultSession() {
    if (typeof defaultSession === "undefined") {
        defaultSession = new Session_1.Session();
    }
    return defaultSession;
}
exports.getDefaultSession = getDefaultSession;
const fetch = (...args) => {
    const session = getDefaultSession();
    return session.fetch(...args);
};
exports.fetch = fetch;
const login = (...args) => {
    const session = getDefaultSession();
    return session.login(...args);
};
exports.login = login;
const logout = (...args) => {
    const session = getDefaultSession();
    return session.logout(...args);
};
exports.logout = logout;
const handleIncomingRedirect = (...args) => {
    const session = getDefaultSession();
    return session.handleIncomingRedirect(...args);
};
exports.handleIncomingRedirect = handleIncomingRedirect;
const onLogin = (...args) => {
    const session = getDefaultSession();
    return session.onLogin(...args);
};
exports.onLogin = onLogin;
const onLogout = (...args) => {
    const session = getDefaultSession();
    return session.onLogout(...args);
};
exports.onLogout = onLogout;
const onSessionRestore = (...args) => {
    const session = getDefaultSession();
    return session.onSessionRestore(...args);
};
exports.onSessionRestore = onSessionRestore;
const events = () => {
    return getDefaultSession().events;
};
exports.events = events;


/***/ }),

/***/ "./src/dependencies.ts":
/*!*****************************!*\
  !*** ./src/dependencies.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getClientAuthenticationWithDependencies = void 0;
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const StorageUtility_1 = __importDefault(__webpack_require__(/*! ./storage/StorageUtility */ "./src/storage/StorageUtility.ts"));
const ClientAuthentication_1 = __importDefault(__webpack_require__(/*! ./ClientAuthentication */ "./src/ClientAuthentication.ts"));
const OidcLoginHandler_1 = __importDefault(__webpack_require__(/*! ./login/oidc/OidcLoginHandler */ "./src/login/oidc/OidcLoginHandler.ts"));
const AuthorizationCodeWithPkceOidcHandler_1 = __importDefault(__webpack_require__(/*! ./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler */ "./src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts"));
const IssuerConfigFetcher_1 = __importDefault(__webpack_require__(/*! ./login/oidc/IssuerConfigFetcher */ "./src/login/oidc/IssuerConfigFetcher.ts"));
const FallbackRedirectHandler_1 = __webpack_require__(/*! ./login/oidc/incomingRedirectHandler/FallbackRedirectHandler */ "./src/login/oidc/incomingRedirectHandler/FallbackRedirectHandler.ts");
const GeneralLogoutHandler_1 = __importDefault(__webpack_require__(/*! ./logout/GeneralLogoutHandler */ "./src/logout/GeneralLogoutHandler.ts"));
const SessionInfoManager_1 = __webpack_require__(/*! ./sessionInfo/SessionInfoManager */ "./src/sessionInfo/SessionInfoManager.ts");
const AuthCodeRedirectHandler_1 = __webpack_require__(/*! ./login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler */ "./src/login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler.ts");
const AggregateRedirectHandler_1 = __importDefault(__webpack_require__(/*! ./login/oidc/AggregateRedirectHandler */ "./src/login/oidc/AggregateRedirectHandler.ts"));
const BrowserStorage_1 = __importDefault(__webpack_require__(/*! ./storage/BrowserStorage */ "./src/storage/BrowserStorage.ts"));
const Redirector_1 = __importDefault(__webpack_require__(/*! ./login/oidc/Redirector */ "./src/login/oidc/Redirector.ts"));
const ClientRegistrar_1 = __importDefault(__webpack_require__(/*! ./login/oidc/ClientRegistrar */ "./src/login/oidc/ClientRegistrar.ts"));
const ErrorOidcHandler_1 = __webpack_require__(/*! ./login/oidc/incomingRedirectHandler/ErrorOidcHandler */ "./src/login/oidc/incomingRedirectHandler/ErrorOidcHandler.ts");
const TokenRefresher_1 = __importDefault(__webpack_require__(/*! ./login/oidc/refresh/TokenRefresher */ "./src/login/oidc/refresh/TokenRefresher.ts"));
function getClientAuthenticationWithDependencies(dependencies) {
    const inMemoryStorage = new solid_client_authn_core_1.InMemoryStorage();
    const secureStorage = dependencies.secureStorage || inMemoryStorage;
    const insecureStorage = dependencies.insecureStorage || new BrowserStorage_1.default();
    const storageUtility = new StorageUtility_1.default(secureStorage, insecureStorage);
    const issuerConfigFetcher = new IssuerConfigFetcher_1.default(storageUtility);
    const clientRegistrar = new ClientRegistrar_1.default(storageUtility);
    const sessionInfoManager = new SessionInfoManager_1.SessionInfoManager(storageUtility);
    const tokenRefresher = new TokenRefresher_1.default(storageUtility, issuerConfigFetcher, clientRegistrar);
    const loginHandler = new OidcLoginHandler_1.default(storageUtility, new AuthorizationCodeWithPkceOidcHandler_1.default(storageUtility, new Redirector_1.default()), issuerConfigFetcher, clientRegistrar);
    const redirectHandler = new AggregateRedirectHandler_1.default([
        new ErrorOidcHandler_1.ErrorOidcHandler(),
        new AuthCodeRedirectHandler_1.AuthCodeRedirectHandler(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher),
        new FallbackRedirectHandler_1.FallbackRedirectHandler(),
    ]);
    return new ClientAuthentication_1.default(loginHandler, redirectHandler, new GeneralLogoutHandler_1.default(sessionInfoManager), sessionInfoManager, issuerConfigFetcher);
}
exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;


/***/ }),

/***/ "./src/index.browser.ts":
/*!******************************!*\
  !*** ./src/index.browser.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const solidClientAuthentication = __importStar(__webpack_require__(/*! ./index */ "./src/index.ts"));
exports["default"] = solidClientAuthentication;


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EVENTS = exports.InMemoryStorage = exports.ConfigurationError = exports.NotImplementedError = exports.getClientAuthenticationWithDependencies = exports.Session = void 0;
var Session_1 = __webpack_require__(/*! ./Session */ "./src/Session.ts");
Object.defineProperty(exports, "Session", ({ enumerable: true, get: function () { return Session_1.Session; } }));
var dependencies_1 = __webpack_require__(/*! ./dependencies */ "./src/dependencies.ts");
Object.defineProperty(exports, "getClientAuthenticationWithDependencies", ({ enumerable: true, get: function () { return dependencies_1.getClientAuthenticationWithDependencies; } }));
__exportStar(__webpack_require__(/*! ./defaultSession */ "./src/defaultSession.ts"), exports);
var solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
Object.defineProperty(exports, "NotImplementedError", ({ enumerable: true, get: function () { return solid_client_authn_core_1.NotImplementedError; } }));
Object.defineProperty(exports, "ConfigurationError", ({ enumerable: true, get: function () { return solid_client_authn_core_1.ConfigurationError; } }));
Object.defineProperty(exports, "InMemoryStorage", ({ enumerable: true, get: function () { return solid_client_authn_core_1.InMemoryStorage; } }));
Object.defineProperty(exports, "EVENTS", ({ enumerable: true, get: function () { return solid_client_authn_core_1.EVENTS; } }));


/***/ }),

/***/ "./src/login/oidc/AggregateRedirectHandler.ts":
/*!****************************************************!*\
  !*** ./src/login/oidc/AggregateRedirectHandler.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
class AggregateRedirectHandler extends solid_client_authn_core_1.AggregateHandler {
    constructor(redirectHandlers) {
        super(redirectHandlers);
    }
}
exports["default"] = AggregateRedirectHandler;


/***/ }),

/***/ "./src/login/oidc/ClientRegistrar.ts":
/*!*******************************************!*\
  !*** ./src/login/oidc/ClientRegistrar.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const oidc_client_ext_1 = __webpack_require__(/*! @inrupt/oidc-client-ext */ "../oidc-browser/dist/index.es.js");
class ClientRegistrar {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    async getClient(options, issuerConfig) {
        const [storedClientId, storedClientSecret,] = await Promise.all([
            this.storageUtility.getForUser(options.sessionId, "clientId", {
                secure: false,
            }),
            this.storageUtility.getForUser(options.sessionId, "clientSecret", {
                secure: false,
            }),
        ]);
        if (storedClientId) {
            return {
                clientId: storedClientId,
                clientSecret: storedClientSecret,
                clientType: "dynamic",
            };
        }
        try {
            const registeredClient = await (0, oidc_client_ext_1.registerClient)(options, issuerConfig);
            const infoToSave = {
                clientId: registeredClient.clientId,
            };
            if (registeredClient.clientSecret) {
                infoToSave.clientSecret = registeredClient.clientSecret;
            }
            if (registeredClient.idTokenSignedResponseAlg) {
                infoToSave.idTokenSignedResponseAlg =
                    registeredClient.idTokenSignedResponseAlg;
            }
            await this.storageUtility.setForUser(options.sessionId, infoToSave, {
                secure: false,
            });
            return registeredClient;
        }
        catch (error) {
            throw new Error(`Client registration failed: [${error}]`);
        }
    }
}
exports["default"] = ClientRegistrar;


/***/ }),

/***/ "./src/login/oidc/IssuerConfigFetcher.ts":
/*!***********************************************!*\
  !*** ./src/login/oidc/IssuerConfigFetcher.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WELL_KNOWN_OPENID_CONFIG = void 0;
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const universal_fetch_1 = __webpack_require__(/*! @inrupt/universal-fetch */ "./node_modules/@inrupt/universal-fetch/dist/index-browser.js");
exports.WELL_KNOWN_OPENID_CONFIG = ".well-known/openid-configuration";
const issuerConfigKeyMap = {
    issuer: {
        toKey: "issuer",
        convertToUrl: true,
    },
    authorization_endpoint: {
        toKey: "authorizationEndpoint",
        convertToUrl: true,
    },
    token_endpoint: {
        toKey: "tokenEndpoint",
        convertToUrl: true,
    },
    userinfo_endpoint: {
        toKey: "userinfoEndpoint",
        convertToUrl: true,
    },
    jwks_uri: {
        toKey: "jwksUri",
        convertToUrl: true,
    },
    registration_endpoint: {
        toKey: "registrationEndpoint",
        convertToUrl: true,
    },
    scopes_supported: { toKey: "scopesSupported" },
    response_types_supported: { toKey: "responseTypesSupported" },
    response_modes_supported: { toKey: "responseModesSupported" },
    grant_types_supported: { toKey: "grantTypesSupported" },
    acr_values_supported: { toKey: "acrValuesSupported" },
    subject_types_supported: { toKey: "subjectTypesSupported" },
    id_token_signing_alg_values_supported: {
        toKey: "idTokenSigningAlgValuesSupported",
    },
    id_token_encryption_alg_values_supported: {
        toKey: "idTokenEncryptionAlgValuesSupported",
    },
    id_token_encryption_enc_values_supported: {
        toKey: "idTokenEncryptionEncValuesSupported",
    },
    userinfo_signing_alg_values_supported: {
        toKey: "userinfoSigningAlgValuesSupported",
    },
    userinfo_encryption_alg_values_supported: {
        toKey: "userinfoEncryptionAlgValuesSupported",
    },
    userinfo_encryption_enc_values_supported: {
        toKey: "userinfoEncryptionEncValuesSupported",
    },
    request_object_signing_alg_values_supported: {
        toKey: "requestObjectSigningAlgValuesSupported",
    },
    request_object_encryption_alg_values_supported: {
        toKey: "requestObjectEncryptionAlgValuesSupported",
    },
    request_object_encryption_enc_values_supported: {
        toKey: "requestObjectEncryptionEncValuesSupported",
    },
    token_endpoint_auth_methods_supported: {
        toKey: "tokenEndpointAuthMethodsSupported",
    },
    token_endpoint_auth_signing_alg_values_supported: {
        toKey: "tokenEndpointAuthSigningAlgValuesSupported",
    },
    display_values_supported: { toKey: "displayValuesSupported" },
    claim_types_supported: { toKey: "claimTypesSupported" },
    claims_supported: { toKey: "claimsSupported" },
    service_documentation: { toKey: "serviceDocumentation" },
    claims_locales_supported: { toKey: "claimsLocalesSupported" },
    ui_locales_supported: { toKey: "uiLocalesSupported" },
    claims_parameter_supported: { toKey: "claimsParameterSupported" },
    request_parameter_supported: { toKey: "requestParameterSupported" },
    request_uri_parameter_supported: { toKey: "requestUriParameterSupported" },
    require_request_uri_registration: { toKey: "requireRequestUriRegistration" },
    op_policy_uri: {
        toKey: "opPolicyUri",
        convertToUrl: true,
    },
    op_tos_uri: {
        toKey: "opTosUri",
        convertToUrl: true,
    },
};
function processConfig(config) {
    const parsedConfig = {};
    Object.keys(config).forEach((key) => {
        if (issuerConfigKeyMap[key]) {
            parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];
        }
    });
    if (!Array.isArray(parsedConfig.scopesSupported)) {
        parsedConfig.scopesSupported = ["openid"];
    }
    return parsedConfig;
}
class IssuerConfigFetcher {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    static getLocalStorageKey(issuer) {
        return `issuerConfig:${issuer}`;
    }
    async fetchConfig(issuer) {
        let issuerConfig;
        const openIdConfigUrl = new URL(exports.WELL_KNOWN_OPENID_CONFIG, issuer.endsWith("/") ? issuer : `${issuer}/`).href;
        const issuerConfigRequestBody = await (0, universal_fetch_1.fetch)(openIdConfigUrl);
        try {
            issuerConfig = processConfig(await issuerConfigRequestBody.json());
        }
        catch (err) {
            throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);
        }
        await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));
        return issuerConfig;
    }
}
exports["default"] = IssuerConfigFetcher;


/***/ }),

/***/ "./src/login/oidc/OidcLoginHandler.ts":
/*!********************************************!*\
  !*** ./src/login/oidc/OidcLoginHandler.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
function hasIssuer(options) {
    return typeof options.oidcIssuer === "string";
}
function hasRedirectUrl(options) {
    return typeof options.redirectUrl === "string";
}
class OidcLoginHandler {
    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(options) {
        return hasIssuer(options) && hasRedirectUrl(options);
    }
    async handle(options) {
        if (!hasIssuer(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
        }
        if (!hasRedirectUrl(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);
        }
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
        const clientRegistration = await (0, solid_client_authn_core_1.handleRegistration)(options, issuerConfig, this.storageUtility, this.clientRegistrar);
        const OidcOptions = {
            issuer: issuerConfig.issuer,
            dpop: options.tokenType.toLowerCase() === "dpop",
            ...options,
            issuerConfiguration: issuerConfig,
            client: clientRegistration,
        };
        return this.oidcHandler.handle(OidcOptions);
    }
}
exports["default"] = OidcLoginHandler;


/***/ }),

/***/ "./src/login/oidc/Redirector.ts":
/*!**************************************!*\
  !*** ./src/login/oidc/Redirector.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class Redirector {
    redirect(redirectUrl, options) {
        if (options && options.handleRedirect) {
            options.handleRedirect(redirectUrl);
        }
        else if (options && options.redirectByReplacingState) {
            window.history.replaceState({}, "", redirectUrl);
        }
        else {
            window.location.href = redirectUrl;
        }
    }
}
exports["default"] = Redirector;


/***/ }),

/***/ "./src/login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler.ts":
/*!***************************************************************************!*\
  !*** ./src/login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuthCodeRedirectHandler = void 0;
const universal_fetch_1 = __webpack_require__(/*! @inrupt/universal-fetch */ "./node_modules/@inrupt/universal-fetch/dist/index-browser.js");
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const oidc_client_ext_1 = __webpack_require__(/*! @inrupt/oidc-client-ext */ "../oidc-browser/dist/index.es.js");
class AuthCodeRedirectHandler {
    constructor(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokerRefresher) {
        this.storageUtility = storageUtility;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
        this.tokerRefresher = tokerRefresher;
    }
    async canHandle(redirectUrl) {
        try {
            const myUrl = new URL(redirectUrl);
            return (myUrl.searchParams.get("code") !== null &&
                myUrl.searchParams.get("state") !== null);
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(redirectUrl, eventEmitter) {
        if (!(await this.canHandle(redirectUrl))) {
            throw new Error(`AuthCodeRedirectHandler cannot handle [${redirectUrl}]: it is missing one of [code, state].`);
        }
        const url = new URL(redirectUrl);
        const oauthState = url.searchParams.get("state");
        const storedSessionId = (await this.storageUtility.getForUser(oauthState, "sessionId", {
            errorIfNull: true,
        }));
        const { issuerConfig, codeVerifier, redirectUrl: storedRedirectIri, dpop: isDpop, } = await (0, solid_client_authn_core_1.loadOidcContextFromStorage)(storedSessionId, this.storageUtility, this.issuerConfigFetcher);
        const iss = url.searchParams.get("iss");
        if (typeof iss === "string" && iss !== issuerConfig.issuer) {
            throw new Error(`The value of the iss parameter (${iss}) does not match the issuer identifier of the authorization server (${issuerConfig.issuer}). See [rfc9207](https://www.rfc-editor.org/rfc/rfc9207.html#section-2.3-3.1.1)`);
        }
        if (codeVerifier === undefined) {
            throw new Error(`The code verifier for session ${storedSessionId} is missing from storage.`);
        }
        if (storedRedirectIri === undefined) {
            throw new Error(`The redirect URL for session ${storedSessionId} is missing from storage.`);
        }
        const client = await this.clientRegistrar.getClient({ sessionId: storedSessionId }, issuerConfig);
        let tokens;
        const tokenCreatedAt = Date.now();
        if (isDpop) {
            tokens = await (0, oidc_client_ext_1.getDpopToken)(issuerConfig, client, {
                grantType: "authorization_code",
                code: url.searchParams.get("code"),
                codeVerifier,
                redirectUrl: storedRedirectIri,
            });
            window.localStorage.removeItem(`oidc.${oauthState}`);
        }
        else {
            tokens = await (0, oidc_client_ext_1.getBearerToken)(url.toString());
        }
        let refreshOptions;
        if (tokens.refreshToken !== undefined) {
            refreshOptions = {
                sessionId: storedSessionId,
                refreshToken: tokens.refreshToken,
                tokenRefresher: this.tokerRefresher,
            };
        }
        const authFetch = await (0, solid_client_authn_core_1.buildAuthenticatedFetch)(universal_fetch_1.fetch, tokens.accessToken, {
            dpopKey: tokens.dpopKey,
            refreshOptions,
            eventEmitter,
            expiresIn: tokens.expiresIn,
        });
        await this.storageUtility.setForUser(storedSessionId, {
            webId: tokens.webId,
            isLoggedIn: "true",
        }, { secure: true });
        const sessionInfo = await this.sessionInfoManager.get(storedSessionId);
        if (!sessionInfo) {
            throw new Error(`Could not retrieve session: [${storedSessionId}].`);
        }
        return Object.assign(sessionInfo, {
            fetch: authFetch,
            expirationDate: typeof tokens.expiresIn === "number"
                ? tokenCreatedAt + tokens.expiresIn * 1000
                : null,
        });
    }
}
exports.AuthCodeRedirectHandler = AuthCodeRedirectHandler;


/***/ }),

/***/ "./src/login/oidc/incomingRedirectHandler/ErrorOidcHandler.ts":
/*!********************************************************************!*\
  !*** ./src/login/oidc/incomingRedirectHandler/ErrorOidcHandler.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorOidcHandler = void 0;
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const SessionInfoManager_1 = __webpack_require__(/*! ../../../sessionInfo/SessionInfoManager */ "./src/sessionInfo/SessionInfoManager.ts");
class ErrorOidcHandler {
    async canHandle(redirectUrl) {
        try {
            return new URL(redirectUrl).searchParams.has("error");
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(redirectUrl, eventEmitter) {
        if (eventEmitter !== undefined) {
            const url = new URL(redirectUrl);
            const errorUrl = url.searchParams.get("error");
            const errorDescriptionUrl = url.searchParams.get("error_description");
            eventEmitter.emit(solid_client_authn_core_1.EVENTS.ERROR, errorUrl, errorDescriptionUrl);
        }
        return (0, SessionInfoManager_1.getUnauthenticatedSession)();
    }
}
exports.ErrorOidcHandler = ErrorOidcHandler;


/***/ }),

/***/ "./src/login/oidc/incomingRedirectHandler/FallbackRedirectHandler.ts":
/*!***************************************************************************!*\
  !*** ./src/login/oidc/incomingRedirectHandler/FallbackRedirectHandler.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FallbackRedirectHandler = void 0;
const SessionInfoManager_1 = __webpack_require__(/*! ../../../sessionInfo/SessionInfoManager */ "./src/sessionInfo/SessionInfoManager.ts");
class FallbackRedirectHandler {
    async canHandle(redirectUrl) {
        try {
            new URL(redirectUrl);
            return true;
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(_redirectUrl) {
        return (0, SessionInfoManager_1.getUnauthenticatedSession)();
    }
}
exports.FallbackRedirectHandler = FallbackRedirectHandler;


/***/ }),

/***/ "./src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts":
/*!*****************************************************************************!*\
  !*** ./src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const oidc_client_ext_1 = __webpack_require__(/*! @inrupt/oidc-client-ext */ "../oidc-browser/dist/index.es.js");
class AuthorizationCodeWithPkceOidcHandler {
    constructor(storageUtility, redirector) {
        this.storageUtility = storageUtility;
        this.redirector = redirector;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&
            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
    }
    async handle(oidcLoginOptions) {
        var _a;
        const oidcOptions = {
            authority: oidcLoginOptions.issuer.toString(),
            client_id: oidcLoginOptions.client.clientId,
            client_secret: oidcLoginOptions.client.clientSecret,
            redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            response_type: "code",
            scope: solid_client_authn_core_1.DEFAULT_SCOPES,
            filterProtocolClaims: true,
            loadUserInfo: false,
            code_verifier: true,
            prompt: (_a = oidcLoginOptions.prompt) !== null && _a !== void 0 ? _a : "consent",
        };
        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);
        const { redirector } = this;
        const storage = this.storageUtility;
        try {
            const signingRequest = await oidcClientLibrary.createSigninRequest();
            await Promise.all([
                storage.setForUser(signingRequest.state._id, {
                    sessionId: oidcLoginOptions.sessionId,
                }),
                storage.setForUser(oidcLoginOptions.sessionId, {
                    codeVerifier: signingRequest.state._code_verifier,
                    issuer: oidcLoginOptions.issuer.toString(),
                    redirectUrl: oidcLoginOptions.redirectUrl,
                    dpop: oidcLoginOptions.dpop ? "true" : "false",
                }),
            ]);
            redirector.redirect(signingRequest.url.toString(), {
                handleRedirect: oidcLoginOptions.handleRedirect,
            });
        }
        catch (err) {
            console.error(err);
        }
        return undefined;
    }
}
exports["default"] = AuthorizationCodeWithPkceOidcHandler;


/***/ }),

/***/ "./src/login/oidc/refresh/TokenRefresher.ts":
/*!**************************************************!*\
  !*** ./src/login/oidc/refresh/TokenRefresher.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const oidc_client_ext_1 = __webpack_require__(/*! @inrupt/oidc-client-ext */ "../oidc-browser/dist/index.es.js");
class TokenRefresher {
    constructor(storageUtility, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async refresh(sessionId, refreshToken, dpopKey, eventEmitter) {
        const oidcContext = await (0, solid_client_authn_core_1.loadOidcContextFromStorage)(sessionId, this.storageUtility, this.issuerConfigFetcher);
        const clientInfo = await this.clientRegistrar.getClient({ sessionId }, oidcContext.issuerConfig);
        if (refreshToken === undefined) {
            throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);
        }
        if (oidcContext.dpop && dpopKey === undefined) {
            throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);
        }
        const tokenSet = await (0, oidc_client_ext_1.refresh)(refreshToken, oidcContext.issuerConfig, clientInfo, dpopKey);
        if (tokenSet.refreshToken !== undefined) {
            eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(solid_client_authn_core_1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
            await this.storageUtility.setForUser(sessionId, {
                refreshToken: tokenSet.refreshToken,
            });
        }
        return tokenSet;
    }
}
exports["default"] = TokenRefresher;


/***/ }),

/***/ "./src/logout/GeneralLogoutHandler.ts":
/*!********************************************!*\
  !*** ./src/logout/GeneralLogoutHandler.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class GeneralLogoutHandler {
    constructor(sessionInfoManager) {
        this.sessionInfoManager = sessionInfoManager;
    }
    async canHandle() {
        return true;
    }
    async handle(userId) {
        await this.sessionInfoManager.clear(userId);
    }
}
exports["default"] = GeneralLogoutHandler;


/***/ }),

/***/ "./src/sessionInfo/SessionInfoManager.ts":
/*!***********************************************!*\
  !*** ./src/sessionInfo/SessionInfoManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionInfoManager = exports.clear = exports.getUnauthenticatedSession = void 0;
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/commonjs-browser/index.js");
const oidc_client_ext_1 = __webpack_require__(/*! @inrupt/oidc-client-ext */ "../oidc-browser/dist/index.es.js");
const universal_fetch_1 = __webpack_require__(/*! @inrupt/universal-fetch */ "./node_modules/@inrupt/universal-fetch/dist/index-browser.js");
function getUnauthenticatedSession() {
    return {
        isLoggedIn: false,
        sessionId: (0, uuid_1.v4)(),
        fetch: universal_fetch_1.fetch,
    };
}
exports.getUnauthenticatedSession = getUnauthenticatedSession;
async function clear(sessionId, storage) {
    await Promise.all([
        storage.deleteAllUserData(sessionId, { secure: false }),
        storage.deleteAllUserData(sessionId, { secure: true }),
        storage.delete("clientKey", { secure: false }),
    ]);
    await (0, oidc_client_ext_1.clearOidcPersistentStorage)();
}
exports.clear = clear;
class SessionInfoManager {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    update(_sessionId, _options) {
        throw new Error("Not Implemented");
    }
    async get(sessionId) {
        var _a;
        const isLoggedIn = await this.storageUtility.getForUser(sessionId, "isLoggedIn", {
            secure: true,
        });
        const webId = await this.storageUtility.getForUser(sessionId, "webId", {
            secure: true,
        });
        const clientId = await this.storageUtility.getForUser(sessionId, "clientId", {
            secure: false,
        });
        const clientSecret = await this.storageUtility.getForUser(sessionId, "clientSecret", {
            secure: false,
        });
        const redirectUrl = await this.storageUtility.getForUser(sessionId, "redirectUrl", {
            secure: false,
        });
        const refreshToken = await this.storageUtility.getForUser(sessionId, "refreshToken", {
            secure: true,
        });
        const issuer = await this.storageUtility.getForUser(sessionId, "issuer", {
            secure: false,
        });
        const tokenType = (_a = (await this.storageUtility.getForUser(sessionId, "tokenType", {
            secure: false,
        }))) !== null && _a !== void 0 ? _a : "DPoP";
        if (!(0, solid_client_authn_core_1.isSupportedTokenType)(tokenType)) {
            throw new Error(`Tokens of type [${tokenType}] are not supported.`);
        }
        if (clientId === undefined &&
            isLoggedIn === undefined &&
            webId === undefined &&
            refreshToken === undefined) {
            return undefined;
        }
        return {
            sessionId,
            webId,
            isLoggedIn: isLoggedIn === "true",
            redirectUrl,
            refreshToken,
            issuer,
            clientAppId: clientId,
            clientAppSecret: clientSecret,
            tokenType,
        };
    }
    async getAll() {
        throw new Error("Not implemented");
    }
    async clear(sessionId) {
        return clear(sessionId, this.storageUtility);
    }
    async register(_sessionId) {
        throw new Error("Not implemented");
    }
    async getRegisteredSessionIdAll() {
        throw new Error("Not implemented");
    }
    async clearAll() {
        throw new Error("Not implemented");
    }
}
exports.SessionInfoManager = SessionInfoManager;


/***/ }),

/***/ "./src/storage/BrowserStorage.ts":
/*!***************************************!*\
  !*** ./src/storage/BrowserStorage.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class BrowserStorage {
    get storage() {
        return window.localStorage;
    }
    async get(key) {
        return this.storage.getItem(key) || undefined;
    }
    async set(key, value) {
        this.storage.setItem(key, value);
    }
    async delete(key) {
        this.storage.removeItem(key);
    }
}
exports["default"] = BrowserStorage;


/***/ }),

/***/ "./src/storage/StorageUtility.ts":
/*!***************************************!*\
  !*** ./src/storage/StorageUtility.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const solid_client_authn_core_1 = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.js");
class StorageUtilityBrowser extends solid_client_authn_core_1.StorageUtility {
    constructor(secureStorage, insecureStorage) {
        super(secureStorage, insecureStorage);
    }
}
exports["default"] = StorageUtilityBrowser;


/***/ }),

/***/ "./node_modules/@inrupt/universal-fetch/dist/index-browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@inrupt/universal-fetch/dist/index-browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var indexBrowser = globalThis.fetch;
const { fetch, Response, Request, Headers } = globalThis;

exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports["default"] = indexBrowser;
exports.fetch = fetch;


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));

var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/commonjs-browser/v1.js"));

var _v2 = _interopRequireDefault(__webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/commonjs-browser/v3.js"));

var _v3 = _interopRequireDefault(__webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/commonjs-browser/v4.js"));

var _v4 = _interopRequireDefault(__webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/commonjs-browser/v5.js"));

var _nil = _interopRequireDefault(__webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/commonjs-browser/nil.js"));

var _version = _interopRequireDefault(__webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/commonjs-browser/version.js"));

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

var _stringify = _interopRequireDefault(__webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js"));

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/md5.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/md5.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/native.js":
/*!***********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/native.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/nil.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/nil.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/parse.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/parse.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/regex.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/regex.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/rng.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/rng.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/sha1.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/sha1.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/stringify.js":
/*!**************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/stringify.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v1.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v1.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v3.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v3.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/commonjs-browser/v35.js"));

var _md = _interopRequireDefault(__webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/commonjs-browser/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v35.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v35.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v4.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v4.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _native = _interopRequireDefault(__webpack_require__(/*! ./native.js */ "./node_modules/uuid/dist/commonjs-browser/native.js"));

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v5.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v5.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/commonjs-browser/v35.js"));

var _sha = _interopRequireDefault(__webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/commonjs-browser/sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/validate.js":
/*!*************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/validate.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/commonjs-browser/regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/version.js":
/*!************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ "../core/dist/index.js":
/*!*****************************!*\
  !*** ../core/dist/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var events = __webpack_require__(/*! events */ "../core/node_modules/events/events.js");
var universalFetch = __webpack_require__(/*! @inrupt/universal-fetch */ "../core/node_modules/@inrupt/universal-fetch/dist/index-browser.js");
var jose = __webpack_require__(/*! jose */ "../core/node_modules/jose/dist/browser/index.js");
var uuid = __webpack_require__(/*! uuid */ "../core/node_modules/uuid/dist/commonjs-browser/index.js");

const SOLID_CLIENT_AUTHN_KEY_PREFIX = "solidClientAuthn:";
const PREFERRED_SIGNING_ALG = ["ES256", "RS256"];
const EVENTS = {
    ERROR: "error",
    LOGIN: "login",
    LOGOUT: "logout",
    NEW_REFRESH_TOKEN: "newRefreshToken",
    SESSION_EXPIRED: "sessionExpired",
    SESSION_EXTENDED: "sessionExtended",
    SESSION_RESTORED: "sessionRestore",
    TIMEOUT_SET: "timeoutSet",
};
const REFRESH_BEFORE_EXPIRATION_SECONDS = 5;
const SCOPE_OPENID = "openid";
const SCOPE_OFFLINE = "offline_access";
const SCOPE_WEBID = "webid";
const DEFAULT_SCOPES = [SCOPE_OPENID, SCOPE_OFFLINE, SCOPE_WEBID].join(" ");

const buildProxyHandler = (toExclude, errorMessage) => ({
    get(target, prop, receiver) {
        if (!Object.getOwnPropertyNames(events.EventEmitter).includes(prop) &&
            Object.getOwnPropertyNames(toExclude).includes(prop)) {
            throw new Error(`${errorMessage}: [${prop}] is not supported`);
        }
        return Reflect.get(target, prop, receiver);
    },
});

class AggregateHandler {
    constructor(handleables) {
        this.handleables = handleables;
    }
    async getProperHandler(params) {
        const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));
        for (let i = 0; i < canHandleList.length; i += 1) {
            if (canHandleList[i]) {
                return this.handleables[i];
            }
        }
        return null;
    }
    async canHandle(...params) {
        return (await this.getProperHandler(params)) !== null;
    }
    async handle(...params) {
        const handler = await this.getProperHandler(params);
        if (handler) {
            return handler.handle(...params);
        }
        throw new Error(`[${this.constructor.name}] cannot find a suitable handler for: ${params
            .map((param) => {
            try {
                return JSON.stringify(param);
            }
            catch (err) {
                return param.toString();
            }
        })
            .join(", ")}`);
    }
}

async function fetchJwks(jwksIri, issuerIri) {
    const jwksResponse = await universalFetch.fetch(jwksIri);
    if (jwksResponse.status !== 200) {
        throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);
    }
    let jwk;
    try {
        jwk = (await jwksResponse.json()).keys[0];
    }
    catch (e) {
        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);
    }
    return jwk;
}
async function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {
    const jwk = await fetchJwks(jwksIri, issuerIri);
    let payload;
    try {
        const { payload: verifiedPayload } = await jose.jwtVerify(idToken, await jose.importJWK(jwk), {
            issuer: issuerIri,
            audience: clientId,
        });
        payload = verifiedPayload;
    }
    catch (e) {
        throw new Error(`Token verification failed: ${e.stack}`);
    }
    if (typeof payload.webid === "string") {
        return payload.webid;
    }
    if (typeof payload.sub !== "string") {
        throw new Error(`The token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);
    }
    try {
        new URL(payload.sub);
        return payload.sub;
    }
    catch (e) {
        throw new Error(`The token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);
    }
}

function isValidRedirectUrl(redirectUrl) {
    try {
        const urlObject = new URL(redirectUrl);
        return urlObject.hash === "";
    }
    catch (e) {
        return false;
    }
}

function isSupportedTokenType(token) {
    return typeof token === "string" && ["DPoP", "Bearer"].includes(token);
}

const USER_SESSION_PREFIX = "solidClientAuthenticationUser";

function isValidUrl(url) {
    try {
        new URL(url);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function determineSigningAlg(supported, preferred) {
    var _a;
    return ((_a = preferred.find((signingAlg) => {
        return supported.includes(signingAlg);
    })) !== null && _a !== void 0 ? _a : null);
}
function determineClientType(options, issuerConfig) {
    if (options.clientId !== undefined && !isValidUrl(options.clientId)) {
        return "static";
    }
    if (issuerConfig.scopesSupported.includes("webid") &&
        options.clientId !== undefined &&
        isValidUrl(options.clientId)) {
        return "solid-oidc";
    }
    return "dynamic";
}
async function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {
    const clientType = determineClientType(options, issuerConfig);
    if (clientType === "dynamic") {
        return clientRegistrar.getClient({
            sessionId: options.sessionId,
            clientName: options.clientName,
            redirectUrl: options.redirectUrl,
        }, issuerConfig);
    }
    await storageUtility.setForUser(options.sessionId, {
        clientId: options.clientId,
    });
    if (options.clientSecret) {
        await storageUtility.setForUser(options.sessionId, {
            clientSecret: options.clientSecret,
        });
    }
    if (options.clientName) {
        await storageUtility.setForUser(options.sessionId, {
            clientName: options.clientName,
        });
    }
    return {
        clientId: options.clientId,
        clientSecret: options.clientSecret,
        clientName: options.clientName,
        clientType,
    };
}

async function getSessionIdFromOauthState(storageUtility, oauthState) {
    return storageUtility.getForUser(oauthState, "sessionId");
}
async function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {
    try {
        const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([
            storageUtility.getForUser(sessionId, "issuer", {
                errorIfNull: true,
            }),
            storageUtility.getForUser(sessionId, "codeVerifier"),
            storageUtility.getForUser(sessionId, "redirectUrl"),
            storageUtility.getForUser(sessionId, "dpop", { errorIfNull: true }),
        ]);
        await storageUtility.deleteForUser(sessionId, "codeVerifier");
        const issuerConfig = await configFetcher.fetchConfig(issuerIri);
        return {
            codeVerifier,
            redirectUrl: storedRedirectIri,
            issuerConfig,
            dpop: dpop === "true",
        };
    }
    catch (e) {
        throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`);
    }
}
async function saveSessionInfoToStorage(storageUtility, sessionId, webId, isLoggedIn, refreshToken, secure, dpopKey) {
    if (refreshToken !== undefined) {
        await storageUtility.setForUser(sessionId, { refreshToken }, { secure });
    }
    if (webId !== undefined) {
        await storageUtility.setForUser(sessionId, { webId }, { secure });
    }
    if (isLoggedIn !== undefined) {
        await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });
    }
    if (dpopKey !== undefined) {
        await storageUtility.setForUser(sessionId, {
            publicKey: JSON.stringify(dpopKey.publicKey),
            privateKey: JSON.stringify(await jose.exportJWK(dpopKey.privateKey)),
        }, { secure });
    }
}
class StorageUtility {
    constructor(secureStorage, insecureStorage) {
        this.secureStorage = secureStorage;
        this.insecureStorage = insecureStorage;
    }
    getKey(userId) {
        return `solidClientAuthenticationUser:${userId}`;
    }
    async getUserData(userId, secure) {
        const stored = await (secure
            ? this.secureStorage
            : this.insecureStorage).get(this.getKey(userId));
        if (stored === undefined) {
            return {};
        }
        try {
            return JSON.parse(stored);
        }
        catch (err) {
            throw new Error(`Data for user [${userId}] in [${secure ? "secure" : "unsecure"}] storage is corrupted - expected valid JSON, but got: ${stored}`);
        }
    }
    async setUserData(userId, data, secure) {
        await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));
    }
    async get(key, options) {
        const value = await ((options === null || options === void 0 ? void 0 : options.secure)
            ? this.secureStorage
            : this.insecureStorage).get(key);
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new Error(`[${key}] is not stored`);
        }
        return value;
    }
    async set(key, value, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);
    }
    async delete(key, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);
    }
    async getForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        let value;
        if (!userData || !userData[key]) {
            value = undefined;
        }
        value = userData[key];
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new Error(`Field [${key}] for user [${userId}] is not stored`);
        }
        return value || undefined;
    }
    async setForUser(userId, values, options) {
        let userData;
        try {
            userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        }
        catch (_a) {
            userData = {};
        }
        await this.setUserData(userId, { ...userData, ...values }, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        delete userData[key];
        await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteAllUserData(userId, options) {
        await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));
    }
}

class InMemoryStorage {
    constructor() {
        this.map = {};
    }
    async get(key) {
        return this.map[key] || undefined;
    }
    async set(key, value) {
        this.map[key] = value;
    }
    async delete(key) {
        delete this.map[key];
    }
}

class ConfigurationError extends Error {
    constructor(message) {
        super(message);
    }
}

class NotImplementedError extends Error {
    constructor(methodName) {
        super(`[${methodName}] is not implemented`);
    }
}

class InvalidResponseError extends Error {
    constructor(missingFields) {
        super(`Invalid response from OIDC provider: missing fields ${missingFields}`);
        this.missingFields = missingFields;
    }
}

class OidcProviderError extends Error {
    constructor(message, error, errorDescription) {
        super(message);
        this.error = error;
        this.errorDescription = errorDescription;
    }
}

function normalizeHTU(audience) {
    const audienceUrl = new URL(audience);
    return new URL(audienceUrl.pathname, audienceUrl.origin).toString();
}
async function createDpopHeader(audience, method, dpopKey) {
    return new jose.SignJWT({
        htu: normalizeHTU(audience),
        htm: method.toUpperCase(),
        jti: uuid.v4(),
    })
        .setProtectedHeader({
        alg: PREFERRED_SIGNING_ALG[0],
        jwk: dpopKey.publicKey,
        typ: "dpop+jwt",
    })
        .setIssuedAt()
        .sign(dpopKey.privateKey, {});
}
async function generateDpopKeyPair() {
    const { privateKey, publicKey } = await jose.generateKeyPair(PREFERRED_SIGNING_ALG[0]);
    const dpopKeyPair = {
        privateKey,
        publicKey: await jose.exportJWK(publicKey),
    };
    [dpopKeyPair.publicKey.alg] = PREFERRED_SIGNING_ALG;
    return dpopKeyPair;
}

const DEFAULT_EXPIRATION_TIME_SECONDS = 600;
function isExpectedAuthError(statusCode) {
    return [401, 403].includes(statusCode);
}
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
    var _a;
    const headers = new universalFetch.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    headers.set("Authorization", `DPoP ${authToken}`);
    headers.set("DPoP", await createDpopHeader(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey));
    return {
        ...defaultOptions,
        headers,
    };
}
async function buildAuthenticatedHeaders(targetUrl, authToken, dpopKey, defaultOptions) {
    if (dpopKey !== undefined) {
        return buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions);
    }
    const headers = new universalFetch.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    headers.set("Authorization", `Bearer ${authToken}`);
    return {
        ...defaultOptions,
        headers,
    };
}
async function makeAuthenticatedRequest(unauthFetch, accessToken, url, defaultRequestInit, dpopKey) {
    return unauthFetch(url, await buildAuthenticatedHeaders(url.toString(), accessToken, dpopKey, defaultRequestInit));
}
async function refreshAccessToken(refreshOptions, dpopKey, eventEmitter) {
    var _a;
    const tokenSet = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
    eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(EVENTS.SESSION_EXTENDED, (_a = tokenSet.expiresIn) !== null && _a !== void 0 ? _a : DEFAULT_EXPIRATION_TIME_SECONDS);
    if (typeof tokenSet.refreshToken === "string") {
        eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
    }
    return {
        accessToken: tokenSet.accessToken,
        refreshToken: tokenSet.refreshToken,
        expiresIn: tokenSet.expiresIn,
    };
}
const computeRefreshDelay = (expiresIn) => {
    if (expiresIn !== undefined) {
        return expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS > 0
            ?
                expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS
            : expiresIn;
    }
    return DEFAULT_EXPIRATION_TIME_SECONDS;
};
async function buildAuthenticatedFetch(unauthFetch, accessToken, options) {
    var _a;
    let currentAccessToken = accessToken;
    let latestTimeout;
    const currentRefreshOptions = options === null || options === void 0 ? void 0 : options.refreshOptions;
    if (currentRefreshOptions !== undefined) {
        const proactivelyRefreshToken = async () => {
            var _a, _b, _c, _d;
            try {
                const { accessToken: refreshedAccessToken, refreshToken, expiresIn, } = await refreshAccessToken(currentRefreshOptions, options.dpopKey, options.eventEmitter);
                currentAccessToken = refreshedAccessToken;
                if (refreshToken !== undefined) {
                    currentRefreshOptions.refreshToken = refreshToken;
                }
                clearTimeout(latestTimeout);
                latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(expiresIn) * 1000);
                (_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
            }
            catch (e) {
                if (e instanceof OidcProviderError) {
                    (_b = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _b === void 0 ? void 0 : _b.emit(EVENTS.ERROR, e.error, e.errorDescription);
                    (_c = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _c === void 0 ? void 0 : _c.emit(EVENTS.SESSION_EXPIRED);
                }
                if (e instanceof InvalidResponseError &&
                    e.missingFields.includes("access_token")) {
                    (_d = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _d === void 0 ? void 0 : _d.emit(EVENTS.SESSION_EXPIRED);
                }
            }
        };
        latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(options.expiresIn) * 1000);
        (_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
    }
    else if (options !== undefined && options.eventEmitter !== undefined) {
        const expirationTimeout = setTimeout(() => {
            options.eventEmitter.emit(EVENTS.SESSION_EXPIRED);
        }, computeRefreshDelay(options.expiresIn) * 1000);
        options.eventEmitter.emit(EVENTS.TIMEOUT_SET, expirationTimeout);
    }
    return async (url, requestInit) => {
        let response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, url, requestInit, options === null || options === void 0 ? void 0 : options.dpopKey);
        const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
        if (response.ok || failedButNotExpectedAuthError) {
            return response;
        }
        const hasBeenRedirected = response.url !== url;
        if (hasBeenRedirected && (options === null || options === void 0 ? void 0 : options.dpopKey) !== undefined) {
            response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, response.url, requestInit, options.dpopKey);
        }
        return response;
    };
}

const StorageUtilityGetResponse = "getResponse";
const StorageUtilityMock = {
    get: async (key, options) => StorageUtilityGetResponse,
    set: async (key, value) => {
    },
    delete: async (key) => {
    },
    getForUser: async (userId, key, options) => StorageUtilityGetResponse,
    setForUser: async (userId, values, options) => {
    },
    deleteForUser: async (userId, key, options) => {
    },
    deleteAllUserData: async (userId, options) => {
    },
};
const mockStorage = (stored) => {
    const store = stored;
    return {
        get: async (key) => {
            if (store[key] === undefined) {
                return undefined;
            }
            if (typeof store[key] === "string") {
                return store[key];
            }
            return JSON.stringify(store[key]);
        },
        set: async (key, value) => {
            store[key] = value;
        },
        delete: async (key) => {
            delete store[key];
        },
    };
};
const mockStorageUtility = (stored, isSecure = false) => {
    if (isSecure) {
        return new StorageUtility(mockStorage(stored), mockStorage({}));
    }
    return new StorageUtility(mockStorage({}), mockStorage(stored));
};

exports.AggregateHandler = AggregateHandler;
exports.ConfigurationError = ConfigurationError;
exports.DEFAULT_SCOPES = DEFAULT_SCOPES;
exports.EVENTS = EVENTS;
exports.InMemoryStorage = InMemoryStorage;
exports.InvalidResponseError = InvalidResponseError;
exports.NotImplementedError = NotImplementedError;
exports.OidcProviderError = OidcProviderError;
exports.PREFERRED_SIGNING_ALG = PREFERRED_SIGNING_ALG;
exports.REFRESH_BEFORE_EXPIRATION_SECONDS = REFRESH_BEFORE_EXPIRATION_SECONDS;
exports.SOLID_CLIENT_AUTHN_KEY_PREFIX = SOLID_CLIENT_AUTHN_KEY_PREFIX;
exports.StorageUtility = StorageUtility;
exports.StorageUtilityGetResponse = StorageUtilityGetResponse;
exports.StorageUtilityMock = StorageUtilityMock;
exports.USER_SESSION_PREFIX = USER_SESSION_PREFIX;
exports.buildAuthenticatedFetch = buildAuthenticatedFetch;
exports.buildProxyHandler = buildProxyHandler;
exports.createDpopHeader = createDpopHeader;
exports.determineSigningAlg = determineSigningAlg;
exports.fetchJwks = fetchJwks;
exports.generateDpopKeyPair = generateDpopKeyPair;
exports.getSessionIdFromOauthState = getSessionIdFromOauthState;
exports.getWebidFromTokenPayload = getWebidFromTokenPayload;
exports.handleRegistration = handleRegistration;
exports.isSupportedTokenType = isSupportedTokenType;
exports.isValidRedirectUrl = isValidRedirectUrl;
exports.loadOidcContextFromStorage = loadOidcContextFromStorage;
exports.mockStorage = mockStorage;
exports.mockStorageUtility = mockStorageUtility;
exports.saveSessionInfoToStorage = saveSessionInfoToStorage;


/***/ }),

/***/ "../core/node_modules/@inrupt/universal-fetch/dist/index-browser.js":
/*!**************************************************************************!*\
  !*** ../core/node_modules/@inrupt/universal-fetch/dist/index-browser.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var indexBrowser = globalThis.fetch;
const { fetch, Response, Request, Headers } = globalThis;

exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports["default"] = indexBrowser;
exports.fetch = fetch;


/***/ }),

/***/ "../core/node_modules/events/events.js":
/*!*********************************************!*\
  !*** ../core/node_modules/events/events.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/index.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));

var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "../core/node_modules/uuid/dist/commonjs-browser/v1.js"));

var _v2 = _interopRequireDefault(__webpack_require__(/*! ./v3.js */ "../core/node_modules/uuid/dist/commonjs-browser/v3.js"));

var _v3 = _interopRequireDefault(__webpack_require__(/*! ./v4.js */ "../core/node_modules/uuid/dist/commonjs-browser/v4.js"));

var _v4 = _interopRequireDefault(__webpack_require__(/*! ./v5.js */ "../core/node_modules/uuid/dist/commonjs-browser/v5.js"));

var _nil = _interopRequireDefault(__webpack_require__(/*! ./nil.js */ "../core/node_modules/uuid/dist/commonjs-browser/nil.js"));

var _version = _interopRequireDefault(__webpack_require__(/*! ./version.js */ "../core/node_modules/uuid/dist/commonjs-browser/version.js"));

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../core/node_modules/uuid/dist/commonjs-browser/validate.js"));

var _stringify = _interopRequireDefault(__webpack_require__(/*! ./stringify.js */ "../core/node_modules/uuid/dist/commonjs-browser/stringify.js"));

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../core/node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/md5.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/md5.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/native.js":
/*!*****************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/native.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/nil.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/nil.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/parse.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/parse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../core/node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/regex.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/regex.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/rng.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/rng.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/sha1.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/sha1.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/stringify.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/stringify.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../core/node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/v1.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/v1.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../core/node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "../core/node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/v3.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/v3.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "../core/node_modules/uuid/dist/commonjs-browser/v35.js"));

var _md = _interopRequireDefault(__webpack_require__(/*! ./md5.js */ "../core/node_modules/uuid/dist/commonjs-browser/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/v35.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/v35.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;

var _stringify = __webpack_require__(/*! ./stringify.js */ "../core/node_modules/uuid/dist/commonjs-browser/stringify.js");

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../core/node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/v4.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/v4.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _native = _interopRequireDefault(__webpack_require__(/*! ./native.js */ "../core/node_modules/uuid/dist/commonjs-browser/native.js"));

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../core/node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "../core/node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/v5.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/v5.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "../core/node_modules/uuid/dist/commonjs-browser/v35.js"));

var _sha = _interopRequireDefault(__webpack_require__(/*! ./sha1.js */ "../core/node_modules/uuid/dist/commonjs-browser/sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/validate.js":
/*!*******************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/validate.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__webpack_require__(/*! ./regex.js */ "../core/node_modules/uuid/dist/commonjs-browser/regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/commonjs-browser/version.js":
/*!******************************************************************!*\
  !*** ../core/node_modules/uuid/dist/commonjs-browser/version.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../core/node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ "../core/node_modules/uuid/dist/esm-browser/native.js":
/*!************************************************************!*\
  !*** ../core/node_modules/uuid/dist/esm-browser/native.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  randomUUID
});

/***/ }),

/***/ "../core/node_modules/uuid/dist/esm-browser/regex.js":
/*!***********************************************************!*\
  !*** ../core/node_modules/uuid/dist/esm-browser/regex.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "../core/node_modules/uuid/dist/esm-browser/rng.js":
/*!*********************************************************!*\
  !*** ../core/node_modules/uuid/dist/esm-browser/rng.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../core/node_modules/uuid/dist/esm-browser/stringify.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/uuid/dist/esm-browser/stringify.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "unsafeStringify": () => (/* binding */ unsafeStringify)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../core/node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "../core/node_modules/uuid/dist/esm-browser/v4.js":
/*!********************************************************!*\
  !*** ../core/node_modules/uuid/dist/esm-browser/v4.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ "../core/node_modules/uuid/dist/esm-browser/native.js");
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ "../core/node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ "../core/node_modules/uuid/dist/esm-browser/stringify.js");




function v4(options, buf, offset) {
  if (_native_js__WEBPACK_IMPORTED_MODULE_0__["default"].randomUUID && !buf && !options) {
    return _native_js__WEBPACK_IMPORTED_MODULE_0__["default"].randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "../core/node_modules/uuid/dist/esm-browser/validate.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/uuid/dist/esm-browser/validate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "../core/node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "../oidc-browser/dist/index.es.js":
/*!****************************************!*\
  !*** ../oidc-browser/dist/index.es.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CordovaIFrameNavigator": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.CordovaIFrameNavigator),
/* harmony export */   "CordovaPopupNavigator": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.CordovaPopupNavigator),
/* harmony export */   "InMemoryWebStorage": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.InMemoryWebStorage),
/* harmony export */   "Log": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.Log),
/* harmony export */   "OidcClient": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.OidcClient),
/* harmony export */   "SessionMonitor": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.SessionMonitor),
/* harmony export */   "User": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.User),
/* harmony export */   "UserManager": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.UserManager),
/* harmony export */   "Version": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.Version),
/* harmony export */   "WebStorageStateStore": () => (/* reexport safe */ _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.WebStorageStateStore),
/* harmony export */   "clearOidcPersistentStorage": () => (/* binding */ clearOidcPersistentStorage),
/* harmony export */   "getBearerToken": () => (/* binding */ getBearerToken),
/* harmony export */   "getDpopToken": () => (/* binding */ getDpopToken),
/* harmony export */   "refresh": () => (/* binding */ refresh),
/* harmony export */   "registerClient": () => (/* binding */ registerClient),
/* harmony export */   "removeOidcQueryParam": () => (/* binding */ removeOidcQueryParam)
/* harmony export */ });
/* harmony import */ var _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @inrupt/oidc-client */ "../oidc-browser/node_modules/@inrupt/oidc-client/lib/oidc-client.min.js");
/* harmony import */ var _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @inrupt/solid-client-authn-core */ "../core/dist/index.mjs");
/* harmony import */ var _inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @inrupt/universal-fetch */ "../oidc-browser/node_modules/@inrupt/universal-fetch/dist/index-browser.mjs");





function processErrorResponse(responseBody, options) {
    var _a, _b, _c, _d;
    if (responseBody.error === "invalid_redirect_uri") {
        throw new Error(`Dynamic client registration failed: the provided redirect uri [${(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()}] is invalid - ${(_b = responseBody.error_description) !== null && _b !== void 0 ? _b : ""}`);
    }
    if (responseBody.error === "invalid_client_metadata") {
        throw new Error(`Dynamic client registration failed: the provided client metadata ${JSON.stringify(options)} is invalid - ${(_c = responseBody.error_description) !== null && _c !== void 0 ? _c : ""}`);
    }
    throw new Error(`Dynamic client registration failed: ${responseBody.error} - ${(_d = responseBody.error_description) !== null && _d !== void 0 ? _d : ""}`);
}
function validateRegistrationResponse(responseBody, options) {
    if (responseBody.client_id === undefined) {
        throw new Error(`Dynamic client registration failed: no client_id has been found on ${JSON.stringify(responseBody)}`);
    }
    if (options.redirectUrl &&
        (responseBody.redirect_uris === undefined ||
            responseBody.redirect_uris[0] !== options.redirectUrl.toString())) {
        throw new Error(`Dynamic client registration failed: the returned redirect URIs ${JSON.stringify(responseBody.redirect_uris)} don't match the provided ${JSON.stringify([
            options.redirectUrl.toString(),
        ])}`);
    }
}
async function registerClient(options, issuerConfig) {
    var _a;
    if (!issuerConfig.registrationEndpoint) {
        throw new Error("Dynamic Registration could not be completed because the issuer has no registration endpoint.");
    }
    if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) {
        throw new Error("The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.");
    }
    const signingAlg = (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.determineSigningAlg)(issuerConfig.idTokenSigningAlgValuesSupported, _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.PREFERRED_SIGNING_ALG);
    const config = {
        client_name: options.clientName,
        application_type: "web",
        redirect_uris: [(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()],
        subject_type: "public",
        token_endpoint_auth_method: "client_secret_basic",
        id_token_signed_response_alg: signingAlg,
        grant_types: ["authorization_code", "refresh_token"],
    };
    const headers = {
        "Content-Type": "application/json",
    };
    const registerResponse = await fetch(issuerConfig.registrationEndpoint.toString(), {
        method: "POST",
        headers,
        body: JSON.stringify(config),
    });
    if (registerResponse.ok) {
        const responseBody = await registerResponse.json();
        validateRegistrationResponse(responseBody, options);
        return {
            clientId: responseBody.client_id,
            clientSecret: responseBody.client_secret,
            idTokenSignedResponseAlg: responseBody.id_token_signed_response_alg,
            clientType: "dynamic",
        };
    }
    if (registerResponse.status === 400) {
        processErrorResponse(await registerResponse.json(), options);
    }
    throw new Error(`Dynamic client registration failed: the server returned ${registerResponse.status} ${registerResponse.statusText} - ${await registerResponse.text()}`);
}

function hasError(value) {
    return value.error !== undefined && typeof value.error === "string";
}
function hasErrorDescription(value) {
    return (value.error_description !== undefined &&
        typeof value.error_description === "string");
}
function hasErrorUri(value) {
    return value.error_uri !== undefined && typeof value.error_uri === "string";
}
function hasAccessToken(value) {
    return (value.access_token !== undefined && typeof value.access_token === "string");
}
function hasIdToken(value) {
    return value.id_token !== undefined && typeof value.id_token === "string";
}
function hasRefreshToken(value) {
    return (value.refresh_token !== undefined && typeof value.refresh_token === "string");
}
function hasTokenType(value) {
    return value.token_type !== undefined && typeof value.token_type === "string";
}
function hasExpiresIn(value) {
    return value.expires_in === undefined || typeof value.expires_in === "number";
}
function validatePreconditions(issuer, data) {
    if (data.grantType &&
        (!issuer.grantTypesSupported ||
            !issuer.grantTypesSupported.includes(data.grantType))) {
        throw new Error(`The issuer [${issuer.issuer}] does not support the [${data.grantType}] grant`);
    }
    if (!issuer.tokenEndpoint) {
        throw new Error(`This issuer [${issuer.issuer}] does not have a token endpoint`);
    }
}
function validateTokenEndpointResponse(tokenResponse, dpop) {
    if (hasError(tokenResponse)) {
        throw new _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.OidcProviderError(`Token endpoint returned error [${tokenResponse.error}]${hasErrorDescription(tokenResponse)
            ? `: ${tokenResponse.error_description}`
            : ""}${hasErrorUri(tokenResponse) ? ` (see ${tokenResponse.error_uri})` : ""}`, tokenResponse.error, hasErrorDescription(tokenResponse)
            ? tokenResponse.error_description
            : undefined);
    }
    if (!hasAccessToken(tokenResponse)) {
        throw new _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseError(["access_token"]);
    }
    if (!hasIdToken(tokenResponse)) {
        throw new _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseError(["id_token"]);
    }
    if (!hasTokenType(tokenResponse)) {
        throw new _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseError(["token_type"]);
    }
    if (!hasExpiresIn(tokenResponse)) {
        throw new _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseError(["expires_in"]);
    }
    if (!dpop && tokenResponse.token_type.toLowerCase() !== "bearer") {
        throw new Error(`Invalid token endpoint response: requested a [Bearer] token, but got a 'token_type' value of [${tokenResponse.token_type}].`);
    }
    return tokenResponse;
}
async function getTokens(issuer, client, data, dpop) {
    validatePreconditions(issuer, data);
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let dpopKey;
    if (dpop) {
        dpopKey = await (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.generateDpopKeyPair)();
        headers.DPoP = await (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey);
    }
    if (client.clientSecret) {
        headers.Authorization = `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`;
    }
    const requestBody = {
        grant_type: data.grantType,
        redirect_uri: data.redirectUrl,
        code: data.code,
        code_verifier: data.codeVerifier,
        client_id: client.clientId,
    };
    const tokenRequestInit = {
        method: "POST",
        headers,
        body: new URLSearchParams(requestBody).toString(),
    };
    const rawTokenResponse = await (0,_inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__.fetch)(issuer.tokenEndpoint, tokenRequestInit);
    const jsonTokenResponse = (await rawTokenResponse.json());
    const tokenResponse = validateTokenEndpointResponse(jsonTokenResponse, dpop);
    const webId = await (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.getWebidFromTokenPayload)(tokenResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
    return {
        accessToken: tokenResponse.access_token,
        idToken: tokenResponse.id_token,
        refreshToken: hasRefreshToken(tokenResponse)
            ? tokenResponse.refresh_token
            : undefined,
        webId,
        dpopKey,
        expiresIn: tokenResponse.expires_in,
    };
}
async function getBearerToken(redirectUrl) {
    let signinResponse;
    try {
        const client = new _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.OidcClient({
            response_mode: "query",
            loadUserInfo: false,
        });
        signinResponse = await client.processSigninResponse(redirectUrl);
        if (client.settings.metadata === undefined) {
            throw new Error("Cannot retrieve issuer metadata from client information in storage.");
        }
        if (client.settings.metadata.jwks_uri === undefined) {
            throw new Error("Missing some issuer metadata from client information in storage: 'jwks_uri' is undefined");
        }
        if (client.settings.metadata.issuer === undefined) {
            throw new Error("Missing some issuer metadata from client information in storage: 'issuer' is undefined");
        }
        if (client.settings.client_id === undefined) {
            throw new Error("Missing some client information in storage: 'client_id' is undefined");
        }
        const webId = await (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.getWebidFromTokenPayload)(signinResponse.id_token, client.settings.metadata.jwks_uri, client.settings.metadata.issuer, client.settings.client_id);
        return {
            accessToken: signinResponse.access_token,
            idToken: signinResponse.id_token,
            webId,
            refreshToken: signinResponse.refresh_token,
        };
    }
    catch (err) {
        throw new Error(`Problem handling Auth Code Grant (Flow) redirect - URL [${redirectUrl}]: ${err}`);
    }
}
async function getDpopToken(issuer, client, data) {
    return getTokens(issuer, client, data, true);
}

const isValidUrl = (url) => {
    try {
        new URL(url);
        return true;
    }
    catch (_a) {
        return false;
    }
};
async function refresh(refreshToken, issuer, client, dpopKey) {
    if (client.clientId === undefined) {
        throw new Error("No client ID available when trying to refresh the access token.");
    }
    const requestBody = {
        grant_type: "refresh_token",
        refresh_token: refreshToken,
        scope: _inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_SCOPES,
    };
    let dpopHeader = {};
    if (dpopKey !== undefined) {
        dpopHeader = {
            DPoP: await (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey),
        };
    }
    let authHeader = {};
    if (client.clientSecret !== undefined) {
        authHeader = {
            Authorization: `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`,
        };
    }
    else if (isValidUrl(client.clientId)) {
        requestBody.client_id = client.clientId;
    }
    const rawResponse = await (0,_inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__.fetch)(issuer.tokenEndpoint, {
        method: "POST",
        body: new URLSearchParams(requestBody).toString(),
        headers: {
            ...dpopHeader,
            ...authHeader,
            "Content-Type": "application/x-www-form-urlencoded",
        },
    });
    let response;
    try {
        response = await rawResponse.json();
    }
    catch (e) {
        throw new Error(`The token endpoint of issuer ${issuer.issuer} returned a malformed response.`);
    }
    const validatedResponse = validateTokenEndpointResponse(response, dpopKey !== undefined);
    const webId = await (0,_inrupt_solid_client_authn_core__WEBPACK_IMPORTED_MODULE_1__.getWebidFromTokenPayload)(validatedResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
    return {
        accessToken: validatedResponse.access_token,
        idToken: validatedResponse.id_token,
        refreshToken: typeof validatedResponse.refresh_token === "string"
            ? validatedResponse.refresh_token
            : undefined,
        webId,
        dpopKey,
        expiresIn: validatedResponse.expires_in,
    };
}

function removeOidcQueryParam(redirectUrl) {
    const cleanedUrl = new URL(redirectUrl);
    cleanedUrl.searchParams.delete("code");
    cleanedUrl.searchParams.delete("state");
    cleanedUrl.hash = "";
    if (redirectUrl.includes(`${cleanedUrl.origin}/`)) {
        return cleanedUrl.href;
    }
    return `${cleanedUrl.origin}${cleanedUrl.href.substring(cleanedUrl.origin.length + 1)}`;
}
async function clearOidcPersistentStorage() {
    const client = new _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.OidcClient({
        response_mode: "query",
    });
    await client.clearStaleState(new _inrupt_oidc_client__WEBPACK_IMPORTED_MODULE_0__.WebStorageStateStore({}));
    const myStorage = window.localStorage;
    const itemsToRemove = [];
    for (let i = 0; i <= myStorage.length; i += 1) {
        const key = myStorage.key(i);
        if (key &&
            (key.match(/^oidc\..+$/) ||
                key.match(/^solidClientAuthenticationUser:.+$/))) {
            itemsToRemove.push(key);
        }
    }
    itemsToRemove.forEach((key) => myStorage.removeItem(key));
}




/***/ }),

/***/ "../oidc-browser/node_modules/@inrupt/oidc-client/lib/oidc-client.min.js":
/*!*******************************************************************************!*\
  !*** ../oidc-browser/node_modules/@inrupt/oidc-client/lib/oidc-client.min.js ***!
  \*******************************************************************************/
/***/ (function(module) {

!function t(e,r){if(true)module.exports=r();else { var i, n; }}(this,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function e(){return t.default}:function e(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=22)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var i={debug:function t(){},info:function t(){},warn:function t(){},error:function t(){}},o=void 0,s=void 0;(e.Log=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.reset=function t(){s=3,o=i},t.debug=function t(){if(s>=4){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.debug.apply(o,Array.from(r))}},t.info=function t(){if(s>=3){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.info.apply(o,Array.from(r))}},t.warn=function t(){if(s>=2){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.warn.apply(o,Array.from(r))}},t.error=function t(){if(s>=1){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.error.apply(o,Array.from(r))}},n(t,null,[{key:"NONE",get:function t(){return 0}},{key:"ERROR",get:function t(){return 1}},{key:"WARN",get:function t(){return 2}},{key:"INFO",get:function t(){return 3}},{key:"DEBUG",get:function t(){return 4}},{key:"level",get:function t(){return s},set:function t(e){if(!(0<=e&&e<=4))throw new Error("Invalid log level");s=e}},{key:"logger",get:function t(){return o},set:function t(e){if(!e.debug&&e.info&&(e.debug=e.info),!(e.debug&&e.info&&e.warn&&e.error))throw new Error("Invalid logger");o=e}}]),t}()).reset()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var i={setInterval:function(t){function e(e,r){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return setInterval(t,e)})),clearInterval:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return clearInterval(t)}))},o=!1,s=null;e.Global=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t._testing=function t(){o=!0},t.setXMLHttpRequest=function t(e){s=e},n(t,null,[{key:"location",get:function t(){if(!o)return location}},{key:"localStorage",get:function t(){if(!o&&"undefined"!=typeof window)return localStorage}},{key:"sessionStorage",get:function t(){if(!o&&"undefined"!=typeof window)return sessionStorage}},{key:"XMLHttpRequest",get:function t(){if(!o&&"undefined"!=typeof window)return s||XMLHttpRequest}},{key:"timer",get:function t(){if(!o)return i}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MetadataService=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(7);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=".well-known/openid-configuration";e.MetadataService=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.JsonService;if(s(this,t),!e)throw i.Log.error("MetadataService: No settings passed to MetadataService"),new Error("settings");this._settings=e,this._jsonService=new r(["application/jwk-set+json"])}return t.prototype.resetSigningKeys=function t(){this._settings=this._settings||{},this._settings.signingKeys=void 0},t.prototype.getMetadata=function t(){var e=this;return this._settings.metadata?(i.Log.debug("MetadataService.getMetadata: Returning metadata from settings"),Promise.resolve(this._settings.metadata)):this.metadataUrl?(i.Log.debug("MetadataService.getMetadata: getting metadata from",this.metadataUrl),this._jsonService.getJson(this.metadataUrl).then((function(t){i.Log.debug("MetadataService.getMetadata: json received");var r=e._settings.metadataSeed||{};return e._settings.metadata=Object.assign({},r,t),e._settings.metadata}))):(i.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings"),Promise.reject(new Error("No authority or metadataUrl configured on settings")))},t.prototype.getIssuer=function t(){return this._getMetadataProperty("issuer")},t.prototype.getAuthorizationEndpoint=function t(){return this._getMetadataProperty("authorization_endpoint")},t.prototype.getUserInfoEndpoint=function t(){return this._getMetadataProperty("userinfo_endpoint")},t.prototype.getTokenEndpoint=function t(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._getMetadataProperty("token_endpoint",e)},t.prototype.getCheckSessionIframe=function t(){return this._getMetadataProperty("check_session_iframe",!0)},t.prototype.getEndSessionEndpoint=function t(){return this._getMetadataProperty("end_session_endpoint",!0)},t.prototype.getRevocationEndpoint=function t(){return this._getMetadataProperty("revocation_endpoint",!0)},t.prototype.getKeysEndpoint=function t(){return this._getMetadataProperty("jwks_uri",!0)},t.prototype._getMetadataProperty=function t(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return i.Log.debug("MetadataService.getMetadataProperty for: "+e),this.getMetadata().then((function(t){if(i.Log.debug("MetadataService.getMetadataProperty: metadata recieved"),void 0===t[e]){if(!0===r)return void i.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property "+e);throw i.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property "+e),new Error("Metadata does not contain property "+e)}return t[e]}))},t.prototype.getSigningKeys=function t(){var e=this;return this._settings.signingKeys?(i.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings"),Promise.resolve(this._settings.signingKeys)):this._getMetadataProperty("jwks_uri").then((function(t){return i.Log.debug("MetadataService.getSigningKeys: jwks_uri received",t),e._jsonService.getJson(t).then((function(t){if(i.Log.debug("MetadataService.getSigningKeys: key set received",t),!t.keys)throw i.Log.error("MetadataService.getSigningKeys: Missing keys on keyset"),new Error("Missing keys on keyset");return e._settings.signingKeys=t.keys,e._settings.signingKeys}))}))},n(t,[{key:"metadataUrl",get:function t(){return this._metadataUrl||(this._settings.metadataUrl?this._metadataUrl=this._settings.metadataUrl:(this._metadataUrl=this._settings.authority,this._metadataUrl&&this._metadataUrl.indexOf(a)<0&&("/"!==this._metadataUrl[this._metadataUrl.length-1]&&(this._metadataUrl+="/"),this._metadataUrl+=a))),this._metadataUrl}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UrlUtility=void 0;var n=r(0),i=r(1);e.UrlUtility=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.addQueryParam=function t(e,r,n){return e.indexOf("?")<0&&(e+="?"),"?"!==e[e.length-1]&&(e+="&"),e+=encodeURIComponent(r),e+="=",e+=encodeURIComponent(n)},t.parseUrlFragment=function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.Global;"string"!=typeof e&&(e=o.location.href);var s=e.lastIndexOf(r);s>=0&&(e=e.substr(s+1)),"?"===r&&(s=e.indexOf("#"))>=0&&(e=e.substr(0,s));for(var a,u={},c=/([^&=]+)=([^&]*)/g,h=0;a=c.exec(e);)if(u[decodeURIComponent(a[1])]=decodeURIComponent(a[2].replace(/\+/g," ")),h++>50)return n.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters",e),{error:"Response exceeded expected number of parameters"};for(var l in u)return u;return{}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JoseUtil=void 0;var n=r(26),i=function o(t){return t&&t.__esModule?t:{default:t}}(r(33));e.JoseUtil=(0,i.default)({jws:n.jws,KeyUtil:n.KeyUtil,X509:n.X509,crypto:n.crypto,hextob64u:n.hextob64u,b64tohex:n.b64tohex,AllowedSigningAlgs:n.AllowedSigningAlgs})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OidcClientSettings=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=r(0),s=r(23),a=r(6),u=r(24),c=r(2);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var l=".well-known/openid-configuration",f="id_token",g="openid",d="client_secret_post";e.OidcClientSettings=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.authority,i=e.metadataUrl,o=e.metadata,l=e.signingKeys,p=e.metadataSeed,v=e.client_id,y=e.client_secret,m=e.response_type,_=void 0===m?f:m,S=e.scope,b=void 0===S?g:S,w=e.redirect_uri,F=e.post_logout_redirect_uri,E=e.client_authentication,x=void 0===E?d:E,A=e.prompt,k=e.display,P=e.max_age,C=e.ui_locales,T=e.acr_values,R=e.resource,I=e.response_mode,D=e.filterProtocolClaims,L=void 0===D||D,N=e.loadUserInfo,U=void 0===N||N,B=e.staleStateAge,O=void 0===B?900:B,j=e.clockSkew,M=void 0===j?300:j,H=e.clockService,V=void 0===H?new s.ClockService:H,K=e.userInfoJwtIssuer,q=void 0===K?"OP":K,J=e.mergeClaims,W=void 0!==J&&J,z=e.stateStore,Y=void 0===z?new a.WebStorageStateStore:z,G=e.ResponseValidatorCtor,X=void 0===G?u.ResponseValidator:G,$=e.MetadataServiceCtor,Q=void 0===$?c.MetadataService:$,Z=e.extraQueryParams,tt=void 0===Z?{}:Z,et=e.extraTokenParams,rt=void 0===et?{}:et;h(this,t),this._authority=r,this._metadataUrl=i,this._metadata=o,this._metadataSeed=p,this._signingKeys=l,this._client_id=v,this._client_secret=y,this._response_type=_,this._scope=b,this._redirect_uri=w,this._post_logout_redirect_uri=F,this._client_authentication=x,this._prompt=A,this._display=k,this._max_age=P,this._ui_locales=C,this._acr_values=T,this._resource=R,this._response_mode=I,this._filterProtocolClaims=!!L,this._loadUserInfo=!!U,this._staleStateAge=O,this._clockSkew=M,this._clockService=V,this._userInfoJwtIssuer=q,this._mergeClaims=!!W,this._stateStore=Y,this._validator=new X(this),this._metadataService=new Q(this),this._extraQueryParams="object"===(void 0===tt?"undefined":n(tt))?tt:{},this._extraTokenParams="object"===(void 0===rt?"undefined":n(rt))?rt:{}}return t.prototype.getEpochTime=function t(){return this._clockService.getEpochTime()},i(t,[{key:"client_id",get:function t(){return this._client_id},set:function t(e){if(this._client_id)throw o.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned."),new Error("client_id has already been assigned.");this._client_id=e}},{key:"client_secret",get:function t(){return this._client_secret}},{key:"response_type",get:function t(){return this._response_type}},{key:"scope",get:function t(){return this._scope}},{key:"redirect_uri",get:function t(){return this._redirect_uri}},{key:"post_logout_redirect_uri",get:function t(){return this._post_logout_redirect_uri}},{key:"client_authentication",get:function t(){return this._client_authentication}},{key:"prompt",get:function t(){return this._prompt}},{key:"display",get:function t(){return this._display}},{key:"max_age",get:function t(){return this._max_age}},{key:"ui_locales",get:function t(){return this._ui_locales}},{key:"acr_values",get:function t(){return this._acr_values}},{key:"resource",get:function t(){return this._resource}},{key:"response_mode",get:function t(){return this._response_mode}},{key:"authority",get:function t(){return this._authority},set:function t(e){if(this._authority)throw o.Log.error("OidcClientSettings.set_authority: authority has already been assigned."),new Error("authority has already been assigned.");this._authority=e}},{key:"metadataUrl",get:function t(){return this._metadataUrl||(this._metadataUrl=this.authority,this._metadataUrl&&this._metadataUrl.indexOf(l)<0&&("/"!==this._metadataUrl[this._metadataUrl.length-1]&&(this._metadataUrl+="/"),this._metadataUrl+=l)),this._metadataUrl}},{key:"metadata",get:function t(){return this._metadata},set:function t(e){this._metadata=e}},{key:"metadataSeed",get:function t(){return this._metadataSeed},set:function t(e){this._metadataSeed=e}},{key:"signingKeys",get:function t(){return this._signingKeys},set:function t(e){this._signingKeys=e}},{key:"filterProtocolClaims",get:function t(){return this._filterProtocolClaims}},{key:"loadUserInfo",get:function t(){return this._loadUserInfo}},{key:"staleStateAge",get:function t(){return this._staleStateAge}},{key:"clockSkew",get:function t(){return this._clockSkew}},{key:"userInfoJwtIssuer",get:function t(){return this._userInfoJwtIssuer}},{key:"mergeClaims",get:function t(){return this._mergeClaims}},{key:"stateStore",get:function t(){return this._stateStore}},{key:"validator",get:function t(){return this._validator}},{key:"metadataService",get:function t(){return this._metadataService}},{key:"extraQueryParams",get:function t(){return this._extraQueryParams},set:function t(e){"object"===(void 0===e?"undefined":n(e))?this._extraQueryParams=e:this._extraQueryParams={}}},{key:"extraTokenParams",get:function t(){return this._extraTokenParams},set:function t(e){"object"===(void 0===e?"undefined":n(e))?this._extraTokenParams=e:this._extraTokenParams={}}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WebStorageStateStore=void 0;var n=r(0),i=r(1);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.WebStorageStateStore=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.prefix,n=void 0===r?"oidc.":r,s=e.store,a=void 0===s?i.Global.localStorage:s;o(this,t),this._store=a,this._prefix=n}return t.prototype.set=function t(e,r){return n.Log.debug("WebStorageStateStore.set",e),e=this._prefix+e,this._store.setItem(e,r),Promise.resolve()},t.prototype.get=function t(e){n.Log.debug("WebStorageStateStore.get",e),e=this._prefix+e;var r=this._store.getItem(e);return Promise.resolve(r)},t.prototype.remove=function t(e){n.Log.debug("WebStorageStateStore.remove",e),e=this._prefix+e;var r=this._store.getItem(e);return this._store.removeItem(e),Promise.resolve(r)},t.prototype.getAllKeys=function t(){n.Log.debug("WebStorageStateStore.getAllKeys");for(var e=[],r=0;r<this._store.length;r++){var i=this._store.key(r);0===i.indexOf(this._prefix)&&e.push(i.substr(this._prefix.length))}return Promise.resolve(e)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JsonService=void 0;var n=r(0),i=r(1);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.JsonService=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.Global.XMLHttpRequest,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;o(this,t),e&&Array.isArray(e)?this._contentTypes=e.slice():this._contentTypes=[],this._contentTypes.push("application/json"),n&&this._contentTypes.push("application/jwt"),this._XMLHttpRequest=r,this._jwtHandler=n}return t.prototype.getJson=function t(e,r){var i=this;if(!e)throw n.Log.error("JsonService.getJson: No url passed"),new Error("url");return n.Log.debug("JsonService.getJson, url: ",e),new Promise((function(t,o){var s=new i._XMLHttpRequest;s.open("GET",e);var a=i._contentTypes,u=i._jwtHandler;s.onload=function(){if(n.Log.debug("JsonService.getJson: HTTP response received, status",s.status),200===s.status){var r=s.getResponseHeader("Content-Type");if(r){var i=a.find((function(t){if(r.startsWith(t))return!0}));if("application/jwt"==i)return void u(s).then(t,o);if(i)try{return void t(JSON.parse(s.responseText))}catch(t){return n.Log.error("JsonService.getJson: Error parsing JSON response",t.message),void o(t)}}o(Error("Invalid response Content-Type: "+r+", from URL: "+e))}else o(Error(s.statusText+" ("+s.status+")"))},s.onerror=function(){n.Log.error("JsonService.getJson: network error"),o(Error("Network Error"))},r&&(n.Log.debug("JsonService.getJson: token passed, setting Authorization header"),s.setRequestHeader("Authorization","Bearer "+r)),s.send()}))},t.prototype.postForm=function t(e,r,i){var o=this;if(!e)throw n.Log.error("JsonService.postForm: No url passed"),new Error("url");return n.Log.debug("JsonService.postForm, url: ",e),new Promise((function(t,s){var a=new o._XMLHttpRequest;a.open("POST",e);var u=o._contentTypes;a.onload=function(){if(n.Log.debug("JsonService.postForm: HTTP response received, status",a.status),200!==a.status){if(400===a.status)if(i=a.getResponseHeader("Content-Type"))if(u.find((function(t){if(i.startsWith(t))return!0})))try{var r=JSON.parse(a.responseText);if(r&&r.error)return n.Log.error("JsonService.postForm: Error from server: ",r.error),void s(new Error(r.error))}catch(t){return n.Log.error("JsonService.postForm: Error parsing JSON response",t.message),void s(t)}s(Error(a.statusText+" ("+a.status+")"))}else{var i;if((i=a.getResponseHeader("Content-Type"))&&u.find((function(t){if(i.startsWith(t))return!0})))try{return void t(JSON.parse(a.responseText))}catch(t){return n.Log.error("JsonService.postForm: Error parsing JSON response",t.message),void s(t)}s(Error("Invalid response Content-Type: "+i+", from URL: "+e))}},a.onerror=function(){n.Log.error("JsonService.postForm: network error"),s(Error("Network Error"))};var c="";for(var h in r){var l=r[h];l&&(c.length>0&&(c+="&"),c+=encodeURIComponent(h),c+="=",c+=encodeURIComponent(l))}a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),void 0!==i&&a.setRequestHeader("Authorization","Basic "+btoa(i)),a.send(c)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninRequest=void 0;var n=r(0),i=r(3),o=r(13);e.SigninRequest=function(){function t(e){var r=e.url,s=e.client_id,a=e.redirect_uri,u=e.response_type,c=e.scope,h=e.authority,l=e.data,f=e.prompt,g=e.display,d=e.max_age,p=e.ui_locales,v=e.id_token_hint,y=e.login_hint,m=e.acr_values,_=e.resource,S=e.response_mode,b=e.request,w=e.request_uri,F=e.extraQueryParams,E=e.request_type,x=e.client_secret,A=e.extraTokenParams,k=e.skipUserInfo;if(function P(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!r)throw n.Log.error("SigninRequest.ctor: No url passed"),new Error("url");if(!s)throw n.Log.error("SigninRequest.ctor: No client_id passed"),new Error("client_id");if(!a)throw n.Log.error("SigninRequest.ctor: No redirect_uri passed"),new Error("redirect_uri");if(!u)throw n.Log.error("SigninRequest.ctor: No response_type passed"),new Error("response_type");if(!c)throw n.Log.error("SigninRequest.ctor: No scope passed"),new Error("scope");if(!h)throw n.Log.error("SigninRequest.ctor: No authority passed"),new Error("authority");var C=t.isOidc(u),T=t.isCode(u);S||(S=t.isCode(u)?"query":null),this.state=new o.SigninState({nonce:C,data:l,client_id:s,authority:h,redirect_uri:a,code_verifier:T,request_type:E,response_mode:S,client_secret:x,scope:c,extraTokenParams:A,skipUserInfo:k}),r=i.UrlUtility.addQueryParam(r,"client_id",s),r=i.UrlUtility.addQueryParam(r,"redirect_uri",a),r=i.UrlUtility.addQueryParam(r,"response_type",u),r=i.UrlUtility.addQueryParam(r,"scope",c),r=i.UrlUtility.addQueryParam(r,"state",this.state.id),C&&(r=i.UrlUtility.addQueryParam(r,"nonce",this.state.nonce)),T&&(r=i.UrlUtility.addQueryParam(r,"code_challenge",this.state.code_challenge),r=i.UrlUtility.addQueryParam(r,"code_challenge_method","S256"));var R={prompt:f,display:g,max_age:d,ui_locales:p,id_token_hint:v,login_hint:y,acr_values:m,resource:_,request:b,request_uri:w,response_mode:S};for(var I in R)R[I]&&(r=i.UrlUtility.addQueryParam(r,I,R[I]));for(var D in F)r=i.UrlUtility.addQueryParam(r,D,F[D]);this.url=r}return t.isOidc=function t(e){return!!e.split(/\s+/g).filter((function(t){return"id_token"===t}))[0]},t.isOAuth=function t(e){return!!e.split(/\s+/g).filter((function(t){return"token"===t}))[0]},t.isCode=function t(e){return!!e.split(/\s+/g).filter((function(t){return"code"===t}))[0]},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.State=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=function s(t){return t&&t.__esModule?t:{default:t}}(r(14));function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.State=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.id,n=e.data,i=e.created,s=e.request_type;a(this,t),this._id=r||(0,o.default)(),this._data=n,this._created="number"==typeof i&&i>0?i:parseInt(Date.now()/1e3),this._request_type=s}return t.prototype.toStorageString=function t(){return i.Log.debug("State.toStorageString"),JSON.stringify({id:this.id,data:this.data,created:this.created,request_type:this.request_type})},t.fromStorageString=function e(r){return i.Log.debug("State.fromStorageString"),new t(JSON.parse(r))},t.clearStaleState=function e(r,n){var o=Date.now()/1e3-n;return r.getAllKeys().then((function(e){i.Log.debug("State.clearStaleState: got keys",e);for(var n=[],s=function s(a){var c=e[a];u=r.get(c).then((function(e){var n=!1;if(e)try{var s=t.fromStorageString(e);i.Log.debug("State.clearStaleState: got item from key: ",c,s.created),s.created<=o&&(n=!0)}catch(t){i.Log.error("State.clearStaleState: Error parsing state for key",c,t.message),n=!0}else i.Log.debug("State.clearStaleState: no item in storage for key: ",c),n=!0;if(n)return i.Log.debug("State.clearStaleState: removed item for key: ",c),r.remove(c)})),n.push(u)},a=0;a<e.length;a++){var u;s(a)}return i.Log.debug("State.clearStaleState: waiting on promise count:",n.length),Promise.all(n)}))},n(t,[{key:"id",get:function t(){return this._id}},{key:"data",get:function t(){return this._data}},{key:"created",get:function t(){return this._created}},{key:"request_type",get:function t(){return this._request_type}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OidcClient=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(5),s=r(12),a=r(8),u=r(34),c=r(35),h=r(36),l=r(13),f=r(9);function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.OidcClient=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g(this,t),e instanceof o.OidcClientSettings?this._settings=e:this._settings=new o.OidcClientSettings(e)}return t.prototype.createSigninRequest=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.response_type,o=r.scope,s=r.redirect_uri,u=r.data,c=r.state,h=r.prompt,l=r.display,f=r.max_age,g=r.ui_locales,d=r.id_token_hint,p=r.login_hint,v=r.acr_values,y=r.resource,m=r.request,_=r.request_uri,S=r.response_mode,b=r.extraQueryParams,w=r.extraTokenParams,F=r.request_type,E=r.skipUserInfo,x=arguments[1];i.Log.debug("OidcClient.createSigninRequest");var A=this._settings.client_id;n=n||this._settings.response_type,o=o||this._settings.scope,s=s||this._settings.redirect_uri,h=h||this._settings.prompt,l=l||this._settings.display,f=f||this._settings.max_age,g=g||this._settings.ui_locales,v=v||this._settings.acr_values,y=y||this._settings.resource,S=S||this._settings.response_mode,b=b||this._settings.extraQueryParams,w=w||this._settings.extraTokenParams;var k=this._settings.authority;return a.SigninRequest.isCode(n)&&"code"!==n?Promise.reject(new Error("OpenID Connect hybrid flow is not supported")):this._metadataService.getAuthorizationEndpoint().then((function(t){i.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint",t);var r=new a.SigninRequest({url:t,client_id:A,redirect_uri:s,response_type:n,scope:o,data:u||c,authority:k,prompt:h,display:l,max_age:f,ui_locales:g,id_token_hint:d,login_hint:p,acr_values:v,resource:y,request:m,request_uri:_,extraQueryParams:b,extraTokenParams:w,request_type:F,response_mode:S,client_secret:e._settings.client_secret,skipUserInfo:E}),P=r.state;return(x=x||e._stateStore).set(P.id,P.toStorageString()).then((function(){return r}))}))},t.prototype.readSigninResponseState=function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];i.Log.debug("OidcClient.readSigninResponseState");var o="query"===this._settings.response_mode||!this._settings.response_mode&&a.SigninRequest.isCode(this._settings.response_type),s=o?"?":"#",c=new u.SigninResponse(e,s);if(!c.state)return i.Log.error("OidcClient.readSigninResponseState: No state in response"),Promise.reject(new Error("No state in response"));r=r||this._stateStore;var h=n?r.remove.bind(r):r.get.bind(r);return h(c.state).then((function(t){if(!t)throw i.Log.error("OidcClient.readSigninResponseState: No matching state found in storage"),new Error("No matching state found in storage");return{state:l.SigninState.fromStorageString(t),response:c}}))},t.prototype.processSigninResponse=function t(e,r){var n=this;return i.Log.debug("OidcClient.processSigninResponse"),this.readSigninResponseState(e,r,!0).then((function(t){var e=t.state,r=t.response;return i.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response"),n._validator.validateSigninResponse(e,r)}))},t.prototype.createSignoutRequest=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.id_token_hint,o=r.data,s=r.state,a=r.post_logout_redirect_uri,u=r.extraQueryParams,h=r.request_type,l=arguments[1];return i.Log.debug("OidcClient.createSignoutRequest"),a=a||this._settings.post_logout_redirect_uri,u=u||this._settings.extraQueryParams,this._metadataService.getEndSessionEndpoint().then((function(t){if(!t)throw i.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned"),new Error("no end session endpoint");i.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint",t);var r=new c.SignoutRequest({url:t,id_token_hint:n,post_logout_redirect_uri:a,data:o||s,extraQueryParams:u,request_type:h}),f=r.state;return f&&(i.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist"),(l=l||e._stateStore).set(f.id,f.toStorageString())),r}))},t.prototype.readSignoutResponseState=function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];i.Log.debug("OidcClient.readSignoutResponseState");var o=new h.SignoutResponse(e);if(!o.state)return i.Log.debug("OidcClient.readSignoutResponseState: No state in response"),o.error?(i.Log.warn("OidcClient.readSignoutResponseState: Response was error: ",o.error),Promise.reject(new s.ErrorResponse(o))):Promise.resolve({state:void 0,response:o});var a=o.state;r=r||this._stateStore;var u=n?r.remove.bind(r):r.get.bind(r);return u(a).then((function(t){if(!t)throw i.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage"),new Error("No matching state found in storage");return{state:f.State.fromStorageString(t),response:o}}))},t.prototype.processSignoutResponse=function t(e,r){var n=this;return i.Log.debug("OidcClient.processSignoutResponse"),this.readSignoutResponseState(e,r,!0).then((function(t){var e=t.state,r=t.response;return e?(i.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response"),n._validator.validateSignoutResponse(e,r)):(i.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response"),r)}))},t.prototype.clearStaleState=function t(e){return i.Log.debug("OidcClient.clearStaleState"),e=e||this._stateStore,f.State.clearStaleState(e,this.settings.staleStateAge)},n(t,[{key:"_stateStore",get:function t(){return this.settings.stateStore}},{key:"_validator",get:function t(){return this.settings.validator}},{key:"_metadataService",get:function t(){return this.settings.metadataService}},{key:"settings",get:function t(){return this._settings}},{key:"metadataService",get:function t(){return this._metadataService}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenClient=void 0;var n=r(7),i=r(2),o=r(0);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.TokenClient=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.JsonService,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService;if(s(this,t),!e)throw o.Log.error("TokenClient.ctor: No settings passed"),new Error("settings");this._settings=e,this._jsonService=new r,this._metadataService=new a(this._settings)}return t.prototype.exchangeCode=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).grant_type=r.grant_type||"authorization_code",r.client_id=r.client_id||this._settings.client_id,r.client_secret=r.client_secret||this._settings.client_secret,r.redirect_uri=r.redirect_uri||this._settings.redirect_uri;var n=void 0,i=r._client_authentication||this._settings._client_authentication;return delete r._client_authentication,r.code?r.redirect_uri?r.code_verifier?r.client_id?r.client_secret||"client_secret_basic"!=i?("client_secret_basic"==i&&(n=r.client_id+":"+r.client_secret,delete r.client_id,delete r.client_secret),this._metadataService.getTokenEndpoint(!1).then((function(t){return o.Log.debug("TokenClient.exchangeCode: Received token endpoint"),e._jsonService.postForm(t,r,n).then((function(t){return o.Log.debug("TokenClient.exchangeCode: response received"),t}))}))):(o.Log.error("TokenClient.exchangeCode: No client_secret passed"),Promise.reject(new Error("A client_secret is required"))):(o.Log.error("TokenClient.exchangeCode: No client_id passed"),Promise.reject(new Error("A client_id is required"))):(o.Log.error("TokenClient.exchangeCode: No code_verifier passed"),Promise.reject(new Error("A code_verifier is required"))):(o.Log.error("TokenClient.exchangeCode: No redirect_uri passed"),Promise.reject(new Error("A redirect_uri is required"))):(o.Log.error("TokenClient.exchangeCode: No code passed"),Promise.reject(new Error("A code is required")))},t.prototype.exchangeRefreshToken=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).grant_type=r.grant_type||"refresh_token",r.client_id=r.client_id||this._settings.client_id,r.client_secret=r.client_secret||this._settings.client_secret;var n=void 0,i=r._client_authentication||this._settings._client_authentication;return delete r._client_authentication,r.refresh_token?r.client_id?("client_secret_basic"==i&&(n=r.client_id+":"+r.client_secret,delete r.client_id,delete r.client_secret),this._metadataService.getTokenEndpoint(!1).then((function(t){return o.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint"),e._jsonService.postForm(t,r,n).then((function(t){return o.Log.debug("TokenClient.exchangeRefreshToken: response received"),t}))}))):(o.Log.error("TokenClient.exchangeRefreshToken: No client_id passed"),Promise.reject(new Error("A client_id is required"))):(o.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed"),Promise.reject(new Error("A refresh_token is required")))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorResponse=void 0;var n=r(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.ErrorResponse=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=r.error,a=r.error_description,u=r.error_uri,c=r.state,h=r.session_state;if(i(this,e),!s)throw n.Log.error("No error passed to ErrorResponse"),new Error("error");var l=o(this,t.call(this,a||s));return l.name="ErrorResponse",l.error=s,l.error_description=a,l.error_uri=u,l.state=c,l.session_state=h,l}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(Error)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninState=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(9),s=r(4),a=function u(t){return t&&t.__esModule?t:{default:t}}(r(14));function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.SigninState=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.nonce,i=r.authority,o=r.client_id,u=r.redirect_uri,l=r.code_verifier,f=r.response_mode,g=r.client_secret,d=r.scope,p=r.extraTokenParams,v=r.skipUserInfo;c(this,e);var y=h(this,t.call(this,arguments[0]));if(!0===n?y._nonce=(0,a.default)():n&&(y._nonce=n),!0===l?y._code_verifier=(0,a.default)()+(0,a.default)()+(0,a.default)():l&&(y._code_verifier=l),y.code_verifier){var m=s.JoseUtil.hashString(y.code_verifier,"SHA256");y._code_challenge=s.JoseUtil.hexToBase64Url(m)}return y._redirect_uri=u,y._authority=i,y._client_id=o,y._response_mode=f,y._client_secret=g,y._scope=d,y._extraTokenParams=p,y._skipUserInfo=v,y}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.toStorageString=function t(){return i.Log.debug("SigninState.toStorageString"),JSON.stringify({id:this.id,data:this.data,created:this.created,request_type:this.request_type,nonce:this.nonce,code_verifier:this.code_verifier,redirect_uri:this.redirect_uri,authority:this.authority,client_id:this.client_id,response_mode:this.response_mode,client_secret:this.client_secret,scope:this.scope,extraTokenParams:this.extraTokenParams,skipUserInfo:this.skipUserInfo})},e.fromStorageString=function t(r){return i.Log.debug("SigninState.fromStorageString"),new e(JSON.parse(r))},n(e,[{key:"nonce",get:function t(){return this._nonce}},{key:"authority",get:function t(){return this._authority}},{key:"client_id",get:function t(){return this._client_id}},{key:"redirect_uri",get:function t(){return this._redirect_uri}},{key:"code_verifier",get:function t(){return this._code_verifier}},{key:"code_challenge",get:function t(){return this._code_challenge}},{key:"response_mode",get:function t(){return this._response_mode}},{key:"client_secret",get:function t(){return this._client_secret}},{key:"scope",get:function t(){return this._scope}},{key:"extraTokenParams",get:function t(){return this._extraTokenParams}},{key:"skipUserInfo",get:function t(){return this._skipUserInfo}}]),e}(o.State)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function n(){return("undefined"!=i&&null!==i&&void 0!==i.getRandomValues?o:s)().replace(/-/g,"")};var i="undefined"!=typeof window?window.crypto||window.msCrypto:null;function o(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^i.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)}))}function s(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^16*Math.random()>>t/4).toString(16)}))}t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.User=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.User=function(){function t(e){var r=e.id_token,n=e.session_state,i=e.access_token,o=e.refresh_token,s=e.token_type,a=e.scope,u=e.profile,c=e.expires_at,h=e.state;!function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id_token=r,this.session_state=n,this.access_token=i,this.refresh_token=o,this.token_type=s,this.scope=a,this.profile=u,this.expires_at=c,this.state=h}return t.prototype.toStorageString=function t(){return i.Log.debug("User.toStorageString"),JSON.stringify({id_token:this.id_token,session_state:this.session_state,access_token:this.access_token,refresh_token:this.refresh_token,token_type:this.token_type,scope:this.scope,profile:this.profile,expires_at:this.expires_at})},t.fromStorageString=function e(r){return i.Log.debug("User.fromStorageString"),new t(JSON.parse(r))},n(t,[{key:"expires_in",get:function t(){if(this.expires_at){var e=parseInt(Date.now()/1e3);return this.expires_at-e}},set:function t(e){var r=parseInt(e);if("number"==typeof r&&r>0){var n=parseInt(Date.now()/1e3);this.expires_at=n+r}}},{key:"expired",get:function t(){var e=this.expires_in;if(void 0!==e)return e<=0}},{key:"scopes",get:function t(){return(this.scope||"").split(" ")}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AccessTokenEvents=void 0;var n=r(0),i=r(46);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.AccessTokenEvents=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.accessTokenExpiringNotificationTime,n=void 0===r?60:r,s=e.accessTokenExpiringTimer,a=void 0===s?new i.Timer("Access token expiring"):s,u=e.accessTokenExpiredTimer,c=void 0===u?new i.Timer("Access token expired"):u;o(this,t),this._accessTokenExpiringNotificationTime=n,this._accessTokenExpiring=a,this._accessTokenExpired=c}return t.prototype.load=function t(e){if(e.access_token&&void 0!==e.expires_in){var r=e.expires_in;if(n.Log.debug("AccessTokenEvents.load: access token present, remaining duration:",r),r>0){var i=r-this._accessTokenExpiringNotificationTime;i<=0&&(i=1),n.Log.debug("AccessTokenEvents.load: registering expiring timer in:",i),this._accessTokenExpiring.init(i)}else n.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration."),this._accessTokenExpiring.cancel();var o=r+1;n.Log.debug("AccessTokenEvents.load: registering expired timer in:",o),this._accessTokenExpired.init(o)}else this._accessTokenExpiring.cancel(),this._accessTokenExpired.cancel()},t.prototype.unload=function t(){n.Log.debug("AccessTokenEvents.unload: canceling existing access token timers"),this._accessTokenExpiring.cancel(),this._accessTokenExpired.cancel()},t.prototype.addAccessTokenExpiring=function t(e){this._accessTokenExpiring.addHandler(e)},t.prototype.removeAccessTokenExpiring=function t(e){this._accessTokenExpiring.removeHandler(e)},t.prototype.addAccessTokenExpired=function t(e){this._accessTokenExpired.addHandler(e)},t.prototype.removeAccessTokenExpired=function t(e){this._accessTokenExpired.removeHandler(e)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Event=void 0;var n=r(0);e.Event=function(){function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e,this._callbacks=[]}return t.prototype.addHandler=function t(e){this._callbacks.push(e)},t.prototype.removeHandler=function t(e){var r=this._callbacks.findIndex((function(t){return t===e}));r>=0&&this._callbacks.splice(r,1)},t.prototype.raise=function t(){n.Log.debug("Event: Raising event: "+this._name);for(var e=0;e<this._callbacks.length;e++){var r;(r=this._callbacks)[e].apply(r,arguments)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SessionMonitor=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(19),s=r(1);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SessionMonitor=function(){function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.CheckSessionIFrame,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.Global.timer;if(a(this,t),!e)throw i.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor"),new Error("userManager");this._userManager=e,this._CheckSessionIFrameCtor=n,this._timer=u,this._userManager.events.addUserLoaded(this._start.bind(this)),this._userManager.events.addUserUnloaded(this._stop.bind(this)),Promise.resolve(this._userManager.getUser().then((function(t){t?r._start(t):r._settings.monitorAnonymousSession&&r._userManager.querySessionStatus().then((function(t){var e={session_state:t.session_state};t.sub&&t.sid&&(e.profile={sub:t.sub,sid:t.sid}),r._start(e)})).catch((function(t){i.Log.error("SessionMonitor ctor: error from querySessionStatus:",t.message)}))})).catch((function(t){i.Log.error("SessionMonitor ctor: error from getUser:",t.message)})))}return t.prototype._start=function t(e){var r=this,n=e.session_state;n&&(e.profile?(this._sub=e.profile.sub,this._sid=e.profile.sid,i.Log.debug("SessionMonitor._start: session_state:",n,", sub:",this._sub)):(this._sub=void 0,this._sid=void 0,i.Log.debug("SessionMonitor._start: session_state:",n,", anonymous user")),this._checkSessionIFrame?this._checkSessionIFrame.start(n):this._metadataService.getCheckSessionIframe().then((function(t){if(t){i.Log.debug("SessionMonitor._start: Initializing check session iframe");var e=r._client_id,o=r._checkSessionInterval,s=r._stopCheckSessionOnError;r._checkSessionIFrame=new r._CheckSessionIFrameCtor(r._callback.bind(r),e,t,o,s),r._checkSessionIFrame.load().then((function(){r._checkSessionIFrame.start(n)}))}else i.Log.warn("SessionMonitor._start: No check session iframe found in the metadata")})).catch((function(t){i.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:",t.message)})))},t.prototype._stop=function t(){var e=this;if(this._sub=void 0,this._sid=void 0,this._checkSessionIFrame&&(i.Log.debug("SessionMonitor._stop"),this._checkSessionIFrame.stop()),this._settings.monitorAnonymousSession)var r=this._timer.setInterval((function(){e._timer.clearInterval(r),e._userManager.querySessionStatus().then((function(t){var r={session_state:t.session_state};t.sub&&t.sid&&(r.profile={sub:t.sub,sid:t.sid}),e._start(r)})).catch((function(t){i.Log.error("SessionMonitor: error from querySessionStatus:",t.message)}))}),1e3)},t.prototype._callback=function t(){var e=this;this._userManager.querySessionStatus().then((function(t){var r=!0;t?t.sub===e._sub?(r=!1,e._checkSessionIFrame.start(t.session_state),t.sid===e._sid?i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:",t.session_state):(i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:",t.session_state),e._userManager.events._raiseUserSessionChanged())):i.Log.debug("SessionMonitor._callback: Different subject signed into OP:",t.sub):i.Log.debug("SessionMonitor._callback: Subject no longer signed into OP"),r&&(e._sub?(i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event"),e._userManager.events._raiseUserSignedOut()):(i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event"),e._userManager.events._raiseUserSignedIn()))})).catch((function(t){e._sub&&(i.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event",t.message),e._userManager.events._raiseUserSignedOut())}))},n(t,[{key:"_settings",get:function t(){return this._userManager.settings}},{key:"_metadataService",get:function t(){return this._userManager.metadataService}},{key:"_client_id",get:function t(){return this._settings.client_id}},{key:"_checkSessionInterval",get:function t(){return this._settings.checkSessionInterval}},{key:"_stopCheckSessionOnError",get:function t(){return this._settings.stopCheckSessionOnError}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CheckSessionIFrame=void 0;var n=r(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.CheckSessionIFrame=function(){function t(e,r,n,o){var s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];i(this,t),this._callback=e,this._client_id=r,this._url=n,this._interval=o||2e3,this._stopOnError=s;var a=n.indexOf("/",n.indexOf("//")+2);this._frame_origin=n.substr(0,a),this._frame=window.document.createElement("iframe"),this._frame.style.visibility="hidden",this._frame.style.position="absolute",this._frame.style.display="none",this._frame.width=0,this._frame.height=0,this._frame.src=n}return t.prototype.load=function t(){var e=this;return new Promise((function(t){e._frame.onload=function(){t()},window.document.body.appendChild(e._frame),e._boundMessageEvent=e._message.bind(e),window.addEventListener("message",e._boundMessageEvent,!1)}))},t.prototype._message=function t(e){e.origin===this._frame_origin&&e.source===this._frame.contentWindow&&("error"===e.data?(n.Log.error("CheckSessionIFrame: error message from check session op iframe"),this._stopOnError&&this.stop()):"changed"===e.data?(n.Log.debug("CheckSessionIFrame: changed message from check session op iframe"),this.stop(),this._callback()):n.Log.debug("CheckSessionIFrame: "+e.data+" message from check session op iframe"))},t.prototype.start=function t(e){var r=this;if(this._session_state!==e){n.Log.debug("CheckSessionIFrame.start"),this.stop(),this._session_state=e;var i=function t(){r._frame.contentWindow.postMessage(r._client_id+" "+r._session_state,r._frame_origin)};i(),this._timer=window.setInterval(i,this._interval)}},t.prototype.stop=function t(){this._session_state=null,this._timer&&(n.Log.debug("CheckSessionIFrame.stop"),window.clearInterval(this._timer),this._timer=null)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenRevocationClient=void 0;var n=r(0),i=r(2),o=r(1);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a="access_token",u="refresh_token";e.TokenRevocationClient=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Global.XMLHttpRequest,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService;if(s(this,t),!e)throw n.Log.error("TokenRevocationClient.ctor: No settings provided"),new Error("No settings provided.");this._settings=e,this._XMLHttpRequestCtor=r,this._metadataService=new a(this._settings)}return t.prototype.revoke=function t(e,r){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"access_token";if(!e)throw n.Log.error("TokenRevocationClient.revoke: No token provided"),new Error("No token provided.");if(o!==a&&o!=u)throw n.Log.error("TokenRevocationClient.revoke: Invalid token type"),new Error("Invalid token type.");return this._metadataService.getRevocationEndpoint().then((function(t){if(t){n.Log.debug("TokenRevocationClient.revoke: Revoking "+o);var s=i._settings.client_id,a=i._settings.client_secret;return i._revoke(t,s,a,e,o)}if(r)throw n.Log.error("TokenRevocationClient.revoke: Revocation not supported"),new Error("Revocation not supported")}))},t.prototype._revoke=function t(e,r,i,o,s){var a=this;return new Promise((function(t,u){var c=new a._XMLHttpRequestCtor;c.open("POST",e),c.onload=function(){n.Log.debug("TokenRevocationClient.revoke: HTTP response received, status",c.status),200===c.status?t():u(Error(c.statusText+" ("+c.status+")"))},c.onerror=function(){n.Log.debug("TokenRevocationClient.revoke: Network Error."),u("Network Error")};var h="client_id="+encodeURIComponent(r);i&&(h+="&client_secret="+encodeURIComponent(i)),h+="&token_type_hint="+encodeURIComponent(s),h+="&token="+encodeURIComponent(o),c.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),c.send(h)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaPopupWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.CordovaPopupWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e})),this.features=e.popupWindowFeatures||"location=no,toolbar=no,zoom=no",this.target=e.popupWindowTarget||"_blank",this.redirect_uri=e.startUrl,i.Log.debug("CordovaPopupWindow.ctor: redirect_uri: "+this.redirect_uri)}return t.prototype._isInAppBrowserInstalled=function t(e){return["cordova-plugin-inappbrowser","cordova-plugin-inappbrowser.inappbrowser","org.apache.cordova.inappbrowser"].some((function(t){return e.hasOwnProperty(t)}))},t.prototype.navigate=function t(e){if(e&&e.url){if(!window.cordova)return this._error("cordova is undefined");var r=window.cordova.require("cordova/plugin_list").metadata;if(!1===this._isInAppBrowserInstalled(r))return this._error("InAppBrowser plugin not found");this._popup=cordova.InAppBrowser.open(e.url,this.target,this.features),this._popup?(i.Log.debug("CordovaPopupWindow.navigate: popup successfully created"),this._exitCallbackEvent=this._exitCallback.bind(this),this._loadStartCallbackEvent=this._loadStartCallback.bind(this),this._popup.addEventListener("exit",this._exitCallbackEvent,!1),this._popup.addEventListener("loadstart",this._loadStartCallbackEvent,!1)):this._error("Error opening popup window")}else this._error("No url provided");return this.promise},t.prototype._loadStartCallback=function t(e){0===e.url.indexOf(this.redirect_uri)&&this._success({url:e.url})},t.prototype._exitCallback=function t(e){this._error(e)},t.prototype._success=function t(e){this._cleanup(),i.Log.debug("CordovaPopupWindow: Successful response from cordova popup window"),this._resolve(e)},t.prototype._error=function t(e){this._cleanup(),i.Log.error(e),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup()},t.prototype._cleanup=function t(){this._popup&&(i.Log.debug("CordovaPopupWindow: cleaning up popup"),this._popup.removeEventListener("exit",this._exitCallbackEvent,!1),this._popup.removeEventListener("loadstart",this._loadStartCallbackEvent,!1),this._popup.close()),this._popup=null},n(t,[{key:"promise",get:function t(){return this._promise}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),i=r(10),o=r(5),s=r(6),a=r(37),u=r(38),c=r(16),h=r(2),l=r(48),f=r(49),g=r(19),d=r(20),p=r(18),v=r(1),y=r(15),m=r(50);e.default={Version:m.Version,Log:n.Log,OidcClient:i.OidcClient,OidcClientSettings:o.OidcClientSettings,WebStorageStateStore:s.WebStorageStateStore,InMemoryWebStorage:a.InMemoryWebStorage,UserManager:u.UserManager,AccessTokenEvents:c.AccessTokenEvents,MetadataService:h.MetadataService,CordovaPopupNavigator:l.CordovaPopupNavigator,CordovaIFrameNavigator:f.CordovaIFrameNavigator,CheckSessionIFrame:g.CheckSessionIFrame,TokenRevocationClient:d.TokenRevocationClient,SessionMonitor:p.SessionMonitor,Global:v.Global,User:y.User},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ClockService=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.getEpochTime=function t(){return Promise.resolve(Date.now()/1e3|0)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ResponseValidator=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(0),o=r(2),s=r(25),a=r(11),u=r(12),c=r(4);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var l=["nonce","at_hash","iat","nbf","exp","aud","iss","c_hash"];e.ResponseValidator=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.MetadataService,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.UserInfoService,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c.JoseUtil,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:a.TokenClient;if(h(this,t),!e)throw i.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator"),new Error("settings");this._settings=e,this._metadataService=new r(this._settings),this._userInfoService=new n(this._settings),this._joseUtil=u,this._tokenClient=new l(this._settings)}return t.prototype.validateSigninResponse=function t(e,r){var n=this;return i.Log.debug("ResponseValidator.validateSigninResponse"),this._processSigninParams(e,r).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: state processed"),n._validateTokens(e,t).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: tokens validated"),n._processClaims(e,t).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: claims processed"),t}))}))}))},t.prototype.validateSignoutResponse=function t(e,r){return e.id!==r.state?(i.Log.error("ResponseValidator.validateSignoutResponse: State does not match"),Promise.reject(new Error("State does not match"))):(i.Log.debug("ResponseValidator.validateSignoutResponse: state validated"),r.state=e.data,r.error?(i.Log.warn("ResponseValidator.validateSignoutResponse: Response was error",r.error),Promise.reject(new u.ErrorResponse(r))):Promise.resolve(r))},t.prototype._processSigninParams=function t(e,r){if(e.id!==r.state)return i.Log.error("ResponseValidator._processSigninParams: State does not match"),Promise.reject(new Error("State does not match"));if(!e.client_id)return i.Log.error("ResponseValidator._processSigninParams: No client_id on state"),Promise.reject(new Error("No client_id on state"));if(!e.authority)return i.Log.error("ResponseValidator._processSigninParams: No authority on state"),Promise.reject(new Error("No authority on state"));if(this._settings.authority){if(this._settings.authority&&this._settings.authority!==e.authority)return i.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state"),Promise.reject(new Error("authority mismatch on settings vs. signin state"))}else this._settings.authority=e.authority;if(this._settings.client_id){if(this._settings.client_id&&this._settings.client_id!==e.client_id)return i.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state"),Promise.reject(new Error("client_id mismatch on settings vs. signin state"))}else this._settings.client_id=e.client_id;return i.Log.debug("ResponseValidator._processSigninParams: state validated"),r.state=e.data,r.error?(i.Log.warn("ResponseValidator._processSigninParams: Response was error",r.error),Promise.reject(new u.ErrorResponse(r))):e.nonce&&!r.id_token?(i.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response"),Promise.reject(new Error("No id_token in response"))):!e.nonce&&r.id_token?(i.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response"),Promise.reject(new Error("Unexpected id_token in response"))):e.code_verifier&&!r.code?(i.Log.error("ResponseValidator._processSigninParams: Expecting code in response"),Promise.reject(new Error("No code in response"))):!e.code_verifier&&r.code?(i.Log.error("ResponseValidator._processSigninParams: Not expecting code in response"),Promise.reject(new Error("Unexpected code in response"))):(r.scope||(r.scope=e.scope),Promise.resolve(r))},t.prototype._processClaims=function t(e,r){var n=this;if(r.isOpenIdConnect){if(i.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims"),r.profile=this._filterProtocolClaims(r.profile),!0!==e.skipUserInfo&&this._settings.loadUserInfo&&r.access_token)return i.Log.debug("ResponseValidator._processClaims: loading user info"),this._userInfoService.getClaims(r.access_token).then((function(t){return i.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint"),t.sub!==r.profile.sub?(i.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token"),Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"))):(r.profile=n._mergeClaims(r.profile,t),i.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:",r.profile),r)}));i.Log.debug("ResponseValidator._processClaims: not loading user info")}else i.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");return Promise.resolve(r)},t.prototype._mergeClaims=function t(e,r){var i=Object.assign({},e);for(var o in r){var s=r[o];Array.isArray(s)||(s=[s]);for(var a=0;a<s.length;a++){var u=s[a];i[o]?Array.isArray(i[o])?i[o].indexOf(u)<0&&i[o].push(u):i[o]!==u&&("object"===(void 0===u?"undefined":n(u))&&this._settings.mergeClaims?i[o]=this._mergeClaims(i[o],u):i[o]=[i[o],u]):i[o]=u}}return i},t.prototype._filterProtocolClaims=function t(e){i.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:",e);var r=Object.assign({},e);return this._settings._filterProtocolClaims?(l.forEach((function(t){delete r[t]})),i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered",r)):i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered"),r},t.prototype._validateTokens=function t(e,r){return r.code?(i.Log.debug("ResponseValidator._validateTokens: Validating code"),this._processCode(e,r)):r.id_token?r.access_token?(i.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token"),this._validateIdTokenAndAccessToken(e,r)):(i.Log.debug("ResponseValidator._validateTokens: Validating id_token"),this._validateIdToken(e,r)):(i.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate"),Promise.resolve(r))},t.prototype._processCode=function t(e,r){var o=this,s={client_id:e.client_id,client_secret:e.client_secret,code:r.code,redirect_uri:e.redirect_uri,code_verifier:e.code_verifier};return e.extraTokenParams&&"object"===n(e.extraTokenParams)&&Object.assign(s,e.extraTokenParams),this._tokenClient.exchangeCode(s).then((function(t){for(var n in t)r[n]=t[n];return r.id_token?(i.Log.debug("ResponseValidator._processCode: token response successful, processing id_token"),o._validateIdTokenAttributes(e,r)):(i.Log.debug("ResponseValidator._processCode: token response successful, returning response"),r)}))},t.prototype._validateIdTokenAttributes=function t(e,r){var n=this;return this._metadataService.getIssuer().then((function(t){var o=e.client_id,s=n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ",s),n._settings.getEpochTime().then((function(a){return n._joseUtil.validateJwtAttributes(r.id_token,t,o,s,a).then((function(t){return e.nonce&&e.nonce!==t.nonce?(i.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token"),Promise.reject(new Error("Invalid nonce in id_token"))):t.sub?(r.profile=t,r):(i.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token"),Promise.reject(new Error("No sub present in id_token")))}))}))}))},t.prototype._validateIdTokenAndAccessToken=function t(e,r){var n=this;return this._validateIdToken(e,r).then((function(t){return n._validateAccessToken(t)}))},t.prototype._getSigningKeyForJwt=function t(e){var r=this;return this._metadataService.getSigningKeys().then((function(t){var n=e.header.kid;if(!t)return i.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata"),Promise.reject(new Error("No signing keys from metadata"));i.Log.debug("ResponseValidator._validateIdToken: Received signing keys");var o=void 0;if(n)o=t.filter((function(t){return t.kid===n}))[0];else{if((t=r._filterByAlg(t,e.header.alg)).length>1)return i.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata"),Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));o=t[0]}return Promise.resolve(o)}))},t.prototype._getSigningKeyForJwtWithSingleRetry=function t(e){var r=this;return this._getSigningKeyForJwt(e).then((function(t){return t?Promise.resolve(t):(r._metadataService.resetSigningKeys(),r._getSigningKeyForJwt(e))}))},t.prototype._validateIdToken=function t(e,r){var n=this;if(!e.nonce)return i.Log.error("ResponseValidator._validateIdToken: No nonce on state"),Promise.reject(new Error("No nonce on state"));var o=this._joseUtil.parseJwt(r.id_token);return o&&o.header&&o.payload?e.nonce!==o.payload.nonce?(i.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token"),Promise.reject(new Error("Invalid nonce in id_token"))):this._metadataService.getIssuer().then((function(t){return i.Log.debug("ResponseValidator._validateIdToken: Received issuer"),n._getSigningKeyForJwtWithSingleRetry(o).then((function(s){if(!s)return i.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys"),Promise.reject(new Error("No key matching kid or alg found in signing keys"));var a=e.client_id,u=n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ",u),n._joseUtil.validateJwt(r.id_token,s,t,a,u).then((function(){return i.Log.debug("ResponseValidator._validateIdToken: JWT validation successful"),o.payload.sub?(r.profile=o.payload,r):(i.Log.error("ResponseValidator._validateIdToken: No sub present in id_token"),Promise.reject(new Error("No sub present in id_token")))}))}))})):(i.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token",o),Promise.reject(new Error("Failed to parse id_token")))},t.prototype._filterByAlg=function t(e,r){var n=null;if(r.startsWith("RS"))n="RSA";else if(r.startsWith("PS"))n="PS";else{if(!r.startsWith("ES"))return i.Log.debug("ResponseValidator._filterByAlg: alg not supported: ",r),[];n="EC"}return i.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ",n),e=e.filter((function(t){return t.kty===n})),i.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ",n,e.length),e},t.prototype._validateAccessToken=function t(e){if(!e.profile)return i.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token"),Promise.reject(new Error("No profile loaded from id_token"));if(!e.profile.at_hash)return i.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token"),Promise.reject(new Error("No at_hash in id_token"));if(!e.id_token)return i.Log.error("ResponseValidator._validateAccessToken: No id_token"),Promise.reject(new Error("No id_token"));var r=this._joseUtil.parseJwt(e.id_token);if(!r||!r.header)return i.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token",r),Promise.reject(new Error("Failed to parse id_token"));var n=r.header.alg;if(!n||5!==n.length)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n),Promise.reject(new Error("Unsupported alg: "+n));var o=n.substr(2,3);if(!o)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n,o),Promise.reject(new Error("Unsupported alg: "+n));if(256!==(o=parseInt(o))&&384!==o&&512!==o)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n,o),Promise.reject(new Error("Unsupported alg: "+n));var s="sha"+o,a=this._joseUtil.hashString(e.access_token,s);if(!a)return i.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:",s),Promise.reject(new Error("Failed to validate at_hash"));var u=a.substr(0,a.length/2),c=this._joseUtil.hexToBase64Url(u);return c!==e.profile.at_hash?(i.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash",c,e.profile.at_hash),Promise.reject(new Error("Failed to validate at_hash"))):(i.Log.debug("ResponseValidator._validateAccessToken: success"),Promise.resolve(e))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserInfoService=void 0;var n=r(7),i=r(2),o=r(0),s=r(4);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.UserInfoService=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.JsonService,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:s.JoseUtil;if(a(this,t),!e)throw o.Log.error("UserInfoService.ctor: No settings passed"),new Error("settings");this._settings=e,this._jsonService=new r(void 0,void 0,this._getClaimsFromJwt.bind(this)),this._metadataService=new u(this._settings),this._joseUtil=c}return t.prototype.getClaims=function t(e){var r=this;return e?this._metadataService.getUserInfoEndpoint().then((function(t){return o.Log.debug("UserInfoService.getClaims: received userinfo url",t),r._jsonService.getJson(t,e).then((function(t){return o.Log.debug("UserInfoService.getClaims: claims received",t),t}))})):(o.Log.error("UserInfoService.getClaims: No token passed"),Promise.reject(new Error("A token is required")))},t.prototype._getClaimsFromJwt=function t(e){var r=this;try{var n=this._joseUtil.parseJwt(e.responseText);if(!n||!n.header||!n.payload)return o.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT",n),Promise.reject(new Error("Failed to parse id_token"));var i=n.header.kid,s=void 0;switch(this._settings.userInfoJwtIssuer){case"OP":s=this._metadataService.getIssuer();break;case"ANY":s=Promise.resolve(n.payload.iss);break;default:s=Promise.resolve(this._settings.userInfoJwtIssuer)}return s.then((function(t){return o.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:"+t),r._metadataService.getSigningKeys().then((function(s){if(!s)return o.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata"),Promise.reject(new Error("No signing keys from metadata"));o.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");var a=void 0;if(i)a=s.filter((function(t){return t.kid===i}))[0];else{if((s=r._filterByAlg(s,n.header.alg)).length>1)return o.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata"),Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));a=s[0]}if(!a)return o.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys"),Promise.reject(new Error("No key matching kid or alg found in signing keys"));var u=r._settings.client_id,c=r._settings.clockSkew;return o.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ",c),r._joseUtil.validateJwt(e.responseText,a,t,u,c,void 0,!0).then((function(){return o.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful"),n.payload}))}))}))}catch(t){return o.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response",t.message),void reject(t)}},t.prototype._filterByAlg=function t(e,r){var n=null;if(r.startsWith("RS"))n="RSA";else if(r.startsWith("PS"))n="PS";else{if(!r.startsWith("ES"))return o.Log.debug("UserInfoService._filterByAlg: alg not supported: ",r),[];n="EC"}return o.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ",n),e=e.filter((function(t){return t.kty===n})),o.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ",n,e.length),e},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AllowedSigningAlgs=e.b64tohex=e.hextob64u=e.crypto=e.X509=e.KeyUtil=e.jws=void 0;var n=r(27);e.jws=n.jws,e.KeyUtil=n.KEYUTIL,e.X509=n.X509,e.crypto=n.crypto,e.hextob64u=n.hextob64u,e.b64tohex=n.b64tohex,e.AllowedSigningAlgs=["RS256","RS384","RS512","PS256","PS384","PS512","ES256","ES384","ES512"]},function(t,e,r){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r,n,i,o,s,a,u,c,h,l,f,g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d={userAgent:!1},p={},v=v||(r=Math,i=(n={}).lib={},o=i.Base=function(){function t(){}return{extend:function e(r){t.prototype=this;var n=new t;return r&&n.mixIn(r),n.hasOwnProperty("init")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function t(){var e=this.extend();return e.init.apply(e,arguments),e},init:function t(){},mixIn:function t(e){for(var r in e)e.hasOwnProperty(r)&&(this[r]=e[r]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function t(){return this.init.prototype.extend(this)}}}(),s=i.WordArray=o.extend({init:function t(e,r){e=this.words=e||[],this.sigBytes=null!=r?r:4*e.length},toString:function t(e){return(e||u).stringify(this)},concat:function t(e){var r=this.words,n=e.words,i=this.sigBytes,o=e.sigBytes;if(this.clamp(),i%4)for(var s=0;s<o;s++){var a=n[s>>>2]>>>24-s%4*8&255;r[i+s>>>2]|=a<<24-(i+s)%4*8}else for(s=0;s<o;s+=4)r[i+s>>>2]=n[s>>>2];return this.sigBytes+=o,this},clamp:function t(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=r.ceil(n/4)},clone:function t(){var e=o.clone.call(this);return e.words=this.words.slice(0),e},random:function t(e){for(var n=[],i=0;i<e;i+=4)n.push(4294967296*r.random()|0);return new s.init(n,e)}}),a=n.enc={},u=a.Hex={stringify:function t(e){for(var r=e.words,n=e.sigBytes,i=[],o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;i.push((s>>>4).toString(16)),i.push((15&s).toString(16))}return i.join("")},parse:function t(e){for(var r=e.length,n=[],i=0;i<r;i+=2)n[i>>>3]|=parseInt(e.substr(i,2),16)<<24-i%8*4;return new s.init(n,r/2)}},c=a.Latin1={stringify:function t(e){for(var r=e.words,n=e.sigBytes,i=[],o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;i.push(String.fromCharCode(s))}return i.join("")},parse:function t(e){for(var r=e.length,n=[],i=0;i<r;i++)n[i>>>2]|=(255&e.charCodeAt(i))<<24-i%4*8;return new s.init(n,r)}},h=a.Utf8={stringify:function t(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function t(e){return c.parse(unescape(encodeURIComponent(e)))}},l=i.BufferedBlockAlgorithm=o.extend({reset:function t(){this._data=new s.init,this._nDataBytes=0},_append:function t(e){"string"==typeof e&&(e=h.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function t(e){var n=this._data,i=n.words,o=n.sigBytes,a=this.blockSize,u=o/(4*a),c=(u=e?r.ceil(u):r.max((0|u)-this._minBufferSize,0))*a,h=r.min(4*c,o);if(c){for(var l=0;l<c;l+=a)this._doProcessBlock(i,l);var f=i.splice(0,c);n.sigBytes-=h}return new s.init(f,h)},clone:function t(){var e=o.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),i.Hasher=l.extend({cfg:o.extend(),init:function t(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function t(){l.reset.call(this),this._doReset()},update:function t(e){return this._append(e),this._process(),this},finalize:function t(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function t(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function t(e){return function(t,r){return new f.HMAC.init(e,r).finalize(t)}}}),f=n.algo={},n);!function(t){var e,r=(e=v).lib,n=r.Base,i=r.WordArray;(e=e.x64={}).Word=n.extend({init:function t(e,r){this.high=e,this.low=r}}),e.WordArray=n.extend({init:function t(e,r){e=this.words=e||[],this.sigBytes=null!=r?r:8*e.length},toX32:function t(){for(var e=this.words,r=e.length,n=[],o=0;o<r;o++){var s=e[o];n.push(s.high),n.push(s.low)}return i.create(n,this.sigBytes)},clone:function t(){for(var e=n.clone.call(this),r=e.words=this.words.slice(0),i=r.length,o=0;o<i;o++)r[o]=r[o].clone();return e}})}(),function(){var t=v,e=t.lib.WordArray;t.enc.Base64={stringify:function t(e){var r=e.words,n=e.sigBytes,i=this._map;e.clamp(),e=[];for(var o=0;o<n;o+=3)for(var s=(r[o>>>2]>>>24-o%4*8&255)<<16|(r[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|r[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;4>a&&o+.75*a<n;a++)e.push(i.charAt(s>>>6*(3-a)&63));if(r=i.charAt(64))for(;e.length%4;)e.push(r);return e.join("")},parse:function t(r){var n=r.length,i=this._map;(o=i.charAt(64))&&(-1!=(o=r.indexOf(o))&&(n=o));for(var o=[],s=0,a=0;a<n;a++)if(a%4){var u=i.indexOf(r.charAt(a-1))<<a%4*2,c=i.indexOf(r.charAt(a))>>>6-a%4*2;o[s>>>2]|=(u|c)<<24-s%4*8,s++}return e.create(o,s)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),function(t){for(var e=v,r=(i=e.lib).WordArray,n=i.Hasher,i=e.algo,o=[],s=[],a=function t(e){return 4294967296*(e-(0|e))|0},u=2,c=0;64>c;){var h;t:{h=u;for(var l=t.sqrt(h),f=2;f<=l;f++)if(!(h%f)){h=!1;break t}h=!0}h&&(8>c&&(o[c]=a(t.pow(u,.5))),s[c]=a(t.pow(u,1/3)),c++),u++}var g=[];i=i.SHA256=n.extend({_doReset:function t(){this._hash=new r.init(o.slice(0))},_doProcessBlock:function t(e,r){for(var n=this._hash.words,i=n[0],o=n[1],a=n[2],u=n[3],c=n[4],h=n[5],l=n[6],f=n[7],d=0;64>d;d++){if(16>d)g[d]=0|e[r+d];else{var p=g[d-15],v=g[d-2];g[d]=((p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3)+g[d-7]+((v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10)+g[d-16]}p=f+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&h^~c&l)+s[d]+g[d],v=((i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22))+(i&o^i&a^o&a),f=l,l=h,h=c,c=u+p|0,u=a,a=o,o=i,i=p+v|0}n[0]=n[0]+i|0,n[1]=n[1]+o|0,n[2]=n[2]+a|0,n[3]=n[3]+u|0,n[4]=n[4]+c|0,n[5]=n[5]+h|0,n[6]=n[6]+l|0,n[7]=n[7]+f|0},_doFinalize:function e(){var r=this._data,n=r.words,i=8*this._nDataBytes,o=8*r.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=t.floor(i/4294967296),n[15+(o+64>>>9<<4)]=i,r.sigBytes=4*n.length,this._process(),this._hash},clone:function t(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA256=n._createHelper(i),e.HmacSHA256=n._createHmacHelper(i)}(Math),function(){function t(){return n.create.apply(n,arguments)}for(var e=v,r=e.lib.Hasher,n=(o=e.x64).Word,i=o.WordArray,o=e.algo,s=[t(1116352408,3609767458),t(1899447441,602891725),t(3049323471,3964484399),t(3921009573,2173295548),t(961987163,4081628472),t(1508970993,3053834265),t(2453635748,2937671579),t(2870763221,3664609560),t(3624381080,2734883394),t(310598401,1164996542),t(607225278,1323610764),t(1426881987,3590304994),t(1925078388,4068182383),t(2162078206,991336113),t(2614888103,633803317),t(3248222580,3479774868),t(3835390401,2666613458),t(4022224774,944711139),t(264347078,2341262773),t(604807628,2007800933),t(770255983,1495990901),t(1249150122,1856431235),t(1555081692,3175218132),t(1996064986,2198950837),t(2554220882,3999719339),t(2821834349,766784016),t(2952996808,2566594879),t(3210313671,3203337956),t(3336571891,1034457026),t(3584528711,2466948901),t(113926993,3758326383),t(338241895,168717936),t(666307205,1188179964),t(773529912,1546045734),t(1294757372,1522805485),t(1396182291,2643833823),t(1695183700,2343527390),t(1986661051,1014477480),t(2177026350,1206759142),t(2456956037,344077627),t(2730485921,1290863460),t(2820302411,3158454273),t(3259730800,3505952657),t(3345764771,106217008),t(3516065817,3606008344),t(3600352804,1432725776),t(4094571909,1467031594),t(275423344,851169720),t(430227734,3100823752),t(506948616,1363258195),t(659060556,3750685593),t(883997877,3785050280),t(958139571,3318307427),t(1322822218,3812723403),t(1537002063,2003034995),t(1747873779,3602036899),t(1955562222,1575990012),t(2024104815,1125592928),t(2227730452,2716904306),t(2361852424,442776044),t(2428436474,593698344),t(2756734187,3733110249),t(3204031479,2999351573),t(3329325298,3815920427),t(3391569614,3928383900),t(3515267271,566280711),t(3940187606,3454069534),t(4118630271,4000239992),t(116418474,1914138554),t(174292421,2731055270),t(289380356,3203993006),t(460393269,320620315),t(685471733,587496836),t(852142971,1086792851),t(1017036298,365543100),t(1126000580,2618297676),t(1288033470,3409855158),t(1501505948,4234509866),t(1607167915,987167468),t(1816402316,1246189591)],a=[],u=0;80>u;u++)a[u]=t();o=o.SHA512=r.extend({_doReset:function t(){this._hash=new i.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function t(e,r){for(var n=(f=this._hash.words)[0],i=f[1],o=f[2],u=f[3],c=f[4],h=f[5],l=f[6],f=f[7],g=n.high,d=n.low,p=i.high,v=i.low,y=o.high,m=o.low,_=u.high,S=u.low,b=c.high,w=c.low,F=h.high,E=h.low,x=l.high,A=l.low,k=f.high,P=f.low,C=g,T=d,R=p,I=v,D=y,L=m,N=_,U=S,B=b,O=w,j=F,M=E,H=x,V=A,K=k,q=P,J=0;80>J;J++){var W=a[J];if(16>J)var z=W.high=0|e[r+2*J],Y=W.low=0|e[r+2*J+1];else{z=((Y=(z=a[J-15]).high)>>>1|(G=z.low)<<31)^(Y>>>8|G<<24)^Y>>>7;var G=(G>>>1|Y<<31)^(G>>>8|Y<<24)^(G>>>7|Y<<25),X=((Y=(X=a[J-2]).high)>>>19|($=X.low)<<13)^(Y<<3|$>>>29)^Y>>>6,$=($>>>19|Y<<13)^($<<3|Y>>>29)^($>>>6|Y<<26),Q=(Y=a[J-7]).high,Z=(tt=a[J-16]).high,tt=tt.low;z=(z=(z=z+Q+((Y=G+Y.low)>>>0<G>>>0?1:0))+X+((Y=Y+$)>>>0<$>>>0?1:0))+Z+((Y=Y+tt)>>>0<tt>>>0?1:0);W.high=z,W.low=Y}Q=B&j^~B&H,tt=O&M^~O&V,W=C&R^C&D^R&D;var et=T&I^T&L^I&L,rt=(G=(C>>>28|T<<4)^(C<<30|T>>>2)^(C<<25|T>>>7),X=(T>>>28|C<<4)^(T<<30|C>>>2)^(T<<25|C>>>7),($=s[J]).high),nt=$.low;Z=K+((B>>>14|O<<18)^(B>>>18|O<<14)^(B<<23|O>>>9))+(($=q+((O>>>14|B<<18)^(O>>>18|B<<14)^(O<<23|B>>>9)))>>>0<q>>>0?1:0),K=H,q=V,H=j,V=M,j=B,M=O,B=N+(Z=(Z=(Z=Z+Q+(($=$+tt)>>>0<tt>>>0?1:0))+rt+(($=$+nt)>>>0<nt>>>0?1:0))+z+(($=$+Y)>>>0<Y>>>0?1:0))+((O=U+$|0)>>>0<U>>>0?1:0)|0,N=D,U=L,D=R,L=I,R=C,I=T,C=Z+(W=G+W+((Y=X+et)>>>0<X>>>0?1:0))+((T=$+Y|0)>>>0<$>>>0?1:0)|0}d=n.low=d+T,n.high=g+C+(d>>>0<T>>>0?1:0),v=i.low=v+I,i.high=p+R+(v>>>0<I>>>0?1:0),m=o.low=m+L,o.high=y+D+(m>>>0<L>>>0?1:0),S=u.low=S+U,u.high=_+N+(S>>>0<U>>>0?1:0),w=c.low=w+O,c.high=b+B+(w>>>0<O>>>0?1:0),E=h.low=E+M,h.high=F+j+(E>>>0<M>>>0?1:0),A=l.low=A+V,l.high=x+H+(A>>>0<V>>>0?1:0),P=f.low=P+q,f.high=k+K+(P>>>0<q>>>0?1:0)},_doFinalize:function t(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;return r[i>>>5]|=128<<24-i%32,r[30+(i+128>>>10<<5)]=Math.floor(n/4294967296),r[31+(i+128>>>10<<5)]=n,e.sigBytes=4*r.length,this._process(),this._hash.toX32()},clone:function t(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32}),e.SHA512=r._createHelper(o),e.HmacSHA512=r._createHmacHelper(o)}(),function(){var t=v,e=(i=t.x64).Word,r=i.WordArray,n=(i=t.algo).SHA512,i=i.SHA384=n.extend({_doReset:function t(){this._hash=new r.init([new e.init(3418070365,3238371032),new e.init(1654270250,914150663),new e.init(2438529370,812702999),new e.init(355462360,4144912697),new e.init(1731405415,4290775857),new e.init(2394180231,1750603025),new e.init(3675008525,1694076839),new e.init(1203062813,3204075428)])},_doFinalize:function t(){var e=n._doFinalize.call(this);return e.sigBytes-=16,e}});t.SHA384=n._createHelper(i),t.HmacSHA384=n._createHmacHelper(i)}();
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var y,m="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function _(t){var e,r,n="";for(e=0;e+3<=t.length;e+=3)r=parseInt(t.substring(e,e+3),16),n+=m.charAt(r>>6)+m.charAt(63&r);for(e+1==t.length?(r=parseInt(t.substring(e,e+1),16),n+=m.charAt(r<<2)):e+2==t.length&&(r=parseInt(t.substring(e,e+2),16),n+=m.charAt(r>>2)+m.charAt((3&r)<<4)),"=";(3&n.length)>0;)n+="=";return n}function S(t){var e,r,n,i="",o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e)(n=m.indexOf(t.charAt(e)))<0||(0==o?(i+=T(n>>2),r=3&n,o=1):1==o?(i+=T(r<<2|n>>4),r=15&n,o=2):2==o?(i+=T(r),i+=T(n>>2),r=3&n,o=3):(i+=T(r<<2|n>>4),i+=T(15&n),o=0));return 1==o&&(i+=T(r<<2)),i}function b(t){var e,r=S(t),n=new Array;for(e=0;2*e<r.length;++e)n[e]=parseInt(r.substring(2*e,2*e+2),16);return n}function w(t,e,r){null!=t&&("number"==typeof t?this.fromNumber(t,e,r):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}function F(){return new w(null)}"Microsoft Internet Explorer"==d.appName?(w.prototype.am=function E(t,e,r,n,i,o){for(var s=32767&e,a=e>>15;--o>=0;){var u=32767&this[t],c=this[t++]>>15,h=a*u+c*s;i=((u=s*u+((32767&h)<<15)+r[n]+(1073741823&i))>>>30)+(h>>>15)+a*c+(i>>>30),r[n++]=1073741823&u}return i},y=30):"Netscape"!=d.appName?(w.prototype.am=function x(t,e,r,n,i,o){for(;--o>=0;){var s=e*this[t++]+r[n]+i;i=Math.floor(s/67108864),r[n++]=67108863&s}return i},y=26):(w.prototype.am=function A(t,e,r,n,i,o){for(var s=16383&e,a=e>>14;--o>=0;){var u=16383&this[t],c=this[t++]>>14,h=a*u+c*s;i=((u=s*u+((16383&h)<<14)+r[n]+i)>>28)+(h>>14)+a*c,r[n++]=268435455&u}return i},y=28),w.prototype.DB=y,w.prototype.DM=(1<<y)-1,w.prototype.DV=1<<y;w.prototype.FV=Math.pow(2,52),w.prototype.F1=52-y,w.prototype.F2=2*y-52;var k,P,C=new Array;for(k="0".charCodeAt(0),P=0;P<=9;++P)C[k++]=P;for(k="a".charCodeAt(0),P=10;P<36;++P)C[k++]=P;for(k="A".charCodeAt(0),P=10;P<36;++P)C[k++]=P;function T(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function R(t,e){var r=C[t.charCodeAt(e)];return null==r?-1:r}function I(t){var e=F();return e.fromInt(t),e}function D(t){var e,r=1;return 0!=(e=t>>>16)&&(t=e,r+=16),0!=(e=t>>8)&&(t=e,r+=8),0!=(e=t>>4)&&(t=e,r+=4),0!=(e=t>>2)&&(t=e,r+=2),0!=(e=t>>1)&&(t=e,r+=1),r}function L(t){this.m=t}function N(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function U(t,e){return t&e}function B(t,e){return t|e}function O(t,e){return t^e}function j(t,e){return t&~e}function M(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function H(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function V(){}function K(t){return t}function q(t){this.r2=F(),this.q3=F(),w.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}L.prototype.convert=function J(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},L.prototype.revert=function W(t){return t},L.prototype.reduce=function z(t){t.divRemTo(this.m,null,t)},L.prototype.mulTo=function Y(t,e,r){t.multiplyTo(e,r),this.reduce(r)},L.prototype.sqrTo=function G(t,e){t.squareTo(e),this.reduce(e)},N.prototype.convert=function X(t){var e=F();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(w.ZERO)>0&&this.m.subTo(e,e),e},N.prototype.revert=function $(t){var e=F();return t.copyTo(e),this.reduce(e),e},N.prototype.reduce=function Q(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=32767&t[e],n=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[r=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},N.prototype.mulTo=function Z(t,e,r){t.multiplyTo(e,r),this.reduce(r)},N.prototype.sqrTo=function tt(t,e){t.squareTo(e),this.reduce(e)},w.prototype.copyTo=function et(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},w.prototype.fromInt=function rt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},w.prototype.fromString=function nt(t,e){var r;if(16==e)r=4;else if(8==e)r=3;else if(256==e)r=8;else if(2==e)r=1;else if(32==e)r=5;else{if(4!=e)return void this.fromRadix(t,e);r=2}this.t=0,this.s=0;for(var n=t.length,i=!1,o=0;--n>=0;){var s=8==r?255&t[n]:R(t,n);s<0?"-"==t.charAt(n)&&(i=!0):(i=!1,0==o?this[this.t++]=s:o+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),i&&w.ZERO.subTo(this,this)},w.prototype.clamp=function it(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},w.prototype.dlShiftTo=function ot(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s},w.prototype.drShiftTo=function st(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s},w.prototype.lShiftTo=function at(t,e){var r,n=t%this.DB,i=this.DB-n,o=(1<<i)-1,s=Math.floor(t/this.DB),a=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)e[r+s+1]=this[r]>>i|a,a=(this[r]&o)<<n;for(r=s-1;r>=0;--r)e[r]=0;e[s]=a,e.t=this.t+s+1,e.s=this.s,e.clamp()},w.prototype.rShiftTo=function ut(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t)e.t=0;else{var n=t%this.DB,i=this.DB-n,o=(1<<n)-1;e[0]=this[r]>>n;for(var s=r+1;s<this.t;++s)e[s-r-1]|=(this[s]&o)<<i,e[s-r]=this[s]>>n;n>0&&(e[this.t-r-1]|=(this.s&o)<<i),e.t=this.t-r,e.clamp()}},w.prototype.subTo=function ct(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]-t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n-=t[r],e[r++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[r++]=this.DV+n:n>0&&(e[r++]=n),e.t=r,e.clamp()},w.prototype.multiplyTo=function ht(t,e){var r=this.abs(),n=t.abs(),i=r.t;for(e.t=i+n.t;--i>=0;)e[i]=0;for(i=0;i<n.t;++i)e[i+r.t]=r.am(0,n[i],e,i,0,r.t);e.s=0,e.clamp(),this.s!=t.s&&w.ZERO.subTo(e,e)},w.prototype.squareTo=function lt(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var n=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,n,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp()},w.prototype.divRemTo=function ft(t,e,r){var n=t.abs();if(!(n.t<=0)){var i=this.abs();if(i.t<n.t)return null!=e&&e.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=F());var o=F(),s=this.s,a=t.s,u=this.DB-D(n[n.t-1]);u>0?(n.lShiftTo(u,o),i.lShiftTo(u,r)):(n.copyTo(o),i.copyTo(r));var c=o.t,h=o[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),f=this.FV/l,g=(1<<this.F1)/l,d=1<<this.F2,p=r.t,v=p-c,y=null==e?F():e;for(o.dlShiftTo(v,y),r.compareTo(y)>=0&&(r[r.t++]=1,r.subTo(y,r)),w.ONE.dlShiftTo(c,y),y.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var m=r[--p]==h?this.DM:Math.floor(r[p]*f+(r[p-1]+d)*g);if((r[p]+=o.am(0,m,r,v,0,c))<m)for(o.dlShiftTo(v,y),r.subTo(y,r);r[p]<--m;)r.subTo(y,r)}null!=e&&(r.drShiftTo(c,e),s!=a&&w.ZERO.subTo(e,e)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),s<0&&w.ZERO.subTo(r,r)}}},w.prototype.invDigit=function gt(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},w.prototype.isEven=function dt(){return 0==(this.t>0?1&this[0]:this.s)},w.prototype.exp=function pt(t,e){if(t>4294967295||t<1)return w.ONE;var r=F(),n=F(),i=e.convert(this),o=D(t)-1;for(i.copyTo(r);--o>=0;)if(e.sqrTo(r,n),(t&1<<o)>0)e.mulTo(n,i,r);else{var s=r;r=n,n=s}return e.revert(r)},w.prototype.toString=function vt(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var r,n=(1<<e)-1,i=!1,o="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(r=this[s]>>a)>0&&(i=!0,o=T(r));s>=0;)a<e?(r=(this[s]&(1<<a)-1)<<e-a,r|=this[--s]>>(a+=this.DB-e)):(r=this[s]>>(a-=e)&n,a<=0&&(a+=this.DB,--s)),r>0&&(i=!0),i&&(o+=T(r));return i?o:"0"},w.prototype.negate=function yt(){var t=F();return w.ZERO.subTo(this,t),t},w.prototype.abs=function mt(){return this.s<0?this.negate():this},w.prototype.compareTo=function _t(t){var e=this.s-t.s;if(0!=e)return e;var r=this.t;if(0!=(e=r-t.t))return this.s<0?-e:e;for(;--r>=0;)if(0!=(e=this[r]-t[r]))return e;return 0},w.prototype.bitLength=function St(){return this.t<=0?0:this.DB*(this.t-1)+D(this[this.t-1]^this.s&this.DM)},w.prototype.mod=function bt(t){var e=F();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(w.ZERO)>0&&t.subTo(e,e),e},w.prototype.modPowInt=function wt(t,e){var r;return r=t<256||e.isEven()?new L(e):new N(e),this.exp(t,r)},w.ZERO=I(0),w.ONE=I(1),V.prototype.convert=K,V.prototype.revert=K,V.prototype.mulTo=function Ft(t,e,r){t.multiplyTo(e,r)},V.prototype.sqrTo=function Et(t,e){t.squareTo(e)},q.prototype.convert=function xt(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=F();return t.copyTo(e),this.reduce(e),e},q.prototype.revert=function At(t){return t},q.prototype.reduce=function kt(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},q.prototype.mulTo=function Pt(t,e,r){t.multiplyTo(e,r),this.reduce(r)},q.prototype.sqrTo=function Ct(t,e){t.squareTo(e),this.reduce(e)};var Tt=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],Rt=(1<<26)/Tt[Tt.length-1];
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function It(){this.i=0,this.j=0,this.S=new Array}w.prototype.chunkSize=function Dt(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},w.prototype.toRadix=function Lt(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),r=Math.pow(t,e),n=I(r),i=F(),o=F(),s="";for(this.divRemTo(n,i,o);i.signum()>0;)s=(r+o.intValue()).toString(t).substr(1)+s,i.divRemTo(n,i,o);return o.intValue().toString(t)+s},w.prototype.fromRadix=function Nt(t,e){this.fromInt(0),null==e&&(e=10);for(var r=this.chunkSize(e),n=Math.pow(e,r),i=!1,o=0,s=0,a=0;a<t.length;++a){var u=R(t,a);u<0?"-"==t.charAt(a)&&0==this.signum()&&(i=!0):(s=e*s+u,++o>=r&&(this.dMultiply(n),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),i&&w.ZERO.subTo(this,this)},w.prototype.fromNumber=function Ut(t,e,r){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(w.ONE.shiftLeft(t-1),B,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(w.ONE.shiftLeft(t-1),this);else{var n=new Array,i=7&t;n.length=1+(t>>3),e.nextBytes(n),i>0?n[0]&=(1<<i)-1:n[0]=0,this.fromString(n,256)}},w.prototype.bitwiseTo=function Bt(t,e,r){var n,i,o=Math.min(t.t,this.t);for(n=0;n<o;++n)r[n]=e(this[n],t[n]);if(t.t<this.t){for(i=t.s&this.DM,n=o;n<this.t;++n)r[n]=e(this[n],i);r.t=this.t}else{for(i=this.s&this.DM,n=o;n<t.t;++n)r[n]=e(i,t[n]);r.t=t.t}r.s=e(this.s,t.s),r.clamp()},w.prototype.changeBit=function Ot(t,e){var r=w.ONE.shiftLeft(t);return this.bitwiseTo(r,e,r),r},w.prototype.addTo=function jt(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]+t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n+=t[r],e[r++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[r++]=n:n<-1&&(e[r++]=this.DV+n),e.t=r,e.clamp()},w.prototype.dMultiply=function Mt(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},w.prototype.dAddOffset=function Ht(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},w.prototype.multiplyLowerTo=function Vt(t,e,r){var n,i=Math.min(this.t+t.t,e);for(r.s=0,r.t=i;i>0;)r[--i]=0;for(n=r.t-this.t;i<n;++i)r[i+this.t]=this.am(0,t[i],r,i,0,this.t);for(n=Math.min(t.t,e);i<n;++i)this.am(0,t[i],r,i,0,e-i);r.clamp()},w.prototype.multiplyUpperTo=function Kt(t,e,r){--e;var n=r.t=this.t+t.t-e;for(r.s=0;--n>=0;)r[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)r[this.t+n-e]=this.am(e-n,t[n],r,0,0,this.t+n-e);r.clamp(),r.drShiftTo(1,r)},w.prototype.modInt=function qt(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(0==e)r=this[0]%t;else for(var n=this.t-1;n>=0;--n)r=(e*r+this[n])%t;return r},w.prototype.millerRabin=function Jt(t){var e=this.subtract(w.ONE),r=e.getLowestSetBit();if(r<=0)return!1;var n=e.shiftRight(r);(t=t+1>>1)>Tt.length&&(t=Tt.length);for(var i=F(),o=0;o<t;++o){i.fromInt(Tt[Math.floor(Math.random()*Tt.length)]);var s=i.modPow(n,this);if(0!=s.compareTo(w.ONE)&&0!=s.compareTo(e)){for(var a=1;a++<r&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(w.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},w.prototype.clone=
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Wt(){var t=F();return this.copyTo(t),t},w.prototype.intValue=function zt(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},w.prototype.byteValue=function Yt(){return 0==this.t?this.s:this[0]<<24>>24},w.prototype.shortValue=function Gt(){return 0==this.t?this.s:this[0]<<16>>16},w.prototype.signum=function Xt(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},w.prototype.toByteArray=function $t(){var t=this.t,e=new Array;e[0]=this.s;var r,n=this.DB-t*this.DB%8,i=0;if(t-- >0)for(n<this.DB&&(r=this[t]>>n)!=(this.s&this.DM)>>n&&(e[i++]=r|this.s<<this.DB-n);t>=0;)n<8?(r=(this[t]&(1<<n)-1)<<8-n,r|=this[--t]>>(n+=this.DB-8)):(r=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&r)&&(r|=-256),0==i&&(128&this.s)!=(128&r)&&++i,(i>0||r!=this.s)&&(e[i++]=r);return e},w.prototype.equals=function Qt(t){return 0==this.compareTo(t)},w.prototype.min=function Zt(t){return this.compareTo(t)<0?this:t},w.prototype.max=function te(t){return this.compareTo(t)>0?this:t},w.prototype.and=function ee(t){var e=F();return this.bitwiseTo(t,U,e),e},w.prototype.or=function re(t){var e=F();return this.bitwiseTo(t,B,e),e},w.prototype.xor=function ne(t){var e=F();return this.bitwiseTo(t,O,e),e},w.prototype.andNot=function ie(t){var e=F();return this.bitwiseTo(t,j,e),e},w.prototype.not=function oe(){for(var t=F(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},w.prototype.shiftLeft=function se(t){var e=F();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},w.prototype.shiftRight=function ae(t){var e=F();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},w.prototype.getLowestSetBit=function ue(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+M(this[t]);return this.s<0?this.t*this.DB:-1},w.prototype.bitCount=function ce(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=H(this[r]^e);return t},w.prototype.testBit=function he(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},w.prototype.setBit=function le(t){return this.changeBit(t,B)},w.prototype.clearBit=function fe(t){return this.changeBit(t,j)},w.prototype.flipBit=function ge(t){return this.changeBit(t,O)},w.prototype.add=function de(t){var e=F();return this.addTo(t,e),e},w.prototype.subtract=function pe(t){var e=F();return this.subTo(t,e),e},w.prototype.multiply=function ve(t){var e=F();return this.multiplyTo(t,e),e},w.prototype.divide=function ye(t){var e=F();return this.divRemTo(t,e,null),e},w.prototype.remainder=function me(t){var e=F();return this.divRemTo(t,null,e),e},w.prototype.divideAndRemainder=function _e(t){var e=F(),r=F();return this.divRemTo(t,e,r),new Array(e,r)},w.prototype.modPow=function Se(t,e){var r,n,i=t.bitLength(),o=I(1);if(i<=0)return o;r=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new L(e):e.isEven()?new q(e):new N(e);var s=new Array,a=3,u=r-1,c=(1<<r)-1;if(s[1]=n.convert(this),r>1){var h=F();for(n.sqrTo(s[1],h);a<=c;)s[a]=F(),n.mulTo(h,s[a-2],s[a]),a+=2}var l,f,g=t.t-1,d=!0,p=F();for(i=D(t[g])-1;g>=0;){for(i>=u?l=t[g]>>i-u&c:(l=(t[g]&(1<<i+1)-1)<<u-i,g>0&&(l|=t[g-1]>>this.DB+i-u)),a=r;0==(1&l);)l>>=1,--a;if((i-=a)<0&&(i+=this.DB,--g),d)s[l].copyTo(o),d=!1;else{for(;a>1;)n.sqrTo(o,p),n.sqrTo(p,o),a-=2;a>0?n.sqrTo(o,p):(f=o,o=p,p=f),n.mulTo(p,s[l],o)}for(;g>=0&&0==(t[g]&1<<i);)n.sqrTo(o,p),f=o,o=p,p=f,--i<0&&(i=this.DB-1,--g)}return n.revert(o)},w.prototype.modInverse=function be(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return w.ZERO;for(var r=t.clone(),n=this.clone(),i=I(1),o=I(0),s=I(0),a=I(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),e?(i.isEven()&&o.isEven()||(i.addTo(this,i),o.subTo(t,o)),i.rShiftTo(1,i)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);r.compareTo(n)>=0?(r.subTo(n,r),e&&i.subTo(s,i),o.subTo(a,o)):(n.subTo(r,n),e&&s.subTo(i,s),a.subTo(o,a))}return 0!=n.compareTo(w.ONE)?w.ZERO:a.compareTo(t)>=0?a.subtract(t):a.signum()<0?(a.addTo(t,a),a.signum()<0?a.add(t):a):a},w.prototype.pow=function we(t){return this.exp(t,new V)},w.prototype.gcd=function Fe(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var n=e;e=r,r=n}var i=e.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),r.rShiftTo(o,r));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return o>0&&r.lShiftTo(o,r),r},w.prototype.isProbablePrime=function Ee(t){var e,r=this.abs();if(1==r.t&&r[0]<=Tt[Tt.length-1]){for(e=0;e<Tt.length;++e)if(r[0]==Tt[e])return!0;return!1}if(r.isEven())return!1;for(e=1;e<Tt.length;){for(var n=Tt[e],i=e+1;i<Tt.length&&n<Rt;)n*=Tt[i++];for(n=r.modInt(n);e<i;)if(n%Tt[e++]==0)return!1}return r.millerRabin(t)},w.prototype.square=function xe(){var t=F();return this.squareTo(t),t},It.prototype.init=function Ae(t){var e,r,n;for(e=0;e<256;++e)this.S[e]=e;for(r=0,e=0;e<256;++e)r=r+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[r],this.S[r]=n;this.i=0,this.j=0},It.prototype.next=function ke(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]};var Pe,Ce,Te;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */function Re(){!function t(e){Ce[Te++]^=255&e,Ce[Te++]^=e>>8&255,Ce[Te++]^=e>>16&255,Ce[Te++]^=e>>24&255,Te>=256&&(Te-=256)}((new Date).getTime())}if(null==Ce){var Ie;if(Ce=new Array,Te=0,void 0!==p&&(void 0!==p.crypto||void 0!==p.msCrypto)){var De=p.crypto||p.msCrypto;if(De.getRandomValues){var Le=new Uint8Array(32);for(De.getRandomValues(Le),Ie=0;Ie<32;++Ie)Ce[Te++]=Le[Ie]}else if("Netscape"==d.appName&&d.appVersion<"5"){var Ne=p.crypto.random(32);for(Ie=0;Ie<Ne.length;++Ie)Ce[Te++]=255&Ne.charCodeAt(Ie)}}for(;Te<256;)Ie=Math.floor(65536*Math.random()),Ce[Te++]=Ie>>>8,Ce[Te++]=255&Ie;Te=0,Re()}function Ue(){if(null==Pe){for(Re(),(Pe=function t(){return new It}()).init(Ce),Te=0;Te<Ce.length;++Te)Ce[Te]=0;Te=0}return Pe.next()}function Be(){}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Oe(t,e){return new w(t,e)}function je(t,e,r){for(var n="",i=0;n.length<e;)n+=r(String.fromCharCode.apply(String,t.concat([(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i]))),i+=1;return n}function Me(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function He(t,e){this.x=e,this.q=t}function Ve(t,e,r,n){this.curve=t,this.x=e,this.y=r,this.z=null==n?w.ONE:n,this.zinv=null}function Ke(t,e,r){this.q=t,this.a=this.fromBigInteger(e),this.b=this.fromBigInteger(r),this.infinity=new Ve(this,null,null)}Be.prototype.nextBytes=function qe(t){var e;for(e=0;e<t.length;++e)t[e]=Ue()},Me.prototype.doPublic=function Je(t){return t.modPowInt(this.e,this.n)},Me.prototype.setPublic=function We(t,e){if(this.isPublic=!0,this.isPrivate=!1,"string"!=typeof t)this.n=t,this.e=e;else{if(!(null!=t&&null!=e&&t.length>0&&e.length>0))throw"Invalid RSA public key";this.n=Oe(t,16),this.e=parseInt(e,16)}},Me.prototype.encrypt=function ze(t){var e=function r(t,e){if(e<t.length+11)throw"Message too long for RSA";for(var r=new Array,n=t.length-1;n>=0&&e>0;){var i=t.charCodeAt(n--);i<128?r[--e]=i:i>127&&i<2048?(r[--e]=63&i|128,r[--e]=i>>6|192):(r[--e]=63&i|128,r[--e]=i>>6&63|128,r[--e]=i>>12|224)}r[--e]=0;for(var o=new Be,s=new Array;e>2;){for(s[0]=0;0==s[0];)o.nextBytes(s);r[--e]=s[0]}return r[--e]=2,r[--e]=0,new w(r)}(t,this.n.bitLength()+7>>3);if(null==e)return null;var n=this.doPublic(e);if(null==n)return null;var i=n.toString(16);return 0==(1&i.length)?i:"0"+i},Me.prototype.encryptOAEP=function Ye(t,e,r){var n=function i(t,e,r,n){var i=Sr.crypto.MessageDigest,o=Sr.crypto.Util,s=null;if(r||(r="sha1"),"string"==typeof r&&(s=i.getCanonicalAlgName(r),n=i.getHashLength(s),r=function t(e){return Lr(o.hashHex(Nr(e),s))}),t.length+2*n+2>e)throw"Message too long for RSA";var a,u="";for(a=0;a<e-t.length-2*n-2;a+=1)u+="\0";var c=r("")+u+""+t,h=new Array(n);(new Be).nextBytes(h);var l=je(h,c.length,r),f=[];for(a=0;a<c.length;a+=1)f[a]=c.charCodeAt(a)^l.charCodeAt(a);var g=je(f,h.length,r),d=[0];for(a=0;a<h.length;a+=1)d[a+1]=h[a]^g.charCodeAt(a);return new w(d.concat(f))}(t,this.n.bitLength()+7>>3,e,r);if(null==n)return null;var o=this.doPublic(n);if(null==o)return null;var s=o.toString(16);return 0==(1&s.length)?s:"0"+s},Me.prototype.type="RSA",He.prototype.equals=function Ge(t){return t==this||this.q.equals(t.q)&&this.x.equals(t.x)},He.prototype.toBigInteger=function Xe(){return this.x},He.prototype.negate=function $e(){return new He(this.q,this.x.negate().mod(this.q))},He.prototype.add=function Qe(t){return new He(this.q,this.x.add(t.toBigInteger()).mod(this.q))},He.prototype.subtract=function Ze(t){return new He(this.q,this.x.subtract(t.toBigInteger()).mod(this.q))},He.prototype.multiply=function tr(t){return new He(this.q,this.x.multiply(t.toBigInteger()).mod(this.q))},He.prototype.square=function er(){return new He(this.q,this.x.square().mod(this.q))},He.prototype.divide=function rr(t){return new He(this.q,this.x.multiply(t.toBigInteger().modInverse(this.q)).mod(this.q))},Ve.prototype.getX=function nr(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))},Ve.prototype.getY=function ir(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))},Ve.prototype.equals=function or(t){return t==this||(this.isInfinity()?t.isInfinity():t.isInfinity()?this.isInfinity():!!t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(w.ZERO)&&t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(w.ZERO))},Ve.prototype.isInfinity=function sr(){return null==this.x&&null==this.y||this.z.equals(w.ZERO)&&!this.y.toBigInteger().equals(w.ZERO)},Ve.prototype.negate=function ar(){return new Ve(this.curve,this.x,this.y.negate(),this.z)},Ve.prototype.add=function ur(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q),r=t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q);if(w.ZERO.equals(r))return w.ZERO.equals(e)?this.twice():this.curve.getInfinity();var n=new w("3"),i=this.x.toBigInteger(),o=this.y.toBigInteger(),s=(t.x.toBigInteger(),t.y.toBigInteger(),r.square()),a=s.multiply(r),u=i.multiply(s),c=e.square().multiply(this.z),h=c.subtract(u.shiftLeft(1)).multiply(t.z).subtract(a).multiply(r).mod(this.curve.q),l=u.multiply(n).multiply(e).subtract(o.multiply(a)).subtract(c.multiply(e)).multiply(t.z).add(e.multiply(a)).mod(this.curve.q),f=a.multiply(this.z).multiply(t.z).mod(this.curve.q);return new Ve(this.curve,this.curve.fromBigInteger(h),this.curve.fromBigInteger(l),f)},Ve.prototype.twice=function cr(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var t=new w("3"),e=this.x.toBigInteger(),r=this.y.toBigInteger(),n=r.multiply(this.z),i=n.multiply(r).mod(this.curve.q),o=this.curve.a.toBigInteger(),s=e.square().multiply(t);w.ZERO.equals(o)||(s=s.add(this.z.square().multiply(o)));var a=(s=s.mod(this.curve.q)).square().subtract(e.shiftLeft(3).multiply(i)).shiftLeft(1).multiply(n).mod(this.curve.q),u=s.multiply(t).multiply(e).subtract(i.shiftLeft(1)).shiftLeft(2).multiply(i).subtract(s.square().multiply(s)).mod(this.curve.q),c=n.square().multiply(n).shiftLeft(3).mod(this.curve.q);return new Ve(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(u),c)},Ve.prototype.multiply=function hr(t){if(this.isInfinity())return this;if(0==t.signum())return this.curve.getInfinity();var e,r=t,n=r.multiply(new w("3")),i=this.negate(),o=this,s=this.curve.q.subtract(t),a=s.multiply(new w("3")),u=new Ve(this.curve,this.x,this.y),c=u.negate();for(e=n.bitLength()-2;e>0;--e){o=o.twice();var h=n.testBit(e);h!=r.testBit(e)&&(o=o.add(h?this:i))}for(e=a.bitLength()-2;e>0;--e){u=u.twice();var l=a.testBit(e);l!=s.testBit(e)&&(u=u.add(l?u:c))}return o},Ve.prototype.multiplyTwo=function lr(t,e,r){var n;n=t.bitLength()>r.bitLength()?t.bitLength()-1:r.bitLength()-1;for(var i=this.curve.getInfinity(),o=this.add(e);n>=0;)i=i.twice(),t.testBit(n)?i=r.testBit(n)?i.add(o):i.add(this):r.testBit(n)&&(i=i.add(e)),--n;return i},Ke.prototype.getQ=function fr(){return this.q},Ke.prototype.getA=function gr(){return this.a},Ke.prototype.getB=function dr(){return this.b},Ke.prototype.equals=function pr(t){return t==this||this.q.equals(t.q)&&this.a.equals(t.a)&&this.b.equals(t.b)},Ke.prototype.getInfinity=function vr(){return this.infinity},Ke.prototype.fromBigInteger=function yr(t){return new He(this.q,t)},Ke.prototype.decodePointHex=function mr(t){switch(parseInt(t.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var e=(t.length-2)/2,r=t.substr(2,e),n=t.substr(e+2,e);return new Ve(this,this.fromBigInteger(new w(r,16)),this.fromBigInteger(new w(n,16)));default:return null}},
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
He.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)},Ve.prototype.getEncoded=function(t){var e=function t(e,r){var n=e.toByteArrayUnsigned();if(r<n.length)n=n.slice(n.length-r);else for(;r>n.length;)n.unshift(0);return n},r=this.getX().toBigInteger(),n=this.getY().toBigInteger(),i=e(r,32);return t?n.isEven()?i.unshift(2):i.unshift(3):(i.unshift(4),i=i.concat(e(n,32))),i},Ve.decodeFrom=function(t,e){e[0];var r=e.length-1,n=e.slice(1,1+r/2),i=e.slice(1+r/2,1+r);n.unshift(0),i.unshift(0);var o=new w(n),s=new w(i);return new Ve(t,t.fromBigInteger(o),t.fromBigInteger(s))},Ve.decodeFromHex=function(t,e){e.substr(0,2);var r=e.length-2,n=e.substr(2,r/2),i=e.substr(2+r/2,r/2),o=new w(n,16),s=new w(i,16);return new Ve(t,t.fromBigInteger(o),t.fromBigInteger(s))},Ve.prototype.add2D=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;if(this.x.equals(t.x))return this.y.equals(t.y)?this.twice():this.curve.getInfinity();var e=t.x.subtract(this.x),r=t.y.subtract(this.y).divide(e),n=r.square().subtract(this.x).subtract(t.x),i=r.multiply(this.x.subtract(n)).subtract(this.y);return new Ve(this.curve,n,i)},Ve.prototype.twice2D=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var t=this.curve.fromBigInteger(w.valueOf(2)),e=this.curve.fromBigInteger(w.valueOf(3)),r=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(t)),n=r.square().subtract(this.x.multiply(t)),i=r.multiply(this.x.subtract(n)).subtract(this.y);return new Ve(this.curve,n,i)},Ve.prototype.multiply2D=function(t){if(this.isInfinity())return this;if(0==t.signum())return this.curve.getInfinity();var e,r=t,n=r.multiply(new w("3")),i=this.negate(),o=this;for(e=n.bitLength()-2;e>0;--e){o=o.twice();var s=n.testBit(e);s!=r.testBit(e)&&(o=o.add2D(s?this:i))}return o},Ve.prototype.isOnCurve=function(){var t=this.getX().toBigInteger(),e=this.getY().toBigInteger(),r=this.curve.getA().toBigInteger(),n=this.curve.getB().toBigInteger(),i=this.curve.getQ(),o=e.multiply(e).mod(i),s=t.multiply(t).multiply(t).add(r.multiply(t)).add(n).mod(i);return o.equals(s)},Ve.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"},Ve.prototype.validate=function(){var t=this.curve.getQ();if(this.isInfinity())throw new Error("Point is at infinity.");var e=this.getX().toBigInteger(),r=this.getY().toBigInteger();if(e.compareTo(w.ONE)<0||e.compareTo(t.subtract(w.ONE))>0)throw new Error("x coordinate out of bounds");if(r.compareTo(w.ONE)<0||r.compareTo(t.subtract(w.ONE))>0)throw new Error("y coordinate out of bounds");if(!this.isOnCurve())throw new Error("Point is not on the curve.");if(this.multiply(t).isInfinity())throw new Error("Point is not a scalar multiple of G.");return!0};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var _r=function(){var t=new RegExp('(?:false|true|null|[\\{\\}\\[\\]]|(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)|(?:"(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))*"))',"g"),e=new RegExp("\\\\(?:([^u])|u(.{4}))","g"),r={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function n(t,e,n){return e?r[e]:String.fromCharCode(parseInt(n,16))}var i=new String(""),o=Object.hasOwnProperty;return function(r,s){var a,u,c=r.match(t),h=c[0],l=!1;"{"===h?a={}:"["===h?a=[]:(a=[],l=!0);for(var f=[a],d=1-l,p=c.length;d<p;++d){var v;switch((h=c[d]).charCodeAt(0)){default:(v=f[0])[u||v.length]=+h,u=void 0;break;case 34:if(-1!==(h=h.substring(1,h.length-1)).indexOf("\\")&&(h=h.replace(e,n)),v=f[0],!u){if(!(v instanceof Array)){u=h||i;break}u=v.length}v[u]=h,u=void 0;break;case 91:v=f[0],f.unshift(v[u||v.length]=[]),u=void 0;break;case 93:f.shift();break;case 102:(v=f[0])[u||v.length]=!1,u=void 0;break;case 110:(v=f[0])[u||v.length]=null,u=void 0;break;case 116:(v=f[0])[u||v.length]=!0,u=void 0;break;case 123:v=f[0],f.unshift(v[u||v.length]={}),u=void 0;break;case 125:f.shift()}}if(l){if(1!==f.length)throw new Error;a=a[0]}else if(f.length)throw new Error;if(s){a=function t(e,r){var n=e[r];if(n&&"object"===(void 0===n?"undefined":g(n))){var i=null;for(var a in n)if(o.call(n,a)&&n!==e){var u=t(n,a);void 0!==u?n[a]=u:(i||(i=[]),i.push(a))}if(i)for(var c=i.length;--c>=0;)delete n[i[c]]}return s.call(e,r,n)}({"":a},"")}return a}}();void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.asn1&&Sr.asn1||(Sr.asn1={}),Sr.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var r=e.substr(1).length;r%2==1?r+=1:e.match(/^[0-7]/)||(r+=2);for(var n="",i=0;i<r;i++)n+="f";e=new w(n,16).xor(t).add(w.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return jr(t,e)},this.newObject=function(t){var e=Sr.asn1,r=e.ASN1Object,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,s=e.DEROctetString,a=e.DERNull,u=e.DERObjectIdentifier,c=e.DEREnumerated,h=e.DERUTF8String,l=e.DERNumericString,f=e.DERPrintableString,g=e.DERTeletexString,d=e.DERIA5String,p=e.DERUTCTime,v=e.DERGeneralizedTime,y=e.DERVisibleString,m=e.DERBMPString,_=e.DERSequence,S=e.DERSet,b=e.DERTaggedObject,w=e.ASN1Util.newObject;if(t instanceof e.ASN1Object)return t;var F=Object.keys(t);if(1!=F.length)throw new Error("key of param shall be only one.");var E=F[0];if(-1==":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":"+E+":"))throw new Error("undefined key: "+E);if("bool"==E)return new n(t[E]);if("int"==E)return new i(t[E]);if("bitstr"==E)return new o(t[E]);if("octstr"==E)return new s(t[E]);if("null"==E)return new a(t[E]);if("oid"==E)return new u(t[E]);if("enum"==E)return new c(t[E]);if("utf8str"==E)return new h(t[E]);if("numstr"==E)return new l(t[E]);if("prnstr"==E)return new f(t[E]);if("telstr"==E)return new g(t[E]);if("ia5str"==E)return new d(t[E]);if("utctime"==E)return new p(t[E]);if("gentime"==E)return new v(t[E]);if("visstr"==E)return new y(t[E]);if("bmpstr"==E)return new m(t[E]);if("asn1"==E)return new r(t[E]);if("seq"==E){for(var x=t[E],A=[],k=0;k<x.length;k++){var P=w(x[k]);A.push(P)}return new _({array:A})}if("set"==E){for(x=t[E],A=[],k=0;k<x.length;k++){P=w(x[k]);A.push(P)}return new S({array:A})}if("tag"==E){var C=t[E];if("[object Array]"===Object.prototype.toString.call(C)&&3==C.length){var T=w(C[2]);return new b({tag:C[0],explicit:C[1],obj:T})}return new b(C)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},Sr.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",r=parseInt(t.substr(0,2),16),n=(e=Math.floor(r/40)+"."+r%40,""),i=2;i<t.length;i+=2){var o=("00000000"+parseInt(t.substr(i,2),16).toString(2)).slice(-8);if(n+=o.substr(1,7),"0"==o.substr(0,1))e=e+"."+new w(n,2).toString(10),n=""}return e},Sr.asn1.ASN1Util.oidIntToHex=function(t){var e=function t(e){var r=e.toString(16);return 1==r.length&&(r="0"+r),r},r=function t(r){var n="",i=new w(r,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var s="",a=0;a<o;a++)s+="0";i=s+i;for(a=0;a<i.length-1;a+=7){var u=i.substr(a,7);a!=i.length-7&&(u="1"+u),n+=e(parseInt(u,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",i=t.split("."),o=40*parseInt(i[0])+parseInt(i[1]);n+=e(o),i.splice(0,2);for(var s=0;s<i.length;s++)n+=r(i[s]);return n},Sr.asn1.ASN1Object=function(t){this.params=null,this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw new Error("this.hV is null or undefined");if(this.hV.length%2==1)throw new Error("value hex must be even length: n="+"".length+",v="+this.hV);var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var r=e.length/2;if(r>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+r).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""},this.setByParam=function(t){this.params=t},null!=t&&null!=t.tlv&&(this.hTLV=t.tlv,this.isModified=!1)},Sr.asn1.DERAbstractString=function(t){Sr.asn1.DERAbstractString.superclass.constructor.call(this);this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=Ir(this.s).toLowerCase()},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},Zr(Sr.asn1.DERAbstractString,Sr.asn1.ASN1Object),Sr.asn1.DERAbstractTime=function(t){Sr.asn1.DERAbstractTime.superclass.constructor.call(this);this.localDateToUTC=function(t){var e=t.getTime()+6e4*t.getTimezoneOffset();return new Date(e)},this.formatDate=function(t,e,r){var n=this.zeroPadding,i=this.localDateToUTC(t),o=String(i.getFullYear());"utc"==e&&(o=o.substr(2,2));var s=o+n(String(i.getMonth()+1),2)+n(String(i.getDate()),2)+n(String(i.getHours()),2)+n(String(i.getMinutes()),2)+n(String(i.getSeconds()),2);if(!0===r){var a=i.getMilliseconds();if(0!=a){var u=n(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=kr(t)},this.setByDateValue=function(t,e,r,n,i,o){var s=new Date(Date.UTC(t,e-1,r,n,i,o,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},Zr(Sr.asn1.DERAbstractTime,Sr.asn1.ASN1Object),Sr.asn1.DERAbstractStructured=function(t){Sr.asn1.DERAbstractString.superclass.constructor.call(this);this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},Zr(Sr.asn1.DERAbstractStructured,Sr.asn1.ASN1Object),Sr.asn1.DERBoolean=function(t){Sr.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV=0==t?"010100":"0101ff"},Zr(Sr.asn1.DERBoolean,Sr.asn1.ASN1Object),Sr.asn1.DERInteger=function(t){Sr.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Sr.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new w(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Zr(Sr.asn1.DERInteger,Sr.asn1.ASN1Object),Sr.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Sr.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}Sr.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var r="0"+t;this.hTLV=null,this.isModified=!0,this.hV=r+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var r=0;r<=e;r++)t+="0";var n="";for(r=0;r<t.length-1;r+=8){var i=t.substr(r,8),o=parseInt(i,2).toString(16);1==o.length&&(o="0"+o),n+=o}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",r=0;r<t.length;r++)1==t[r]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},Zr(Sr.asn1.DERBitString,Sr.asn1.ASN1Object),Sr.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Sr.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}Sr.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},Zr(Sr.asn1.DEROctetString,Sr.asn1.DERAbstractString),Sr.asn1.DERNull=function(){Sr.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},Zr(Sr.asn1.DERNull,Sr.asn1.ASN1Object),Sr.asn1.DERObjectIdentifier=function(t){Sr.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){var e=function r(t){var e=function t(e){var r=e.toString(16);return 1==r.length&&(r="0"+r),r},r=function t(r){var n="",i=parseInt(r,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var s="",a=0;a<o;a++)s+="0";i=s+i;for(a=0;a<i.length-1;a+=7){var u=i.substr(a,7);a!=i.length-7&&(u="1"+u),n+=e(parseInt(u,2))}return n};try{if(!t.match(/^[0-9.]+$/))return null;var n="",i=t.split("."),o=40*parseInt(i[0],10)+parseInt(i[1],10);n+=e(o),i.splice(0,2);for(var s=0;s<i.length;s++)n+=r(i[s]);return n}catch(t){return null}}(t);if(null==e)throw new Error("malformed oid string: "+t);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.setValueName=function(t){var e=Sr.asn1.x509.OID.name2oid(t);if(""===e)throw new Error("DERObjectIdentifier oidName undefined: "+t);this.setValueOidString(e)},this.setValueNameOrOid=function(t){t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(t){"string"==typeof t?this.setValueNameOrOid(t):void 0!==t.oid?this.setValueNameOrOid(t.oid):void 0!==t.name?this.setValueNameOrOid(t.name):void 0!==t.hex&&this.setValueHex(t.hex)},void 0!==t&&this.setByParam(t)},Zr(Sr.asn1.DERObjectIdentifier,Sr.asn1.ASN1Object),Sr.asn1.DEREnumerated=function(t){Sr.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Sr.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new w(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Zr(Sr.asn1.DEREnumerated,Sr.asn1.ASN1Object),Sr.asn1.DERUTF8String=function(t){Sr.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},Zr(Sr.asn1.DERUTF8String,Sr.asn1.DERAbstractString),Sr.asn1.DERNumericString=function(t){Sr.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},Zr(Sr.asn1.DERNumericString,Sr.asn1.DERAbstractString),Sr.asn1.DERPrintableString=function(t){Sr.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},Zr(Sr.asn1.DERPrintableString,Sr.asn1.DERAbstractString),Sr.asn1.DERTeletexString=function(t){Sr.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},Zr(Sr.asn1.DERTeletexString,Sr.asn1.DERAbstractString),Sr.asn1.DERIA5String=function(t){Sr.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},Zr(Sr.asn1.DERIA5String,Sr.asn1.DERAbstractString),Sr.asn1.DERVisibleString=function(t){Sr.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="1a"},Zr(Sr.asn1.DERVisibleString,Sr.asn1.DERAbstractString),Sr.asn1.DERBMPString=function(t){Sr.asn1.DERBMPString.superclass.constructor.call(this,t),this.hT="1e"},Zr(Sr.asn1.DERBMPString,Sr.asn1.DERAbstractString),Sr.asn1.DERUTCTime=function(t){Sr.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=kr(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=kr(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},Zr(Sr.asn1.DERUTCTime,Sr.asn1.DERAbstractTime),Sr.asn1.DERGeneralizedTime=function(t){Sr.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=kr(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=kr(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},Zr(Sr.asn1.DERGeneralizedTime,Sr.asn1.DERAbstractTime),Sr.asn1.DERSequence=function(t){Sr.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},Zr(Sr.asn1.DERSequence,Sr.asn1.DERAbstractStructured),Sr.asn1.DERSet=function(t){Sr.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var r=this.asn1Array[e];t.push(r.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},Zr(Sr.asn1.DERSet,Sr.asn1.DERAbstractStructured),Sr.asn1.DERTaggedObject=function(t){Sr.asn1.DERTaggedObject.superclass.constructor.call(this);var e=Sr.asn1;this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,r){this.hT=e,this.isExplicit=t,this.asn1Object=r,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=r.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(t){null!=t.tag&&(this.hT=t.tag),null!=t.explicit&&(this.isExplicit=t.explicit),null!=t.tage&&(this.hT=t.tage,this.isExplicit=!0),null!=t.tagi&&(this.hT=t.tagi,this.isExplicit=!1),null!=t.obj&&(t.obj instanceof e.ASN1Object?(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)):"object"==g(t.obj)&&(this.asn1Object=e.ASN1Util.newObject(t.obj),this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},null!=t&&this.setByParam(t)},Zr(Sr.asn1.DERTaggedObject,Sr.asn1.ASN1Object);var Sr,br,wr,Fr=new function(){};function Er(t){for(var e=new Array,r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e}function xr(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}function Ar(t){for(var e="",r=0;r<t.length;r++){var n=t[r].toString(16);1==n.length&&(n="0"+n),e+=n}return e}function kr(t){return Ar(Er(t))}function Pr(t){return t=(t=(t=t.replace(/\=/g,"")).replace(/\+/g,"-")).replace(/\//g,"_")}function Cr(t){return t.length%4==2?t+="==":t.length%4==3&&(t+="="),t=(t=t.replace(/-/g,"+")).replace(/_/g,"/")}function Tr(t){return t.length%2==1&&(t="0"+t),Pr(_(t))}function Rr(t){return S(Cr(t))}function Ir(t){return Kr(Gr(t))}function Dr(t){return decodeURIComponent(qr(t))}function Lr(t){for(var e="",r=0;r<t.length-1;r+=2)e+=String.fromCharCode(parseInt(t.substr(r,2),16));return e}function Nr(t){for(var e="",r=0;r<t.length;r++)e+=("0"+t.charCodeAt(r).toString(16)).slice(-2);return e}function Ur(t){return _(t)}function Br(t){var e=Ur(t).replace(/(.{64})/g,"$1\r\n");return e=e.replace(/\r\n$/,"")}function Or(t){return S(t.replace(/[^0-9A-Za-z\/+=]*/g,""))}function jr(t,e){return"-----BEGIN "+e+"-----\r\n"+Br(t)+"\r\n-----END "+e+"-----\r\n"}function Mr(t,e){if(-1==t.indexOf("-----BEGIN "))throw"can't find PEM header: "+e;return Or(t=void 0!==e?(t=t.replace(new RegExp("^[^]*-----BEGIN "+e+"-----"),"")).replace(new RegExp("-----END "+e+"-----[^]*$"),""):(t=t.replace(/^[^]*-----BEGIN [^-]+-----/,"")).replace(/-----END [^-]+-----[^]*$/,""))}function Hr(t){var e,r,n,i,o,s,a,u,c,h,l;if(l=t.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/))return u=l[1],e=parseInt(u),2===u.length&&(50<=e&&e<100?e=1900+e:0<=e&&e<50&&(e=2e3+e)),r=parseInt(l[2])-1,n=parseInt(l[3]),i=parseInt(l[4]),o=parseInt(l[5]),s=parseInt(l[6]),a=0,""!==(c=l[7])&&(h=(c.substr(1)+"00").substr(0,3),a=parseInt(h)),Date.UTC(e,r,n,i,o,s,a);throw"unsupported zulu format: "+t}function Vr(t){return~~(Hr(t)/1e3)}function Kr(t){return t.replace(/%/g,"")}function qr(t){return t.replace(/(..)/g,"%$1")}function Jr(t){var e="malformed IPv6 address";if(!t.match(/^[0-9A-Fa-f:]+$/))throw e;var r=(t=t.toLowerCase()).split(":").length-1;if(r<2)throw e;var n=":".repeat(7-r+2),i=(t=t.replace("::",n)).split(":");if(8!=i.length)throw e;for(var o=0;o<8;o++)i[o]=("0000"+i[o]).slice(-4);return i.join("")}function Wr(t){if(!t.match(/^[0-9A-Fa-f]{32}$/))throw"malformed IPv6 address octet";for(var e=(t=t.toLowerCase()).match(/.{1,4}/g),r=0;r<8;r++)e[r]=e[r].replace(/^0+/,""),""==e[r]&&(e[r]="0");var n=(t=":"+e.join(":")+":").match(/:(0:){2,}/g);if(null===n)return t.slice(1,-1);var i="";for(r=0;r<n.length;r++)n[r].length>i.length&&(i=n[r]);return(t=t.replace(i,"::")).slice(1,-1)}function zr(t){var e="malformed hex value";if(!t.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/))throw e;if(8!=t.length)return 32==t.length?Wr(t):t;try{return parseInt(t.substr(0,2),16)+"."+parseInt(t.substr(2,2),16)+"."+parseInt(t.substr(4,2),16)+"."+parseInt(t.substr(6,2),16)}catch(t){throw e}}function Yr(t){return t.match(/.{4}/g).map((function e(t){var e=parseInt(t.substr(0,2),16),r=parseInt(t.substr(2),16);if(0==e&r<128)return String.fromCharCode(r);if(e<8){var n=128|63&r;return Dr((192|(7&e)<<3|(192&r)>>6).toString(16)+n.toString(16))}n=128|(15&e)<<2|(192&r)>>6;var i=128|63&r;return Dr((224|(240&e)>>4).toString(16)+n.toString(16)+i.toString(16))})).join("")}function Gr(t){for(var e=encodeURIComponent(t),r="",n=0;n<e.length;n++)"%"==e[n]?(r+=e.substr(n,3),n+=2):r=r+"%"+kr(e[n]);return r}function Xr(t){return!(t.length%2!=0||!t.match(/^[0-9a-f]+$/)&&!t.match(/^[0-9A-F]+$/))}function $r(t){return t.length%2==1?"0"+t:t.substr(0,1)>"7"?"00"+t:t}Fr.getLblen=function(t,e){if("8"!=t.substr(e+2,1))return 1;var r=parseInt(t.substr(e+3,1));return 0==r?-1:0<r&&r<10?r+1:-2},Fr.getL=function(t,e){var r=Fr.getLblen(t,e);return r<1?"":t.substr(e+2,2*r)},Fr.getVblen=function(t,e){var r;return""==(r=Fr.getL(t,e))?-1:("8"===r.substr(0,1)?new w(r.substr(2),16):new w(r,16)).intValue()},Fr.getVidx=function(t,e){var r=Fr.getLblen(t,e);return r<0?r:e+2*(r+1)},Fr.getV=function(t,e){var r=Fr.getVidx(t,e),n=Fr.getVblen(t,e);return t.substr(r,2*n)},Fr.getTLV=function(t,e){return t.substr(e,2)+Fr.getL(t,e)+Fr.getV(t,e)},Fr.getTLVblen=function(t,e){return 2+2*Fr.getLblen(t,e)+2*Fr.getVblen(t,e)},Fr.getNextSiblingIdx=function(t,e){return Fr.getVidx(t,e)+2*Fr.getVblen(t,e)},Fr.getChildIdx=function(t,e){var r,n,i,o=Fr,s=[];r=o.getVidx(t,e),n=2*o.getVblen(t,e),"03"==t.substr(e,2)&&(r+=2,n-=2),i=0;for(var a=r;i<=n;){var u=o.getTLVblen(t,a);if((i+=u)<=n&&s.push(a),a+=u,i>=n)break}return s},Fr.getNthChildIdx=function(t,e,r){return Fr.getChildIdx(t,e)[r]},Fr.getIdxbyList=function(t,e,r,n){var i,o,s=Fr;return 0==r.length?void 0!==n&&t.substr(e,2)!==n?-1:e:(i=r.shift())>=(o=s.getChildIdx(t,e)).length?-1:s.getIdxbyList(t,o[i],r,n)},Fr.getIdxbyListEx=function(t,e,r,n){var i,o,s=Fr;if(0==r.length)return void 0!==n&&t.substr(e,2)!==n?-1:e;i=r.shift(),o=s.getChildIdx(t,e);for(var a=0,u=0;u<o.length;u++){var c=t.substr(o[u],2);if("number"==typeof i&&!s.isContextTag(c)&&a==i||"string"==typeof i&&s.isContextTag(c,i))return s.getIdxbyListEx(t,o[u],r,n);s.isContextTag(c)||a++}return-1},Fr.getTLVbyList=function(t,e,r,n){var i=Fr,o=i.getIdxbyList(t,e,r,n);return-1==o||o>=t.length?null:i.getTLV(t,o)},Fr.getTLVbyListEx=function(t,e,r,n){var i=Fr,o=i.getIdxbyListEx(t,e,r,n);return-1==o?null:i.getTLV(t,o)},Fr.getVbyList=function(t,e,r,n,i){var o,s,a=Fr;return-1==(o=a.getIdxbyList(t,e,r,n))||o>=t.length?null:(s=a.getV(t,o),!0===i&&(s=s.substr(2)),s)},Fr.getVbyListEx=function(t,e,r,n,i){var o,s,a=Fr;return-1==(o=a.getIdxbyListEx(t,e,r,n))?null:(s=a.getV(t,o),"03"==t.substr(o,2)&&!1!==i&&(s=s.substr(2)),s)},Fr.getInt=function(t,e,r){null==r&&(r=-1);try{var n=t.substr(e,2);if("02"!=n&&"03"!=n)return r;var i=Fr.getV(t,e);return"02"==n?parseInt(i,16):function o(t){try{var e=t.substr(0,2);if("00"==e)return parseInt(t.substr(2),16);var r=parseInt(e,16),n=t.substr(2),i=parseInt(n,16).toString(2);return"0"==i&&(i="00000000"),i=i.slice(0,0-r),parseInt(i,2)}catch(t){return-1}}(i)}catch(t){return r}},Fr.getOID=function(t,e,r){null==r&&(r=null);try{return"06"!=t.substr(e,2)?r:function n(t){if(!Xr(t))return null;try{var e=[],r=t.substr(0,2),n=parseInt(r,16);e[0]=new String(Math.floor(n/40)),e[1]=new String(n%40);for(var i=t.substr(2),o=[],s=0;s<i.length/2;s++)o.push(parseInt(i.substr(2*s,2),16));var a=[],u="";for(s=0;s<o.length;s++)128&o[s]?u+=Qr((127&o[s]).toString(2),7):(u+=Qr((127&o[s]).toString(2),7),a.push(new String(parseInt(u,2))),u="");var c=e.join(".");return a.length>0&&(c=c+"."+a.join(".")),c}catch(t){return null}}(Fr.getV(t,e))}catch(t){return r}},Fr.getOIDName=function(t,e,r){null==r&&(r=null);try{var n=Fr.getOID(t,e,r);if(n==r)return r;var i=Sr.asn1.x509.OID.oid2name(n);return""==i?n:i}catch(t){return r}},Fr.getString=function(t,e,r){null==r&&(r=null);try{return Lr(Fr.getV(t,e))}catch(t){return r}},Fr.hextooidstr=function(t){var e=function t(e,r){return e.length>=r?e:new Array(r-e.length+1).join("0")+e},r=[],n=t.substr(0,2),i=parseInt(n,16);r[0]=new String(Math.floor(i/40)),r[1]=new String(i%40);for(var o=t.substr(2),s=[],a=0;a<o.length/2;a++)s.push(parseInt(o.substr(2*a,2),16));var u=[],c="";for(a=0;a<s.length;a++)128&s[a]?c+=e((127&s[a]).toString(2),7):(c+=e((127&s[a]).toString(2),7),u.push(new String(parseInt(c,2))),c="");var h=r.join(".");return u.length>0&&(h=h+"."+u.join(".")),h},Fr.dump=function(t,e,r,n){var i=Fr,o=i.getV,s=i.dump,a=i.getChildIdx,u=t;t instanceof Sr.asn1.ASN1Object&&(u=t.getEncodedHex());var c=function t(e,r){return e.length<=2*r?e:e.substr(0,r)+"..(total "+e.length/2+"bytes).."+e.substr(e.length-r,r)};void 0===e&&(e={ommit_long_octet:32}),void 0===r&&(r=0),void 0===n&&(n="");var h,l=e.ommit_long_octet;if("01"==(h=u.substr(r,2)))return"00"==(f=o(u,r))?n+"BOOLEAN FALSE\n":n+"BOOLEAN TRUE\n";if("02"==h)return n+"INTEGER "+c(f=o(u,r),l)+"\n";if("03"==h){var f=o(u,r);if(i.isASN1HEX(f.substr(2))){var g=n+"BITSTRING, encapsulates\n";return g+=s(f.substr(2),e,0,n+"  ")}return n+"BITSTRING "+c(f,l)+"\n"}if("04"==h){f=o(u,r);if(i.isASN1HEX(f)){g=n+"OCTETSTRING, encapsulates\n";return g+=s(f,e,0,n+"  ")}return n+"OCTETSTRING "+c(f,l)+"\n"}if("05"==h)return n+"NULL\n";if("06"==h){var d=o(u,r),p=Sr.asn1.ASN1Util.oidHexToInt(d),v=Sr.asn1.x509.OID.oid2name(p),y=p.replace(/\./g," ");return""!=v?n+"ObjectIdentifier "+v+" ("+y+")\n":n+"ObjectIdentifier ("+y+")\n"}if("0a"==h)return n+"ENUMERATED "+parseInt(o(u,r))+"\n";if("0c"==h)return n+"UTF8String '"+Dr(o(u,r))+"'\n";if("13"==h)return n+"PrintableString '"+Dr(o(u,r))+"'\n";if("14"==h)return n+"TeletexString '"+Dr(o(u,r))+"'\n";if("16"==h)return n+"IA5String '"+Dr(o(u,r))+"'\n";if("17"==h)return n+"UTCTime "+Dr(o(u,r))+"\n";if("18"==h)return n+"GeneralizedTime "+Dr(o(u,r))+"\n";if("1a"==h)return n+"VisualString '"+Dr(o(u,r))+"'\n";if("1e"==h)return n+"BMPString '"+Yr(o(u,r))+"'\n";if("30"==h){if("3000"==u.substr(r,4))return n+"SEQUENCE {}\n";g=n+"SEQUENCE\n";var m=e;if((2==(b=a(u,r)).length||3==b.length)&&"06"==u.substr(b[0],2)&&"04"==u.substr(b[b.length-1],2)){v=i.oidname(o(u,b[0]));var _=JSON.parse(JSON.stringify(e));_.x509ExtName=v,m=_}for(var S=0;S<b.length;S++)g+=s(u,m,b[S],n+"  ");return g}if("31"==h){g=n+"SET\n";var b=a(u,r);for(S=0;S<b.length;S++)g+=s(u,e,b[S],n+"  ");return g}if(0!=(128&(h=parseInt(h,16)))){var w=31&h;if(0!=(32&h)){for(g=n+"["+w+"]\n",b=a(u,r),S=0;S<b.length;S++)g+=s(u,e,b[S],n+"  ");return g}f=o(u,r);if(Fr.isASN1HEX(f)){var g=n+"["+w+"]\n";return g+=s(f,e,0,n+"  ")}return("68747470"==f.substr(0,8)||"subjectAltName"===e.x509ExtName&&2==w)&&(f=Dr(f)),g=n+"["+w+"] "+f+"\n"}return n+"UNKNOWN("+h+") "+o(u,r)+"\n"},Fr.isContextTag=function(t,e){var r,n;t=t.toLowerCase();try{r=parseInt(t,16)}catch(t){return-1}if(void 0===e)return 128==(192&r);try{return null!=e.match(/^\[[0-9]+\]$/)&&(!((n=parseInt(e.substr(1,e.length-1),10))>31)&&(128==(192&r)&&(31&r)==n))}catch(t){return!1}},Fr.isASN1HEX=function(t){var e=Fr;if(t.length%2==1)return!1;var r=e.getVblen(t,0),n=t.substr(0,2),i=e.getL(t,0);return t.length-n.length-i.length==2*r},Fr.checkStrictDER=function(t,e,r,n,i){var o=Fr;if(void 0===r){if("string"!=typeof t)throw new Error("not hex string");if(t=t.toLowerCase(),!Sr.lang.String.isHex(t))throw new Error("not hex string");r=t.length,i=(n=t.length/2)<128?1:Math.ceil(n.toString(16))+1}if(o.getL(t,e).length>2*i)throw new Error("L of TLV too long: idx="+e);var s=o.getVblen(t,e);if(s>n)throw new Error("value of L too long than hex: idx="+e);var a=o.getTLV(t,e),u=a.length-2-o.getL(t,e).length;if(u!==2*s)throw new Error("V string length and L's value not the same:"+u+"/"+2*s);if(0===e&&t.length!=a.length)throw new Error("total length and TLV length unmatch:"+t.length+"!="+a.length);var c=t.substr(e,2);if("02"===c){var h=o.getVidx(t,e);if("00"==t.substr(h,2)&&t.charCodeAt(h+2)<56)throw new Error("not least zeros for DER INTEGER")}if(32&parseInt(c,16)){for(var l=o.getVblen(t,e),f=0,g=o.getChildIdx(t,e),d=0;d<g.length;d++){f+=o.getTLV(t,g[d]).length,o.checkStrictDER(t,g[d],r,n,i)}if(2*l!=f)throw new Error("sum of children's TLV length and L unmatch: "+2*l+"!="+f)}},Fr.oidname=function(t){var e=Sr.asn1;Sr.lang.String.isHex(t)&&(t=e.ASN1Util.oidHexToInt(t));var r=e.x509.OID.oid2name(t);return""===r&&(r=t),r},void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.lang&&Sr.lang||(Sr.lang={}),Sr.lang.String=function(){},"function"==typeof t?(e.utf8tob64u=br=function e(r){return Pr(t.from(r,"utf8").toString("base64"))},e.b64utoutf8=wr=function e(r){return t.from(Cr(r),"base64").toString("utf8")}):(e.utf8tob64u=br=function t(e){return Tr(Kr(Gr(e)))},e.b64utoutf8=wr=function t(e){return decodeURIComponent(qr(Rr(e)))}),Sr.lang.String.isInteger=function(t){return!!t.match(/^[0-9]+$/)||!!t.match(/^-[0-9]+$/)},Sr.lang.String.isHex=function(t){return Xr(t)},Sr.lang.String.isBase64=function(t){return!(!(t=t.replace(/\s+/g,"")).match(/^[0-9A-Za-z+\/]+={0,3}$/)||t.length%4!=0)},Sr.lang.String.isBase64URL=function(t){return!t.match(/[+/=]/)&&(t=Cr(t),Sr.lang.String.isBase64(t))},Sr.lang.String.isIntegerArray=function(t){return!!(t=t.replace(/\s+/g,"")).match(/^\[[0-9,]+\]$/)},Sr.lang.String.isPrintable=function(t){return null!==t.match(/^[0-9A-Za-z '()+,-./:=?]*$/)},Sr.lang.String.isIA5=function(t){return null!==t.match(/^[\x20-\x21\x23-\x7f]*$/)},Sr.lang.String.isMail=function(t){return null!==t.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/)};var Qr=function t(e,r,n){return null==n&&(n="0"),e.length>=r?e:new Array(r-e.length+1).join(n)+e};function Zr(t,e){var r=function t(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e)}void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.crypto&&Sr.crypto||(Sr.crypto={}),Sr.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414"},this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHAwithRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa"},this.CRYPTOJSMESSAGEDIGESTNAME={md5:v.algo.MD5,sha1:v.algo.SHA1,sha224:v.algo.SHA224,sha256:v.algo.SHA256,sha384:v.algo.SHA384,sha512:v.algo.SHA512,ripemd160:v.algo.RIPEMD160},this.getDigestInfoHex=function(t,e){if(void 0===this.DIGESTINFOHEAD[e])throw"alg not supported in Util.DIGESTINFOHEAD: "+e;return this.DIGESTINFOHEAD[e]+t},this.getPaddedDigestInfoHex=function(t,e,r){var n=this.getDigestInfoHex(t,e),i=r/4;if(n.length+22>i)throw"key is too short for SigAlg: keylen="+r+","+e;for(var o="0001",s="00"+n,a="",u=i-o.length-s.length,c=0;c<u;c+=2)a+="ff";return o+a+s},this.hashString=function(t,e){return new Sr.crypto.MessageDigest({alg:e}).digestString(t)},this.hashHex=function(t,e){return new Sr.crypto.MessageDigest({alg:e}).digestHex(t)},this.sha1=function(t){return this.hashString(t,"sha1")},this.sha256=function(t){return this.hashString(t,"sha256")},this.sha256Hex=function(t){return this.hashHex(t,"sha256")},this.sha512=function(t){return this.hashString(t,"sha512")},this.sha512Hex=function(t){return this.hashHex(t,"sha512")},this.isKey=function(t){return t instanceof Me||t instanceof Sr.crypto.DSA||t instanceof Sr.crypto.ECDSA}},Sr.crypto.Util.md5=function(t){return new Sr.crypto.MessageDigest({alg:"md5",prov:"cryptojs"}).digestString(t)},Sr.crypto.Util.ripemd160=function(t){return new Sr.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"}).digestString(t)},Sr.crypto.Util.SECURERANDOMGEN=new Be,Sr.crypto.Util.getRandomHexOfNbytes=function(t){var e=new Array(t);return Sr.crypto.Util.SECURERANDOMGEN.nextBytes(e),Ar(e)},Sr.crypto.Util.getRandomBigIntegerOfNbytes=function(t){return new w(Sr.crypto.Util.getRandomHexOfNbytes(t),16)},Sr.crypto.Util.getRandomHexOfNbits=function(t){var e=t%8,r=new Array((t-e)/8+1);return Sr.crypto.Util.SECURERANDOMGEN.nextBytes(r),r[0]=(255<<e&255^255)&r[0],Ar(r)},Sr.crypto.Util.getRandomBigIntegerOfNbits=function(t){return new w(Sr.crypto.Util.getRandomHexOfNbits(t),16)},Sr.crypto.Util.getRandomBigIntegerZeroToMax=function(t){for(var e=t.bitLength();;){var r=Sr.crypto.Util.getRandomBigIntegerOfNbits(e);if(-1!=t.compareTo(r))return r}},Sr.crypto.Util.getRandomBigIntegerMinToMax=function(t,e){var r=t.compareTo(e);if(1==r)throw"biMin is greater than biMax";if(0==r)return t;var n=e.subtract(t);return Sr.crypto.Util.getRandomBigIntegerZeroToMax(n).add(t)},Sr.crypto.MessageDigest=function(t){this.setAlgAndProvider=function(t,e){if(null!==(t=Sr.crypto.MessageDigest.getCanonicalAlgName(t))&&void 0===e&&(e=Sr.crypto.Util.DEFAULTPROVIDER[t]),-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(t)&&"cryptojs"==e){try{this.md=Sr.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[t].create()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+t+"/"+e}this.updateString=function(t){this.md.update(t)},this.updateHex=function(t){var e=v.enc.Hex.parse(t);this.md.update(e)},this.digest=function(){return this.md.finalize().toString(v.enc.Hex)},this.digestString=function(t){return this.updateString(t),this.digest()},this.digestHex=function(t){return this.updateHex(t),this.digest()}}if(-1!=":sha256:".indexOf(t)&&"sjcl"==e){try{this.md=new sjcl.hash.sha256}catch(e){throw"setAlgAndProvider hash alg set fail alg="+t+"/"+e}this.updateString=function(t){this.md.update(t)},this.updateHex=function(t){var e=sjcl.codec.hex.toBits(t);this.md.update(e)},this.digest=function(){var t=this.md.finalize();return sjcl.codec.hex.fromBits(t)},this.digestString=function(t){return this.updateString(t),this.digest()},this.digestHex=function(t){return this.updateHex(t),this.digest()}}},this.updateString=function(t){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestString=function(t){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestHex=function(t){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},void 0!==t&&void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov&&(this.provName=Sr.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName))},Sr.crypto.MessageDigest.getCanonicalAlgName=function(t){return"string"==typeof t&&(t=(t=t.toLowerCase()).replace(/-/,"")),t},Sr.crypto.MessageDigest.getHashLength=function(t){var e=Sr.crypto.MessageDigest,r=e.getCanonicalAlgName(t);if(void 0===e.HASHLENGTH[r])throw"not supported algorithm: "+t;return e.HASHLENGTH[r]},Sr.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20},Sr.crypto.Mac=function(t){this.setAlgAndProvider=function(t,e){if(null==(t=t.toLowerCase())&&(t="hmacsha1"),"hmac"!=(t=t.toLowerCase()).substr(0,4))throw"setAlgAndProvider unsupported HMAC alg: "+t;void 0===e&&(e=Sr.crypto.Util.DEFAULTPROVIDER[t]),this.algProv=t+"/"+e;var r=t.substr(4);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(r)&&"cryptojs"==e){try{var n=Sr.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[r];this.mac=v.algo.HMAC.create(n,this.pass)}catch(t){throw"setAlgAndProvider hash alg set fail hashAlg="+r+"/"+t}this.updateString=function(t){this.mac.update(t)},this.updateHex=function(t){var e=v.enc.Hex.parse(t);this.mac.update(e)},this.doFinal=function(){return this.mac.finalize().toString(v.enc.Hex)},this.doFinalString=function(t){return this.updateString(t),this.doFinal()},this.doFinalHex=function(t){return this.updateHex(t),this.doFinal()}}},this.updateString=function(t){throw"updateString(str) not supported for this alg/prov: "+this.algProv},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv},this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv},this.doFinalString=function(t){throw"digestString(str) not supported for this alg/prov: "+this.algProv},this.doFinalHex=function(t){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv},this.setPassword=function(t){if("string"==typeof t){var e=t;return t.length%2!=1&&t.match(/^[0-9A-Fa-f]+$/)||(e=Nr(t)),void(this.pass=v.enc.Hex.parse(e))}if("object"!=(void 0===t?"undefined":g(t)))throw"KJUR.crypto.Mac unsupported password type: "+t;e=null;if(void 0!==t.hex){if(t.hex.length%2!=0||!t.hex.match(/^[0-9A-Fa-f]+$/))throw"Mac: wrong hex password: "+t.hex;e=t.hex}if(void 0!==t.utf8&&(e=Ir(t.utf8)),void 0!==t.rstr&&(e=Nr(t.rstr)),void 0!==t.b64&&(e=S(t.b64)),void 0!==t.b64u&&(e=Rr(t.b64u)),null==e)throw"KJUR.crypto.Mac unsupported password type: "+t;this.pass=v.enc.Hex.parse(e)},void 0!==t&&(void 0!==t.pass&&this.setPassword(t.pass),void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov&&(this.provName=Sr.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName)))},Sr.crypto.Signature=function(t){var e=null;if(this._setAlgNames=function(){var t=this.algName.match(/^(.+)with(.+)$/);t&&(this.mdAlgName=t[1].toLowerCase(),this.pubkeyAlgName=t[2].toLowerCase(),"rsaandmgf1"==this.pubkeyAlgName&&"sha"==this.mdAlgName&&(this.mdAlgName="sha1"))},this._zeroPaddingOfSignature=function(t,e){for(var r="",n=e/4-t.length,i=0;i<n;i++)r+="0";return r+t},this.setAlgAndProvider=function(t,e){if(this._setAlgNames(),"cryptojs/jsrsa"!=e)throw new Error("provider not supported: "+e);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)){try{this.md=new Sr.crypto.MessageDigest({alg:this.mdAlgName})}catch(t){throw new Error("setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+t)}this.init=function(t,e){var r=null;try{r=void 0===e?tn.getKey(t):tn.getKey(t,e)}catch(t){throw"init failed:"+t}if(!0===r.isPrivate)this.prvKey=r,this.state="SIGN";else{if(!0!==r.isPublic)throw"init failed.:"+r;this.pubKey=r,this.state="VERIFY"}},this.updateString=function(t){this.md.updateString(t)},this.updateHex=function(t){this.md.updateHex(t)},this.sign=function(){if(this.sHashHex=this.md.digest(),void 0===this.prvKey&&void 0!==this.ecprvhex&&void 0!==this.eccurvename&&void 0!==Sr.crypto.ECDSA&&(this.prvKey=new Sr.crypto.ECDSA({curve:this.eccurvename,prv:this.ecprvhex})),this.prvKey instanceof Me&&"rsaandmgf1"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen);else if(this.prvKey instanceof Me&&"rsa"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName);else if(this.prvKey instanceof Sr.crypto.ECDSA)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex);else{if(!(this.prvKey instanceof Sr.crypto.DSA))throw"Signature: unsupported private key alg: "+this.pubkeyAlgName;this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}return this.hSign},this.signString=function(t){return this.updateString(t),this.sign()},this.signHex=function(t){return this.updateHex(t),this.sign()},this.verify=function(t){if(this.sHashHex=this.md.digest(),void 0===this.pubKey&&void 0!==this.ecpubhex&&void 0!==this.eccurvename&&void 0!==Sr.crypto.ECDSA&&(this.pubKey=new Sr.crypto.ECDSA({curve:this.eccurvename,pub:this.ecpubhex})),this.pubKey instanceof Me&&"rsaandmgf1"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,t,this.mdAlgName,this.pssSaltLen);if(this.pubKey instanceof Me&&"rsa"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);if(void 0!==Sr.crypto.ECDSA&&this.pubKey instanceof Sr.crypto.ECDSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);if(void 0!==Sr.crypto.DSA&&this.pubKey instanceof Sr.crypto.DSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}},this.init=function(t,e){throw"init(key, pass) not supported for this alg:prov="+this.algProvName},this.updateString=function(t){throw"updateString(str) not supported for this alg:prov="+this.algProvName},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName},this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName},this.signString=function(t){throw"digestString(str) not supported for this alg:prov="+this.algProvName},this.signHex=function(t){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName},this.verify=function(t){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName},this.initParams=t,void 0!==t&&(void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov?this.provName=Sr.crypto.Util.DEFAULTPROVIDER[this.algName]:this.provName=t.prov,this.algProvName=this.algName+":"+this.provName,this.setAlgAndProvider(this.algName,this.provName),this._setAlgNames()),void 0!==t.psssaltlen&&(this.pssSaltLen=t.psssaltlen),void 0!==t.prvkeypem)){if(void 0!==t.prvkeypas)throw"both prvkeypem and prvkeypas parameters not supported";try{e=tn.getKey(t.prvkeypem);this.init(e)}catch(t){throw"fatal error to load pem private key: "+t}}},Sr.crypto.Cipher=function(t){},Sr.crypto.Cipher.encrypt=function(t,e,r){if(e instanceof Me&&e.isPublic){var n=Sr.crypto.Cipher.getAlgByKeyAndName(e,r);if("RSA"===n)return e.encrypt(t);if("RSAOAEP"===n)return e.encryptOAEP(t,"sha1");var i=n.match(/^RSAOAEP(\d+)$/);if(null!==i)return e.encryptOAEP(t,"sha"+i[1]);throw"Cipher.encrypt: unsupported algorithm for RSAKey: "+r}throw"Cipher.encrypt: unsupported key or algorithm"},Sr.crypto.Cipher.decrypt=function(t,e,r){if(e instanceof Me&&e.isPrivate){var n=Sr.crypto.Cipher.getAlgByKeyAndName(e,r);if("RSA"===n)return e.decrypt(t);if("RSAOAEP"===n)return e.decryptOAEP(t,"sha1");var i=n.match(/^RSAOAEP(\d+)$/);if(null!==i)return e.decryptOAEP(t,"sha"+i[1]);throw"Cipher.decrypt: unsupported algorithm for RSAKey: "+r}throw"Cipher.decrypt: unsupported key or algorithm"},Sr.crypto.Cipher.getAlgByKeyAndName=function(t,e){if(t instanceof Me){if(-1!=":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(e))return e;if(null==e)return"RSA";throw"getAlgByKeyAndName: not supported algorithm name for RSAKey: "+e}throw"getAlgByKeyAndName: not supported algorithm name: "+e},Sr.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040023":"secp521r1","2b81040022":"secp384r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA"}},void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.crypto&&Sr.crypto||(Sr.crypto={}),Sr.crypto.ECDSA=function(t){var e=Error,r=w,n=Ve,i=Sr.crypto.ECDSA,o=Sr.crypto.ECParameterDB,s=i.getName,a=Fr,u=a.getVbyListEx,c=a.isASN1HEX,h=new Be;this.type="EC",this.isPrivate=!1,this.isPublic=!1,this.getBigRandom=function(t){return new r(t.bitLength(),h).mod(t.subtract(r.ONE)).add(r.ONE)},this.setNamedCurve=function(t){this.ecparams=o.getByName(t),this.prvKeyHex=null,this.pubKeyHex=null,this.curveName=t},this.setPrivateKeyHex=function(t){this.isPrivate=!0,this.prvKeyHex=t},this.setPublicKeyHex=function(t){this.isPublic=!0,this.pubKeyHex=t},this.getPublicKeyXYHex=function(){var t=this.pubKeyHex;if("04"!==t.substr(0,2))throw"this method supports uncompressed format(04) only";var e=this.ecparams.keylen/4;if(t.length!==2+2*e)throw"malformed public key hex length";var r={};return r.x=t.substr(2,e),r.y=t.substr(2+e),r},this.getShortNISTPCurveName=function(){var t=this.curveName;return"secp256r1"===t||"NIST P-256"===t||"P-256"===t||"prime256v1"===t?"P-256":"secp384r1"===t||"NIST P-384"===t||"P-384"===t?"P-384":null},this.generateKeyPairHex=function(){var t=this.ecparams.n,e=this.getBigRandom(t),r=this.ecparams.G.multiply(e),n=r.getX().toBigInteger(),i=r.getY().toBigInteger(),o=this.ecparams.keylen/4,s=("0000000000"+e.toString(16)).slice(-o),a="04"+("0000000000"+n.toString(16)).slice(-o)+("0000000000"+i.toString(16)).slice(-o);return this.setPrivateKeyHex(s),this.setPublicKeyHex(a),{ecprvhex:s,ecpubhex:a}},this.signWithMessageHash=function(t){return this.signHex(t,this.prvKeyHex)},this.signHex=function(t,e){var n=new r(e,16),o=this.ecparams.n,s=new r(t.substring(0,this.ecparams.keylen/4),16);do{var a=this.getBigRandom(o),u=this.ecparams.G.multiply(a).getX().toBigInteger().mod(o)}while(u.compareTo(r.ZERO)<=0);var c=a.modInverse(o).multiply(s.add(n.multiply(u))).mod(o);return i.biRSSigToASN1Sig(u,c)},this.sign=function(t,e){var n=e,i=this.ecparams.n,o=r.fromByteArrayUnsigned(t);do{var s=this.getBigRandom(i),a=this.ecparams.G.multiply(s).getX().toBigInteger().mod(i)}while(a.compareTo(w.ZERO)<=0);var u=s.modInverse(i).multiply(o.add(n.multiply(a))).mod(i);return this.serializeSig(a,u)},this.verifyWithMessageHash=function(t,e){return this.verifyHex(t,e,this.pubKeyHex)},this.verifyHex=function(t,e,o){try{var s,a,u=i.parseSigHex(e);s=u.r,a=u.s;var c=n.decodeFromHex(this.ecparams.curve,o),h=new r(t.substring(0,this.ecparams.keylen/4),16);return this.verifyRaw(h,s,a,c)}catch(t){return!1}},this.verify=function(t,e,i){var o,s,a;if(Bitcoin.Util.isArray(e)){var u=this.parseSig(e);o=u.r,s=u.s}else{if("object"!==(void 0===e?"undefined":g(e))||!e.r||!e.s)throw"Invalid value for signature";o=e.r,s=e.s}if(i instanceof Ve)a=i;else{if(!Bitcoin.Util.isArray(i))throw"Invalid format for pubkey value, must be byte array or ECPointFp";a=n.decodeFrom(this.ecparams.curve,i)}var c=r.fromByteArrayUnsigned(t);return this.verifyRaw(c,o,s,a)},this.verifyRaw=function(t,e,n,i){var o=this.ecparams.n,s=this.ecparams.G;if(e.compareTo(r.ONE)<0||e.compareTo(o)>=0)return!1;if(n.compareTo(r.ONE)<0||n.compareTo(o)>=0)return!1;var a=n.modInverse(o),u=t.multiply(a).mod(o),c=e.multiply(a).mod(o);return s.multiply(u).add(i.multiply(c)).getX().toBigInteger().mod(o).equals(e)},this.serializeSig=function(t,e){var r=t.toByteArraySigned(),n=e.toByteArraySigned(),i=[];return i.push(2),i.push(r.length),(i=i.concat(r)).push(2),i.push(n.length),(i=i.concat(n)).unshift(i.length),i.unshift(48),i},this.parseSig=function(t){var e;if(48!=t[0])throw new Error("Signature not a valid DERSequence");if(2!=t[e=2])throw new Error("First element in signature must be a DERInteger");var n=t.slice(e+2,e+2+t[e+1]);if(2!=t[e+=2+t[e+1]])throw new Error("Second element in signature must be a DERInteger");var i=t.slice(e+2,e+2+t[e+1]);return e+=2+t[e+1],{r:r.fromByteArrayUnsigned(n),s:r.fromByteArrayUnsigned(i)}},this.parseSigCompact=function(t){if(65!==t.length)throw"Signature has the wrong length";var e=t[0]-27;if(e<0||e>7)throw"Invalid signature type";var n=this.ecparams.n;return{r:r.fromByteArrayUnsigned(t.slice(1,33)).mod(n),s:r.fromByteArrayUnsigned(t.slice(33,65)).mod(n),i:e}},this.readPKCS5PrvKeyHex=function(t){if(!1===c(t))throw new Error("not ASN.1 hex string");var e,r,n;try{e=u(t,0,["[0]",0],"06"),r=u(t,0,[1],"04");try{n=u(t,0,["[1]",0],"03")}catch(t){}}catch(t){throw new Error("malformed PKCS#1/5 plain ECC private key")}if(this.curveName=s(e),void 0===this.curveName)throw"unsupported curve name";this.setNamedCurve(this.curveName),this.setPublicKeyHex(n),this.setPrivateKeyHex(r),this.isPublic=!1},this.readPKCS8PrvKeyHex=function(t){if(!1===c(t))throw new e("not ASN.1 hex string");var r,n,i;try{u(t,0,[1,0],"06"),r=u(t,0,[1,1],"06"),n=u(t,0,[2,0,1],"04");try{i=u(t,0,[2,0,"[1]",0],"03")}catch(t){}}catch(t){throw new e("malformed PKCS#8 plain ECC private key")}if(this.curveName=s(r),void 0===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i),this.setPrivateKeyHex(n),this.isPublic=!1},this.readPKCS8PubKeyHex=function(t){if(!1===c(t))throw new e("not ASN.1 hex string");var r,n;try{u(t,0,[0,0],"06"),r=u(t,0,[0,1],"06"),n=u(t,0,[1],"03")}catch(t){throw new e("malformed PKCS#8 ECC public key")}if(this.curveName=s(r),null===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(n)},this.readCertPubKeyHex=function(t,r){if(!1===c(t))throw new e("not ASN.1 hex string");var n,i;try{n=u(t,0,[0,5,0,1],"06"),i=u(t,0,[0,5,1],"03")}catch(t){throw new e("malformed X.509 certificate ECC public key")}if(this.curveName=s(n),null===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i)},void 0!==t&&void 0!==t.curve&&(this.curveName=t.curve),void 0===this.curveName&&(this.curveName="secp256r1"),this.setNamedCurve(this.curveName),void 0!==t&&(void 0!==t.prv&&this.setPrivateKeyHex(t.prv),void 0!==t.pub&&this.setPublicKeyHex(t.pub))},Sr.crypto.ECDSA.parseSigHex=function(t){var e=Sr.crypto.ECDSA.parseSigHexInHexRS(t);return{r:new w(e.r,16),s:new w(e.s,16)}},Sr.crypto.ECDSA.parseSigHexInHexRS=function(t){var e=Fr,r=e.getChildIdx,n=e.getV;if(e.checkStrictDER(t,0),"30"!=t.substr(0,2))throw new Error("signature is not a ASN.1 sequence");var i=r(t,0);if(2!=i.length)throw new Error("signature shall have two elements");var o=i[0],s=i[1];if("02"!=t.substr(o,2))throw new Error("1st item not ASN.1 integer");if("02"!=t.substr(s,2))throw new Error("2nd item not ASN.1 integer");return{r:n(t,o),s:n(t,s)}},Sr.crypto.ECDSA.asn1SigToConcatSig=function(t){var e=Sr.crypto.ECDSA.parseSigHexInHexRS(t),r=e.r,n=e.s;if("00"==r.substr(0,2)&&r.length%32==2&&(r=r.substr(2)),"00"==n.substr(0,2)&&n.length%32==2&&(n=n.substr(2)),r.length%32==30&&(r="00"+r),n.length%32==30&&(n="00"+n),r.length%32!=0)throw"unknown ECDSA sig r length error";if(n.length%32!=0)throw"unknown ECDSA sig s length error";return r+n},Sr.crypto.ECDSA.concatSigToASN1Sig=function(t){if(t.length/2*8%128!=0)throw"unknown ECDSA concatinated r-s sig  length error";var e=t.substr(0,t.length/2),r=t.substr(t.length/2);return Sr.crypto.ECDSA.hexRSSigToASN1Sig(e,r)},Sr.crypto.ECDSA.hexRSSigToASN1Sig=function(t,e){var r=new w(t,16),n=new w(e,16);return Sr.crypto.ECDSA.biRSSigToASN1Sig(r,n)},Sr.crypto.ECDSA.biRSSigToASN1Sig=function(t,e){var r=Sr.asn1,n=new r.DERInteger({bigint:t}),i=new r.DERInteger({bigint:e});return new r.DERSequence({array:[n,i]}).getEncodedHex()},Sr.crypto.ECDSA.getName=function(t){return"2b8104001f"===t?"secp192k1":"2a8648ce3d030107"===t?"secp256r1":"2b8104000a"===t?"secp256k1":"2b81040021"===t?"secp224r1":"2b81040022"===t?"secp384r1":-1!=="|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(t)?"secp256r1":-1!=="|secp256k1|".indexOf(t)?"secp256k1":-1!=="|secp224r1|NIST P-224|P-224|".indexOf(t)?"secp224r1":-1!=="|secp384r1|NIST P-384|P-384|".indexOf(t)?"secp384r1":null},void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.crypto&&Sr.crypto||(Sr.crypto={}),Sr.crypto.ECParameterDB=new function(){var t={},e={};function r(t){return new w(t,16)}this.getByName=function(r){var n=r;if(void 0!==e[n]&&(n=e[r]),void 0!==t[n])return t[n];throw"unregistered EC curve name: "+n},this.regist=function(n,i,o,s,a,u,c,h,l,f,g,d){t[n]={};var p=r(o),v=r(s),y=r(a),m=r(u),_=r(c),S=new Ke(p,v,y),b=S.decodePointHex("04"+h+l);t[n].name=n,t[n].keylen=i,t[n].curve=S,t[n].G=b,t[n].n=m,t[n].h=_,t[n].oid=g,t[n].info=d;for(var w=0;w<f.length;w++)e[f[w]]=n}},Sr.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field"),Sr.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field"),Sr.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field"),Sr.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]),Sr.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]),Sr.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]),Sr.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]),Sr.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]),Sr.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]),Sr.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]);var tn=function(){var t=function t(r,n,i){return e(v.AES,r,n,i)},e=function t(e,r,n,i){var o=v.enc.Hex.parse(r),s=v.enc.Hex.parse(n),a=v.enc.Hex.parse(i),u={};u.key=s,u.iv=a,u.ciphertext=o;var c=e.decrypt(u,s,{iv:a});return v.enc.Hex.stringify(c)},r=function t(e,r,i){return n(v.AES,e,r,i)},n=function t(e,r,n,i){var o=v.enc.Hex.parse(r),s=v.enc.Hex.parse(n),a=v.enc.Hex.parse(i),u=e.encrypt(o,s,{iv:a}),c=v.enc.Hex.parse(u.toString());return v.enc.Base64.stringify(c)},i={"AES-256-CBC":{proc:t,eproc:r,keylen:32,ivlen:16},"AES-192-CBC":{proc:t,eproc:r,keylen:24,ivlen:16},"AES-128-CBC":{proc:t,eproc:r,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:function t(r,n,i){return e(v.TripleDES,r,n,i)},eproc:function t(e,r,i){return n(v.TripleDES,e,r,i)},keylen:24,ivlen:8},"DES-CBC":{proc:function t(r,n,i){return e(v.DES,r,n,i)},eproc:function t(e,r,i){return n(v.DES,e,r,i)},keylen:8,ivlen:8}},o=function t(e){var r={},n=e.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));n&&(r.cipher=n[1],r.ivsalt=n[2]);var i=e.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));i&&(r.type=i[1]);var o=-1,s=0;-1!=e.indexOf("\r\n\r\n")&&(o=e.indexOf("\r\n\r\n"),s=2),-1!=e.indexOf("\n\n")&&(o=e.indexOf("\n\n"),s=1);var a=e.indexOf("-----END");if(-1!=o&&-1!=a){var u=e.substring(o+2*s,a-s);u=u.replace(/\s+/g,""),r.data=u}return r},s=function t(e,r,n){for(var o=n.substring(0,16),s=v.enc.Hex.parse(o),a=v.enc.Utf8.parse(r),u=i[e].keylen+i[e].ivlen,c="",h=null;;){var l=v.algo.MD5.create();if(null!=h&&l.update(h),l.update(a),l.update(s),h=l.finalize(),(c+=v.enc.Hex.stringify(h)).length>=2*u)break}var f={};return f.keyhex=c.substr(0,2*i[e].keylen),f.ivhex=c.substr(2*i[e].keylen,2*i[e].ivlen),f},a=function t(e,r,n,o){var s=v.enc.Base64.parse(e),a=v.enc.Hex.stringify(s);return(0,i[r].proc)(a,n,o)};return{version:"1.0.0",parsePKCS5PEM:function t(e){return o(e)},getKeyAndUnusedIvByPasscodeAndIvsalt:function t(e,r,n){return s(e,r,n)},decryptKeyB64:function t(e,r,n,i){return a(e,r,n,i)},getDecryptedKeyHex:function t(e,r){var n=o(e),i=(n.type,n.cipher),u=n.ivsalt,c=n.data,h=s(i,r,u).keyhex;return a(c,i,h,u)},getEncryptedPKCS5PEMFromPrvKeyHex:function t(e,r,n,o,a){var u="";if(void 0!==o&&null!=o||(o="AES-256-CBC"),void 0===i[o])throw new Error("KEYUTIL unsupported algorithm: "+o);void 0!==a&&null!=a||(a=function t(e){var r=v.lib.WordArray.random(e);return v.enc.Hex.stringify(r)}(i[o].ivlen).toUpperCase());var c=function t(e,r,n,o){return(0,i[r].eproc)(e,n,o)}(r,o,s(o,n,a).keyhex,a);u="-----BEGIN "+e+" PRIVATE KEY-----\r\n";return u+="Proc-Type: 4,ENCRYPTED\r\n",u+="DEK-Info: "+o+","+a+"\r\n",u+="\r\n",u+=c.replace(/(.{64})/g,"$1\r\n"),u+="\r\n-----END "+e+" PRIVATE KEY-----\r\n"},parseHexOfEncryptedPKCS8:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={},s=n(e,0);if(2!=s.length)throw new Error("malformed format: SEQUENCE(0).items != 2: "+s.length);o.ciphertext=i(e,s[1]);var a=n(e,s[0]);if(2!=a.length)throw new Error("malformed format: SEQUENCE(0.0).items != 2: "+a.length);if("2a864886f70d01050d"!=i(e,a[0]))throw new Error("this only supports pkcs5PBES2");var u=n(e,a[1]);if(2!=a.length)throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: "+u.length);var c=n(e,u[1]);if(2!=c.length)throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: "+c.length);if("2a864886f70d0307"!=i(e,c[0]))throw"this only supports TripleDES";o.encryptionSchemeAlg="TripleDES",o.encryptionSchemeIV=i(e,c[1]);var h=n(e,u[0]);if(2!=h.length)throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: "+h.length);if("2a864886f70d01050c"!=i(e,h[0]))throw new Error("this only supports pkcs5PBKDF2");var l=n(e,h[1]);if(l.length<2)throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+l.length);o.pbkdf2Salt=i(e,l[0]);var f=i(e,l[1]);try{o.pbkdf2Iter=parseInt(f,16)}catch(t){throw new Error("malformed format pbkdf2Iter: "+f)}return o},getPBKDF2KeyHexFromParam:function t(e,r){var n=v.enc.Hex.parse(e.pbkdf2Salt),i=e.pbkdf2Iter,o=v.PBKDF2(r,n,{keySize:6,iterations:i});return v.enc.Hex.stringify(o)},_getPlainPKCS8HexFromEncryptedPKCS8PEM:function t(e,r){var n=Mr(e,"ENCRYPTED PRIVATE KEY"),i=this.parseHexOfEncryptedPKCS8(n),o=tn.getPBKDF2KeyHexFromParam(i,r),s={};s.ciphertext=v.enc.Hex.parse(i.ciphertext);var a=v.enc.Hex.parse(o),u=v.enc.Hex.parse(i.encryptionSchemeIV),c=v.TripleDES.decrypt(s,a,{iv:u});return v.enc.Hex.stringify(c)},getKeyFromEncryptedPKCS8PEM:function t(e,r){var n=this._getPlainPKCS8HexFromEncryptedPKCS8PEM(e,r);return this.getKeyFromPlainPrivatePKCS8Hex(n)},parsePlainPrivatePKCS8Hex:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={algparam:null};if("30"!=e.substr(0,2))throw new Error("malformed plain PKCS8 private key(code:001)");var s=n(e,0);if(s.length<3)throw new Error("malformed plain PKCS8 private key(code:002)");if("30"!=e.substr(s[1],2))throw new Error("malformed PKCS8 private key(code:003)");var a=n(e,s[1]);if(2!=a.length)throw new Error("malformed PKCS8 private key(code:004)");if("06"!=e.substr(a[0],2))throw new Error("malformed PKCS8 private key(code:005)");if(o.algoid=i(e,a[0]),"06"==e.substr(a[1],2)&&(o.algparam=i(e,a[1])),"04"!=e.substr(s[2],2))throw new Error("malformed PKCS8 private key(code:006)");return o.keyidx=r.getVidx(e,s[2]),o},getKeyFromPlainPrivatePKCS8PEM:function t(e){var r=Mr(e,"PRIVATE KEY");return this.getKeyFromPlainPrivatePKCS8Hex(r)},getKeyFromPlainPrivatePKCS8Hex:function t(e){var r,n=this.parsePlainPrivatePKCS8Hex(e);if("2a864886f70d010101"==n.algoid)r=new Me;else if("2a8648ce380401"==n.algoid)r=new Sr.crypto.DSA;else{if("2a8648ce3d0201"!=n.algoid)throw new Error("unsupported private key algorithm");r=new Sr.crypto.ECDSA}return r.readPKCS8PrvKeyHex(e),r},_getKeyFromPublicPKCS8Hex:function t(e){var r,n=Fr.getVbyList(e,0,[0,0],"06");if("2a864886f70d010101"===n)r=new Me;else if("2a8648ce380401"===n)r=new Sr.crypto.DSA;else{if("2a8648ce3d0201"!==n)throw new Error("unsupported PKCS#8 public key hex");r=new Sr.crypto.ECDSA}return r.readPKCS8PubKeyHex(e),r},parsePublicRawRSAKeyHex:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={};if("30"!=e.substr(0,2))throw new Error("malformed RSA key(code:001)");var s=n(e,0);if(2!=s.length)throw new Error("malformed RSA key(code:002)");if("02"!=e.substr(s[0],2))throw new Error("malformed RSA key(code:003)");if(o.n=i(e,s[0]),"02"!=e.substr(s[1],2))throw new Error("malformed RSA key(code:004)");return o.e=i(e,s[1]),o},parsePublicPKCS8Hex:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={algparam:null},s=n(e,0);if(2!=s.length)throw new Error("outer DERSequence shall have 2 elements: "+s.length);var a=s[0];if("30"!=e.substr(a,2))throw new Error("malformed PKCS8 public key(code:001)");var u=n(e,a);if(2!=u.length)throw new Error("malformed PKCS8 public key(code:002)");if("06"!=e.substr(u[0],2))throw new Error("malformed PKCS8 public key(code:003)");if(o.algoid=i(e,u[0]),"06"==e.substr(u[1],2)?o.algparam=i(e,u[1]):"30"==e.substr(u[1],2)&&(o.algparam={},o.algparam.p=r.getVbyList(e,u[1],[0],"02"),o.algparam.q=r.getVbyList(e,u[1],[1],"02"),o.algparam.g=r.getVbyList(e,u[1],[2],"02")),"03"!=e.substr(s[1],2))throw new Error("malformed PKCS8 public key(code:004)");return o.key=i(e,s[1]).substr(2),o}}}();tn.getKey=function(t,e,r){var n=(v=Fr).getChildIdx,i=(v.getV,v.getVbyList),o=Sr.crypto,s=o.ECDSA,a=o.DSA,u=Me,c=Mr,h=tn;if(void 0!==u&&t instanceof u)return t;if(void 0!==s&&t instanceof s)return t;if(void 0!==a&&t instanceof a)return t;if(void 0!==t.curve&&void 0!==t.xy&&void 0===t.d)return new s({pub:t.xy,curve:t.curve});if(void 0!==t.curve&&void 0!==t.d)return new s({prv:t.d,curve:t.curve});if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0===t.d)return(P=new u).setPublic(t.n,t.e),P;if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0!==t.p&&void 0!==t.q&&void 0!==t.dp&&void 0!==t.dq&&void 0!==t.co&&void 0===t.qi)return(P=new u).setPrivateEx(t.n,t.e,t.d,t.p,t.q,t.dp,t.dq,t.co),P;if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0===t.p)return(P=new u).setPrivate(t.n,t.e,t.d),P;if(void 0!==t.p&&void 0!==t.q&&void 0!==t.g&&void 0!==t.y&&void 0===t.x)return(P=new a).setPublic(t.p,t.q,t.g,t.y),P;if(void 0!==t.p&&void 0!==t.q&&void 0!==t.g&&void 0!==t.y&&void 0!==t.x)return(P=new a).setPrivate(t.p,t.q,t.g,t.y,t.x),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0===t.d)return(P=new u).setPublic(Rr(t.n),Rr(t.e)),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0!==t.p&&void 0!==t.q&&void 0!==t.dp&&void 0!==t.dq&&void 0!==t.qi)return(P=new u).setPrivateEx(Rr(t.n),Rr(t.e),Rr(t.d),Rr(t.p),Rr(t.q),Rr(t.dp),Rr(t.dq),Rr(t.qi)),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d)return(P=new u).setPrivate(Rr(t.n),Rr(t.e),Rr(t.d)),P;if("EC"===t.kty&&void 0!==t.crv&&void 0!==t.x&&void 0!==t.y&&void 0===t.d){var l=(k=new s({curve:t.crv})).ecparams.keylen/4,f="04"+("0000000000"+Rr(t.x)).slice(-l)+("0000000000"+Rr(t.y)).slice(-l);return k.setPublicKeyHex(f),k}if("EC"===t.kty&&void 0!==t.crv&&void 0!==t.x&&void 0!==t.y&&void 0!==t.d){l=(k=new s({curve:t.crv})).ecparams.keylen/4,f="04"+("0000000000"+Rr(t.x)).slice(-l)+("0000000000"+Rr(t.y)).slice(-l);var g=("0000000000"+Rr(t.d)).slice(-l);return k.setPublicKeyHex(f),k.setPrivateKeyHex(g),k}if("pkcs5prv"===r){var d,p=t,v=Fr;if(9===(d=n(p,0)).length)(P=new u).readPKCS5PrvKeyHex(p);else if(6===d.length)(P=new a).readPKCS5PrvKeyHex(p);else{if(!(d.length>2&&"04"===p.substr(d[1],2)))throw new Error("unsupported PKCS#1/5 hexadecimal key");(P=new s).readPKCS5PrvKeyHex(p)}return P}if("pkcs8prv"===r)return P=h.getKeyFromPlainPrivatePKCS8Hex(t);if("pkcs8pub"===r)return h._getKeyFromPublicPKCS8Hex(t);if("x509pub"===r)return on.getPublicKeyFromCertHex(t);if(-1!=t.indexOf("-END CERTIFICATE-",0)||-1!=t.indexOf("-END X509 CERTIFICATE-",0)||-1!=t.indexOf("-END TRUSTED CERTIFICATE-",0))return on.getPublicKeyFromCertPEM(t);if(-1!=t.indexOf("-END PUBLIC KEY-")){var y=Mr(t,"PUBLIC KEY");return h._getKeyFromPublicPKCS8Hex(y)}if(-1!=t.indexOf("-END RSA PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){var m=c(t,"RSA PRIVATE KEY");return h.getKey(m,null,"pkcs5prv")}if(-1!=t.indexOf("-END DSA PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){var _=i(R=c(t,"DSA PRIVATE KEY"),0,[1],"02"),S=i(R,0,[2],"02"),b=i(R,0,[3],"02"),F=i(R,0,[4],"02"),E=i(R,0,[5],"02");return(P=new a).setPrivate(new w(_,16),new w(S,16),new w(b,16),new w(F,16),new w(E,16)),P}if(-1!=t.indexOf("-END EC PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){m=c(t,"EC PRIVATE KEY");return h.getKey(m,null,"pkcs5prv")}if(-1!=t.indexOf("-END PRIVATE KEY-"))return h.getKeyFromPlainPrivatePKCS8PEM(t);if(-1!=t.indexOf("-END RSA PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var x=h.getDecryptedKeyHex(t,e),A=new Me;return A.readPKCS5PrvKeyHex(x),A}if(-1!=t.indexOf("-END EC PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var k,P=i(R=h.getDecryptedKeyHex(t,e),0,[1],"04"),C=i(R,0,[2,0],"06"),T=i(R,0,[3,0],"03").substr(2);if(void 0===Sr.crypto.OID.oidhex2name[C])throw new Error("undefined OID(hex) in KJUR.crypto.OID: "+C);return(k=new s({curve:Sr.crypto.OID.oidhex2name[C]})).setPublicKeyHex(T),k.setPrivateKeyHex(P),k.isPublic=!1,k}if(-1!=t.indexOf("-END DSA PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var R;_=i(R=h.getDecryptedKeyHex(t,e),0,[1],"02"),S=i(R,0,[2],"02"),b=i(R,0,[3],"02"),F=i(R,0,[4],"02"),E=i(R,0,[5],"02");return(P=new a).setPrivate(new w(_,16),new w(S,16),new w(b,16),new w(F,16),new w(E,16)),P}if(-1!=t.indexOf("-END ENCRYPTED PRIVATE KEY-"))return h.getKeyFromEncryptedPKCS8PEM(t,e);throw new Error("not supported argument")},tn.generateKeypair=function(t,e){if("RSA"==t){var r=e;(s=new Me).generate(r,"10001"),s.isPrivate=!0,s.isPublic=!0;var n=new Me,i=s.n.toString(16),o=s.e.toString(16);return n.setPublic(i,o),n.isPrivate=!1,n.isPublic=!0,(a={}).prvKeyObj=s,a.pubKeyObj=n,a}if("EC"==t){var s,a,u=e,c=new Sr.crypto.ECDSA({curve:u}).generateKeyPairHex();return(s=new Sr.crypto.ECDSA({curve:u})).setPublicKeyHex(c.ecpubhex),s.setPrivateKeyHex(c.ecprvhex),s.isPrivate=!0,s.isPublic=!1,(n=new Sr.crypto.ECDSA({curve:u})).setPublicKeyHex(c.ecpubhex),n.isPrivate=!1,n.isPublic=!0,(a={}).prvKeyObj=s,a.pubKeyObj=n,a}throw new Error("unknown algorithm: "+t)},tn.getPEM=function(t,e,r,n,i,o){var s=Sr,a=s.asn1,u=a.DERObjectIdentifier,c=a.DERInteger,h=a.ASN1Util.newObject,l=a.x509.SubjectPublicKeyInfo,f=s.crypto,g=f.DSA,d=f.ECDSA,p=Me;function y(t){return h({seq:[{int:0},{int:{bigint:t.n}},{int:t.e},{int:{bigint:t.d}},{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.dmp1}},{int:{bigint:t.dmq1}},{int:{bigint:t.coeff}}]})}function m(t){return h({seq:[{int:1},{octstr:{hex:t.prvKeyHex}},{tag:["a0",!0,{oid:{name:t.curveName}}]},{tag:["a1",!0,{bitstr:{hex:"00"+t.pubKeyHex}}]}]})}function _(t){return h({seq:[{int:0},{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.g}},{int:{bigint:t.y}},{int:{bigint:t.x}}]})}if((void 0!==p&&t instanceof p||void 0!==g&&t instanceof g||void 0!==d&&t instanceof d)&&1==t.isPublic&&(void 0===e||"PKCS8PUB"==e))return jr(F=new l(t).getEncodedHex(),"PUBLIC KEY");if("PKCS1PRV"==e&&void 0!==p&&t instanceof p&&(void 0===r||null==r)&&1==t.isPrivate)return jr(F=y(t).getEncodedHex(),"RSA PRIVATE KEY");if("PKCS1PRV"==e&&void 0!==d&&t instanceof d&&(void 0===r||null==r)&&1==t.isPrivate){var S=new u({name:t.curveName}).getEncodedHex(),b=m(t).getEncodedHex(),w="";return w+=jr(S,"EC PARAMETERS"),w+=jr(b,"EC PRIVATE KEY")}if("PKCS1PRV"==e&&void 0!==g&&t instanceof g&&(void 0===r||null==r)&&1==t.isPrivate)return jr(F=_(t).getEncodedHex(),"DSA PRIVATE KEY");if("PKCS5PRV"==e&&void 0!==p&&t instanceof p&&void 0!==r&&null!=r&&1==t.isPrivate){var F=y(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",F,r,n,o)}if("PKCS5PRV"==e&&void 0!==d&&t instanceof d&&void 0!==r&&null!=r&&1==t.isPrivate){F=m(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",F,r,n,o)}if("PKCS5PRV"==e&&void 0!==g&&t instanceof g&&void 0!==r&&null!=r&&1==t.isPrivate){F=_(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",F,r,n,o)}var E=function t(e,r){var n=x(e,r);return new h({seq:[{seq:[{oid:{name:"pkcs5PBES2"}},{seq:[{seq:[{oid:{name:"pkcs5PBKDF2"}},{seq:[{octstr:{hex:n.pbkdf2Salt}},{int:n.pbkdf2Iter}]}]},{seq:[{oid:{name:"des-EDE3-CBC"}},{octstr:{hex:n.encryptionSchemeIV}}]}]}]},{octstr:{hex:n.ciphertext}}]}).getEncodedHex()},x=function t(e,r){var n=v.lib.WordArray.random(8),i=v.lib.WordArray.random(8),o=v.PBKDF2(r,n,{keySize:6,iterations:100}),s=v.enc.Hex.parse(e),a=v.TripleDES.encrypt(s,o,{iv:i})+"",u={};return u.ciphertext=a,u.pbkdf2Salt=v.enc.Hex.stringify(n),u.pbkdf2Iter=100,u.encryptionSchemeAlg="DES-EDE3-CBC",u.encryptionSchemeIV=v.enc.Hex.stringify(i),u};if("PKCS8PRV"==e&&null!=p&&t instanceof p&&1==t.isPrivate){var A=y(t).getEncodedHex();F=h({seq:[{int:0},{seq:[{oid:{name:"rsaEncryption"}},{null:!0}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?jr(F,"PRIVATE KEY"):jr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==e&&void 0!==d&&t instanceof d&&1==t.isPrivate){A=new h({seq:[{int:1},{octstr:{hex:t.prvKeyHex}},{tag:["a1",!0,{bitstr:{hex:"00"+t.pubKeyHex}}]}]}).getEncodedHex(),F=h({seq:[{int:0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:t.curveName}}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?jr(F,"PRIVATE KEY"):jr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==e&&void 0!==g&&t instanceof g&&1==t.isPrivate){A=new c({bigint:t.x}).getEncodedHex(),F=h({seq:[{int:0},{seq:[{oid:{name:"dsa"}},{seq:[{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.g}}]}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?jr(F,"PRIVATE KEY"):jr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}throw new Error("unsupported object nor format")},tn.getKeyFromCSRPEM=function(t){var e=Mr(t,"CERTIFICATE REQUEST");return tn.getKeyFromCSRHex(e)},tn.getKeyFromCSRHex=function(t){var e=tn.parseCSRHex(t);return tn.getKey(e.p8pubkeyhex,null,"pkcs8pub")},tn.parseCSRHex=function(t){var e=Fr,r=e.getChildIdx,n=e.getTLV,i={},o=t;if("30"!=o.substr(0,2))throw new Error("malformed CSR(code:001)");var s=r(o,0);if(s.length<1)throw new Error("malformed CSR(code:002)");if("30"!=o.substr(s[0],2))throw new Error("malformed CSR(code:003)");var a=r(o,s[0]);if(a.length<3)throw new Error("malformed CSR(code:004)");return i.p8pubkeyhex=n(o,a[2]),i},tn.getKeyID=function(t){var e=tn,r=Fr;"string"==typeof t&&-1!=t.indexOf("BEGIN ")&&(t=e.getKey(t));var n=Mr(e.getPEM(t)),i=r.getIdxbyList(n,0,[1]),o=r.getV(n,i).substring(2);return Sr.crypto.Util.hashHex(o,"sha1")},tn.getJWKFromKey=function(t){var e={};if(t instanceof Me&&t.isPrivate)return e.kty="RSA",e.n=Tr(t.n.toString(16)),e.e=Tr(t.e.toString(16)),e.d=Tr(t.d.toString(16)),e.p=Tr(t.p.toString(16)),e.q=Tr(t.q.toString(16)),e.dp=Tr(t.dmp1.toString(16)),e.dq=Tr(t.dmq1.toString(16)),e.qi=Tr(t.coeff.toString(16)),e;if(t instanceof Me&&t.isPublic)return e.kty="RSA",e.n=Tr(t.n.toString(16)),e.e=Tr(t.e.toString(16)),e;if(t instanceof Sr.crypto.ECDSA&&t.isPrivate){if("P-256"!==(n=t.getShortNISTPCurveName())&&"P-384"!==n)throw new Error("unsupported curve name for JWT: "+n);var r=t.getPublicKeyXYHex();return e.kty="EC",e.crv=n,e.x=Tr(r.x),e.y=Tr(r.y),e.d=Tr(t.prvKeyHex),e}if(t instanceof Sr.crypto.ECDSA&&t.isPublic){var n;if("P-256"!==(n=t.getShortNISTPCurveName())&&"P-384"!==n)throw new Error("unsupported curve name for JWT: "+n);r=t.getPublicKeyXYHex();return e.kty="EC",e.crv=n,e.x=Tr(r.x),e.y=Tr(r.y),e}throw new Error("not supported key object")},Me.getPosArrayOfChildrenFromHex=function(t){return Fr.getChildIdx(t,0)},Me.getHexValueArrayOfChildrenFromHex=function(t){var e,r=Fr.getV,n=r(t,(e=Me.getPosArrayOfChildrenFromHex(t))[0]),i=r(t,e[1]),o=r(t,e[2]),s=r(t,e[3]),a=r(t,e[4]),u=r(t,e[5]),c=r(t,e[6]),h=r(t,e[7]),l=r(t,e[8]);return(e=new Array).push(n,i,o,s,a,u,c,h,l),e},Me.prototype.readPrivateKeyFromPEMString=function(t){var e=Mr(t),r=Me.getHexValueArrayOfChildrenFromHex(e);this.setPrivateEx(r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8])},Me.prototype.readPKCS5PrvKeyHex=function(t){var e=Me.getHexValueArrayOfChildrenFromHex(t);this.setPrivateEx(e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])},Me.prototype.readPKCS8PrvKeyHex=function(t){var e,r,n,i,o,s,a,u,c=Fr,h=c.getVbyListEx;if(!1===c.isASN1HEX(t))throw new Error("not ASN.1 hex string");try{e=h(t,0,[2,0,1],"02"),r=h(t,0,[2,0,2],"02"),n=h(t,0,[2,0,3],"02"),i=h(t,0,[2,0,4],"02"),o=h(t,0,[2,0,5],"02"),s=h(t,0,[2,0,6],"02"),a=h(t,0,[2,0,7],"02"),u=h(t,0,[2,0,8],"02")}catch(t){throw new Error("malformed PKCS#8 plain RSA private key")}this.setPrivateEx(e,r,n,i,o,s,a,u)},Me.prototype.readPKCS5PubKeyHex=function(t){var e=Fr,r=e.getV;if(!1===e.isASN1HEX(t))throw new Error("keyHex is not ASN.1 hex string");var n=e.getChildIdx(t,0);if(2!==n.length||"02"!==t.substr(n[0],2)||"02"!==t.substr(n[1],2))throw new Error("wrong hex for PKCS#5 public key");var i=r(t,n[0]),o=r(t,n[1]);this.setPublic(i,o)},Me.prototype.readPKCS8PubKeyHex=function(t){var e=Fr;if(!1===e.isASN1HEX(t))throw new Error("not ASN.1 hex string");if("06092a864886f70d010101"!==e.getTLVbyListEx(t,0,[0,0]))throw new Error("not PKCS8 RSA public key");var r=e.getTLVbyListEx(t,0,[1,0]);this.readPKCS5PubKeyHex(r)},Me.prototype.readCertPubKeyHex=function(t,e){var r,n;(r=new on).readCertHex(t),n=r.getPublicKeyHex(),this.readPKCS8PubKeyHex(n)};new RegExp("[^0-9a-f]","gi");function en(t,e){for(var r="",n=e/4-t.length,i=0;i<n;i++)r+="0";return r+t}function rn(t,e,r){for(var n="",i=0;n.length<e;)n+=Lr(r(Nr(t+String.fromCharCode.apply(String,[(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i])))),i+=1;return n}function nn(t){for(var e in Sr.crypto.Util.DIGESTINFOHEAD){var r=Sr.crypto.Util.DIGESTINFOHEAD[e],n=r.length;if(t.substring(0,n)==r)return[e,t.substring(n)]}return[]}function on(t){var e,r=Fr,n=r.getChildIdx,i=r.getV,o=r.getTLV,s=r.getVbyList,a=r.getVbyListEx,u=r.getTLVbyList,c=r.getTLVbyListEx,h=r.getIdxbyList,l=r.getIdxbyListEx,f=r.getVidx,g=r.getInt,d=r.oidname,p=r.hextooidstr,v=Mr;try{e=Sr.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV}catch(t){}this.HEX2STAG={"0c":"utf8",13:"prn",16:"ia5","1a":"vis","1e":"bmp"},this.hex=null,this.version=0,this.foffset=0,this.aExtInfo=null,this.getVersion=function(){if(null===this.hex||0!==this.version)return this.version;var t=u(this.hex,0,[0,0]);if("a0"==t.substr(0,2)){var e=u(t,0,[0]),r=g(e,0);if(r<0||2<r)throw new Error("malformed version field");return this.version=r+1,this.version}return this.version=1,this.foffset=-1,1},this.getSerialNumberHex=function(){return a(this.hex,0,[0,0],"02")},this.getSignatureAlgorithmField=function(){var t=c(this.hex,0,[0,1]);return this.getAlgorithmIdentifierName(t)},this.getAlgorithmIdentifierName=function(t){for(var r in e)if(t===e[r])return r;return d(a(t,0,[0],"06"))},this.getIssuer=function(){return this.getX500Name(this.getIssuerHex())},this.getIssuerHex=function(){return u(this.hex,0,[0,3+this.foffset],"30")},this.getIssuerString=function(){return this.getIssuer().str},this.getSubject=function(){return this.getX500Name(this.getSubjectHex())},this.getSubjectHex=function(){return u(this.hex,0,[0,5+this.foffset],"30")},this.getSubjectString=function(){return this.getSubject().str},this.getNotBefore=function(){var t=s(this.hex,0,[0,4+this.foffset,0]);return t=t.replace(/(..)/g,"%$1"),t=decodeURIComponent(t)},this.getNotAfter=function(){var t=s(this.hex,0,[0,4+this.foffset,1]);return t=t.replace(/(..)/g,"%$1"),t=decodeURIComponent(t)},this.getPublicKeyHex=function(){return r.getTLVbyList(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyIdx=function(){return h(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyContentIdx=function(){var t=this.getPublicKeyIdx();return h(this.hex,t,[1,0],"30")},this.getPublicKey=function(){return tn.getKey(this.getPublicKeyHex(),null,"pkcs8pub")},this.getSignatureAlgorithmName=function(){var t=u(this.hex,0,[1],"30");return this.getAlgorithmIdentifierName(t)},this.getSignatureValueHex=function(){return s(this.hex,0,[2],"03",!0)},this.verifySignature=function(t){var e=this.getSignatureAlgorithmField(),r=this.getSignatureValueHex(),n=u(this.hex,0,[0],"30"),i=new Sr.crypto.Signature({alg:e});return i.init(t),i.updateHex(n),i.verify(r)},this.parseExt=function(t){var e,o,a;if(void 0===t){if(a=this.hex,3!==this.version)return-1;e=h(a,0,[0,7,0],"30"),o=n(a,e)}else{a=Mr(t);var u=h(a,0,[0,3,0,0],"06");if("2a864886f70d01090e"!=i(a,u))return void(this.aExtInfo=new Array);e=h(a,0,[0,3,0,1,0],"30"),o=n(a,e),this.hex=a}this.aExtInfo=new Array;for(var c=0;c<o.length;c++){var l={critical:!1},g=0;3===n(a,o[c]).length&&(l.critical=!0,g=1),l.oid=r.hextooidstr(s(a,o[c],[0],"06"));var d=h(a,o[c],[1+g]);l.vidx=f(a,d),this.aExtInfo.push(l)}},this.getExtInfo=function(t){var e=this.aExtInfo,r=t;if(t.match(/^[0-9.]+$/)||(r=Sr.asn1.x509.OID.name2oid(t)),""!==r)for(var n=0;n<e.length;n++)if(e[n].oid===r)return e[n]},this.getExtBasicConstraints=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("basicConstraints");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"basicConstraints"};if(e&&(n.critical=!0),"3000"===t)return n;if("30030101ff"===t)return n.cA=!0,n;if("30060101ff02"===t.substr(0,12)){var s=i(t,10),a=parseInt(s,16);return n.cA=!0,n.pathLen=a,n}throw new Error("hExtV parse error: "+t)},this.getExtKeyUsage=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("keyUsage");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"keyUsage"};return e&&(n.critical=!0),n.names=this.getExtKeyUsageString(t).split(","),n},this.getExtKeyUsageBin=function(t){if(void 0===t){var e=this.getExtInfo("keyUsage");if(void 0===e)return"";t=o(this.hex,e.vidx)}if(8!=t.length&&10!=t.length)throw new Error("malformed key usage value: "+t);var r="000000000000000"+parseInt(t.substr(6),16).toString(2);return 8==t.length&&(r=r.slice(-8)),10==t.length&&(r=r.slice(-16)),""==(r=r.replace(/0+$/,""))&&(r="0"),r},this.getExtKeyUsageString=function(t){for(var e=this.getExtKeyUsageBin(t),r=new Array,n=0;n<e.length;n++)"1"==e.substr(n,1)&&r.push(on.KEYUSAGE_NAME[n]);return r.join(",")},this.getExtSubjectKeyIdentifier=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("subjectKeyIdentifier");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"subjectKeyIdentifier"};e&&(n.critical=!0);var s=i(t,0);return n.kid={hex:s},n},this.getExtAuthorityKeyIdentifier=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("authorityKeyIdentifier");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var s={extname:"authorityKeyIdentifier"};e&&(s.critical=!0);for(var a=n(t,0),u=0;u<a.length;u++){var c=t.substr(a[u],2);if("80"===c&&(s.kid={hex:i(t,a[u])}),"a1"===c){var h=o(t,a[u]),l=this.getGeneralNames(h);s.issuer=l[0].dn}"82"===c&&(s.sn={hex:i(t,a[u])})}return s},this.getExtExtKeyUsage=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("extKeyUsage");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var s={extname:"extKeyUsage",array:[]};e&&(s.critical=!0);for(var a=n(t,0),u=0;u<a.length;u++)s.array.push(d(i(t,a[u])));return s},this.getExtExtKeyUsageName=function(){var t=this.getExtInfo("extKeyUsage");if(void 0===t)return t;var e=new Array,r=o(this.hex,t.vidx);if(""===r)return e;for(var s=n(r,0),a=0;a<s.length;a++)e.push(d(i(r,s[a])));return e},this.getExtSubjectAltName=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("subjectAltName");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"subjectAltName",array:[]};return e&&(n.critical=!0),n.array=this.getGeneralNames(t),n},this.getExtIssuerAltName=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("issuerAltName");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"issuerAltName",array:[]};return e&&(n.critical=!0),n.array=this.getGeneralNames(t),n},this.getGeneralNames=function(t){for(var e=n(t,0),r=[],i=0;i<e.length;i++){var s=this.getGeneralName(o(t,e[i]));void 0!==s&&r.push(s)}return r},this.getGeneralName=function(t){var e=t.substr(0,2),r=i(t,0),n=Lr(r);return"81"==e?{rfc822:n}:"82"==e?{dns:n}:"86"==e?{uri:n}:"87"==e?{ip:zr(r)}:"a4"==e?{dn:this.getX500Name(r)}:void 0},this.getExtSubjectAltName2=function(){var t,e,r,s=this.getExtInfo("subjectAltName");if(void 0===s)return s;for(var a=new Array,u=o(this.hex,s.vidx),c=n(u,0),h=0;h<c.length;h++)r=u.substr(c[h],2),t=i(u,c[h]),"81"===r&&(e=Dr(t),a.push(["MAIL",e])),"82"===r&&(e=Dr(t),a.push(["DNS",e])),"84"===r&&(e=on.hex2dn(t,0),a.push(["DN",e])),"86"===r&&(e=Dr(t),a.push(["URI",e])),"87"===r&&(e=zr(t),a.push(["IP",e]));return a},this.getExtCRLDistributionPoints=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("cRLDistributionPoints");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"cRLDistributionPoints",array:[]};e&&(i.critical=!0);for(var s=n(t,0),a=0;a<s.length;a++){var u=o(t,s[a]);i.array.push(this.getDistributionPoint(u))}return i},this.getDistributionPoint=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=t.substr(r[i],2),a=o(t,r[i]);"a0"==s&&(e.dpname=this.getDistributionPointName(a))}return e},this.getDistributionPointName=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=t.substr(r[i],2),a=o(t,r[i]);"a0"==s&&(e.full=this.getGeneralNames(a))}return e},this.getExtCRLDistributionPointsURI=function(){var t=this.getExtInfo("cRLDistributionPoints");if(void 0===t)return t;for(var e=new Array,r=n(this.hex,t.vidx),i=0;i<r.length;i++)try{var o=Dr(s(this.hex,r[i],[0,0,0],"86"));e.push(o)}catch(t){}return e},this.getExtAIAInfo=function(){var t=this.getExtInfo("authorityInfoAccess");if(void 0===t)return t;for(var e={ocsp:[],caissuer:[]},r=n(this.hex,t.vidx),i=0;i<r.length;i++){var o=s(this.hex,r[i],[0],"06"),a=s(this.hex,r[i],[1],"86");"2b06010505073001"===o&&e.ocsp.push(Dr(a)),"2b06010505073002"===o&&e.caissuer.push(Dr(a))}return e},this.getExtAuthorityInfoAccess=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("authorityInfoAccess");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"authorityInfoAccess",array:[]};e&&(i.critical=!0);for(var u=n(t,0),c=0;c<u.length;c++){var h=a(t,u[c],[0],"06"),l=Dr(s(t,u[c],[1],"86"));if("2b06010505073001"==h)i.array.push({ocsp:l});else{if("2b06010505073002"!=h)throw new Error("unknown method: "+h);i.array.push({caissuer:l})}}return i},this.getExtCertificatePolicies=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("certificatePolicies");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"certificatePolicies",array:[]};e&&(i.critical=!0);for(var s=n(t,0),a=0;a<s.length;a++){var u=o(t,s[a]),c=this.getPolicyInformation(u);i.array.push(c)}return i},this.getPolicyInformation=function(t){var e={},r=s(t,0,[0],"06");e.policyoid=d(r);var i=l(t,0,[1],"30");if(-1!=i){e.array=[];for(var a=n(t,i),u=0;u<a.length;u++){var c=o(t,a[u]),h=this.getPolicyQualifierInfo(c);e.array.push(h)}}return e},this.getPolicyQualifierInfo=function(t){var e={},r=s(t,0,[0],"06");if("2b06010505070201"===r){var n=a(t,0,[1],"16");e.cps=Lr(n)}else if("2b06010505070202"===r){var i=u(t,0,[1],"30");e.unotice=this.getUserNotice(i)}return e},this.getUserNotice=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=o(t,r[i]);"30"!=s.substr(0,2)&&(e.exptext=this.getDisplayText(s))}return e},this.getDisplayText=function(t){var e={};return e.type={"0c":"utf8",16:"ia5","1a":"vis","1e":"bmp"}[t.substr(0,2)],e.str=Lr(i(t,0)),e},this.getExtCRLNumber=function(t,e){var r={extname:"cRLNumber"};if(e&&(r.critical=!0),"02"==t.substr(0,2))return r.num={hex:i(t,0)},r;throw new Error("hExtV parse error: "+t)},this.getExtCRLReason=function(t,e){var r={extname:"cRLReason"};if(e&&(r.critical=!0),"0a"==t.substr(0,2))return r.code=parseInt(i(t,0),16),r;throw new Error("hExtV parse error: "+t)},this.getExtOcspNonce=function(t,e){var r={extname:"ocspNonce"};e&&(r.critical=!0);var n=i(t,0);return r.hex=n,r},this.getExtOcspNoCheck=function(t,e){var r={extname:"ocspNoCheck"};return e&&(r.critical=!0),r},this.getExtAdobeTimeStamp=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("adobeTimeStamp");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"adobeTimeStamp"};e&&(i.critical=!0);var s=n(t,0);if(s.length>1){var a=o(t,s[1]),u=this.getGeneralName(a);null!=u.uri&&(i.uri=u.uri)}if(s.length>2){var c=o(t,s[2]);"0101ff"==c&&(i.reqauth=!0),"010100"==c&&(i.reqauth=!1)}return i},this.getX500NameRule=function(t){for(var e=null,r=[],n=0;n<t.length;n++)for(var i=t[n],o=0;o<i.length;o++)r.push(i[o]);for(n=0;n<r.length;n++){var s=r[n],a=s.ds,u=s.value,c=s.type;if(":"+a,"prn"!=a&&"utf8"!=a&&"ia5"!=a)return"mixed";if("ia5"==a){if("CN"!=c)return"mixed";if(Sr.lang.String.isMail(u))continue;return"mixed"}if("C"==c){if("prn"==a)continue;return"mixed"}if(":"+a,null==e)e=a;else if(e!==a)return"mixed"}return null==e?"prn":e},this.getX500Name=function(t){var e=this.getX500NameArray(t);return{array:e,str:this.dnarraytostr(e)}},this.getX500NameArray=function(t){for(var e=[],r=n(t,0),i=0;i<r.length;i++)e.push(this.getRDN(o(t,r[i])));return e},this.getRDN=function(t){for(var e=[],r=n(t,0),i=0;i<r.length;i++)e.push(this.getAttrTypeAndValue(o(t,r[i])));return e},this.getAttrTypeAndValue=function(t){var e={type:null,value:null,ds:null},r=n(t,0),i=s(t,r[0],[],"06"),o=s(t,r[1],[]),a=Sr.asn1.ASN1Util.oidHexToInt(i);return e.type=Sr.asn1.x509.OID.oid2atype(a),e.ds=this.HEX2STAG[t.substr(r[1],2)],"bmp"!=e.ds?e.value=Dr(o):e.value=Yr(o),e},this.readCertPEM=function(t){this.readCertHex(v(t))},this.readCertHex=function(t){this.hex=t,this.getVersion();try{h(this.hex,0,[0,7],"a3"),this.parseExt()}catch(t){}},this.getParam=function(){var t={};return t.version=this.getVersion(),t.serial={hex:this.getSerialNumberHex()},t.sigalg=this.getSignatureAlgorithmField(),t.issuer=this.getIssuer(),t.notbefore=this.getNotBefore(),t.notafter=this.getNotAfter(),t.subject=this.getSubject(),t.sbjpubkey=jr(this.getPublicKeyHex(),"PUBLIC KEY"),this.aExtInfo.length>0&&(t.ext=this.getExtParamArray()),t.sighex=this.getSignatureValueHex(),t},this.getExtParamArray=function(t){null==t&&(-1!=l(this.hex,0,[0,"[3]"])&&(t=c(this.hex,0,[0,"[3]",0],"30")));for(var e=[],r=n(t,0),i=0;i<r.length;i++){var s=o(t,r[i]),a=this.getExtParam(s);null!=a&&e.push(a)}return e},this.getExtParam=function(t){var e=n(t,0).length;if(2!=e&&3!=e)throw new Error("wrong number elements in Extension: "+e+" "+t);var r=p(s(t,0,[0],"06")),i=!1;3==e&&"0101ff"==u(t,0,[1])&&(i=!0);var o=u(t,0,[e-1,0]),a=void 0;if("2.5.29.14"==r?a=this.getExtSubjectKeyIdentifier(o,i):"2.5.29.15"==r?a=this.getExtKeyUsage(o,i):"2.5.29.17"==r?a=this.getExtSubjectAltName(o,i):"2.5.29.18"==r?a=this.getExtIssuerAltName(o,i):"2.5.29.19"==r?a=this.getExtBasicConstraints(o,i):"2.5.29.31"==r?a=this.getExtCRLDistributionPoints(o,i):"2.5.29.32"==r?a=this.getExtCertificatePolicies(o,i):"2.5.29.35"==r?a=this.getExtAuthorityKeyIdentifier(o,i):"2.5.29.37"==r?a=this.getExtExtKeyUsage(o,i):"1.3.6.1.5.5.7.1.1"==r?a=this.getExtAuthorityInfoAccess(o,i):"2.5.29.20"==r?a=this.getExtCRLNumber(o,i):"2.5.29.21"==r?a=this.getExtCRLReason(o,i):"1.3.6.1.5.5.7.48.1.2"==r?a=this.getExtOcspNonce(o,i):"1.3.6.1.5.5.7.48.1.5"==r?a=this.getExtOcspNoCheck(o,i):"1.2.840.113583.1.1.9.1"==r&&(a=this.getExtAdobeTimeStamp(o,i)),null!=a)return a;var c={extname:r,extn:o};return i&&(c.critical=!0),c},this.findExt=function(t,e){for(var r=0;r<t.length;r++)if(t[r].extname==e)return t[r];return null},this.updateExtCDPFullURI=function(t,e){var r=this.findExt(t,"cRLDistributionPoints");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)if(null!=n[i].dpname&&null!=n[i].dpname.full)for(var o=n[i].dpname.full,s=0;s<o.length;s++){var a=o[i];null!=a.uri&&(a.uri=e)}},this.updateExtAIAOCSP=function(t,e){var r=this.findExt(t,"authorityInfoAccess");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)null!=n[i].ocsp&&(n[i].ocsp=e)},this.updateExtAIACAIssuer=function(t,e){var r=this.findExt(t,"authorityInfoAccess");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)null!=n[i].caissuer&&(n[i].caissuer=e)},this.dnarraytostr=function(t){return"/"+t.map((function(t){return function e(t){return t.map((function(t){return function e(t){return t.type+"="+t.value}(t).replace(/\+/,"\\+")})).join("+")}(t).replace(/\//,"\\/")})).join("/")},this.getInfo=function(){var t,e,r,n=function t(e){return JSON.stringify(e.array).replace(/[\[\]\{\}\"]/g,"")},i=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];if(r+="    policy oid: "+o.policyoid+"\n",void 0!==o.array)for(var s=0;s<o.array.length;s++){var a=o.array[s];void 0!==a.cps&&(r+="    cps: "+a.cps+"\n")}}return r},o=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];try{void 0!==o.dpname.full[0].uri&&(r+="    "+o.dpname.full[0].uri+"\n")}catch(t){}try{void 0!==o.dname.full[0].dn.hex&&(r+="    "+on.hex2dn(o.dpname.full[0].dn.hex)+"\n")}catch(t){}}return r},s=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];void 0!==o.caissuer&&(r+="    caissuer: "+o.caissuer+"\n"),void 0!==o.ocsp&&(r+="    ocsp: "+o.ocsp+"\n")}return r};if(t="Basic Fields\n",t+="  serial number: "+this.getSerialNumberHex()+"\n",t+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n",t+="  issuer: "+this.getIssuerString()+"\n",t+="  notBefore: "+this.getNotBefore()+"\n",t+="  notAfter: "+this.getNotAfter()+"\n",t+="  subject: "+this.getSubjectString()+"\n",t+="  subject public key info: \n",t+="    key algorithm: "+(e=this.getPublicKey()).type+"\n","RSA"===e.type&&(t+="    n="+$r(e.n.toString(16)).substr(0,16)+"...\n",t+="    e="+$r(e.e.toString(16))+"\n"),null!=(r=this.aExtInfo)){t+="X509v3 Extensions:\n";for(var a=0;a<r.length;a++){var u=r[a],c=Sr.asn1.x509.OID.oid2name(u.oid);""===c&&(c=u.oid);var h="";if(!0===u.critical&&(h="CRITICAL"),t+="  "+c+" "+h+":\n","basicConstraints"===c){var l=this.getExtBasicConstraints();void 0===l.cA?t+="    {}\n":(t+="    cA=true",void 0!==l.pathLen&&(t+=", pathLen="+l.pathLen),t+="\n")}else if("keyUsage"===c)t+="    "+this.getExtKeyUsageString()+"\n";else if("subjectKeyIdentifier"===c)t+="    "+this.getExtSubjectKeyIdentifier().kid.hex+"\n";else if("authorityKeyIdentifier"===c){var f=this.getExtAuthorityKeyIdentifier();void 0!==f.kid&&(t+="    kid="+f.kid.hex+"\n")}else{if("extKeyUsage"===c)t+="    "+this.getExtExtKeyUsage().array.join(", ")+"\n";else if("subjectAltName"===c)t+="    "+n(this.getExtSubjectAltName())+"\n";else if("cRLDistributionPoints"===c)t+=o(this.getExtCRLDistributionPoints());else if("authorityInfoAccess"===c)t+=s(this.getExtAuthorityInfoAccess());else"certificatePolicies"===c&&(t+=i(this.getExtCertificatePolicies()))}}}return t+="signature algorithm: "+this.getSignatureAlgorithmName()+"\n",t+="signature: "+this.getSignatureValueHex().substr(0,16)+"...\n"},"string"==typeof t&&(-1!=t.indexOf("-----BEGIN")?this.readCertPEM(t):Sr.lang.String.isHex(t)&&this.readCertHex(t))}Me.prototype.sign=function(t,e){var r=function t(r){return Sr.crypto.Util.hashString(r,e)}(t);return this.signWithMessageHash(r,e)},Me.prototype.signWithMessageHash=function(t,e){var r=Oe(Sr.crypto.Util.getPaddedDigestInfoHex(t,e,this.n.bitLength()),16);return en(this.doPrivate(r).toString(16),this.n.bitLength())},Me.prototype.signPSS=function(t,e,r){var n=function t(r){return Sr.crypto.Util.hashHex(r,e)}(Nr(t));return void 0===r&&(r=-1),this.signWithMessageHashPSS(n,e,r)},Me.prototype.signWithMessageHashPSS=function(t,e,r){var n,i=Lr(t),o=i.length,s=this.n.bitLength()-1,a=Math.ceil(s/8),u=function t(r){return Sr.crypto.Util.hashHex(r,e)};if(-1===r||void 0===r)r=o;else if(-2===r)r=a-o-2;else if(r<-2)throw new Error("invalid salt length");if(a<o+r+2)throw new Error("data too long");var c="";r>0&&(c=new Array(r),(new Be).nextBytes(c),c=String.fromCharCode.apply(String,c));var h=Lr(u(Nr("\0\0\0\0\0\0\0\0"+i+c))),l=[];for(n=0;n<a-r-o-2;n+=1)l[n]=0;var f=String.fromCharCode.apply(String,l)+""+c,g=rn(h,f.length,u),d=[];for(n=0;n<f.length;n+=1)d[n]=f.charCodeAt(n)^g.charCodeAt(n);var p=65280>>8*a-s&255;for(d[0]&=~p,n=0;n<o;n++)d.push(h.charCodeAt(n));return d.push(188),en(this.doPrivate(new w(d)).toString(16),this.n.bitLength())},Me.prototype.verify=function(t,e){if(null==(e=e.toLowerCase()).match(/^[0-9a-f]+$/))return!1;var r=Oe(e,16),n=this.n.bitLength();if(r.bitLength()>n)return!1;var i=this.doPublic(r).toString(16);if(i.length+3!=n/4)return!1;var o=nn(i.replace(/^1f+00/,""));if(0==o.length)return!1;var s=o[0];return o[1]==function t(e){return Sr.crypto.Util.hashString(e,s)}(t)},Me.prototype.verifyWithMessageHash=function(t,e){if(e.length!=Math.ceil(this.n.bitLength()/4))return!1;var r=Oe(e,16);if(r.bitLength()>this.n.bitLength())return 0;var n=nn(this.doPublic(r).toString(16).replace(/^1f+00/,""));if(0==n.length)return!1;n[0];return n[1]==t},Me.prototype.verifyPSS=function(t,e,r,n){var i=function t(e){return Sr.crypto.Util.hashHex(e,r)}(Nr(t));return void 0===n&&(n=-1),this.verifyWithMessageHashPSS(i,e,r,n)},Me.prototype.verifyWithMessageHashPSS=function(t,e,r,n){if(e.length!=Math.ceil(this.n.bitLength()/4))return!1;var i,o=new w(e,16),s=function t(e){return Sr.crypto.Util.hashHex(e,r)},a=Lr(t),u=a.length,c=this.n.bitLength()-1,h=Math.ceil(c/8);if(-1===n||void 0===n)n=u;else if(-2===n)n=h-u-2;else if(n<-2)throw new Error("invalid salt length");if(h<u+n+2)throw new Error("data too long");var l=this.doPublic(o).toByteArray();for(i=0;i<l.length;i+=1)l[i]&=255;for(;l.length<h;)l.unshift(0);if(188!==l[h-1])throw new Error("encoded message does not end in 0xbc");var f=(l=String.fromCharCode.apply(String,l)).substr(0,h-u-1),g=l.substr(f.length,u),d=65280>>8*h-c&255;if(0!=(f.charCodeAt(0)&d))throw new Error("bits beyond keysize not zero");var p=rn(g,f.length,s),v=[];for(i=0;i<f.length;i+=1)v[i]=f.charCodeAt(i)^p.charCodeAt(i);v[0]&=~d;var y=h-u-n-2;for(i=0;i<y;i+=1)if(0!==v[i])throw new Error("leftmost octets not zero");if(1!==v[y])throw new Error("0x01 marker not found");return g===Lr(s(Nr("\0\0\0\0\0\0\0\0"+a+String.fromCharCode.apply(String,v.slice(-n)))))},Me.SALT_LEN_HLEN=-1,Me.SALT_LEN_MAX=-2,Me.SALT_LEN_RECOVER=-2,on.hex2dn=function(t,e){void 0===e&&(e=0);var r=new on;Fr.getTLV(t,e);return r.getX500Name(t).str},on.hex2rdn=function(t,e){if(void 0===e&&(e=0),"31"!==t.substr(e,2))throw new Error("malformed RDN");for(var r=new Array,n=Fr.getChildIdx(t,e),i=0;i<n.length;i++)r.push(on.hex2attrTypeValue(t,n[i]));return(r=r.map((function(t){return t.replace("+","\\+")}))).join("+")},on.hex2attrTypeValue=function(t,e){var r=Fr,n=r.getV;if(void 0===e&&(e=0),"30"!==t.substr(e,2))throw new Error("malformed attribute type and value");var i=r.getChildIdx(t,e);2!==i.length||t.substr(i[0],2);var o=n(t,i[0]),s=Sr.asn1.ASN1Util.oidHexToInt(o);return Sr.asn1.x509.OID.oid2atype(s)+"="+Lr(n(t,i[1]))},on.getPublicKeyFromCertHex=function(t){var e=new on;return e.readCertHex(t),e.getPublicKey()},on.getPublicKeyFromCertPEM=function(t){var e=new on;return e.readCertPEM(t),e.getPublicKey()},on.getPublicKeyInfoPropOfCertPEM=function(t){var e,r,n=Fr.getVbyList,i={};return i.algparam=null,(e=new on).readCertPEM(t),r=e.getPublicKeyHex(),i.keyhex=n(r,0,[1],"03").substr(2),i.algoid=n(r,0,[0,0],"06"),"2a8648ce3d0201"===i.algoid&&(i.algparam=n(r,0,[0,1],"06")),i},on.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"],void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.jws&&Sr.jws||(Sr.jws={}),Sr.jws.JWS=function(){var t=Sr.jws.JWS.isSafeJSONString;this.parseJWS=function(e,r){if(void 0===this.parsedJWS||!r&&void 0===this.parsedJWS.sigvalH){var n=e.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(null==n)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";var i=n[1],o=n[2],s=n[3],a=i+"."+o;if(this.parsedJWS={},this.parsedJWS.headB64U=i,this.parsedJWS.payloadB64U=o,this.parsedJWS.sigvalB64U=s,this.parsedJWS.si=a,!r){var u=Rr(s),c=Oe(u,16);this.parsedJWS.sigvalH=u,this.parsedJWS.sigvalBI=c}var h=wr(i),l=wr(o);if(this.parsedJWS.headS=h,this.parsedJWS.payloadS=l,!t(h,this.parsedJWS,"headP"))throw"malformed JSON string for JWS Head: "+h}}},Sr.jws.JWS.sign=function(t,e,r,n,i){var o,s,a,u=Sr,c=u.jws.JWS,h=c.readSafeJSONString,l=c.isSafeJSONString,f=u.crypto,d=(f.ECDSA,f.Mac),p=f.Signature,v=JSON;if("string"!=typeof e&&"object"!=(void 0===e?"undefined":g(e)))throw"spHeader must be JSON string or object: "+e;if("object"==(void 0===e?"undefined":g(e))&&(s=e,o=v.stringify(s)),"string"==typeof e){if(!l(o=e))throw"JWS Head is not safe JSON string: "+o;s=h(o)}if(a=r,"object"==(void 0===r?"undefined":g(r))&&(a=v.stringify(r)),""!=t&&null!=t||void 0===s.alg||(t=s.alg),""!=t&&null!=t&&void 0===s.alg&&(s.alg=t,o=v.stringify(s)),t!==s.alg)throw"alg and sHeader.alg doesn't match: "+t+"!="+s.alg;var y=null;if(void 0===c.jwsalg2sigalg[t])throw"unsupported alg name: "+t;y=c.jwsalg2sigalg[t];var m=br(o)+"."+br(a),_="";if("Hmac"==y.substr(0,4)){if(void 0===n)throw"mac key shall be specified for HS* alg";var S=new d({alg:y,prov:"cryptojs",pass:n});S.updateString(m),_=S.doFinal()}else if(-1!=y.indexOf("withECDSA")){(w=new p({alg:y})).init(n,i),w.updateString(m);var b=w.sign();_=Sr.crypto.ECDSA.asn1SigToConcatSig(b)}else{var w;if("none"!=y)(w=new p({alg:y})).init(n,i),w.updateString(m),_=w.sign()}return m+"."+Tr(_)},Sr.jws.JWS.verify=function(t,e,r){var n,i=Sr,o=i.jws.JWS,s=o.readSafeJSONString,a=i.crypto,u=a.ECDSA,c=a.Mac,h=a.Signature;void 0!==g(Me)&&(n=Me);var l=t.split(".");if(3!==l.length)return!1;var f=l[0]+"."+l[1],d=Rr(l[2]),p=s(wr(l[0])),v=null,y=null;if(void 0===p.alg)throw"algorithm not specified in header";if((y=(v=p.alg).substr(0,2),null!=r&&"[object Array]"===Object.prototype.toString.call(r)&&r.length>0)&&-1==(":"+r.join(":")+":").indexOf(":"+v+":"))throw"algorithm '"+v+"' not accepted in the list";if("none"!=v&&null===e)throw"key shall be specified to verify.";if("string"==typeof e&&-1!=e.indexOf("-----BEGIN ")&&(e=tn.getKey(e)),!("RS"!=y&&"PS"!=y||e instanceof n))throw"key shall be a RSAKey obj for RS* and PS* algs";if("ES"==y&&!(e instanceof u))throw"key shall be a ECDSA obj for ES* algs";var m=null;if(void 0===o.jwsalg2sigalg[p.alg])throw"unsupported alg name: "+v;if("none"==(m=o.jwsalg2sigalg[v]))throw"not supported";if("Hmac"==m.substr(0,4)){if(void 0===e)throw"hexadecimal key shall be specified for HMAC";var _=new c({alg:m,pass:e});return _.updateString(f),d==_.doFinal()}if(-1!=m.indexOf("withECDSA")){var S,b=null;try{b=u.concatSigToASN1Sig(d)}catch(t){return!1}return(S=new h({alg:m})).init(e),S.updateString(f),S.verify(b)}return(S=new h({alg:m})).init(e),S.updateString(f),S.verify(d)},Sr.jws.JWS.parse=function(t){var e,r,n,i=t.split("."),o={};if(2!=i.length&&3!=i.length)throw"malformed sJWS: wrong number of '.' splitted elements";return e=i[0],r=i[1],3==i.length&&(n=i[2]),o.headerObj=Sr.jws.JWS.readSafeJSONString(wr(e)),o.payloadObj=Sr.jws.JWS.readSafeJSONString(wr(r)),o.headerPP=JSON.stringify(o.headerObj,null,"  "),null==o.payloadObj?o.payloadPP=wr(r):o.payloadPP=JSON.stringify(o.payloadObj,null,"  "),void 0!==n&&(o.sigHex=Rr(n)),o},Sr.jws.JWS.verifyJWT=function(t,e,r){var n=Sr.jws,i=n.JWS,o=i.readSafeJSONString,s=i.inArray,a=i.includedArray,u=t.split("."),c=u[0],h=u[1],l=(Rr(u[2]),o(wr(c))),f=o(wr(h));if(void 0===l.alg)return!1;if(void 0===r.alg)throw"acceptField.alg shall be specified";if(!s(l.alg,r.alg))return!1;if(void 0!==f.iss&&"object"===g(r.iss)&&!s(f.iss,r.iss))return!1;if(void 0!==f.sub&&"object"===g(r.sub)&&!s(f.sub,r.sub))return!1;if(void 0!==f.aud&&"object"===g(r.aud))if("string"==typeof f.aud){if(!s(f.aud,r.aud))return!1}else if("object"==g(f.aud)&&!a(f.aud,r.aud))return!1;var d=n.IntDate.getNow();return void 0!==r.verifyAt&&"number"==typeof r.verifyAt&&(d=r.verifyAt),void 0!==r.gracePeriod&&"number"==typeof r.gracePeriod||(r.gracePeriod=0),!(void 0!==f.exp&&"number"==typeof f.exp&&f.exp+r.gracePeriod<d)&&(!(void 0!==f.nbf&&"number"==typeof f.nbf&&d<f.nbf-r.gracePeriod)&&(!(void 0!==f.iat&&"number"==typeof f.iat&&d<f.iat-r.gracePeriod)&&((void 0===f.jti||void 0===r.jti||f.jti===r.jti)&&!!i.verify(t,e,r.alg))))},Sr.jws.JWS.includedArray=function(t,e){var r=Sr.jws.JWS.inArray;if(null===t)return!1;if("object"!==(void 0===t?"undefined":g(t)))return!1;if("number"!=typeof t.length)return!1;for(var n=0;n<t.length;n++)if(!r(t[n],e))return!1;return!0},Sr.jws.JWS.inArray=function(t,e){if(null===e)return!1;if("object"!==(void 0===e?"undefined":g(e)))return!1;if("number"!=typeof e.length)return!1;for(var r=0;r<e.length;r++)if(e[r]==t)return!0;return!1},Sr.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none"},Sr.jws.JWS.isSafeJSONString=function(t,e,r){var n=null;try{return"object"!=(void 0===(n=_r(t))?"undefined":g(n))||n.constructor===Array?0:(e&&(e[r]=n),1)}catch(t){return 0}},Sr.jws.JWS.readSafeJSONString=function(t){var e=null;try{return"object"!=(void 0===(e=_r(t))?"undefined":g(e))||e.constructor===Array?null:e}catch(t){return null}},Sr.jws.JWS.getEncodedSignatureValueFromJWS=function(t){var e=t.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(null==e)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";return e[1]},Sr.jws.JWS.getJWKthumbprint=function(t){if("RSA"!==t.kty&&"EC"!==t.kty&&"oct"!==t.kty)throw"unsupported algorithm for JWK Thumprint";var e="{";if("RSA"===t.kty){if("string"!=typeof t.n||"string"!=typeof t.e)throw"wrong n and e value for RSA key";e+='"e":"'+t.e+'",',e+='"kty":"'+t.kty+'",',e+='"n":"'+t.n+'"}'}else if("EC"===t.kty){if("string"!=typeof t.crv||"string"!=typeof t.x||"string"!=typeof t.y)throw"wrong crv, x and y value for EC key";e+='"crv":"'+t.crv+'",',e+='"kty":"'+t.kty+'",',e+='"x":"'+t.x+'",',e+='"y":"'+t.y+'"}'}else if("oct"===t.kty){if("string"!=typeof t.k)throw"wrong k value for oct(symmetric) key";e+='"kty":"'+t.kty+'",',e+='"k":"'+t.k+'"}'}var r=Nr(e);return Tr(Sr.crypto.Util.hashHex(r,"sha256"))},Sr.jws.IntDate={},Sr.jws.IntDate.get=function(t){var e=Sr.jws.IntDate,r=e.getNow,n=e.getZulu;if("now"==t)return r();if("now + 1hour"==t)return r()+3600;if("now + 1day"==t)return r()+86400;if("now + 1month"==t)return r()+2592e3;if("now + 1year"==t)return r()+31536e3;if(t.match(/Z$/))return n(t);if(t.match(/^[0-9]+$/))return parseInt(t);throw"unsupported format: "+t},Sr.jws.IntDate.getZulu=function(t){return Vr(t)},Sr.jws.IntDate.getNow=function(){return~~(new Date/1e3)},Sr.jws.IntDate.intDate2UTCString=function(t){return new Date(1e3*t).toUTCString()},Sr.jws.IntDate.intDate2Zulu=function(t){var e=new Date(1e3*t);return("0000"+e.getUTCFullYear()).slice(-4)+("00"+(e.getUTCMonth()+1)).slice(-2)+("00"+e.getUTCDate()).slice(-2)+("00"+e.getUTCHours()).slice(-2)+("00"+e.getUTCMinutes()).slice(-2)+("00"+e.getUTCSeconds()).slice(-2)+"Z"},e.SecureRandom=Be,e.rng_seed_time=Re,e.BigInteger=w,e.RSAKey=Me;var sn=Sr.crypto.EDSA;e.EDSA=sn;var an=Sr.crypto.DSA;e.DSA=an;var un=Sr.crypto.Signature;e.Signature=un;var cn=Sr.crypto.MessageDigest;e.MessageDigest=cn;var hn=Sr.crypto.Mac;e.Mac=hn;var ln=Sr.crypto.Cipher;e.Cipher=ln,e.KEYUTIL=tn,e.ASN1HEX=Fr,e.X509=on,e.CryptoJS=v,e.b64tohex=S,e.b64toBA=b,e.stoBA=Er,e.BAtos=xr,e.BAtohex=Ar,e.stohex=kr,e.stob64=function fn(t){return _(kr(t))},e.stob64u=function gn(t){return Pr(_(kr(t)))},e.b64utos=function dn(t){return xr(b(Cr(t)))},e.b64tob64u=Pr,e.b64utob64=Cr,e.hex2b64=_,e.hextob64u=Tr,e.b64utohex=Rr,e.utf8tob64u=br,e.b64utoutf8=wr,e.utf8tob64=function pn(t){return _(Kr(Gr(t)))},e.b64toutf8=function vn(t){return decodeURIComponent(qr(S(t)))},e.utf8tohex=Ir,e.hextoutf8=Dr,e.hextorstr=Lr,e.rstrtohex=Nr,e.hextob64=Ur,e.hextob64nl=Br,e.b64nltohex=Or,e.hextopem=jr,e.pemtohex=Mr,e.hextoArrayBuffer=function yn(t){if(t.length%2!=0)throw"input is not even length";if(null==t.match(/^[0-9A-Fa-f]+$/))throw"input is not hexadecimal";for(var e=new ArrayBuffer(t.length/2),r=new DataView(e),n=0;n<t.length/2;n++)r.setUint8(n,parseInt(t.substr(2*n,2),16));return e},e.ArrayBuffertohex=function mn(t){for(var e="",r=new DataView(t),n=0;n<t.byteLength;n++)e+=("00"+r.getUint8(n).toString(16)).slice(-2);return e},e.zulutomsec=Hr,e.zulutosec=Vr,e.zulutodate=function _n(t){return new Date(Hr(t))},e.datetozulu=function Sn(t,e,r){var n,i=t.getUTCFullYear();if(e){if(i<1950||2049<i)throw"not proper year for UTCTime: "+i;n=(""+i).slice(-2)}else n=("000"+i).slice(-4);if(n+=("0"+(t.getUTCMonth()+1)).slice(-2),n+=("0"+t.getUTCDate()).slice(-2),n+=("0"+t.getUTCHours()).slice(-2),n+=("0"+t.getUTCMinutes()).slice(-2),n+=("0"+t.getUTCSeconds()).slice(-2),r){var o=t.getUTCMilliseconds();0!==o&&(n+="."+(o=(o=("00"+o).slice(-3)).replace(/0+$/g,"")))}return n+="Z"},e.uricmptohex=Kr,e.hextouricmp=qr,e.ipv6tohex=Jr,e.hextoipv6=Wr,e.hextoip=zr,e.iptohex=function bn(t){var e="malformed IP address";if(!(t=t.toLowerCase(t)).match(/^[0-9.]+$/)){if(t.match(/^[0-9a-f:]+$/)&&-1!==t.indexOf(":"))return Jr(t);throw e}var r=t.split(".");if(4!==r.length)throw e;var n="";try{for(var i=0;i<4;i++){n+=("0"+parseInt(r[i]).toString(16)).slice(-2)}return n}catch(t){throw e}},e.encodeURIComponentAll=Gr,e.newline_toUnix=function wn(t){return t=t.replace(/\r\n/gm,"\n")},e.newline_toDos=function Fn(t){return t=(t=t.replace(/\r\n/gm,"\n")).replace(/\n/gm,"\r\n")},e.hextoposhex=$r,e.intarystrtohex=function En(t){t=(t=(t=t.replace(/^\s*\[\s*/,"")).replace(/\s*\]\s*$/,"")).replace(/\s*/g,"");try{return t.split(/,/).map((function(t,e,r){var n=parseInt(t);if(n<0||255<n)throw"integer not in range 0-255";return("00"+n.toString(16)).slice(-2)})).join("")}catch(t){throw"malformed integer array string: "+t}},e.strdiffidx=function t(e,r){var n=e.length;e.length>r.length&&(n=r.length);for(var i=0;i<n;i++)if(e.charCodeAt(i)!=r.charCodeAt(i))return i;return e.length!=r.length?n:-1},e.KJUR=Sr;var xn=Sr.crypto;e.crypto=xn;var An=Sr.asn1;e.asn1=An;var kn=Sr.jws;e.jws=kn;var Pn=Sr.lang;e.lang=Pn}).call(this,r(28).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(30),i=r(31),o=r(32);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function i(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,r,n):"string"==typeof e?function s(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function c(t,e){if(u.isBuffer(e)){var r=0|g(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function n(t){return t!=t}(e.length)?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(h(e),t=a(t,e<0?0:0|g(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|g(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function g(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return K(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return K(t).length;e=(""+e).toLowerCase(),n=!0}}function p(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return I(this,e,r);case"utf8":case"utf-8":return A(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return R(this,e,r);case"base64":return x(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=r;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var l=!0,f=0;f<u;f++)if(c(t,o+f)!==c(e,f)){l=!1;break}if(l)return o}return-1}function _(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function S(t,e,r,n){return J(K(e,t.length-r),t,r,n)}function b(t,e,r,n){return J(function i(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return b(t,e,r,n)}function F(t,e,r,n){return J(q(e),t,r,n)}function E(t,e,r,n){return J(function i(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function x(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function A(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,c=t[i],h=null,l=c>239?4:c>223?3:c>191?2:1;if(i+l<=r)switch(l){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,l=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),i+=l}return function f(t){var e=t.length;if(e<=C)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=C));return r}(n)}e.Buffer=u,e.SlowBuffer=function k(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function P(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function n(t,e,r,i){return h(e),e<=0?a(t,e):void 0!==r?"string"==typeof i?a(t,e).fill(r,i):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function t(e){return!(null==e||!e._isBuffer)},u.compare=function t(e,r){if(!u.isBuffer(e)||!u.isBuffer(r))throw new TypeError("Arguments must be Buffers");if(e===r)return 0;for(var n=e.length,i=r.length,o=0,s=Math.min(n,i);o<s;++o)if(e[o]!==r[o]){n=e[o],i=r[o];break}return n<i?-1:i<n?1:0},u.isEncoding=function t(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function t(e,r){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===r)for(r=0,n=0;n<e.length;++n)r+=e[n].length;var i=u.allocUnsafe(r),s=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,s),s+=a.length}return i},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function t(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var r=0;r<e;r+=2)v(this,r,r+1);return this},u.prototype.swap32=function t(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var r=0;r<e;r+=4)v(this,r,r+3),v(this,r+1,r+2);return this},u.prototype.swap64=function t(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var r=0;r<e;r+=8)v(this,r,r+7),v(this,r+1,r+6),v(this,r+2,r+5),v(this,r+3,r+4);return this},u.prototype.toString=function t(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):p.apply(this,arguments)},u.prototype.equals=function t(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function t(){var r="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(r=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(r+=" ... ")),"<Buffer "+r+">"},u.prototype.compare=function t(e,r,n,i,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),r<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&r>=n)return 0;if(i>=o)return-1;if(r>=n)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(i>>>=0),a=(n>>>=0)-(r>>>=0),c=Math.min(s,a),h=this.slice(i,o),l=e.slice(r,n),f=0;f<c;++f)if(h[f]!==l[f]){s=h[f],a=l[f];break}return s<a?-1:a<s?1:0},u.prototype.includes=function t(e,r,n){return-1!==this.indexOf(e,r,n)},u.prototype.indexOf=function t(e,r,n){return y(this,e,r,n,!0)},u.prototype.lastIndexOf=function t(e,r,n){return y(this,e,r,n,!1)},u.prototype.write=function t(e,r,n,i){if(void 0===r)i="utf8",n=this.length,r=0;else if(void 0===n&&"string"==typeof r)i=r,n=this.length,r=0;else{if(!isFinite(r))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var o=this.length-r;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var s=!1;;)switch(i){case"hex":return _(this,e,r,n);case"utf8":case"utf-8":return S(this,e,r,n);case"ascii":return b(this,e,r,n);case"latin1":case"binary":return w(this,e,r,n);case"base64":return F(this,e,r,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,r,n);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},u.prototype.toJSON=function t(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function I(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=V(t[o]);return i}function D(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function L(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function N(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function B(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function O(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(t,e,r,n,o){return o||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function M(t,e,r,n,o){return o||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function t(e,r){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(r=void 0===r?i:~~r)<0?(r+=i)<0&&(r=0):r>i&&(r=i),r<e&&(r=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,r)).__proto__=u.prototype;else{var o=r-e;n=new u(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},u.prototype.readUIntLE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e],o=1,s=0;++s<r&&(o*=256);)i+=this[e+s]*o;return i},u.prototype.readUIntBE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e+--r],o=1;r>0&&(o*=256);)i+=this[e+--r]*o;return i},u.prototype.readUInt8=function t(e,r){return r||L(e,1,this.length),this[e]},u.prototype.readUInt16LE=function t(e,r){return r||L(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function t(e,r){return r||L(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function t(e,r){return r||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function t(e,r){return r||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e],o=1,s=0;++s<r&&(o*=256);)i+=this[e+s]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*r)),i},u.prototype.readIntBE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=r,o=1,s=this[e+--i];i>0&&(o*=256);)s+=this[e+--i]*o;return s>=(o*=128)&&(s-=Math.pow(2,8*r)),s},u.prototype.readInt8=function t(e,r){return r||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function t(e,r){r||L(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function t(e,r){r||L(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function t(e,r){return r||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function t(e,r){return r||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function t(e,r){return r||L(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function t(e,r){return r||L(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function t(e,r){return r||L(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function t(e,r){return r||L(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function t(e,r,n,i){(e=+e,r|=0,n|=0,i)||N(this,e,r,n,Math.pow(2,8*n)-1,0);var o=1,s=0;for(this[r]=255&e;++s<n&&(o*=256);)this[r+s]=e/o&255;return r+n},u.prototype.writeUIntBE=function t(e,r,n,i){(e=+e,r|=0,n|=0,i)||N(this,e,r,n,Math.pow(2,8*n)-1,0);var o=n-1,s=1;for(this[r+o]=255&e;--o>=0&&(s*=256);)this[r+o]=e/s&255;return r+n},u.prototype.writeUInt8=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[r]=255&e,r+1},u.prototype.writeUInt16LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8):U(this,e,r,!0),r+2},u.prototype.writeUInt16BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>8,this[r+1]=255&e):U(this,e,r,!1),r+2},u.prototype.writeUInt32LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[r+3]=e>>>24,this[r+2]=e>>>16,this[r+1]=e>>>8,this[r]=255&e):B(this,e,r,!0),r+4},u.prototype.writeUInt32BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e):B(this,e,r,!1),r+4},u.prototype.writeIntLE=function t(e,r,n,i){if(e=+e,r|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,r,n,o-1,-o)}var s=0,a=1,u=0;for(this[r]=255&e;++s<n&&(a*=256);)e<0&&0===u&&0!==this[r+s-1]&&(u=1),this[r+s]=(e/a>>0)-u&255;return r+n},u.prototype.writeIntBE=function t(e,r,n,i){if(e=+e,r|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,r,n,o-1,-o)}var s=n-1,a=1,u=0;for(this[r+s]=255&e;--s>=0&&(a*=256);)e<0&&0===u&&0!==this[r+s+1]&&(u=1),this[r+s]=(e/a>>0)-u&255;return r+n},u.prototype.writeInt8=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[r]=255&e,r+1},u.prototype.writeInt16LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8):U(this,e,r,!0),r+2},u.prototype.writeInt16BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>8,this[r+1]=255&e):U(this,e,r,!1),r+2},u.prototype.writeInt32LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8,this[r+2]=e>>>16,this[r+3]=e>>>24):B(this,e,r,!0),r+4},u.prototype.writeInt32BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e):B(this,e,r,!1),r+4},u.prototype.writeFloatLE=function t(e,r,n){return j(this,e,r,!0,n)},u.prototype.writeFloatBE=function t(e,r,n){return j(this,e,r,!1,n)},u.prototype.writeDoubleLE=function t(e,r,n){return M(this,e,r,!0,n)},u.prototype.writeDoubleBE=function t(e,r,n){return M(this,e,r,!1,n)},u.prototype.copy=function t(e,r,n,i){if(n||(n=0),i||0===i||(i=this.length),r>=e.length&&(r=e.length),r||(r=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-r<i-n&&(i=e.length-r+n);var o,s=i-n;if(this===e&&n<r&&r<i)for(o=s-1;o>=0;--o)e[o+r]=this[o+n];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+r]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),r);return s},u.prototype.fill=function t(e,r,n,i){if("string"==typeof e){if("string"==typeof r?(i=r,r=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!u.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;var s;if(r>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=r;s<n;++s)this[s]=e;else{var a=u.isBuffer(e)?e:K(new u(e,i).toString()),c=a.length;for(s=0;s<n-r;++s)this[s+r]=a[s%c]}return this};var H=/[^+\/0-9A-Za-z-_]/g;function V(t){return t<16?"0"+t.toString(16):t.toString(16)}function K(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function q(t){return n.toByteArray(function e(t){if((t=function e(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function J(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(29))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";e.byteLength=function n(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function i(t){var e,r,n=f(t),i=n[0],o=n[1],s=new u(function c(t,e,r){return 3*(e+r)/4-r}(0,i,o)),h=0,l=o>0?i-4:i;for(r=0;r<l;r+=4)e=a[t.charCodeAt(r)]<<18|a[t.charCodeAt(r+1)]<<12|a[t.charCodeAt(r+2)]<<6|a[t.charCodeAt(r+3)],s[h++]=e>>16&255,s[h++]=e>>8&255,s[h++]=255&e;2===o&&(e=a[t.charCodeAt(r)]<<2|a[t.charCodeAt(r+1)]>>4,s[h++]=255&e);1===o&&(e=a[t.charCodeAt(r)]<<10|a[t.charCodeAt(r+1)]<<4|a[t.charCodeAt(r+2)]>>2,s[h++]=e>>8&255,s[h++]=255&e);return s},e.fromByteArray=function o(t){for(var e,r=t.length,n=r%3,i=[],o=16383,a=0,u=r-n;a<u;a+=o)i.push(g(t,a,a+o>u?u:a+o));1===n?(e=t[r-1],i.push(s[e>>2]+s[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],i.push(s[e>>10]+s[e>>4&63]+s[e<<2&63]+"="));return i.join("")};for(var s=[],a=[],u="undefined"!=typeof Uint8Array?Uint8Array:Array,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",h=0,l=c.length;h<l;++h)s[h]=c[h],a[c.charCodeAt(h)]=h;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function g(t,e,r){for(var n,i,o=[],a=e;a<r;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(s[(i=n)>>18&63]+s[i>>12&63]+s[i>>6&63]+s[63&i]);return o.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},function(t,e){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,c=u>>1,h=-7,l=r?i-1:0,f=r?-1:1,g=t[e+l];for(l+=f,o=g&(1<<-h)-1,g>>=-h,h+=a;h>0;o=256*o+t[e+l],l+=f,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=n;h>0;s=256*s+t[e+l],l+=f,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(g?-1:1);s+=Math.pow(2,n),o-=c}return(g?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,l=h>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,g=n?0:o-1,d=n?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+l>=1?f/u:f*Math.pow(2,1-l))*u>=2&&(s++,u/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(e*u-1)*Math.pow(2,i),s+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),s=0));i>=8;t[r+g]=255&a,g+=d,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[r+g]=255&s,g+=d,s/=256,c-=8);t[r+g-d]|=128*p}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function n(t){var e=t.jws,r=t.KeyUtil,n=t.X509,o=t.crypto,s=t.hextob64u,a=t.b64tohex,u=t.AllowedSigningAlgs;return function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.parseJwt=function t(r){i.Log.debug("JoseUtil.parseJwt");try{var n=e.JWS.parse(r);return{header:n.headerObj,payload:n.payloadObj}}catch(t){i.Log.error(t)}},t.validateJwt=function e(o,s,u,c,h,l,f){i.Log.debug("JoseUtil.validateJwt");try{if("RSA"===s.kty)if(s.e&&s.n)s=r.getKey(s);else{if(!s.x5c||!s.x5c.length)return i.Log.error("JoseUtil.validateJwt: RSA key missing key material",s),Promise.reject(new Error("RSA key missing key material"));var g=a(s.x5c[0]);s=n.getPublicKeyFromCertHex(g)}else{if("EC"!==s.kty)return i.Log.error("JoseUtil.validateJwt: Unsupported key type",s&&s.kty),Promise.reject(new Error(s.kty));if(!(s.crv&&s.x&&s.y))return i.Log.error("JoseUtil.validateJwt: EC key missing key material",s),Promise.reject(new Error("EC key missing key material"));s=r.getKey(s)}return t._validateJwt(o,s,u,c,h,l,f)}catch(t){return i.Log.error(t&&t.message||t),Promise.reject("JWT validation failed")}},t.validateJwtAttributes=function e(r,n,o,s,a,u){s||(s=0),a||(a=parseInt(Date.now()/1e3));var c=t.parseJwt(r).payload;if(!c.iss)return i.Log.error("JoseUtil._validateJwt: issuer was not provided"),Promise.reject(new Error("issuer was not provided"));if(c.iss!==n)return i.Log.error("JoseUtil._validateJwt: Invalid issuer in token",c.iss),Promise.reject(new Error("Invalid issuer in token: "+c.iss));if(!c.aud)return i.Log.error("JoseUtil._validateJwt: aud was not provided"),Promise.reject(new Error("aud was not provided"));if(!(c.aud===o||Array.isArray(c.aud)&&c.aud.indexOf(o)>=0))return i.Log.error("JoseUtil._validateJwt: Invalid audience in token",c.aud),Promise.reject(new Error("Invalid audience in token: "+c.aud));if(c.azp&&c.azp!==o)return i.Log.error("JoseUtil._validateJwt: Invalid azp in token",c.azp),Promise.reject(new Error("Invalid azp in token: "+c.azp));if(!u){var h=a+s,l=a-s;if(!c.iat)return i.Log.error("JoseUtil._validateJwt: iat was not provided"),Promise.reject(new Error("iat was not provided"));if(h<c.iat)return i.Log.error("JoseUtil._validateJwt: iat is in the future",c.iat),Promise.reject(new Error("iat is in the future: "+c.iat));if(c.nbf&&h<c.nbf)return i.Log.error("JoseUtil._validateJwt: nbf is in the future",c.nbf),Promise.reject(new Error("nbf is in the future: "+c.nbf));if(!c.exp)return i.Log.error("JoseUtil._validateJwt: exp was not provided"),Promise.reject(new Error("exp was not provided"));if(c.exp<l)return i.Log.error("JoseUtil._validateJwt: exp is in the past",c.exp),Promise.reject(new Error("exp is in the past:"+c.exp))}return Promise.resolve(c)},t._validateJwt=function r(n,o,s,a,c,h,l){return t.validateJwtAttributes(n,s,a,c,h,l).then((function(t){try{return e.JWS.verify(n,o,u)?t:(i.Log.error("JoseUtil._validateJwt: signature validation failed"),Promise.reject(new Error("signature validation failed")))}catch(t){return i.Log.error(t&&t.message||t),Promise.reject(new Error("signature validation failed"))}}))},t.hashString=function t(e,r){try{return o.Util.hashString(e,r)}catch(t){i.Log.error(t)}},t.hexToBase64Url=function t(e){try{return s(e)}catch(t){i.Log.error(t)}},t}()};var i=r(0);t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninResponse=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(3);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SigninResponse=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#";o(this,t);var n=i.UrlUtility.parseUrlFragment(e,r);this.error=n.error,this.error_description=n.error_description,this.error_uri=n.error_uri,this.code=n.code,this.state=n.state,this.id_token=n.id_token,this.session_state=n.session_state,this.access_token=n.access_token,this.token_type=n.token_type,this.scope=n.scope,this.profile=void 0,this.expires_in=n.expires_in}return n(t,[{key:"expires_in",get:function t(){if(this.expires_at){var e=parseInt(Date.now()/1e3);return this.expires_at-e}},set:function t(e){var r=parseInt(e);if("number"==typeof r&&r>0){var n=parseInt(Date.now()/1e3);this.expires_at=n+r}}},{key:"expired",get:function t(){var e=this.expires_in;if(void 0!==e)return e<=0}},{key:"scopes",get:function t(){return(this.scope||"").split(" ")}},{key:"isOpenIdConnect",get:function t(){return this.scopes.indexOf("openid")>=0||!!this.id_token}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SignoutRequest=void 0;var n=r(0),i=r(3),o=r(9);e.SignoutRequest=function t(e){var r=e.url,s=e.id_token_hint,a=e.post_logout_redirect_uri,u=e.data,c=e.extraQueryParams,h=e.request_type;if(function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!r)throw n.Log.error("SignoutRequest.ctor: No url passed"),new Error("url");for(var f in s&&(r=i.UrlUtility.addQueryParam(r,"id_token_hint",s)),a&&(r=i.UrlUtility.addQueryParam(r,"post_logout_redirect_uri",a),u&&(this.state=new o.State({data:u,request_type:h}),r=i.UrlUtility.addQueryParam(r,"state",this.state.id))),c)r=i.UrlUtility.addQueryParam(r,f,c[f]);this.url=r}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SignoutResponse=void 0;var n=r(3);e.SignoutResponse=function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var i=n.UrlUtility.parseUrlFragment(e,"?");this.error=i.error,this.error_description=i.error_description,this.error_uri=i.error_uri,this.state=i.state}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InMemoryWebStorage=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.InMemoryWebStorage=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this._data={}}return t.prototype.getItem=function t(e){return i.Log.debug("InMemoryWebStorage.getItem",e),this._data[e]},t.prototype.setItem=function t(e,r){i.Log.debug("InMemoryWebStorage.setItem",e),this._data[e]=r},t.prototype.removeItem=function t(e){i.Log.debug("InMemoryWebStorage.removeItem",e),delete this._data[e]},t.prototype.key=function t(e){return Object.getOwnPropertyNames(this._data)[e]},n(t,[{key:"length",get:function t(){return Object.getOwnPropertyNames(this._data).length}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManager=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(10),s=r(39),a=r(15),u=r(45),c=r(47),h=r(18),l=r(8),f=r(20),g=r(11),d=r(4);function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.UserManager=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c.SilentRenewService,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:h.SessionMonitor,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f.TokenRevocationClient,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:g.TokenClient,y=arguments.length>5&&void 0!==arguments[5]?arguments[5]:d.JoseUtil;p(this,e),r instanceof s.UserManagerSettings||(r=new s.UserManagerSettings(r));var m=v(this,t.call(this,r));return m._events=new u.UserManagerEvents(r),m._silentRenewService=new n(m),m.settings.automaticSilentRenew&&(i.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew"),m.startSilentRenew()),m.settings.monitorSession&&(i.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor"),m._sessionMonitor=new o(m)),m._tokenRevocationClient=new a(m._settings),m._tokenClient=new l(m._settings),m._joseUtil=y,m}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getUser=function t(){var e=this;return this._loadUser().then((function(t){return t?(i.Log.info("UserManager.getUser: user loaded"),e._events.load(t,!1),t):(i.Log.info("UserManager.getUser: user not found in storage"),null)}))},e.prototype.removeUser=function t(){var e=this;return this.storeUser(null).then((function(){i.Log.info("UserManager.removeUser: user removed from storage"),e._events.unload()}))},e.prototype.signinRedirect=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="si:r";var r={useReplaceToNavigate:e.useReplaceToNavigate};return this._signinStart(e,this._redirectNavigator,r).then((function(){i.Log.info("UserManager.signinRedirect: successful")}))},e.prototype.signinRedirectCallback=function t(e){return this._signinEnd(e||this._redirectNavigator.url).then((function(t){return t.profile&&t.profile.sub?i.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinRedirectCallback: no sub"),t}))},e.prototype.signinPopup=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="si:p";var r=e.redirect_uri||this.settings.popup_redirect_uri||this.settings.redirect_uri;return r?(e.redirect_uri=r,e.display="popup",this._signin(e,this._popupNavigator,{startUrl:r,popupWindowFeatures:e.popupWindowFeatures||this.settings.popupWindowFeatures,popupWindowTarget:e.popupWindowTarget||this.settings.popupWindowTarget}).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinPopup: no sub")),t}))):(i.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured"),Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured")))},e.prototype.signinPopupCallback=function t(e){return this._signinCallback(e,this._popupNavigator).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinPopupCallback: no sub")),t})).catch((function(t){i.Log.error(t.message)}))},e.prototype.signinSilent=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return r=Object.assign({},r),this._loadUser().then((function(t){return t&&t.refresh_token?(r.refresh_token=t.refresh_token,e._useRefreshToken(r)):(r.request_type="si:s",r.id_token_hint=r.id_token_hint||e.settings.includeIdTokenInSilentRenew&&t&&t.id_token,t&&e._settings.validateSubOnSilentRenew&&(i.Log.debug("UserManager.signinSilent, subject prior to silent renew: ",t.profile.sub),r.current_sub=t.profile.sub),e._signinSilentIframe(r))}))},e.prototype._useRefreshToken=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._tokenClient.exchangeRefreshToken(r).then((function(t){return t?t.access_token?e._loadUser().then((function(r){if(r){var n=Promise.resolve();return t.id_token&&(n=e._validateIdTokenFromTokenRefreshToken(r.profile,t.id_token)),n.then((function(){return i.Log.debug("UserManager._useRefreshToken: refresh token response success"),r.id_token=t.id_token||r.id_token,r.access_token=t.access_token,r.refresh_token=t.refresh_token||r.refresh_token,r.expires_in=t.expires_in,e.storeUser(r).then((function(){return e._events.load(r),r}))}))}return null})):(i.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint"),Promise.reject("No access token returned from token endpoint")):(i.Log.error("UserManager._useRefreshToken: No response returned from token endpoint"),Promise.reject("No response returned from token endpoint"))}))},e.prototype._validateIdTokenFromTokenRefreshToken=function t(e,r){var n=this;return this._metadataService.getIssuer().then((function(t){return n.settings.getEpochTime().then((function(o){return n._joseUtil.validateJwtAttributes(r,t,n._settings.client_id,n._settings.clockSkew,o).then((function(t){return t?t.sub!==e.sub?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub"),Promise.reject(new Error("sub in id_token does not match current sub"))):t.auth_time&&t.auth_time!==e.auth_time?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time"),Promise.reject(new Error("auth_time in id_token does not match original auth_time"))):t.azp&&t.azp!==e.azp?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp"),Promise.reject(new Error("azp in id_token does not match original azp"))):!t.azp&&e.azp?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token"),Promise.reject(new Error("azp not in id_token, but present in original id_token"))):void 0:(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token"),Promise.reject(new Error("Failed to validate id_token")))}))}))}))},e.prototype._signinSilentIframe=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.redirect_uri||this.settings.silent_redirect_uri||this.settings.redirect_uri;return r?(e.redirect_uri=r,e.prompt=e.prompt||"none",this._signin(e,this._iframeNavigator,{startUrl:r,silentRequestTimeout:e.silentRequestTimeout||this.settings.silentRequestTimeout}).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinSilent: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinSilent: no sub")),t}))):(i.Log.error("UserManager.signinSilent: No silent_redirect_uri configured"),Promise.reject(new Error("No silent_redirect_uri configured")))},e.prototype.signinSilentCallback=function t(e){return this._signinCallback(e,this._iframeNavigator).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinSilentCallback: no sub")),t}))},e.prototype.signinCallback=function t(e){var r=this;return this.readSigninResponseState(e).then((function(t){var n=t.state;t.response;return"si:r"===n.request_type?r.signinRedirectCallback(e):"si:p"===n.request_type?r.signinPopupCallback(e):"si:s"===n.request_type?r.signinSilentCallback(e):Promise.reject(new Error("invalid response_type in state"))}))},e.prototype.signoutCallback=function t(e,r){var n=this;return this.readSignoutResponseState(e).then((function(t){var i=t.state,o=t.response;return i?"so:r"===i.request_type?n.signoutRedirectCallback(e):"so:p"===i.request_type?n.signoutPopupCallback(e,r):Promise.reject(new Error("invalid response_type in state")):o}))},e.prototype.querySessionStatus=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).request_type="si:s";var n=r.redirect_uri||this.settings.silent_redirect_uri||this.settings.redirect_uri;return n?(r.redirect_uri=n,r.prompt="none",r.response_type=r.response_type||this.settings.query_status_response_type,r.scope=r.scope||"openid",r.skipUserInfo=!0,this._signinStart(r,this._iframeNavigator,{startUrl:n,silentRequestTimeout:r.silentRequestTimeout||this.settings.silentRequestTimeout}).then((function(t){return e.processSigninResponse(t.url).then((function(t){if(i.Log.debug("UserManager.querySessionStatus: got signin response"),t.session_state&&t.profile.sub)return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ",t.profile.sub),{session_state:t.session_state,sub:t.profile.sub,sid:t.profile.sid};i.Log.info("querySessionStatus successful, user not authenticated")})).catch((function(t){if(t.session_state&&e.settings.monitorAnonymousSession&&("login_required"==t.message||"consent_required"==t.message||"interaction_required"==t.message||"account_selection_required"==t.message))return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user"),{session_state:t.session_state};throw t}))}))):(i.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured"),Promise.reject(new Error("No silent_redirect_uri configured")))},e.prototype._signin=function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._signinStart(e,r,i).then((function(t){return n._signinEnd(t.url,e)}))},e.prototype._signinStart=function t(e,r){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.prepare(o).then((function(t){return i.Log.debug("UserManager._signinStart: got navigator window handle"),n.createSigninRequest(e).then((function(e){return i.Log.debug("UserManager._signinStart: got signin request"),o.url=e.url,o.id=e.state.id,t.navigate(o)})).catch((function(e){throw t.close&&(i.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window"),t.close()),e}))}))},e.prototype._signinEnd=function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.processSigninResponse(e).then((function(t){i.Log.debug("UserManager._signinEnd: got signin response");var e=new a.User(t);if(n.current_sub){if(n.current_sub!==e.profile.sub)return i.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ",e.profile.sub),Promise.reject(new Error("login_required"));i.Log.debug("UserManager._signinEnd: current user matches user returned from signin")}return r.storeUser(e).then((function(){return i.Log.debug("UserManager._signinEnd: user stored"),r._events.load(e),e}))}))},e.prototype._signinCallback=function t(e,r){i.Log.debug("UserManager._signinCallback");var n="query"===this._settings.response_mode||!this._settings.response_mode&&l.SigninRequest.isCode(this._settings.response_type)?"?":"#";return r.callback(e,void 0,n)},e.prototype.signoutRedirect=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="so:r";var r=e.post_logout_redirect_uri||this.settings.post_logout_redirect_uri;r&&(e.post_logout_redirect_uri=r);var n={useReplaceToNavigate:e.useReplaceToNavigate};return this._signoutStart(e,this._redirectNavigator,n).then((function(){i.Log.info("UserManager.signoutRedirect: successful")}))},e.prototype.signoutRedirectCallback=function t(e){return this._signoutEnd(e||this._redirectNavigator.url).then((function(t){return i.Log.info("UserManager.signoutRedirectCallback: successful"),t}))},e.prototype.signoutPopup=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="so:p";var r=e.post_logout_redirect_uri||this.settings.popup_post_logout_redirect_uri||this.settings.post_logout_redirect_uri;return e.post_logout_redirect_uri=r,e.display="popup",e.post_logout_redirect_uri&&(e.state=e.state||{}),this._signout(e,this._popupNavigator,{startUrl:r,popupWindowFeatures:e.popupWindowFeatures||this.settings.popupWindowFeatures,popupWindowTarget:e.popupWindowTarget||this.settings.popupWindowTarget}).then((function(){i.Log.info("UserManager.signoutPopup: successful")}))},e.prototype.signoutPopupCallback=function t(e,r){void 0===r&&"boolean"==typeof e&&(r=e,e=null);return this._popupNavigator.callback(e,r,"?").then((function(){i.Log.info("UserManager.signoutPopupCallback: successful")}))},e.prototype._signout=function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._signoutStart(e,r,i).then((function(t){return n._signoutEnd(t.url)}))},e.prototype._signoutStart=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=this,n=arguments[1],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.prepare(o).then((function(t){return i.Log.debug("UserManager._signoutStart: got navigator window handle"),r._loadUser().then((function(n){return i.Log.debug("UserManager._signoutStart: loaded current user from storage"),(r._settings.revokeAccessTokenOnSignout?r._revokeInternal(n):Promise.resolve()).then((function(){var s=e.id_token_hint||n&&n.id_token;return s&&(i.Log.debug("UserManager._signoutStart: Setting id_token into signout request"),e.id_token_hint=s),r.removeUser().then((function(){return i.Log.debug("UserManager._signoutStart: user removed, creating signout request"),r.createSignoutRequest(e).then((function(e){return i.Log.debug("UserManager._signoutStart: got signout request"),o.url=e.url,e.state&&(o.id=e.state.id),t.navigate(o)}))}))}))})).catch((function(e){throw t.close&&(i.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window"),t.close()),e}))}))},e.prototype._signoutEnd=function t(e){return this.processSignoutResponse(e).then((function(t){return i.Log.debug("UserManager._signoutEnd: got signout response"),t}))},e.prototype.revokeAccessToken=function t(){var e=this;return this._loadUser().then((function(t){return e._revokeInternal(t,!0).then((function(r){if(r)return i.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing"),t.access_token=null,t.refresh_token=null,t.expires_at=null,t.token_type=null,e.storeUser(t).then((function(){i.Log.debug("UserManager.revokeAccessToken: user stored"),e._events.load(t)}))}))})).then((function(){i.Log.info("UserManager.revokeAccessToken: access token revoked successfully")}))},e.prototype._revokeInternal=function t(e,r){var n=this;if(e){var o=e.access_token,s=e.refresh_token;return this._revokeAccessTokenInternal(o,r).then((function(t){return n._revokeRefreshTokenInternal(s,r).then((function(e){return t||e||i.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format"),t||e}))}))}return Promise.resolve(!1)},e.prototype._revokeAccessTokenInternal=function t(e,r){return!e||e.indexOf(".")>=0?Promise.resolve(!1):this._tokenRevocationClient.revoke(e,r).then((function(){return!0}))},e.prototype._revokeRefreshTokenInternal=function t(e,r){return e?this._tokenRevocationClient.revoke(e,r,"refresh_token").then((function(){return!0})):Promise.resolve(!1)},e.prototype.startSilentRenew=function t(){this._silentRenewService.start()},e.prototype.stopSilentRenew=function t(){this._silentRenewService.stop()},e.prototype._loadUser=function t(){return this._userStore.get(this._userStoreKey).then((function(t){return t?(i.Log.debug("UserManager._loadUser: user storageString loaded"),a.User.fromStorageString(t)):(i.Log.debug("UserManager._loadUser: no user storageString"),null)}))},e.prototype.storeUser=function t(e){if(e){i.Log.debug("UserManager.storeUser: storing user");var r=e.toStorageString();return this._userStore.set(this._userStoreKey,r)}return i.Log.debug("storeUser.storeUser: removing user"),this._userStore.remove(this._userStoreKey)},n(e,[{key:"_redirectNavigator",get:function t(){return this.settings.redirectNavigator}},{key:"_popupNavigator",get:function t(){return this.settings.popupNavigator}},{key:"_iframeNavigator",get:function t(){return this.settings.iframeNavigator}},{key:"_userStore",get:function t(){return this.settings.userStore}},{key:"events",get:function t(){return this._events}},{key:"_userStoreKey",get:function t(){return"user:"+this.settings.authority+":"+this.settings.client_id}}]),e}(o.OidcClient)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManagerSettings=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=(r(0),r(5)),o=r(40),s=r(41),a=r(43),u=r(6),c=r(1),h=r(8);function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.UserManagerSettings=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.popup_redirect_uri,i=r.popup_post_logout_redirect_uri,g=r.popupWindowFeatures,d=r.popupWindowTarget,p=r.silent_redirect_uri,v=r.silentRequestTimeout,y=r.automaticSilentRenew,m=void 0!==y&&y,_=r.validateSubOnSilentRenew,S=void 0!==_&&_,b=r.includeIdTokenInSilentRenew,w=void 0===b||b,F=r.monitorSession,E=void 0===F||F,x=r.monitorAnonymousSession,A=void 0!==x&&x,k=r.checkSessionInterval,P=void 0===k?2e3:k,C=r.stopCheckSessionOnError,T=void 0===C||C,R=r.query_status_response_type,I=r.revokeAccessTokenOnSignout,D=void 0!==I&&I,L=r.accessTokenExpiringNotificationTime,N=void 0===L?60:L,U=r.redirectNavigator,B=void 0===U?new o.RedirectNavigator:U,O=r.popupNavigator,j=void 0===O?new s.PopupNavigator:O,M=r.iframeNavigator,H=void 0===M?new a.IFrameNavigator:M,V=r.userStore,K=void 0===V?new u.WebStorageStateStore({store:c.Global.sessionStorage}):V;l(this,e);var q=f(this,t.call(this,arguments[0]));return q._popup_redirect_uri=n,q._popup_post_logout_redirect_uri=i,q._popupWindowFeatures=g,q._popupWindowTarget=d,q._silent_redirect_uri=p,q._silentRequestTimeout=v,q._automaticSilentRenew=m,q._validateSubOnSilentRenew=S,q._includeIdTokenInSilentRenew=w,q._accessTokenExpiringNotificationTime=N,q._monitorSession=E,q._monitorAnonymousSession=A,q._checkSessionInterval=P,q._stopCheckSessionOnError=T,R?q._query_status_response_type=R:arguments[0]&&arguments[0].response_type?q._query_status_response_type=h.SigninRequest.isOidc(arguments[0].response_type)?"id_token":"code":q._query_status_response_type="id_token",q._revokeAccessTokenOnSignout=D,q._redirectNavigator=B,q._popupNavigator=j,q._iframeNavigator=H,q._userStore=K,q}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),n(e,[{key:"popup_redirect_uri",get:function t(){return this._popup_redirect_uri}},{key:"popup_post_logout_redirect_uri",get:function t(){return this._popup_post_logout_redirect_uri}},{key:"popupWindowFeatures",get:function t(){return this._popupWindowFeatures}},{key:"popupWindowTarget",get:function t(){return this._popupWindowTarget}},{key:"silent_redirect_uri",get:function t(){return this._silent_redirect_uri}},{key:"silentRequestTimeout",get:function t(){return this._silentRequestTimeout}},{key:"automaticSilentRenew",get:function t(){return this._automaticSilentRenew}},{key:"validateSubOnSilentRenew",get:function t(){return this._validateSubOnSilentRenew}},{key:"includeIdTokenInSilentRenew",get:function t(){return this._includeIdTokenInSilentRenew}},{key:"accessTokenExpiringNotificationTime",get:function t(){return this._accessTokenExpiringNotificationTime}},{key:"monitorSession",get:function t(){return this._monitorSession}},{key:"monitorAnonymousSession",get:function t(){return this._monitorAnonymousSession}},{key:"checkSessionInterval",get:function t(){return this._checkSessionInterval}},{key:"stopCheckSessionOnError",get:function t(){return this._stopCheckSessionOnError}},{key:"query_status_response_type",get:function t(){return this._query_status_response_type}},{key:"revokeAccessTokenOnSignout",get:function t(){return this._revokeAccessTokenOnSignout}},{key:"redirectNavigator",get:function t(){return this._redirectNavigator}},{key:"popupNavigator",get:function t(){return this._popupNavigator}},{key:"iframeNavigator",get:function t(){return this._iframeNavigator}},{key:"userStore",get:function t(){return this._userStore}}]),e}(i.OidcClientSettings)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RedirectNavigator=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.RedirectNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(){return Promise.resolve(this)},t.prototype.navigate=function t(e){return e&&e.url?(e.useReplaceToNavigate?window.location.replace(e.url):window.location=e.url,Promise.resolve()):(i.Log.error("RedirectNavigator.navigate: No url provided"),Promise.reject(new Error("No url provided")))},n(t,[{key:"url",get:function t(){return window.location.href}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopupNavigator=void 0;var n=r(0),i=r(42);e.PopupNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new i.PopupWindow(e);return Promise.resolve(r)},t.prototype.callback=function t(e,r,o){n.Log.debug("PopupNavigator.callback");try{return i.PopupWindow.notifyOpener(e,r,o),Promise.resolve()}catch(t){return Promise.reject(t)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopupWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(3);e.PopupWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e}));var o=e.popupWindowTarget||"_blank",s=e.popupWindowFeatures||"location=no,toolbar=no,width=500,height=500,left=100,top=100;";this._popup=window.open("",o,s),this._popup&&(i.Log.debug("PopupWindow.ctor: popup successfully created"),this._checkForPopupClosedTimer=window.setInterval(this._checkForPopupClosed.bind(this),500))}return t.prototype.navigate=function t(e){return this._popup?e&&e.url?(i.Log.debug("PopupWindow.navigate: Setting URL in popup"),this._id=e.id,this._id&&(window["popupCallback_"+e.id]=this._callback.bind(this)),this._popup.focus(),this._popup.window.location=e.url):(this._error("PopupWindow.navigate: no url provided"),this._error("No url provided")):this._error("PopupWindow.navigate: Error opening popup window"),this.promise},t.prototype._success=function t(e){i.Log.debug("PopupWindow.callback: Successful response from popup window"),this._cleanup(),this._resolve(e)},t.prototype._error=function t(e){i.Log.error("PopupWindow.error: ",e),this._cleanup(),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup(!1)},t.prototype._cleanup=function t(e){i.Log.debug("PopupWindow.cleanup"),window.clearInterval(this._checkForPopupClosedTimer),this._checkForPopupClosedTimer=null,delete window["popupCallback_"+this._id],this._popup&&!e&&this._popup.close(),this._popup=null},t.prototype._checkForPopupClosed=function t(){this._popup&&!this._popup.closed||this._error("Popup window closed")},t.prototype._callback=function t(e,r){this._cleanup(r),e?(i.Log.debug("PopupWindow.callback success"),this._success({url:e})):(i.Log.debug("PopupWindow.callback: Invalid response from popup"),this._error("Invalid response from popup"))},t.notifyOpener=function t(e,r,n){if(window.opener){if(e=e||window.location.href){var s=o.UrlUtility.parseUrlFragment(e,n);if(s.state){var a="popupCallback_"+s.state,u=window.opener[a];u?(i.Log.debug("PopupWindow.notifyOpener: passing url message to opener"),u(e,r)):i.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener")}else i.Log.warn("PopupWindow.notifyOpener: no state found in response url")}}else i.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.")},n(t,[{key:"promise",get:function t(){return this._promise}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IFrameNavigator=void 0;var n=r(0),i=r(44);e.IFrameNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new i.IFrameWindow(e);return Promise.resolve(r)},t.prototype.callback=function t(e){n.Log.debug("IFrameNavigator.callback");try{return i.IFrameWindow.notifyParent(e),Promise.resolve()}catch(t){return Promise.reject(t)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IFrameWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.IFrameWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e})),this._boundMessageEvent=this._message.bind(this),window.addEventListener("message",this._boundMessageEvent,!1),this._frame=window.document.createElement("iframe"),this._frame.style.visibility="hidden",this._frame.style.position="absolute",this._frame.width=0,this._frame.height=0,window.document.body.appendChild(this._frame)}return t.prototype.navigate=function t(e){if(e&&e.url){var r=e.silentRequestTimeout||1e4;i.Log.debug("IFrameWindow.navigate: Using timeout of:",r),this._timer=window.setTimeout(this._timeout.bind(this),r),this._frame.src=e.url}else this._error("No url provided");return this.promise},t.prototype._success=function t(e){this._cleanup(),i.Log.debug("IFrameWindow: Successful response from frame window"),this._resolve(e)},t.prototype._error=function t(e){this._cleanup(),i.Log.error(e),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup()},t.prototype._cleanup=function t(){this._frame&&(i.Log.debug("IFrameWindow: cleanup"),window.removeEventListener("message",this._boundMessageEvent,!1),window.clearTimeout(this._timer),window.document.body.removeChild(this._frame),this._timer=null,this._frame=null,this._boundMessageEvent=null)},t.prototype._timeout=function t(){i.Log.debug("IFrameWindow.timeout"),this._error("Frame window timed out")},t.prototype._message=function t(e){if(i.Log.debug("IFrameWindow.message"),this._timer&&e.origin===this._origin&&e.source===this._frame.contentWindow&&"string"==typeof e.data&&(e.data.startsWith("http://")||e.data.startsWith("https://"))){var r=e.data;r?this._success({url:r}):this._error("Invalid response from frame")}},t.notifyParent=function t(e){i.Log.debug("IFrameWindow.notifyParent"),(e=e||window.location.href)&&(i.Log.debug("IFrameWindow.notifyParent: posting url message to parent"),window.parent.postMessage(e,location.protocol+"//"+location.host))},n(t,[{key:"promise",get:function t(){return this._promise}},{key:"_origin",get:function t(){return location.protocol+"//"+location.host}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManagerEvents=void 0;var n=r(0),i=r(16),o=r(17);e.UserManagerEvents=function(t){function e(r){!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r));return i._userLoaded=new o.Event("User loaded"),i._userUnloaded=new o.Event("User unloaded"),i._silentRenewError=new o.Event("Silent renew error"),i._userSignedIn=new o.Event("User signed in"),i._userSignedOut=new o.Event("User signed out"),i._userSessionChanged=new o.Event("User session changed"),i}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.load=function e(r){var i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];n.Log.debug("UserManagerEvents.load"),t.prototype.load.call(this,r),i&&this._userLoaded.raise(r)},e.prototype.unload=function e(){n.Log.debug("UserManagerEvents.unload"),t.prototype.unload.call(this),this._userUnloaded.raise()},e.prototype.addUserLoaded=function t(e){this._userLoaded.addHandler(e)},e.prototype.removeUserLoaded=function t(e){this._userLoaded.removeHandler(e)},e.prototype.addUserUnloaded=function t(e){this._userUnloaded.addHandler(e)},e.prototype.removeUserUnloaded=function t(e){this._userUnloaded.removeHandler(e)},e.prototype.addSilentRenewError=function t(e){this._silentRenewError.addHandler(e)},e.prototype.removeSilentRenewError=function t(e){this._silentRenewError.removeHandler(e)},e.prototype._raiseSilentRenewError=function t(e){n.Log.debug("UserManagerEvents._raiseSilentRenewError",e.message),this._silentRenewError.raise(e)},e.prototype.addUserSignedIn=function t(e){this._userSignedIn.addHandler(e)},e.prototype.removeUserSignedIn=function t(e){this._userSignedIn.removeHandler(e)},e.prototype._raiseUserSignedIn=function t(){n.Log.debug("UserManagerEvents._raiseUserSignedIn"),this._userSignedIn.raise()},e.prototype.addUserSignedOut=function t(e){this._userSignedOut.addHandler(e)},e.prototype.removeUserSignedOut=function t(e){this._userSignedOut.removeHandler(e)},e.prototype._raiseUserSignedOut=function t(){n.Log.debug("UserManagerEvents._raiseUserSignedOut"),this._userSignedOut.raise()},e.prototype.addUserSessionChanged=function t(e){this._userSessionChanged.addHandler(e)},e.prototype.removeUserSessionChanged=function t(e){this._userSessionChanged.removeHandler(e)},e.prototype._raiseUserSessionChanged=function t(){n.Log.debug("UserManagerEvents._raiseUserSessionChanged"),this._userSessionChanged.raise()},e}(i.AccessTokenEvents)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Timer=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(1),s=r(17);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.Timer=function(t){function e(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Global.timer,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;a(this,e);var s=u(this,t.call(this,r));return s._timer=n,s._nowFunc=i||function(){return Date.now()/1e3},s}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.init=function t(e){e<=0&&(e=1),e=parseInt(e);var r=this.now+e;if(this.expiration===r&&this._timerHandle)i.Log.debug("Timer.init timer "+this._name+" skipping initialization since already initialized for expiration:",this.expiration);else{this.cancel(),i.Log.debug("Timer.init timer "+this._name+" for duration:",e),this._expiration=r;var n=5;e<n&&(n=e),this._timerHandle=this._timer.setInterval(this._callback.bind(this),1e3*n)}},e.prototype.cancel=function t(){this._timerHandle&&(i.Log.debug("Timer.cancel: ",this._name),this._timer.clearInterval(this._timerHandle),this._timerHandle=null)},e.prototype._callback=function e(){var r=this._expiration-this.now;i.Log.debug("Timer.callback; "+this._name+" timer expires in:",r),this._expiration<=this.now&&(this.cancel(),t.prototype.raise.call(this))},n(e,[{key:"now",get:function t(){return parseInt(this._nowFunc())}},{key:"expiration",get:function t(){return this._expiration}}]),e}(s.Event)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SilentRenewService=void 0;var n=r(0);e.SilentRenewService=function(){function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userManager=e}return t.prototype.start=function t(){this._callback||(this._callback=this._tokenExpiring.bind(this),this._userManager.events.addAccessTokenExpiring(this._callback),this._userManager.getUser().then((function(t){})).catch((function(t){n.Log.error("SilentRenewService.start: Error from getUser:",t.message)})))},t.prototype.stop=function t(){this._callback&&(this._userManager.events.removeAccessTokenExpiring(this._callback),delete this._callback)},t.prototype._tokenExpiring=function t(){var e=this;this._userManager.signinSilent().then((function(t){n.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful")}),(function(t){n.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:",t.message),e._userManager.events._raiseSilentRenewError(t)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaPopupNavigator=void 0;var n=r(21);e.CordovaPopupNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new n.CordovaPopupWindow(e);return Promise.resolve(r)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaIFrameNavigator=void 0;var n=r(21);e.CordovaIFrameNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){e.popupWindowFeatures="hidden=yes";var r=new n.CordovaPopupWindow(e);return Promise.resolve(r)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Version="1.11.6"}])}));

/***/ }),

/***/ "../core/dist/index.mjs":
/*!******************************!*\
  !*** ../core/dist/index.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AggregateHandler": () => (/* binding */ AggregateHandler),
/* harmony export */   "ConfigurationError": () => (/* binding */ ConfigurationError),
/* harmony export */   "DEFAULT_SCOPES": () => (/* binding */ DEFAULT_SCOPES),
/* harmony export */   "EVENTS": () => (/* binding */ EVENTS),
/* harmony export */   "InMemoryStorage": () => (/* binding */ InMemoryStorage),
/* harmony export */   "InvalidResponseError": () => (/* binding */ InvalidResponseError),
/* harmony export */   "NotImplementedError": () => (/* binding */ NotImplementedError),
/* harmony export */   "OidcProviderError": () => (/* binding */ OidcProviderError),
/* harmony export */   "PREFERRED_SIGNING_ALG": () => (/* binding */ PREFERRED_SIGNING_ALG),
/* harmony export */   "REFRESH_BEFORE_EXPIRATION_SECONDS": () => (/* binding */ REFRESH_BEFORE_EXPIRATION_SECONDS),
/* harmony export */   "SOLID_CLIENT_AUTHN_KEY_PREFIX": () => (/* binding */ SOLID_CLIENT_AUTHN_KEY_PREFIX),
/* harmony export */   "StorageUtility": () => (/* binding */ StorageUtility),
/* harmony export */   "StorageUtilityGetResponse": () => (/* binding */ StorageUtilityGetResponse),
/* harmony export */   "StorageUtilityMock": () => (/* binding */ StorageUtilityMock),
/* harmony export */   "USER_SESSION_PREFIX": () => (/* binding */ USER_SESSION_PREFIX),
/* harmony export */   "buildAuthenticatedFetch": () => (/* binding */ buildAuthenticatedFetch),
/* harmony export */   "buildProxyHandler": () => (/* binding */ buildProxyHandler),
/* harmony export */   "createDpopHeader": () => (/* binding */ createDpopHeader),
/* harmony export */   "determineSigningAlg": () => (/* binding */ determineSigningAlg),
/* harmony export */   "fetchJwks": () => (/* binding */ fetchJwks),
/* harmony export */   "generateDpopKeyPair": () => (/* binding */ generateDpopKeyPair),
/* harmony export */   "getSessionIdFromOauthState": () => (/* binding */ getSessionIdFromOauthState),
/* harmony export */   "getWebidFromTokenPayload": () => (/* binding */ getWebidFromTokenPayload),
/* harmony export */   "handleRegistration": () => (/* binding */ handleRegistration),
/* harmony export */   "isSupportedTokenType": () => (/* binding */ isSupportedTokenType),
/* harmony export */   "isValidRedirectUrl": () => (/* binding */ isValidRedirectUrl),
/* harmony export */   "loadOidcContextFromStorage": () => (/* binding */ loadOidcContextFromStorage),
/* harmony export */   "mockStorage": () => (/* binding */ mockStorage),
/* harmony export */   "mockStorageUtility": () => (/* binding */ mockStorageUtility),
/* harmony export */   "saveSessionInfoToStorage": () => (/* binding */ saveSessionInfoToStorage)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "../core/node_modules/events/events.js");
/* harmony import */ var _inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @inrupt/universal-fetch */ "../core/node_modules/@inrupt/universal-fetch/dist/index-browser.mjs");
/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jose */ "../core/node_modules/jose/dist/browser/index.js");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ "../core/node_modules/uuid/dist/esm-browser/v4.js");





const SOLID_CLIENT_AUTHN_KEY_PREFIX = "solidClientAuthn:";
const PREFERRED_SIGNING_ALG = ["ES256", "RS256"];
const EVENTS = {
    ERROR: "error",
    LOGIN: "login",
    LOGOUT: "logout",
    NEW_REFRESH_TOKEN: "newRefreshToken",
    SESSION_EXPIRED: "sessionExpired",
    SESSION_EXTENDED: "sessionExtended",
    SESSION_RESTORED: "sessionRestore",
    TIMEOUT_SET: "timeoutSet",
};
const REFRESH_BEFORE_EXPIRATION_SECONDS = 5;
const SCOPE_OPENID = "openid";
const SCOPE_OFFLINE = "offline_access";
const SCOPE_WEBID = "webid";
const DEFAULT_SCOPES = [SCOPE_OPENID, SCOPE_OFFLINE, SCOPE_WEBID].join(" ");

const buildProxyHandler = (toExclude, errorMessage) => ({
    get(target, prop, receiver) {
        if (!Object.getOwnPropertyNames(events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter).includes(prop) &&
            Object.getOwnPropertyNames(toExclude).includes(prop)) {
            throw new Error(`${errorMessage}: [${prop}] is not supported`);
        }
        return Reflect.get(target, prop, receiver);
    },
});

class AggregateHandler {
    constructor(handleables) {
        this.handleables = handleables;
    }
    async getProperHandler(params) {
        const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));
        for (let i = 0; i < canHandleList.length; i += 1) {
            if (canHandleList[i]) {
                return this.handleables[i];
            }
        }
        return null;
    }
    async canHandle(...params) {
        return (await this.getProperHandler(params)) !== null;
    }
    async handle(...params) {
        const handler = await this.getProperHandler(params);
        if (handler) {
            return handler.handle(...params);
        }
        throw new Error(`[${this.constructor.name}] cannot find a suitable handler for: ${params
            .map((param) => {
            try {
                return JSON.stringify(param);
            }
            catch (err) {
                return param.toString();
            }
        })
            .join(", ")}`);
    }
}

async function fetchJwks(jwksIri, issuerIri) {
    const jwksResponse = await (0,_inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__.fetch)(jwksIri);
    if (jwksResponse.status !== 200) {
        throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);
    }
    let jwk;
    try {
        jwk = (await jwksResponse.json()).keys[0];
    }
    catch (e) {
        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);
    }
    return jwk;
}
async function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {
    const jwk = await fetchJwks(jwksIri, issuerIri);
    let payload;
    try {
        const { payload: verifiedPayload } = await (0,jose__WEBPACK_IMPORTED_MODULE_1__.jwtVerify)(idToken, await (0,jose__WEBPACK_IMPORTED_MODULE_1__.importJWK)(jwk), {
            issuer: issuerIri,
            audience: clientId,
        });
        payload = verifiedPayload;
    }
    catch (e) {
        throw new Error(`Token verification failed: ${e.stack}`);
    }
    if (typeof payload.webid === "string") {
        return payload.webid;
    }
    if (typeof payload.sub !== "string") {
        throw new Error(`The token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);
    }
    try {
        new URL(payload.sub);
        return payload.sub;
    }
    catch (e) {
        throw new Error(`The token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);
    }
}

function isValidRedirectUrl(redirectUrl) {
    try {
        const urlObject = new URL(redirectUrl);
        return urlObject.hash === "";
    }
    catch (e) {
        return false;
    }
}

function isSupportedTokenType(token) {
    return typeof token === "string" && ["DPoP", "Bearer"].includes(token);
}

const USER_SESSION_PREFIX = "solidClientAuthenticationUser";

function isValidUrl(url) {
    try {
        new URL(url);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function determineSigningAlg(supported, preferred) {
    var _a;
    return ((_a = preferred.find((signingAlg) => {
        return supported.includes(signingAlg);
    })) !== null && _a !== void 0 ? _a : null);
}
function determineClientType(options, issuerConfig) {
    if (options.clientId !== undefined && !isValidUrl(options.clientId)) {
        return "static";
    }
    if (issuerConfig.scopesSupported.includes("webid") &&
        options.clientId !== undefined &&
        isValidUrl(options.clientId)) {
        return "solid-oidc";
    }
    return "dynamic";
}
async function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {
    const clientType = determineClientType(options, issuerConfig);
    if (clientType === "dynamic") {
        return clientRegistrar.getClient({
            sessionId: options.sessionId,
            clientName: options.clientName,
            redirectUrl: options.redirectUrl,
        }, issuerConfig);
    }
    await storageUtility.setForUser(options.sessionId, {
        clientId: options.clientId,
    });
    if (options.clientSecret) {
        await storageUtility.setForUser(options.sessionId, {
            clientSecret: options.clientSecret,
        });
    }
    if (options.clientName) {
        await storageUtility.setForUser(options.sessionId, {
            clientName: options.clientName,
        });
    }
    return {
        clientId: options.clientId,
        clientSecret: options.clientSecret,
        clientName: options.clientName,
        clientType,
    };
}

async function getSessionIdFromOauthState(storageUtility, oauthState) {
    return storageUtility.getForUser(oauthState, "sessionId");
}
async function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {
    try {
        const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([
            storageUtility.getForUser(sessionId, "issuer", {
                errorIfNull: true,
            }),
            storageUtility.getForUser(sessionId, "codeVerifier"),
            storageUtility.getForUser(sessionId, "redirectUrl"),
            storageUtility.getForUser(sessionId, "dpop", { errorIfNull: true }),
        ]);
        await storageUtility.deleteForUser(sessionId, "codeVerifier");
        const issuerConfig = await configFetcher.fetchConfig(issuerIri);
        return {
            codeVerifier,
            redirectUrl: storedRedirectIri,
            issuerConfig,
            dpop: dpop === "true",
        };
    }
    catch (e) {
        throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`);
    }
}
async function saveSessionInfoToStorage(storageUtility, sessionId, webId, isLoggedIn, refreshToken, secure, dpopKey) {
    if (refreshToken !== undefined) {
        await storageUtility.setForUser(sessionId, { refreshToken }, { secure });
    }
    if (webId !== undefined) {
        await storageUtility.setForUser(sessionId, { webId }, { secure });
    }
    if (isLoggedIn !== undefined) {
        await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });
    }
    if (dpopKey !== undefined) {
        await storageUtility.setForUser(sessionId, {
            publicKey: JSON.stringify(dpopKey.publicKey),
            privateKey: JSON.stringify(await (0,jose__WEBPACK_IMPORTED_MODULE_1__.exportJWK)(dpopKey.privateKey)),
        }, { secure });
    }
}
class StorageUtility {
    constructor(secureStorage, insecureStorage) {
        this.secureStorage = secureStorage;
        this.insecureStorage = insecureStorage;
    }
    getKey(userId) {
        return `solidClientAuthenticationUser:${userId}`;
    }
    async getUserData(userId, secure) {
        const stored = await (secure
            ? this.secureStorage
            : this.insecureStorage).get(this.getKey(userId));
        if (stored === undefined) {
            return {};
        }
        try {
            return JSON.parse(stored);
        }
        catch (err) {
            throw new Error(`Data for user [${userId}] in [${secure ? "secure" : "unsecure"}] storage is corrupted - expected valid JSON, but got: ${stored}`);
        }
    }
    async setUserData(userId, data, secure) {
        await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));
    }
    async get(key, options) {
        const value = await ((options === null || options === void 0 ? void 0 : options.secure)
            ? this.secureStorage
            : this.insecureStorage).get(key);
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new Error(`[${key}] is not stored`);
        }
        return value;
    }
    async set(key, value, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);
    }
    async delete(key, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);
    }
    async getForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        let value;
        if (!userData || !userData[key]) {
            value = undefined;
        }
        value = userData[key];
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new Error(`Field [${key}] for user [${userId}] is not stored`);
        }
        return value || undefined;
    }
    async setForUser(userId, values, options) {
        let userData;
        try {
            userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        }
        catch (_a) {
            userData = {};
        }
        await this.setUserData(userId, { ...userData, ...values }, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        delete userData[key];
        await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteAllUserData(userId, options) {
        await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));
    }
}

class InMemoryStorage {
    constructor() {
        this.map = {};
    }
    async get(key) {
        return this.map[key] || undefined;
    }
    async set(key, value) {
        this.map[key] = value;
    }
    async delete(key) {
        delete this.map[key];
    }
}

class ConfigurationError extends Error {
    constructor(message) {
        super(message);
    }
}

class NotImplementedError extends Error {
    constructor(methodName) {
        super(`[${methodName}] is not implemented`);
    }
}

class InvalidResponseError extends Error {
    constructor(missingFields) {
        super(`Invalid response from OIDC provider: missing fields ${missingFields}`);
        this.missingFields = missingFields;
    }
}

class OidcProviderError extends Error {
    constructor(message, error, errorDescription) {
        super(message);
        this.error = error;
        this.errorDescription = errorDescription;
    }
}

function normalizeHTU(audience) {
    const audienceUrl = new URL(audience);
    return new URL(audienceUrl.pathname, audienceUrl.origin).toString();
}
async function createDpopHeader(audience, method, dpopKey) {
    return new jose__WEBPACK_IMPORTED_MODULE_1__.SignJWT({
        htu: normalizeHTU(audience),
        htm: method.toUpperCase(),
        jti: (0,uuid__WEBPACK_IMPORTED_MODULE_3__["default"])(),
    })
        .setProtectedHeader({
        alg: PREFERRED_SIGNING_ALG[0],
        jwk: dpopKey.publicKey,
        typ: "dpop+jwt",
    })
        .setIssuedAt()
        .sign(dpopKey.privateKey, {});
}
async function generateDpopKeyPair() {
    const { privateKey, publicKey } = await (0,jose__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair)(PREFERRED_SIGNING_ALG[0]);
    const dpopKeyPair = {
        privateKey,
        publicKey: await (0,jose__WEBPACK_IMPORTED_MODULE_1__.exportJWK)(publicKey),
    };
    [dpopKeyPair.publicKey.alg] = PREFERRED_SIGNING_ALG;
    return dpopKeyPair;
}

const DEFAULT_EXPIRATION_TIME_SECONDS = 600;
function isExpectedAuthError(statusCode) {
    return [401, 403].includes(statusCode);
}
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
    var _a;
    const headers = new _inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    headers.set("Authorization", `DPoP ${authToken}`);
    headers.set("DPoP", await createDpopHeader(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey));
    return {
        ...defaultOptions,
        headers,
    };
}
async function buildAuthenticatedHeaders(targetUrl, authToken, dpopKey, defaultOptions) {
    if (dpopKey !== undefined) {
        return buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions);
    }
    const headers = new _inrupt_universal_fetch__WEBPACK_IMPORTED_MODULE_2__.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    headers.set("Authorization", `Bearer ${authToken}`);
    return {
        ...defaultOptions,
        headers,
    };
}
async function makeAuthenticatedRequest(unauthFetch, accessToken, url, defaultRequestInit, dpopKey) {
    return unauthFetch(url, await buildAuthenticatedHeaders(url.toString(), accessToken, dpopKey, defaultRequestInit));
}
async function refreshAccessToken(refreshOptions, dpopKey, eventEmitter) {
    var _a;
    const tokenSet = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
    eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(EVENTS.SESSION_EXTENDED, (_a = tokenSet.expiresIn) !== null && _a !== void 0 ? _a : DEFAULT_EXPIRATION_TIME_SECONDS);
    if (typeof tokenSet.refreshToken === "string") {
        eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
    }
    return {
        accessToken: tokenSet.accessToken,
        refreshToken: tokenSet.refreshToken,
        expiresIn: tokenSet.expiresIn,
    };
}
const computeRefreshDelay = (expiresIn) => {
    if (expiresIn !== undefined) {
        return expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS > 0
            ?
                expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS
            : expiresIn;
    }
    return DEFAULT_EXPIRATION_TIME_SECONDS;
};
async function buildAuthenticatedFetch(unauthFetch, accessToken, options) {
    var _a;
    let currentAccessToken = accessToken;
    let latestTimeout;
    const currentRefreshOptions = options === null || options === void 0 ? void 0 : options.refreshOptions;
    if (currentRefreshOptions !== undefined) {
        const proactivelyRefreshToken = async () => {
            var _a, _b, _c, _d;
            try {
                const { accessToken: refreshedAccessToken, refreshToken, expiresIn, } = await refreshAccessToken(currentRefreshOptions, options.dpopKey, options.eventEmitter);
                currentAccessToken = refreshedAccessToken;
                if (refreshToken !== undefined) {
                    currentRefreshOptions.refreshToken = refreshToken;
                }
                clearTimeout(latestTimeout);
                latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(expiresIn) * 1000);
                (_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
            }
            catch (e) {
                if (e instanceof OidcProviderError) {
                    (_b = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _b === void 0 ? void 0 : _b.emit(EVENTS.ERROR, e.error, e.errorDescription);
                    (_c = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _c === void 0 ? void 0 : _c.emit(EVENTS.SESSION_EXPIRED);
                }
                if (e instanceof InvalidResponseError &&
                    e.missingFields.includes("access_token")) {
                    (_d = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _d === void 0 ? void 0 : _d.emit(EVENTS.SESSION_EXPIRED);
                }
            }
        };
        latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(options.expiresIn) * 1000);
        (_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
    }
    else if (options !== undefined && options.eventEmitter !== undefined) {
        const expirationTimeout = setTimeout(() => {
            options.eventEmitter.emit(EVENTS.SESSION_EXPIRED);
        }, computeRefreshDelay(options.expiresIn) * 1000);
        options.eventEmitter.emit(EVENTS.TIMEOUT_SET, expirationTimeout);
    }
    return async (url, requestInit) => {
        let response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, url, requestInit, options === null || options === void 0 ? void 0 : options.dpopKey);
        const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
        if (response.ok || failedButNotExpectedAuthError) {
            return response;
        }
        const hasBeenRedirected = response.url !== url;
        if (hasBeenRedirected && (options === null || options === void 0 ? void 0 : options.dpopKey) !== undefined) {
            response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, response.url, requestInit, options.dpopKey);
        }
        return response;
    };
}

const StorageUtilityGetResponse = "getResponse";
const StorageUtilityMock = {
    get: async (key, options) => StorageUtilityGetResponse,
    set: async (key, value) => {
    },
    delete: async (key) => {
    },
    getForUser: async (userId, key, options) => StorageUtilityGetResponse,
    setForUser: async (userId, values, options) => {
    },
    deleteForUser: async (userId, key, options) => {
    },
    deleteAllUserData: async (userId, options) => {
    },
};
const mockStorage = (stored) => {
    const store = stored;
    return {
        get: async (key) => {
            if (store[key] === undefined) {
                return undefined;
            }
            if (typeof store[key] === "string") {
                return store[key];
            }
            return JSON.stringify(store[key]);
        },
        set: async (key, value) => {
            store[key] = value;
        },
        delete: async (key) => {
            delete store[key];
        },
    };
};
const mockStorageUtility = (stored, isSecure = false) => {
    if (isSecure) {
        return new StorageUtility(mockStorage(stored), mockStorage({}));
    }
    return new StorageUtility(mockStorage({}), mockStorage(stored));
};




/***/ }),

/***/ "../core/node_modules/@inrupt/universal-fetch/dist/index-browser.mjs":
/*!***************************************************************************!*\
  !*** ../core/node_modules/@inrupt/universal-fetch/dist/index-browser.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Headers": () => (/* binding */ Headers),
/* harmony export */   "Request": () => (/* binding */ Request),
/* harmony export */   "Response": () => (/* binding */ Response),
/* harmony export */   "default": () => (/* binding */ indexBrowser),
/* harmony export */   "fetch": () => (/* binding */ fetch)
/* harmony export */ });
var indexBrowser = globalThis.fetch;
const { fetch, Response, Request, Headers } = globalThis;




/***/ }),

/***/ "../core/node_modules/jose/dist/browser/index.js":
/*!*******************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CompactEncrypt": () => (/* reexport safe */ _jwe_compact_encrypt_js__WEBPACK_IMPORTED_MODULE_9__.CompactEncrypt),
/* harmony export */   "CompactSign": () => (/* reexport safe */ _jws_compact_sign_js__WEBPACK_IMPORTED_MODULE_11__.CompactSign),
/* harmony export */   "EmbeddedJWK": () => (/* reexport safe */ _jwk_embedded_js__WEBPACK_IMPORTED_MODULE_17__.EmbeddedJWK),
/* harmony export */   "EncryptJWT": () => (/* reexport safe */ _jwt_encrypt_js__WEBPACK_IMPORTED_MODULE_15__.EncryptJWT),
/* harmony export */   "FlattenedEncrypt": () => (/* reexport safe */ _jwe_flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_10__.FlattenedEncrypt),
/* harmony export */   "FlattenedSign": () => (/* reexport safe */ _jws_flattened_sign_js__WEBPACK_IMPORTED_MODULE_12__.FlattenedSign),
/* harmony export */   "GeneralEncrypt": () => (/* reexport safe */ _jwe_general_encrypt_js__WEBPACK_IMPORTED_MODULE_3__.GeneralEncrypt),
/* harmony export */   "GeneralSign": () => (/* reexport safe */ _jws_general_sign_js__WEBPACK_IMPORTED_MODULE_13__.GeneralSign),
/* harmony export */   "SignJWT": () => (/* reexport safe */ _jwt_sign_js__WEBPACK_IMPORTED_MODULE_14__.SignJWT),
/* harmony export */   "UnsecuredJWT": () => (/* reexport safe */ _jwt_unsecured_js__WEBPACK_IMPORTED_MODULE_20__.UnsecuredJWT),
/* harmony export */   "base64url": () => (/* reexport module object */ _util_base64url_js__WEBPACK_IMPORTED_MODULE_28__),
/* harmony export */   "calculateJwkThumbprint": () => (/* reexport safe */ _jwk_thumbprint_js__WEBPACK_IMPORTED_MODULE_16__.calculateJwkThumbprint),
/* harmony export */   "calculateJwkThumbprintUri": () => (/* reexport safe */ _jwk_thumbprint_js__WEBPACK_IMPORTED_MODULE_16__.calculateJwkThumbprintUri),
/* harmony export */   "compactDecrypt": () => (/* reexport safe */ _jwe_compact_decrypt_js__WEBPACK_IMPORTED_MODULE_0__.compactDecrypt),
/* harmony export */   "compactVerify": () => (/* reexport safe */ _jws_compact_verify_js__WEBPACK_IMPORTED_MODULE_4__.compactVerify),
/* harmony export */   "createLocalJWKSet": () => (/* reexport safe */ _jwks_local_js__WEBPACK_IMPORTED_MODULE_18__.createLocalJWKSet),
/* harmony export */   "createRemoteJWKSet": () => (/* reexport safe */ _jwks_remote_js__WEBPACK_IMPORTED_MODULE_19__.createRemoteJWKSet),
/* harmony export */   "decodeJwt": () => (/* reexport safe */ _util_decode_jwt_js__WEBPACK_IMPORTED_MODULE_24__.decodeJwt),
/* harmony export */   "decodeProtectedHeader": () => (/* reexport safe */ _util_decode_protected_header_js__WEBPACK_IMPORTED_MODULE_23__.decodeProtectedHeader),
/* harmony export */   "errors": () => (/* reexport module object */ _util_errors_js__WEBPACK_IMPORTED_MODULE_25__),
/* harmony export */   "exportJWK": () => (/* reexport safe */ _key_export_js__WEBPACK_IMPORTED_MODULE_21__.exportJWK),
/* harmony export */   "exportPKCS8": () => (/* reexport safe */ _key_export_js__WEBPACK_IMPORTED_MODULE_21__.exportPKCS8),
/* harmony export */   "exportSPKI": () => (/* reexport safe */ _key_export_js__WEBPACK_IMPORTED_MODULE_21__.exportSPKI),
/* harmony export */   "flattenedDecrypt": () => (/* reexport safe */ _jwe_flattened_decrypt_js__WEBPACK_IMPORTED_MODULE_1__.flattenedDecrypt),
/* harmony export */   "flattenedVerify": () => (/* reexport safe */ _jws_flattened_verify_js__WEBPACK_IMPORTED_MODULE_5__.flattenedVerify),
/* harmony export */   "generalDecrypt": () => (/* reexport safe */ _jwe_general_decrypt_js__WEBPACK_IMPORTED_MODULE_2__.generalDecrypt),
/* harmony export */   "generalVerify": () => (/* reexport safe */ _jws_general_verify_js__WEBPACK_IMPORTED_MODULE_6__.generalVerify),
/* harmony export */   "generateKeyPair": () => (/* reexport safe */ _key_generate_key_pair_js__WEBPACK_IMPORTED_MODULE_26__.generateKeyPair),
/* harmony export */   "generateSecret": () => (/* reexport safe */ _key_generate_secret_js__WEBPACK_IMPORTED_MODULE_27__.generateSecret),
/* harmony export */   "importJWK": () => (/* reexport safe */ _key_import_js__WEBPACK_IMPORTED_MODULE_22__.importJWK),
/* harmony export */   "importPKCS8": () => (/* reexport safe */ _key_import_js__WEBPACK_IMPORTED_MODULE_22__.importPKCS8),
/* harmony export */   "importSPKI": () => (/* reexport safe */ _key_import_js__WEBPACK_IMPORTED_MODULE_22__.importSPKI),
/* harmony export */   "importX509": () => (/* reexport safe */ _key_import_js__WEBPACK_IMPORTED_MODULE_22__.importX509),
/* harmony export */   "jwtDecrypt": () => (/* reexport safe */ _jwt_decrypt_js__WEBPACK_IMPORTED_MODULE_8__.jwtDecrypt),
/* harmony export */   "jwtVerify": () => (/* reexport safe */ _jwt_verify_js__WEBPACK_IMPORTED_MODULE_7__.jwtVerify)
/* harmony export */ });
/* harmony import */ var _jwe_compact_decrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jwe/compact/decrypt.js */ "../core/node_modules/jose/dist/browser/jwe/compact/decrypt.js");
/* harmony import */ var _jwe_flattened_decrypt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jwe/flattened/decrypt.js */ "../core/node_modules/jose/dist/browser/jwe/flattened/decrypt.js");
/* harmony import */ var _jwe_general_decrypt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jwe/general/decrypt.js */ "../core/node_modules/jose/dist/browser/jwe/general/decrypt.js");
/* harmony import */ var _jwe_general_encrypt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jwe/general/encrypt.js */ "../core/node_modules/jose/dist/browser/jwe/general/encrypt.js");
/* harmony import */ var _jws_compact_verify_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jws/compact/verify.js */ "../core/node_modules/jose/dist/browser/jws/compact/verify.js");
/* harmony import */ var _jws_flattened_verify_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./jws/flattened/verify.js */ "../core/node_modules/jose/dist/browser/jws/flattened/verify.js");
/* harmony import */ var _jws_general_verify_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./jws/general/verify.js */ "../core/node_modules/jose/dist/browser/jws/general/verify.js");
/* harmony import */ var _jwt_verify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./jwt/verify.js */ "../core/node_modules/jose/dist/browser/jwt/verify.js");
/* harmony import */ var _jwt_decrypt_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jwt/decrypt.js */ "../core/node_modules/jose/dist/browser/jwt/decrypt.js");
/* harmony import */ var _jwe_compact_encrypt_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./jwe/compact/encrypt.js */ "../core/node_modules/jose/dist/browser/jwe/compact/encrypt.js");
/* harmony import */ var _jwe_flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./jwe/flattened/encrypt.js */ "../core/node_modules/jose/dist/browser/jwe/flattened/encrypt.js");
/* harmony import */ var _jws_compact_sign_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./jws/compact/sign.js */ "../core/node_modules/jose/dist/browser/jws/compact/sign.js");
/* harmony import */ var _jws_flattened_sign_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./jws/flattened/sign.js */ "../core/node_modules/jose/dist/browser/jws/flattened/sign.js");
/* harmony import */ var _jws_general_sign_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./jws/general/sign.js */ "../core/node_modules/jose/dist/browser/jws/general/sign.js");
/* harmony import */ var _jwt_sign_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./jwt/sign.js */ "../core/node_modules/jose/dist/browser/jwt/sign.js");
/* harmony import */ var _jwt_encrypt_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./jwt/encrypt.js */ "../core/node_modules/jose/dist/browser/jwt/encrypt.js");
/* harmony import */ var _jwk_thumbprint_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./jwk/thumbprint.js */ "../core/node_modules/jose/dist/browser/jwk/thumbprint.js");
/* harmony import */ var _jwk_embedded_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./jwk/embedded.js */ "../core/node_modules/jose/dist/browser/jwk/embedded.js");
/* harmony import */ var _jwks_local_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./jwks/local.js */ "../core/node_modules/jose/dist/browser/jwks/local.js");
/* harmony import */ var _jwks_remote_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./jwks/remote.js */ "../core/node_modules/jose/dist/browser/jwks/remote.js");
/* harmony import */ var _jwt_unsecured_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./jwt/unsecured.js */ "../core/node_modules/jose/dist/browser/jwt/unsecured.js");
/* harmony import */ var _key_export_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./key/export.js */ "../core/node_modules/jose/dist/browser/key/export.js");
/* harmony import */ var _key_import_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./key/import.js */ "../core/node_modules/jose/dist/browser/key/import.js");
/* harmony import */ var _util_decode_protected_header_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./util/decode_protected_header.js */ "../core/node_modules/jose/dist/browser/util/decode_protected_header.js");
/* harmony import */ var _util_decode_jwt_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./util/decode_jwt.js */ "../core/node_modules/jose/dist/browser/util/decode_jwt.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _key_generate_key_pair_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./key/generate_key_pair.js */ "../core/node_modules/jose/dist/browser/key/generate_key_pair.js");
/* harmony import */ var _key_generate_secret_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./key/generate_secret.js */ "../core/node_modules/jose/dist/browser/key/generate_secret.js");
/* harmony import */ var _util_base64url_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./util/base64url.js */ "../core/node_modules/jose/dist/browser/util/base64url.js");

































/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwe/compact/decrypt.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwe/compact/decrypt.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compactDecrypt": () => (/* binding */ compactDecrypt)
/* harmony export */ });
/* harmony import */ var _flattened_decrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/decrypt.js */ "../core/node_modules/jose/dist/browser/jwe/flattened/decrypt.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");



async function compactDecrypt(jwe, key, options) {
    if (jwe instanceof Uint8Array) {
        jwe = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_2__.decoder.decode(jwe);
    }
    if (typeof jwe !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('Compact JWE must be a string or Uint8Array');
    }
    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length, } = jwe.split('.');
    if (length !== 5) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('Invalid Compact JWE');
    }
    const decrypted = await (0,_flattened_decrypt_js__WEBPACK_IMPORTED_MODULE_0__.flattenedDecrypt)({
        ciphertext,
        iv: (iv || undefined),
        protected: protectedHeader || undefined,
        tag: (tag || undefined),
        encrypted_key: encryptedKey || undefined,
    }, key, options);
    const result = { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
    if (typeof key === 'function') {
        return { ...result, key: decrypted.key };
    }
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwe/compact/encrypt.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwe/compact/encrypt.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CompactEncrypt": () => (/* binding */ CompactEncrypt)
/* harmony export */ });
/* harmony import */ var _flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/encrypt.js */ "../core/node_modules/jose/dist/browser/jwe/flattened/encrypt.js");

class CompactEncrypt {
    constructor(plaintext) {
        this._flattened = new _flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_0__.FlattenedEncrypt(plaintext);
    }
    setContentEncryptionKey(cek) {
        this._flattened.setContentEncryptionKey(cek);
        return this;
    }
    setInitializationVector(iv) {
        this._flattened.setInitializationVector(iv);
        return this;
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    setKeyManagementParameters(parameters) {
        this._flattened.setKeyManagementParameters(parameters);
        return this;
    }
    async encrypt(key, options) {
        const jwe = await this._flattened.encrypt(key, options);
        return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwe/flattened/decrypt.js":
/*!***********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwe/flattened/decrypt.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flattenedDecrypt": () => (/* binding */ flattenedDecrypt)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _runtime_decrypt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../runtime/decrypt.js */ "../core/node_modules/jose/dist/browser/runtime/decrypt.js");
/* harmony import */ var _runtime_zlib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../runtime/zlib.js */ "../core/node_modules/jose/dist/browser/runtime/zlib.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/is_disjoint.js */ "../core/node_modules/jose/dist/browser/lib/is_disjoint.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");
/* harmony import */ var _lib_decrypt_key_management_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/decrypt_key_management.js */ "../core/node_modules/jose/dist/browser/lib/decrypt_key_management.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_cek_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/cek.js */ "../core/node_modules/jose/dist/browser/lib/cek.js");
/* harmony import */ var _lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../lib/validate_crit.js */ "../core/node_modules/jose/dist/browser/lib/validate_crit.js");
/* harmony import */ var _lib_validate_algorithms_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/validate_algorithms.js */ "../core/node_modules/jose/dist/browser/lib/validate_algorithms.js");











async function flattenedDecrypt(jwe, key, options) {
    var _a;
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__["default"])(jwe)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('Flattened JWE must be an object');
    }
    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JOSE Header missing');
    }
    if (typeof jwe.iv !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Initialization Vector missing or incorrect type');
    }
    if (typeof jwe.ciphertext !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Ciphertext missing or incorrect type');
    }
    if (typeof jwe.tag !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Authentication Tag missing or incorrect type');
    }
    if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Protected Header incorrect type');
    }
    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Encrypted Key incorrect type');
    }
    if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE AAD incorrect type');
    }
    if (jwe.header !== undefined && !(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__["default"])(jwe.header)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Shared Unprotected Header incorrect type');
    }
    if (jwe.unprotected !== undefined && !(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__["default"])(jwe.unprotected)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');
    }
    let parsedProt;
    if (jwe.protected) {
        try {
            const protectedHeader = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwe.protected);
            parsedProt = JSON.parse(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.decoder.decode(protectedHeader));
        }
        catch (_b) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Protected Header is invalid');
        }
    }
    if (!(0,_lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_4__["default"])(parsedProt, jwe.header, jwe.unprotected)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jwe.header,
        ...jwe.unprotected,
    };
    (0,_lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_9__["default"])(_util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    if (joseHeader.zip !== undefined) {
        if (!parsedProt || !parsedProt.zip) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
        }
        if (joseHeader.zip !== 'DEF') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
        }
    }
    const { alg, enc } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('missing JWE Algorithm (alg) in JWE Header');
    }
    if (typeof enc !== 'string' || !enc) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');
    }
    const keyManagementAlgorithms = options && (0,_lib_validate_algorithms_js__WEBPACK_IMPORTED_MODULE_10__["default"])('keyManagementAlgorithms', options.keyManagementAlgorithms);
    const contentEncryptionAlgorithms = options &&
        (0,_lib_validate_algorithms_js__WEBPACK_IMPORTED_MODULE_10__["default"])('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);
    if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
    }
    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter not allowed');
    }
    let encryptedKey;
    if (jwe.encrypted_key !== undefined) {
        encryptedKey = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwe.encrypted_key);
    }
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jwe);
        resolvedKey = true;
    }
    let cek;
    try {
        cek = await (0,_lib_decrypt_key_management_js__WEBPACK_IMPORTED_MODULE_6__["default"])(alg, key, encryptedKey, joseHeader, options);
    }
    catch (err) {
        if (err instanceof TypeError || err instanceof _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWEInvalid || err instanceof _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JOSENotSupported) {
            throw err;
        }
        cek = (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_8__["default"])(enc);
    }
    const iv = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwe.iv);
    const tag = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwe.tag);
    const protectedHeader = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : '');
    let additionalData;
    if (jwe.aad !== undefined) {
        additionalData = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.concat)(protectedHeader, _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode('.'), _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode(jwe.aad));
    }
    else {
        additionalData = protectedHeader;
    }
    let plaintext = await (0,_runtime_decrypt_js__WEBPACK_IMPORTED_MODULE_1__["default"])(enc, cek, (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwe.ciphertext), iv, tag, additionalData);
    if (joseHeader.zip === 'DEF') {
        plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || _runtime_zlib_js__WEBPACK_IMPORTED_MODULE_2__.inflate)(plaintext);
    }
    const result = { plaintext };
    if (jwe.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jwe.aad !== undefined) {
        result.additionalAuthenticatedData = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwe.aad);
    }
    if (jwe.unprotected !== undefined) {
        result.sharedUnprotectedHeader = jwe.unprotected;
    }
    if (jwe.header !== undefined) {
        result.unprotectedHeader = jwe.header;
    }
    if (resolvedKey) {
        return { ...result, key };
    }
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwe/flattened/encrypt.js":
/*!***********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwe/flattened/encrypt.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FlattenedEncrypt": () => (/* binding */ FlattenedEncrypt),
/* harmony export */   "unprotected": () => (/* binding */ unprotected)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _runtime_encrypt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../runtime/encrypt.js */ "../core/node_modules/jose/dist/browser/runtime/encrypt.js");
/* harmony import */ var _runtime_zlib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../runtime/zlib.js */ "../core/node_modules/jose/dist/browser/runtime/zlib.js");
/* harmony import */ var _lib_iv_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/iv.js */ "../core/node_modules/jose/dist/browser/lib/iv.js");
/* harmony import */ var _lib_encrypt_key_management_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/encrypt_key_management.js */ "../core/node_modules/jose/dist/browser/lib/encrypt_key_management.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/is_disjoint.js */ "../core/node_modules/jose/dist/browser/lib/is_disjoint.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/validate_crit.js */ "../core/node_modules/jose/dist/browser/lib/validate_crit.js");









const unprotected = Symbol();
class FlattenedEncrypt {
    constructor(plaintext) {
        if (!(plaintext instanceof Uint8Array)) {
            throw new TypeError('plaintext must be an instance of Uint8Array');
        }
        this._plaintext = plaintext;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
            throw new TypeError('setKeyManagementParameters can only be called once');
        }
        this._keyManagementParameters = parameters;
        return this;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader) {
            throw new TypeError('setSharedUnprotectedHeader can only be called once');
        }
        this._sharedUnprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) {
            throw new TypeError('setContentEncryptionKey can only be called once');
        }
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) {
            throw new TypeError('setInitializationVector can only be called once');
        }
        this._iv = iv;
        return this;
    }
    async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');
        }
        if (!(0,_lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
        }
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...this._sharedUnprotectedHeader,
        };
        (0,_lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_8__["default"])(_util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
        if (joseHeader.zip !== undefined) {
            if (!this._protectedHeader || !this._protectedHeader.zip) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
            }
            if (joseHeader.zip !== 'DEF') {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
            }
        }
        const { alg, enc } = joseHeader;
        if (typeof alg !== 'string' || !alg) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        }
        if (typeof enc !== 'string' || !enc) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        }
        let encryptedKey;
        if (alg === 'dir') {
            if (this._cek) {
                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');
            }
        }
        else if (alg === 'ECDH-ES') {
            if (this._cek) {
                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');
            }
        }
        let cek;
        {
            let parameters;
            ({ cek, encryptedKey, parameters } = await (0,_lib_encrypt_key_management_js__WEBPACK_IMPORTED_MODULE_4__["default"])(alg, enc, key, this._cek, this._keyManagementParameters));
            if (parameters) {
                if (options && unprotected in options) {
                    if (!this._unprotectedHeader) {
                        this.setUnprotectedHeader(parameters);
                    }
                    else {
                        this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };
                    }
                }
                else {
                    if (!this._protectedHeader) {
                        this.setProtectedHeader(parameters);
                    }
                    else {
                        this._protectedHeader = { ...this._protectedHeader, ...parameters };
                    }
                }
            }
        }
        this._iv || (this._iv = (0,_lib_iv_js__WEBPACK_IMPORTED_MODULE_3__["default"])(enc));
        let additionalData;
        let protectedHeader;
        let aadMember;
        if (this._protectedHeader) {
            protectedHeader = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode((0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(JSON.stringify(this._protectedHeader)));
        }
        else {
            protectedHeader = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode('');
        }
        if (this._aad) {
            aadMember = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(this._aad);
            additionalData = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.concat)(protectedHeader, _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode('.'), _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.encoder.encode(aadMember));
        }
        else {
            additionalData = protectedHeader;
        }
        let ciphertext;
        let tag;
        if (joseHeader.zip === 'DEF') {
            const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || _runtime_zlib_js__WEBPACK_IMPORTED_MODULE_2__.deflate)(this._plaintext);
            ({ ciphertext, tag } = await (0,_runtime_encrypt_js__WEBPACK_IMPORTED_MODULE_1__["default"])(enc, deflated, cek, this._iv, additionalData));
        }
        else {
            ;
            ({ ciphertext, tag } = await (0,_runtime_encrypt_js__WEBPACK_IMPORTED_MODULE_1__["default"])(enc, this._plaintext, cek, this._iv, additionalData));
        }
        const jwe = {
            ciphertext: (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(ciphertext),
            iv: (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(this._iv),
            tag: (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(tag),
        };
        if (encryptedKey) {
            jwe.encrypted_key = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(encryptedKey);
        }
        if (aadMember) {
            jwe.aad = aadMember;
        }
        if (this._protectedHeader) {
            jwe.protected = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_7__.decoder.decode(protectedHeader);
        }
        if (this._sharedUnprotectedHeader) {
            jwe.unprotected = this._sharedUnprotectedHeader;
        }
        if (this._unprotectedHeader) {
            jwe.header = this._unprotectedHeader;
        }
        return jwe;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwe/general/decrypt.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwe/general/decrypt.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generalDecrypt": () => (/* binding */ generalDecrypt)
/* harmony export */ });
/* harmony import */ var _flattened_decrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/decrypt.js */ "../core/node_modules/jose/dist/browser/jwe/flattened/decrypt.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");



async function generalDecrypt(jwe, key, options) {
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])(jwe)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('General JWE must be an object');
    }
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE Recipients missing or incorrect type');
    }
    if (!jwe.recipients.length) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE Recipients has no members');
    }
    for (const recipient of jwe.recipients) {
        try {
            return await (0,_flattened_decrypt_js__WEBPACK_IMPORTED_MODULE_0__.flattenedDecrypt)({
                aad: jwe.aad,
                ciphertext: jwe.ciphertext,
                encrypted_key: recipient.encrypted_key,
                header: recipient.header,
                iv: jwe.iv,
                protected: jwe.protected,
                tag: jwe.tag,
                unprotected: jwe.unprotected,
            }, key, options);
        }
        catch (_a) {
        }
    }
    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEDecryptionFailed();
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwe/general/encrypt.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwe/general/encrypt.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GeneralEncrypt": () => (/* binding */ GeneralEncrypt)
/* harmony export */ });
/* harmony import */ var _flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/encrypt.js */ "../core/node_modules/jose/dist/browser/jwe/flattened/encrypt.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_cek_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/cek.js */ "../core/node_modules/jose/dist/browser/lib/cek.js");
/* harmony import */ var _lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/is_disjoint.js */ "../core/node_modules/jose/dist/browser/lib/is_disjoint.js");
/* harmony import */ var _lib_encrypt_key_management_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/encrypt_key_management.js */ "../core/node_modules/jose/dist/browser/lib/encrypt_key_management.js");
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/validate_crit.js */ "../core/node_modules/jose/dist/browser/lib/validate_crit.js");







class IndividualRecipient {
    constructor(enc, key, options) {
        this.parent = enc;
        this.key = key;
        this.options = options;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addRecipient(...args) {
        return this.parent.addRecipient(...args);
    }
    encrypt(...args) {
        return this.parent.encrypt(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralEncrypt {
    constructor(plaintext) {
        this._recipients = [];
        this._plaintext = plaintext;
    }
    addRecipient(key, options) {
        const recipient = new IndividualRecipient(this, key, { crit: options === null || options === void 0 ? void 0 : options.crit });
        this._recipients.push(recipient);
        return recipient;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setSharedUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    async encrypt(options) {
        var _a, _b, _c;
        if (!this._recipients.length) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('at least one recipient must be added');
        }
        options = { deflateRaw: options === null || options === void 0 ? void 0 : options.deflateRaw };
        if (this._recipients.length === 1) {
            const [recipient] = this._recipients;
            const flattened = await new _flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_0__.FlattenedEncrypt(this._plaintext)
                .setAdditionalAuthenticatedData(this._aad)
                .setProtectedHeader(this._protectedHeader)
                .setSharedUnprotectedHeader(this._unprotectedHeader)
                .setUnprotectedHeader(recipient.unprotectedHeader)
                .encrypt(recipient.key, { ...recipient.options, ...options });
            let jwe = {
                ciphertext: flattened.ciphertext,
                iv: flattened.iv,
                recipients: [{}],
                tag: flattened.tag,
            };
            if (flattened.aad)
                jwe.aad = flattened.aad;
            if (flattened.protected)
                jwe.protected = flattened.protected;
            if (flattened.unprotected)
                jwe.unprotected = flattened.unprotected;
            if (flattened.encrypted_key)
                jwe.recipients[0].encrypted_key = flattened.encrypted_key;
            if (flattened.header)
                jwe.recipients[0].header = flattened.header;
            return jwe;
        }
        let enc;
        for (let i = 0; i < this._recipients.length; i++) {
            const recipient = this._recipients[i];
            if (!(0,_lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_3__["default"])(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
            }
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader,
            };
            const { alg } = joseHeader;
            if (typeof alg !== 'string' || !alg) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
            }
            if (alg === 'dir' || alg === 'ECDH-ES') {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
            }
            if (typeof joseHeader.enc !== 'string' || !joseHeader.enc) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
            }
            if (!enc) {
                enc = joseHeader.enc;
            }
            else if (enc !== joseHeader.enc) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
            }
            (0,_lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_6__["default"])(_util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid, new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
            if (joseHeader.zip !== undefined) {
                if (!this._protectedHeader || !this._protectedHeader.zip) {
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
                }
            }
        }
        const cek = (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_2__["default"])(enc);
        let jwe = {
            ciphertext: '',
            iv: '',
            recipients: [],
            tag: '',
        };
        for (let i = 0; i < this._recipients.length; i++) {
            const recipient = this._recipients[i];
            const target = {};
            jwe.recipients.push(target);
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader,
            };
            const p2c = joseHeader.alg.startsWith('PBES2') ? 2048 + i : undefined;
            if (i === 0) {
                const flattened = await new _flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_0__.FlattenedEncrypt(this._plaintext)
                    .setAdditionalAuthenticatedData(this._aad)
                    .setContentEncryptionKey(cek)
                    .setProtectedHeader(this._protectedHeader)
                    .setSharedUnprotectedHeader(this._unprotectedHeader)
                    .setUnprotectedHeader(recipient.unprotectedHeader)
                    .setKeyManagementParameters({ p2c })
                    .encrypt(recipient.key, {
                    ...recipient.options,
                    ...options,
                    [_flattened_encrypt_js__WEBPACK_IMPORTED_MODULE_0__.unprotected]: true,
                });
                jwe.ciphertext = flattened.ciphertext;
                jwe.iv = flattened.iv;
                jwe.tag = flattened.tag;
                if (flattened.aad)
                    jwe.aad = flattened.aad;
                if (flattened.protected)
                    jwe.protected = flattened.protected;
                if (flattened.unprotected)
                    jwe.unprotected = flattened.unprotected;
                target.encrypted_key = flattened.encrypted_key;
                if (flattened.header)
                    target.header = flattened.header;
                continue;
            }
            const { encryptedKey, parameters } = await (0,_lib_encrypt_key_management_js__WEBPACK_IMPORTED_MODULE_4__["default"])(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) ||
                ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) ||
                ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, { p2c });
            target.encrypted_key = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_5__.encode)(encryptedKey);
            if (recipient.unprotectedHeader || parameters)
                target.header = { ...recipient.unprotectedHeader, ...parameters };
        }
        return jwe;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwk/embedded.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwk/embedded.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EmbeddedJWK": () => (/* binding */ EmbeddedJWK)
/* harmony export */ });
/* harmony import */ var _key_import_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../key/import.js */ "../core/node_modules/jose/dist/browser/key/import.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");



async function EmbeddedJWK(protectedHeader, token) {
    const joseHeader = {
        ...protectedHeader,
        ...token === null || token === void 0 ? void 0 : token.header,
    };
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_1__["default"])(joseHeader.jwk)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
    }
    const key = await (0,_key_import_js__WEBPACK_IMPORTED_MODULE_0__.importJWK)({ ...joseHeader.jwk, ext: true }, joseHeader.alg, true);
    if (key instanceof Uint8Array || key.type !== 'public') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
    }
    return key;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwk/thumbprint.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwk/thumbprint.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateJwkThumbprint": () => (/* binding */ calculateJwkThumbprint),
/* harmony export */   "calculateJwkThumbprintUri": () => (/* binding */ calculateJwkThumbprintUri)
/* harmony export */ });
/* harmony import */ var _runtime_digest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/digest.js */ "../core/node_modules/jose/dist/browser/runtime/digest.js");
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");





const check = (value, description) => {
    if (typeof value !== 'string' || !value) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWKInvalid(`${description} missing or invalid`);
    }
};
async function calculateJwkThumbprint(jwk, digestAlgorithm) {
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_4__["default"])(jwk)) {
        throw new TypeError('JWK must be an object');
    }
    digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : (digestAlgorithm = 'sha256');
    if (digestAlgorithm !== 'sha256' &&
        digestAlgorithm !== 'sha384' &&
        digestAlgorithm !== 'sha512') {
        throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
    }
    let components;
    switch (jwk.kty) {
        case 'EC':
            check(jwk.crv, '"crv" (Curve) Parameter');
            check(jwk.x, '"x" (X Coordinate) Parameter');
            check(jwk.y, '"y" (Y Coordinate) Parameter');
            components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
            break;
        case 'OKP':
            check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
            check(jwk.x, '"x" (Public Key) Parameter');
            components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
            break;
        case 'RSA':
            check(jwk.e, '"e" (Exponent) Parameter');
            check(jwk.n, '"n" (Modulus) Parameter');
            components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
            break;
        case 'oct':
            check(jwk.k, '"k" (Key Value) Parameter');
            components = { k: jwk.k, kty: jwk.kty };
            break;
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
    }
    const data = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.encoder.encode(JSON.stringify(components));
    return (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_1__.encode)(await (0,_runtime_digest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(digestAlgorithm, data));
}
async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
    digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : (digestAlgorithm = 'sha256');
    const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
    return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwks/local.js":
/*!************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwks/local.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalJWKSet": () => (/* binding */ LocalJWKSet),
/* harmony export */   "createLocalJWKSet": () => (/* binding */ createLocalJWKSet),
/* harmony export */   "isJWKSLike": () => (/* binding */ isJWKSLike)
/* harmony export */ });
/* harmony import */ var _key_import_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../key/import.js */ "../core/node_modules/jose/dist/browser/key/import.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");



function getKtyFromAlg(alg) {
    switch (typeof alg === 'string' && alg.slice(0, 2)) {
        case 'RS':
        case 'PS':
            return 'RSA';
        case 'ES':
            return 'EC';
        case 'Ed':
            return 'OKP';
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
    }
}
function isJWKSLike(jwks) {
    return (jwks &&
        typeof jwks === 'object' &&
        Array.isArray(jwks.keys) &&
        jwks.keys.every(isJWKLike));
}
function isJWKLike(key) {
    return (0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])(key);
}
function clone(obj) {
    if (typeof structuredClone === 'function') {
        return structuredClone(obj);
    }
    return JSON.parse(JSON.stringify(obj));
}
class LocalJWKSet {
    constructor(jwks) {
        this._cached = new WeakMap();
        if (!isJWKSLike(jwks)) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWKSInvalid('JSON Web Key Set malformed');
        }
        this._jwks = clone(jwks);
    }
    async getKey(protectedHeader, token) {
        const { alg, kid } = { ...protectedHeader, ...token === null || token === void 0 ? void 0 : token.header };
        const kty = getKtyFromAlg(alg);
        const candidates = this._jwks.keys.filter((jwk) => {
            let candidate = kty === jwk.kty;
            if (candidate && typeof kid === 'string') {
                candidate = kid === jwk.kid;
            }
            if (candidate && typeof jwk.alg === 'string') {
                candidate = alg === jwk.alg;
            }
            if (candidate && typeof jwk.use === 'string') {
                candidate = jwk.use === 'sig';
            }
            if (candidate && Array.isArray(jwk.key_ops)) {
                candidate = jwk.key_ops.includes('verify');
            }
            if (candidate && alg === 'EdDSA') {
                candidate = jwk.crv === 'Ed25519' || jwk.crv === 'Ed448';
            }
            if (candidate) {
                switch (alg) {
                    case 'ES256':
                        candidate = jwk.crv === 'P-256';
                        break;
                    case 'ES256K':
                        candidate = jwk.crv === 'secp256k1';
                        break;
                    case 'ES384':
                        candidate = jwk.crv === 'P-384';
                        break;
                    case 'ES512':
                        candidate = jwk.crv === 'P-521';
                        break;
                }
            }
            return candidate;
        });
        const { 0: jwk, length } = candidates;
        if (length === 0) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWKSNoMatchingKey();
        }
        else if (length !== 1) {
            const error = new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWKSMultipleMatchingKeys();
            const { _cached } = this;
            error[Symbol.asyncIterator] = async function* () {
                for (const jwk of candidates) {
                    try {
                        yield await importWithAlgCache(_cached, jwk, alg);
                    }
                    catch (_a) {
                        continue;
                    }
                }
            };
            throw error;
        }
        return importWithAlgCache(this._cached, jwk, alg);
    }
}
async function importWithAlgCache(cache, jwk, alg) {
    const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
    if (cached[alg] === undefined) {
        const key = await (0,_key_import_js__WEBPACK_IMPORTED_MODULE_0__.importJWK)({ ...jwk, ext: true }, alg);
        if (key instanceof Uint8Array || key.type !== 'public') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWKSInvalid('JSON Web Key Set members must be public keys');
        }
        cached[alg] = key;
    }
    return cached[alg];
}
function createLocalJWKSet(jwks) {
    const set = new LocalJWKSet(jwks);
    return async function (protectedHeader, token) {
        return set.getKey(protectedHeader, token);
    };
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwks/remote.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwks/remote.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRemoteJWKSet": () => (/* binding */ createRemoteJWKSet)
/* harmony export */ });
/* harmony import */ var _runtime_fetch_jwks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/fetch_jwks.js */ "../core/node_modules/jose/dist/browser/runtime/fetch_jwks.js");
/* harmony import */ var _runtime_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/env.js */ "../core/node_modules/jose/dist/browser/runtime/env.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _local_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local.js */ "../core/node_modules/jose/dist/browser/jwks/local.js");




class RemoteJWKSet extends _local_js__WEBPACK_IMPORTED_MODULE_3__.LocalJWKSet {
    constructor(url, options) {
        super({ keys: [] });
        this._jwks = undefined;
        if (!(url instanceof URL)) {
            throw new TypeError('url must be an instance of URL');
        }
        this._url = new URL(url.href);
        this._options = { agent: options === null || options === void 0 ? void 0 : options.agent, headers: options === null || options === void 0 ? void 0 : options.headers };
        this._timeoutDuration =
            typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;
        this._cooldownDuration =
            typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;
        this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === 'number' ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;
    }
    coolingDown() {
        return typeof this._jwksTimestamp === 'number'
            ? Date.now() < this._jwksTimestamp + this._cooldownDuration
            : false;
    }
    fresh() {
        return typeof this._jwksTimestamp === 'number'
            ? Date.now() < this._jwksTimestamp + this._cacheMaxAge
            : false;
    }
    async getKey(protectedHeader, token) {
        if (!this._jwks || !this.fresh()) {
            await this.reload();
        }
        try {
            return await super.getKey(protectedHeader, token);
        }
        catch (err) {
            if (err instanceof _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWKSNoMatchingKey) {
                if (this.coolingDown() === false) {
                    await this.reload();
                    return super.getKey(protectedHeader, token);
                }
            }
            throw err;
        }
    }
    async reload() {
        if (this._pendingFetch && (0,_runtime_env_js__WEBPACK_IMPORTED_MODULE_1__.isCloudflareWorkers)()) {
            this._pendingFetch = undefined;
        }
        this._pendingFetch || (this._pendingFetch = (0,_runtime_fetch_jwks_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this._url, this._timeoutDuration, this._options)
            .then((json) => {
            if (!(0,_local_js__WEBPACK_IMPORTED_MODULE_3__.isJWKSLike)(json)) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWKSInvalid('JSON Web Key Set malformed');
            }
            this._jwks = { keys: json.keys };
            this._jwksTimestamp = Date.now();
            this._pendingFetch = undefined;
        })
            .catch((err) => {
            this._pendingFetch = undefined;
            throw err;
        }));
        await this._pendingFetch;
    }
}
function createRemoteJWKSet(url, options) {
    const set = new RemoteJWKSet(url, options);
    return async function (protectedHeader, token) {
        return set.getKey(protectedHeader, token);
    };
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jws/compact/sign.js":
/*!******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jws/compact/sign.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CompactSign": () => (/* binding */ CompactSign)
/* harmony export */ });
/* harmony import */ var _flattened_sign_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/sign.js */ "../core/node_modules/jose/dist/browser/jws/flattened/sign.js");

class CompactSign {
    constructor(payload) {
        this._flattened = new _flattened_sign_js__WEBPACK_IMPORTED_MODULE_0__.FlattenedSign(payload);
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === undefined) {
            throw new TypeError('use the flattened module for creating JWS with b64: false');
        }
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jws/compact/verify.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jws/compact/verify.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compactVerify": () => (/* binding */ compactVerify)
/* harmony export */ });
/* harmony import */ var _flattened_verify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/verify.js */ "../core/node_modules/jose/dist/browser/jws/flattened/verify.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");



async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) {
        jws = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_2__.decoder.decode(jws);
    }
    if (typeof jws !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSInvalid('Compact JWS must be a string or Uint8Array');
    }
    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');
    if (length !== 3) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSInvalid('Invalid Compact JWS');
    }
    const verified = await (0,_flattened_verify_js__WEBPACK_IMPORTED_MODULE_0__.flattenedVerify)({ payload, protected: protectedHeader, signature }, key, options);
    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
    if (typeof key === 'function') {
        return { ...result, key: verified.key };
    }
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jws/flattened/sign.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jws/flattened/sign.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FlattenedSign": () => (/* binding */ FlattenedSign)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _runtime_sign_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../runtime/sign.js */ "../core/node_modules/jose/dist/browser/runtime/sign.js");
/* harmony import */ var _lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/is_disjoint.js */ "../core/node_modules/jose/dist/browser/lib/is_disjoint.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_check_key_type_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/check_key_type.js */ "../core/node_modules/jose/dist/browser/lib/check_key_type.js");
/* harmony import */ var _lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/validate_crit.js */ "../core/node_modules/jose/dist/browser/lib/validate_crit.js");







class FlattenedSign {
    constructor(payload) {
        if (!(payload instanceof Uint8Array)) {
            throw new TypeError('payload must be an instance of Uint8Array');
        }
        this._payload = payload;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');
        }
        if (!(0,_lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this._protectedHeader, this._unprotectedHeader)) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
        }
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
        };
        const extensions = (0,_lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_6__["default"])(_util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has('b64')) {
            b64 = this._protectedHeader.b64;
            if (typeof b64 !== 'boolean') {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
            }
        }
        const { alg } = joseHeader;
        if (typeof alg !== 'string' || !alg) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        }
        (0,_lib_check_key_type_js__WEBPACK_IMPORTED_MODULE_5__["default"])(alg, key, 'sign');
        let payload = this._payload;
        if (b64) {
            payload = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.encoder.encode((0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(payload));
        }
        let protectedHeader;
        if (this._protectedHeader) {
            protectedHeader = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.encoder.encode((0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(JSON.stringify(this._protectedHeader)));
        }
        else {
            protectedHeader = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.encoder.encode('');
        }
        const data = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.concat)(protectedHeader, _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.encoder.encode('.'), payload);
        const signature = await (0,_runtime_sign_js__WEBPACK_IMPORTED_MODULE_1__["default"])(alg, key, data);
        const jws = {
            signature: (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode)(signature),
            payload: '',
        };
        if (b64) {
            jws.payload = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.decoder.decode(payload);
        }
        if (this._unprotectedHeader) {
            jws.header = this._unprotectedHeader;
        }
        if (this._protectedHeader) {
            jws.protected = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_4__.decoder.decode(protectedHeader);
        }
        return jws;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jws/flattened/verify.js":
/*!**********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jws/flattened/verify.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flattenedVerify": () => (/* binding */ flattenedVerify)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _runtime_verify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../runtime/verify.js */ "../core/node_modules/jose/dist/browser/runtime/verify.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/is_disjoint.js */ "../core/node_modules/jose/dist/browser/lib/is_disjoint.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");
/* harmony import */ var _lib_check_key_type_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/check_key_type.js */ "../core/node_modules/jose/dist/browser/lib/check_key_type.js");
/* harmony import */ var _lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/validate_crit.js */ "../core/node_modules/jose/dist/browser/lib/validate_crit.js");
/* harmony import */ var _lib_validate_algorithms_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/validate_algorithms.js */ "../core/node_modules/jose/dist/browser/lib/validate_algorithms.js");









async function flattenedVerify(jws, key, options) {
    var _a;
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__["default"])(jws)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('Flattened JWS must be an object');
    }
    if (jws.protected === undefined && jws.header === undefined) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
    }
    if (jws.protected !== undefined && typeof jws.protected !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Protected Header incorrect type');
    }
    if (jws.payload === undefined) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Payload missing');
    }
    if (typeof jws.signature !== 'string') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Signature missing or incorrect type');
    }
    if (jws.header !== undefined && !(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_5__["default"])(jws.header)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Unprotected Header incorrect type');
    }
    let parsedProt = {};
    if (jws.protected) {
        try {
            const protectedHeader = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jws.protected);
            parsedProt = JSON.parse(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.decoder.decode(protectedHeader));
        }
        catch (_b) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Protected Header is invalid');
        }
    }
    if (!(0,_lib_is_disjoint_js__WEBPACK_IMPORTED_MODULE_4__["default"])(parsedProt, jws.header)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jws.header,
    };
    const extensions = (0,_lib_validate_crit_js__WEBPACK_IMPORTED_MODULE_7__["default"])(_util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has('b64')) {
        b64 = parsedProt.b64;
        if (typeof b64 !== 'boolean') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        }
    }
    const { alg } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    }
    const algorithms = options && (0,_lib_validate_algorithms_js__WEBPACK_IMPORTED_MODULE_8__["default"])('algorithms', options.algorithms);
    if (algorithms && !algorithms.has(alg)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
    }
    if (b64) {
        if (typeof jws.payload !== 'string') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Payload must be a string');
        }
    }
    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
    }
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jws);
        resolvedKey = true;
    }
    (0,_lib_check_key_type_js__WEBPACK_IMPORTED_MODULE_6__["default"])(alg, key, 'verify');
    const data = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.concat)(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.encoder.encode('.'), typeof jws.payload === 'string' ? _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.encoder.encode(jws.payload) : jws.payload);
    const signature = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jws.signature);
    const verified = await (0,_runtime_verify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(alg, key, signature, data);
    if (!verified) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWSSignatureVerificationFailed();
    }
    let payload;
    if (b64) {
        payload = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jws.payload);
    }
    else if (typeof jws.payload === 'string') {
        payload = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_3__.encoder.encode(jws.payload);
    }
    else {
        payload = jws.payload;
    }
    const result = { payload };
    if (jws.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jws.header !== undefined) {
        result.unprotectedHeader = jws.header;
    }
    if (resolvedKey) {
        return { ...result, key };
    }
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jws/general/sign.js":
/*!******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jws/general/sign.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GeneralSign": () => (/* binding */ GeneralSign)
/* harmony export */ });
/* harmony import */ var _flattened_sign_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/sign.js */ "../core/node_modules/jose/dist/browser/jws/flattened/sign.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");


class IndividualSignature {
    constructor(sig, key, options) {
        this.parent = sig;
        this.key = key;
        this.options = options;
    }
    setProtectedHeader(protectedHeader) {
        if (this.protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this.protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addSignature(...args) {
        return this.parent.addSignature(...args);
    }
    sign(...args) {
        return this.parent.sign(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralSign {
    constructor(payload) {
        this._signatures = [];
        this._payload = payload;
    }
    addSignature(key, options) {
        const signature = new IndividualSignature(this, key, options);
        this._signatures.push(signature);
        return signature;
    }
    async sign() {
        if (!this._signatures.length) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSInvalid('at least one signature must be added');
        }
        const jws = {
            signatures: [],
            payload: '',
        };
        for (let i = 0; i < this._signatures.length; i++) {
            const signature = this._signatures[i];
            const flattened = new _flattened_sign_js__WEBPACK_IMPORTED_MODULE_0__.FlattenedSign(this._payload);
            flattened.setProtectedHeader(signature.protectedHeader);
            flattened.setUnprotectedHeader(signature.unprotectedHeader);
            const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
            if (i === 0) {
                jws.payload = payload;
            }
            else if (jws.payload !== payload) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSInvalid('inconsistent use of JWS Unencoded Payload Option (RFC7797)');
            }
            jws.signatures.push(rest);
        }
        return jws;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jws/general/verify.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jws/general/verify.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generalVerify": () => (/* binding */ generalVerify)
/* harmony export */ });
/* harmony import */ var _flattened_verify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flattened/verify.js */ "../core/node_modules/jose/dist/browser/jws/flattened/verify.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");



async function generalVerify(jws, key, options) {
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])(jws)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSInvalid('General JWS must be an object');
    }
    if (!Array.isArray(jws.signatures) || !jws.signatures.every(_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSInvalid('JWS Signatures missing or incorrect type');
    }
    for (const signature of jws.signatures) {
        try {
            return await (0,_flattened_verify_js__WEBPACK_IMPORTED_MODULE_0__.flattenedVerify)({
                header: signature.header,
                payload: jws.payload,
                protected: signature.protected,
                signature: signature.signature,
            }, key, options);
        }
        catch (_a) {
        }
    }
    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWSSignatureVerificationFailed();
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwt/decrypt.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwt/decrypt.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jwtDecrypt": () => (/* binding */ jwtDecrypt)
/* harmony export */ });
/* harmony import */ var _jwe_compact_decrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jwe/compact/decrypt.js */ "../core/node_modules/jose/dist/browser/jwe/compact/decrypt.js");
/* harmony import */ var _lib_jwt_claims_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/jwt_claims_set.js */ "../core/node_modules/jose/dist/browser/lib/jwt_claims_set.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");



async function jwtDecrypt(jwt, key, options) {
    const decrypted = await (0,_jwe_compact_decrypt_js__WEBPACK_IMPORTED_MODULE_0__.compactDecrypt)(jwt, key, options);
    const payload = (0,_lib_jwt_claims_set_js__WEBPACK_IMPORTED_MODULE_1__["default"])(decrypted.protectedHeader, decrypted.plaintext, options);
    const { protectedHeader } = decrypted;
    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', 'iss', 'mismatch');
    }
    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', 'sub', 'mismatch');
    }
    if (protectedHeader.aud !== undefined &&
        JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', 'aud', 'mismatch');
    }
    const result = { payload, protectedHeader };
    if (typeof key === 'function') {
        return { ...result, key: decrypted.key };
    }
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwt/encrypt.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwt/encrypt.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EncryptJWT": () => (/* binding */ EncryptJWT)
/* harmony export */ });
/* harmony import */ var _jwe_compact_encrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jwe/compact/encrypt.js */ "../core/node_modules/jose/dist/browser/jwe/compact/encrypt.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _produce_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./produce.js */ "../core/node_modules/jose/dist/browser/jwt/produce.js");



class EncryptJWT extends _produce_js__WEBPACK_IMPORTED_MODULE_2__.ProduceJWT {
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
            throw new TypeError('setKeyManagementParameters can only be called once');
        }
        this._keyManagementParameters = parameters;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) {
            throw new TypeError('setContentEncryptionKey can only be called once');
        }
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) {
            throw new TypeError('setInitializationVector can only be called once');
        }
        this._iv = iv;
        return this;
    }
    replicateIssuerAsHeader() {
        this._replicateIssuerAsHeader = true;
        return this;
    }
    replicateSubjectAsHeader() {
        this._replicateSubjectAsHeader = true;
        return this;
    }
    replicateAudienceAsHeader() {
        this._replicateAudienceAsHeader = true;
        return this;
    }
    async encrypt(key, options) {
        const enc = new _jwe_compact_encrypt_js__WEBPACK_IMPORTED_MODULE_0__.CompactEncrypt(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__.encoder.encode(JSON.stringify(this._payload)));
        if (this._replicateIssuerAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss };
        }
        if (this._replicateSubjectAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub };
        }
        if (this._replicateAudienceAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud };
        }
        enc.setProtectedHeader(this._protectedHeader);
        if (this._iv) {
            enc.setInitializationVector(this._iv);
        }
        if (this._cek) {
            enc.setContentEncryptionKey(this._cek);
        }
        if (this._keyManagementParameters) {
            enc.setKeyManagementParameters(this._keyManagementParameters);
        }
        return enc.encrypt(key, options);
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwt/produce.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwt/produce.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProduceJWT": () => (/* binding */ ProduceJWT)
/* harmony export */ });
/* harmony import */ var _lib_epoch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/epoch.js */ "../core/node_modules/jose/dist/browser/lib/epoch.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");
/* harmony import */ var _lib_secs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/secs.js */ "../core/node_modules/jose/dist/browser/lib/secs.js");



class ProduceJWT {
    constructor(payload) {
        if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_1__["default"])(payload)) {
            throw new TypeError('JWT Claims Set MUST be an object');
        }
        this._payload = payload;
    }
    setIssuer(issuer) {
        this._payload = { ...this._payload, iss: issuer };
        return this;
    }
    setSubject(subject) {
        this._payload = { ...this._payload, sub: subject };
        return this;
    }
    setAudience(audience) {
        this._payload = { ...this._payload, aud: audience };
        return this;
    }
    setJti(jwtId) {
        this._payload = { ...this._payload, jti: jwtId };
        return this;
    }
    setNotBefore(input) {
        if (typeof input === 'number') {
            this._payload = { ...this._payload, nbf: input };
        }
        else {
            this._payload = { ...this._payload, nbf: (0,_lib_epoch_js__WEBPACK_IMPORTED_MODULE_0__["default"])(new Date()) + (0,_lib_secs_js__WEBPACK_IMPORTED_MODULE_2__["default"])(input) };
        }
        return this;
    }
    setExpirationTime(input) {
        if (typeof input === 'number') {
            this._payload = { ...this._payload, exp: input };
        }
        else {
            this._payload = { ...this._payload, exp: (0,_lib_epoch_js__WEBPACK_IMPORTED_MODULE_0__["default"])(new Date()) + (0,_lib_secs_js__WEBPACK_IMPORTED_MODULE_2__["default"])(input) };
        }
        return this;
    }
    setIssuedAt(input) {
        if (typeof input === 'undefined') {
            this._payload = { ...this._payload, iat: (0,_lib_epoch_js__WEBPACK_IMPORTED_MODULE_0__["default"])(new Date()) };
        }
        else {
            this._payload = { ...this._payload, iat: input };
        }
        return this;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwt/sign.js":
/*!**********************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwt/sign.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignJWT": () => (/* binding */ SignJWT)
/* harmony export */ });
/* harmony import */ var _jws_compact_sign_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jws/compact/sign.js */ "../core/node_modules/jose/dist/browser/jws/compact/sign.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _produce_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./produce.js */ "../core/node_modules/jose/dist/browser/jwt/produce.js");




class SignJWT extends _produce_js__WEBPACK_IMPORTED_MODULE_3__.ProduceJWT {
    setProtectedHeader(protectedHeader) {
        this._protectedHeader = protectedHeader;
        return this;
    }
    async sign(key, options) {
        var _a;
        const sig = new _jws_compact_sign_js__WEBPACK_IMPORTED_MODULE_0__.CompactSign(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_2__.encoder.encode(JSON.stringify(this._payload)));
        sig.setProtectedHeader(this._protectedHeader);
        if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) &&
            this._protectedHeader.crit.includes('b64') &&
            this._protectedHeader.b64 === false) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JWTInvalid('JWTs MUST NOT use unencoded payload');
        }
        return sig.sign(key, options);
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwt/unsecured.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwt/unsecured.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnsecuredJWT": () => (/* binding */ UnsecuredJWT)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_jwt_claims_set_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/jwt_claims_set.js */ "../core/node_modules/jose/dist/browser/lib/jwt_claims_set.js");
/* harmony import */ var _produce_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./produce.js */ "../core/node_modules/jose/dist/browser/jwt/produce.js");





class UnsecuredJWT extends _produce_js__WEBPACK_IMPORTED_MODULE_4__.ProduceJWT {
    encode() {
        const header = _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode(JSON.stringify({ alg: 'none' }));
        const payload = _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode(JSON.stringify(this._payload));
        return `${header}.${payload}.`;
    }
    static decode(jwt, options) {
        if (typeof jwt !== 'string') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTInvalid('Unsecured JWT must be a string');
        }
        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split('.');
        if (length !== 3 || signature !== '') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTInvalid('Invalid Unsecured JWT');
        }
        let header;
        try {
            header = JSON.parse(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode(encodedHeader)));
            if (header.alg !== 'none')
                throw new Error();
        }
        catch (_a) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTInvalid('Invalid Unsecured JWT');
        }
        const payload = (0,_lib_jwt_claims_set_js__WEBPACK_IMPORTED_MODULE_3__["default"])(header, _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode(encodedPayload), options);
        return { payload, header };
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/jwt/verify.js":
/*!************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/jwt/verify.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jwtVerify": () => (/* binding */ jwtVerify)
/* harmony export */ });
/* harmony import */ var _jws_compact_verify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jws/compact/verify.js */ "../core/node_modules/jose/dist/browser/jws/compact/verify.js");
/* harmony import */ var _lib_jwt_claims_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/jwt_claims_set.js */ "../core/node_modules/jose/dist/browser/lib/jwt_claims_set.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");



async function jwtVerify(jwt, key, options) {
    var _a;
    const verified = await (0,_jws_compact_verify_js__WEBPACK_IMPORTED_MODULE_0__.compactVerify)(jwt, key, options);
    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JWTInvalid('JWTs MUST NOT use unencoded payload');
    }
    const payload = (0,_lib_jwt_claims_set_js__WEBPACK_IMPORTED_MODULE_1__["default"])(verified.protectedHeader, verified.payload, options);
    const result = { payload, protectedHeader: verified.protectedHeader };
    if (typeof key === 'function') {
        return { ...result, key: verified.key };
    }
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/key/export.js":
/*!************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/key/export.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "exportJWK": () => (/* binding */ exportJWK),
/* harmony export */   "exportPKCS8": () => (/* binding */ exportPKCS8),
/* harmony export */   "exportSPKI": () => (/* binding */ exportSPKI)
/* harmony export */ });
/* harmony import */ var _runtime_asn1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/asn1.js */ "../core/node_modules/jose/dist/browser/runtime/asn1.js");
/* harmony import */ var _runtime_key_to_jwk_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/key_to_jwk.js */ "../core/node_modules/jose/dist/browser/runtime/key_to_jwk.js");



async function exportSPKI(key) {
    return (0,_runtime_asn1_js__WEBPACK_IMPORTED_MODULE_0__.toSPKI)(key);
}
async function exportPKCS8(key) {
    return (0,_runtime_asn1_js__WEBPACK_IMPORTED_MODULE_0__.toPKCS8)(key);
}
async function exportJWK(key) {
    return (0,_runtime_key_to_jwk_js__WEBPACK_IMPORTED_MODULE_1__["default"])(key);
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/key/generate_key_pair.js":
/*!***********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/key/generate_key_pair.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateKeyPair": () => (/* binding */ generateKeyPair)
/* harmony export */ });
/* harmony import */ var _runtime_generate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/generate.js */ "../core/node_modules/jose/dist/browser/runtime/generate.js");

async function generateKeyPair(alg, options) {
    return (0,_runtime_generate_js__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair)(alg, options);
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/key/generate_secret.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/key/generate_secret.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateSecret": () => (/* binding */ generateSecret)
/* harmony export */ });
/* harmony import */ var _runtime_generate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/generate.js */ "../core/node_modules/jose/dist/browser/runtime/generate.js");

async function generateSecret(alg, options) {
    return (0,_runtime_generate_js__WEBPACK_IMPORTED_MODULE_0__.generateSecret)(alg, options);
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/key/import.js":
/*!************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/key/import.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "importJWK": () => (/* binding */ importJWK),
/* harmony export */   "importPKCS8": () => (/* binding */ importPKCS8),
/* harmony export */   "importSPKI": () => (/* binding */ importSPKI),
/* harmony export */   "importX509": () => (/* binding */ importX509)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _runtime_asn1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/asn1.js */ "../core/node_modules/jose/dist/browser/runtime/asn1.js");
/* harmony import */ var _runtime_jwk_to_key_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../runtime/jwk_to_key.js */ "../core/node_modules/jose/dist/browser/runtime/jwk_to_key.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");





async function importSPKI(spki, alg, options) {
    if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {
        throw new TypeError('"spki" must be SPKI formatted string');
    }
    return (0,_runtime_asn1_js__WEBPACK_IMPORTED_MODULE_1__.fromSPKI)(spki, alg, options);
}
async function importX509(x509, alg, options) {
    if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {
        throw new TypeError('"x509" must be X.509 formatted string');
    }
    return (0,_runtime_asn1_js__WEBPACK_IMPORTED_MODULE_1__.fromX509)(x509, alg, options);
}
async function importPKCS8(pkcs8, alg, options) {
    if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {
        throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
    }
    return (0,_runtime_asn1_js__WEBPACK_IMPORTED_MODULE_1__.fromPKCS8)(pkcs8, alg, options);
}
async function importJWK(jwk, alg, octAsKeyObject) {
    var _a;
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_4__["default"])(jwk)) {
        throw new TypeError('JWK must be an object');
    }
    alg || (alg = jwk.alg);
    switch (jwk.kty) {
        case 'oct':
            if (typeof jwk.k !== 'string' || !jwk.k) {
                throw new TypeError('missing "k" (Key Value) Parameter value');
            }
            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : (octAsKeyObject = jwk.ext !== true);
            if (octAsKeyObject) {
                return (0,_runtime_jwk_to_key_js__WEBPACK_IMPORTED_MODULE_2__["default"])({ ...jwk, alg, ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false });
            }
            return (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(jwk.k);
        case 'RSA':
            if (jwk.oth !== undefined) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
            }
        case 'EC':
        case 'OKP':
            return (0,_runtime_jwk_to_key_js__WEBPACK_IMPORTED_MODULE_2__["default"])({ ...jwk, alg });
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_3__.JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/aesgcmkw.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/aesgcmkw.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unwrap": () => (/* binding */ unwrap),
/* harmony export */   "wrap": () => (/* binding */ wrap)
/* harmony export */ });
/* harmony import */ var _runtime_encrypt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/encrypt.js */ "../core/node_modules/jose/dist/browser/runtime/encrypt.js");
/* harmony import */ var _runtime_decrypt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/decrypt.js */ "../core/node_modules/jose/dist/browser/runtime/decrypt.js");
/* harmony import */ var _iv_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iv.js */ "../core/node_modules/jose/dist/browser/lib/iv.js");
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");




async function wrap(alg, key, cek, iv) {
    const jweAlgorithm = alg.slice(0, 7);
    iv || (iv = (0,_iv_js__WEBPACK_IMPORTED_MODULE_2__["default"])(jweAlgorithm));
    const { ciphertext: encryptedKey, tag } = await (0,_runtime_encrypt_js__WEBPACK_IMPORTED_MODULE_0__["default"])(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return { encryptedKey, iv: (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_3__.encode)(iv), tag: (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_3__.encode)(tag) };
}
async function unwrap(alg, key, encryptedKey, iv, tag) {
    const jweAlgorithm = alg.slice(0, 7);
    return (0,_runtime_decrypt_js__WEBPACK_IMPORTED_MODULE_1__["default"])(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js":
/*!******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/buffer_utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": () => (/* binding */ concat),
/* harmony export */   "concatKdf": () => (/* binding */ concatKdf),
/* harmony export */   "decoder": () => (/* binding */ decoder),
/* harmony export */   "encoder": () => (/* binding */ encoder),
/* harmony export */   "lengthAndInput": () => (/* binding */ lengthAndInput),
/* harmony export */   "p2s": () => (/* binding */ p2s),
/* harmony export */   "uint32be": () => (/* binding */ uint32be),
/* harmony export */   "uint64be": () => (/* binding */ uint64be)
/* harmony export */ });
/* harmony import */ var _runtime_digest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/digest.js */ "../core/node_modules/jose/dist/browser/runtime/digest.js");

const encoder = new TextEncoder();
const decoder = new TextDecoder();
const MAX_INT32 = 2 ** 32;
function concat(...buffers) {
    const size = buffers.reduce((acc, { length }) => acc + length, 0);
    const buf = new Uint8Array(size);
    let i = 0;
    buffers.forEach((buffer) => {
        buf.set(buffer, i);
        i += buffer.length;
    });
    return buf;
}
function p2s(alg, p2sInput) {
    return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
}
function writeUInt32BE(buf, value, offset) {
    if (value < 0 || value >= MAX_INT32) {
        throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
    }
    buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);
}
function uint64be(value) {
    const high = Math.floor(value / MAX_INT32);
    const low = value % MAX_INT32;
    const buf = new Uint8Array(8);
    writeUInt32BE(buf, high, 0);
    writeUInt32BE(buf, low, 4);
    return buf;
}
function uint32be(value) {
    const buf = new Uint8Array(4);
    writeUInt32BE(buf, value);
    return buf;
}
function lengthAndInput(input) {
    return concat(uint32be(input.length), input);
}
async function concatKdf(secret, bits, value) {
    const iterations = Math.ceil((bits >> 3) / 32);
    const res = new Uint8Array(iterations * 32);
    for (let iter = 0; iter < iterations; iter++) {
        const buf = new Uint8Array(4 + secret.length + value.length);
        buf.set(uint32be(iter + 1));
        buf.set(secret, 4);
        buf.set(value, 4 + secret.length);
        res.set(await (0,_runtime_digest_js__WEBPACK_IMPORTED_MODULE_0__["default"])('sha256', buf), iter * 32);
    }
    return res.slice(0, bits >> 3);
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/cek.js":
/*!*********************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/cek.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitLength": () => (/* binding */ bitLength),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _runtime_random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/random.js */ "../core/node_modules/jose/dist/browser/runtime/random.js");


function bitLength(alg) {
    switch (alg) {
        case 'A128GCM':
            return 128;
        case 'A192GCM':
            return 192;
        case 'A256GCM':
        case 'A128CBC-HS256':
            return 256;
        case 'A192CBC-HS384':
            return 384;
        case 'A256CBC-HS512':
            return 512;
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((alg) => (0,_runtime_random_js__WEBPACK_IMPORTED_MODULE_1__["default"])(new Uint8Array(bitLength(alg) >> 3)));


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/check_iv_length.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/check_iv_length.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _iv_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iv.js */ "../core/node_modules/jose/dist/browser/lib/iv.js");


const checkIvLength = (enc, iv) => {
    if (iv.length << 3 !== (0,_iv_js__WEBPACK_IMPORTED_MODULE_1__.bitLength)(enc)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWEInvalid('Invalid Initialization Vector length');
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (checkIvLength);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/check_key_type.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/check_key_type.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _invalid_key_input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");


const symmetricTypeCheck = (alg, key) => {
    if (key instanceof Uint8Array)
        return;
    if (!(0,_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__["default"])(key)) {
        throw new TypeError((0,_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_0__.withAlg)(alg, key, ..._runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types, 'Uint8Array'));
    }
    if (key.type !== 'secret') {
        throw new TypeError(`${_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types.join(' or ')} instances for symmetric algorithms must be of type "secret"`);
    }
};
const asymmetricTypeCheck = (alg, key, usage) => {
    if (!(0,_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__["default"])(key)) {
        throw new TypeError((0,_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_0__.withAlg)(alg, key, ..._runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types));
    }
    if (key.type === 'secret') {
        throw new TypeError(`${_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types.join(' or ')} instances for asymmetric algorithms must not be of type "secret"`);
    }
    if (usage === 'sign' && key.type === 'public') {
        throw new TypeError(`${_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types.join(' or ')} instances for asymmetric algorithm signing must be of type "private"`);
    }
    if (usage === 'decrypt' && key.type === 'public') {
        throw new TypeError(`${_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types.join(' or ')} instances for asymmetric algorithm decryption must be of type "private"`);
    }
    if (key.algorithm && usage === 'verify' && key.type === 'private') {
        throw new TypeError(`${_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types.join(' or ')} instances for asymmetric algorithm verifying must be of type "public"`);
    }
    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {
        throw new TypeError(`${_runtime_is_key_like_js__WEBPACK_IMPORTED_MODULE_1__.types.join(' or ')} instances for asymmetric algorithm encryption must be of type "public"`);
    }
};
const checkKeyType = (alg, key, usage) => {
    const symmetric = alg.startsWith('HS') ||
        alg === 'dir' ||
        alg.startsWith('PBES2') ||
        /^A\d{3}(?:GCM)?KW$/.test(alg);
    if (symmetric) {
        symmetricTypeCheck(alg, key);
    }
    else {
        asymmetricTypeCheck(alg, key, usage);
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (checkKeyType);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/check_p2s.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/check_p2s.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ checkP2s)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");

function checkP2s(p2s) {
    if (!(p2s instanceof Uint8Array) || p2s.length < 8) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWEInvalid('PBES2 Salt Input must be 8 or more octets');
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/crypto_key.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/crypto_key.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkEncCryptoKey": () => (/* binding */ checkEncCryptoKey),
/* harmony export */   "checkSigCryptoKey": () => (/* binding */ checkSigCryptoKey)
/* harmony export */ });
/* harmony import */ var _runtime_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/env.js */ "../core/node_modules/jose/dist/browser/runtime/env.js");

function unusable(name, prop = 'algorithm.name') {
    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
    return algorithm.name === name;
}
function getHashLength(hash) {
    return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
    switch (alg) {
        case 'ES256':
            return 'P-256';
        case 'ES384':
            return 'P-384';
        case 'ES512':
            return 'P-521';
        default:
            throw new Error('unreachable');
    }
}
function checkUsage(key, usages) {
    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
        let msg = 'CryptoKey does not support this operation, its usages must include ';
        if (usages.length > 2) {
            const last = usages.pop();
            msg += `one of ${usages.join(', ')}, or ${last}.`;
        }
        else if (usages.length === 2) {
            msg += `one of ${usages[0]} or ${usages[1]}.`;
        }
        else {
            msg += `${usages[0]}.`;
        }
        throw new TypeError(msg);
    }
}
function checkSigCryptoKey(key, alg, ...usages) {
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512': {
            if (!isAlgorithm(key.algorithm, 'HMAC'))
                throw unusable('HMAC');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        case 'RS256':
        case 'RS384':
        case 'RS512': {
            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))
                throw unusable('RSASSA-PKCS1-v1_5');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        case 'PS256':
        case 'PS384':
        case 'PS512': {
            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))
                throw unusable('RSA-PSS');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        case 'EdDSA': {
            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {
                if ((0,_runtime_env_js__WEBPACK_IMPORTED_MODULE_0__.isCloudflareWorkers)()) {
                    if (isAlgorithm(key.algorithm, 'NODE-ED25519'))
                        break;
                    throw unusable('Ed25519, Ed448, or NODE-ED25519');
                }
                throw unusable('Ed25519 or Ed448');
            }
            break;
        }
        case 'ES256':
        case 'ES384':
        case 'ES512': {
            if (!isAlgorithm(key.algorithm, 'ECDSA'))
                throw unusable('ECDSA');
            const expected = getNamedCurve(alg);
            const actual = key.algorithm.namedCurve;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.namedCurve');
            break;
        }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}
function checkEncCryptoKey(key, alg, ...usages) {
    switch (alg) {
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM': {
            if (!isAlgorithm(key.algorithm, 'AES-GCM'))
                throw unusable('AES-GCM');
            const expected = parseInt(alg.slice(1, 4), 10);
            const actual = key.algorithm.length;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.length');
            break;
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            if (!isAlgorithm(key.algorithm, 'AES-KW'))
                throw unusable('AES-KW');
            const expected = parseInt(alg.slice(1, 4), 10);
            const actual = key.algorithm.length;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.length');
            break;
        }
        case 'ECDH': {
            switch (key.algorithm.name) {
                case 'ECDH':
                case 'X25519':
                case 'X448':
                    break;
                default:
                    throw unusable('ECDH, X25519, or X448');
            }
            break;
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW':
            if (!isAlgorithm(key.algorithm, 'PBKDF2'))
                throw unusable('PBKDF2');
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))
                throw unusable('RSA-OAEP');
            const expected = parseInt(alg.slice(9), 10) || 1;
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-${expected}`, 'algorithm.hash');
            break;
        }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/decrypt_key_management.js":
/*!****************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/decrypt_key_management.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _runtime_aeskw_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/aeskw.js */ "../core/node_modules/jose/dist/browser/runtime/aeskw.js");
/* harmony import */ var _runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/ecdhes.js */ "../core/node_modules/jose/dist/browser/runtime/ecdhes.js");
/* harmony import */ var _runtime_pbes2kw_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../runtime/pbes2kw.js */ "../core/node_modules/jose/dist/browser/runtime/pbes2kw.js");
/* harmony import */ var _runtime_rsaes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../runtime/rsaes.js */ "../core/node_modules/jose/dist/browser/runtime/rsaes.js");
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _lib_cek_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/cek.js */ "../core/node_modules/jose/dist/browser/lib/cek.js");
/* harmony import */ var _key_import_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../key/import.js */ "../core/node_modules/jose/dist/browser/key/import.js");
/* harmony import */ var _check_key_type_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./check_key_type.js */ "../core/node_modules/jose/dist/browser/lib/check_key_type.js");
/* harmony import */ var _is_object_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");
/* harmony import */ var _aesgcmkw_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./aesgcmkw.js */ "../core/node_modules/jose/dist/browser/lib/aesgcmkw.js");











async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
    (0,_check_key_type_js__WEBPACK_IMPORTED_MODULE_8__["default"])(alg, key, 'decrypt');
    switch (alg) {
        case 'dir': {
            if (encryptedKey !== undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('Encountered unexpected JWE Encrypted Key');
            return key;
        }
        case 'ECDH-ES':
            if (encryptedKey !== undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('Encountered unexpected JWE Encrypted Key');
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            if (!(0,_is_object_js__WEBPACK_IMPORTED_MODULE_9__["default"])(joseHeader.epk))
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
            if (!_runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__.ecdhAllowed(key))
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');
            const epk = await (0,_key_import_js__WEBPACK_IMPORTED_MODULE_7__.importJWK)(joseHeader.epk, alg);
            let partyUInfo;
            let partyVInfo;
            if (joseHeader.apu !== undefined) {
                if (typeof joseHeader.apu !== 'string')
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
                partyUInfo = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.decode)(joseHeader.apu);
            }
            if (joseHeader.apv !== undefined) {
                if (typeof joseHeader.apv !== 'string')
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
                partyVInfo = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.decode)(joseHeader.apv);
            }
            const sharedSecret = await _runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__.deriveKey(epk, key, alg === 'ECDH-ES' ? joseHeader.enc : alg, alg === 'ECDH-ES' ? (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_6__.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
            if (alg === 'ECDH-ES')
                return sharedSecret;
            if (encryptedKey === undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE Encrypted Key missing');
            return (0,_runtime_aeskw_js__WEBPACK_IMPORTED_MODULE_0__.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);
        }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            if (encryptedKey === undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE Encrypted Key missing');
            return (0,_runtime_rsaes_js__WEBPACK_IMPORTED_MODULE_3__.decrypt)(alg, key, encryptedKey);
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW': {
            if (encryptedKey === undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE Encrypted Key missing');
            if (typeof joseHeader.p2c !== 'number')
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
            const p2cLimit = (options === null || options === void 0 ? void 0 : options.maxPBES2Count) || 10000;
            if (joseHeader.p2c > p2cLimit)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
            if (typeof joseHeader.p2s !== 'string')
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
            return (0,_runtime_pbes2kw_js__WEBPACK_IMPORTED_MODULE_2__.decrypt)(alg, key, encryptedKey, joseHeader.p2c, (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.decode)(joseHeader.p2s));
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            if (encryptedKey === undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE Encrypted Key missing');
            return (0,_runtime_aeskw_js__WEBPACK_IMPORTED_MODULE_0__.unwrap)(alg, key, encryptedKey);
        }
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW': {
            if (encryptedKey === undefined)
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid('JWE Encrypted Key missing');
            if (typeof joseHeader.iv !== 'string')
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
            if (typeof joseHeader.tag !== 'string')
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JWEInvalid(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
            const iv = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.decode)(joseHeader.iv);
            const tag = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.decode)(joseHeader.tag);
            return (0,_aesgcmkw_js__WEBPACK_IMPORTED_MODULE_10__.unwrap)(alg, key, encryptedKey, iv, tag);
        }
        default: {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (decryptKeyManagement);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/encrypt_key_management.js":
/*!****************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/encrypt_key_management.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _runtime_aeskw_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/aeskw.js */ "../core/node_modules/jose/dist/browser/runtime/aeskw.js");
/* harmony import */ var _runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/ecdhes.js */ "../core/node_modules/jose/dist/browser/runtime/ecdhes.js");
/* harmony import */ var _runtime_pbes2kw_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../runtime/pbes2kw.js */ "../core/node_modules/jose/dist/browser/runtime/pbes2kw.js");
/* harmony import */ var _runtime_rsaes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../runtime/rsaes.js */ "../core/node_modules/jose/dist/browser/runtime/rsaes.js");
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _lib_cek_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/cek.js */ "../core/node_modules/jose/dist/browser/lib/cek.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _key_export_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../key/export.js */ "../core/node_modules/jose/dist/browser/key/export.js");
/* harmony import */ var _check_key_type_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./check_key_type.js */ "../core/node_modules/jose/dist/browser/lib/check_key_type.js");
/* harmony import */ var _aesgcmkw_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./aesgcmkw.js */ "../core/node_modules/jose/dist/browser/lib/aesgcmkw.js");










async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
    let encryptedKey;
    let parameters;
    let cek;
    (0,_check_key_type_js__WEBPACK_IMPORTED_MODULE_8__["default"])(alg, key, 'encrypt');
    switch (alg) {
        case 'dir': {
            cek = key;
            break;
        }
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            if (!_runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__.ecdhAllowed(key)) {
                throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_6__.JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');
            }
            const { apu, apv } = providedParameters;
            let { epk: ephemeralKey } = providedParameters;
            ephemeralKey || (ephemeralKey = (await _runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__.generateEpk(key)).privateKey);
            const { x, y, crv, kty } = await (0,_key_export_js__WEBPACK_IMPORTED_MODULE_7__.exportJWK)(ephemeralKey);
            const sharedSecret = await _runtime_ecdhes_js__WEBPACK_IMPORTED_MODULE_1__.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_5__.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
            parameters = { epk: { x, crv, kty } };
            if (kty === 'EC')
                parameters.epk.y = y;
            if (apu)
                parameters.apu = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.encode)(apu);
            if (apv)
                parameters.apv = (0,_runtime_base64url_js__WEBPACK_IMPORTED_MODULE_4__.encode)(apv);
            if (alg === 'ECDH-ES') {
                cek = sharedSecret;
                break;
            }
            cek = providedCek || (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enc);
            const kwAlg = alg.slice(-6);
            encryptedKey = await (0,_runtime_aeskw_js__WEBPACK_IMPORTED_MODULE_0__.wrap)(kwAlg, sharedSecret, cek);
            break;
        }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            cek = providedCek || (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enc);
            encryptedKey = await (0,_runtime_rsaes_js__WEBPACK_IMPORTED_MODULE_3__.encrypt)(alg, key, cek);
            break;
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW': {
            cek = providedCek || (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enc);
            const { p2c, p2s } = providedParameters;
            ({ encryptedKey, ...parameters } = await (0,_runtime_pbes2kw_js__WEBPACK_IMPORTED_MODULE_2__.encrypt)(alg, key, cek, p2c, p2s));
            break;
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            cek = providedCek || (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enc);
            encryptedKey = await (0,_runtime_aeskw_js__WEBPACK_IMPORTED_MODULE_0__.wrap)(alg, key, cek);
            break;
        }
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW': {
            cek = providedCek || (0,_lib_cek_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enc);
            const { iv } = providedParameters;
            ({ encryptedKey, ...parameters } = await (0,_aesgcmkw_js__WEBPACK_IMPORTED_MODULE_9__.wrap)(alg, key, cek, iv));
            break;
        }
        default: {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_6__.JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
        }
    }
    return { cek, encryptedKey, parameters };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (encryptKeyManagement);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/epoch.js":
/*!***********************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/epoch.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((date) => Math.floor(date.getTime() / 1000));


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/format_pem.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/format_pem.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((b64, descriptor) => {
    const newlined = (b64.match(/.{1,64}/g) || []).join('\n');
    return `-----BEGIN ${descriptor}-----\n${newlined}\n-----END ${descriptor}-----`;
});


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js":
/*!***********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/invalid_key_input.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "withAlg": () => (/* binding */ withAlg)
/* harmony export */ });
function message(msg, actual, ...types) {
    if (types.length > 2) {
        const last = types.pop();
        msg += `one of type ${types.join(', ')}, or ${last}.`;
    }
    else if (types.length === 2) {
        msg += `one of type ${types[0]} or ${types[1]}.`;
    }
    else {
        msg += `of type ${types[0]}.`;
    }
    if (actual == null) {
        msg += ` Received ${actual}`;
    }
    else if (typeof actual === 'function' && actual.name) {
        msg += ` Received function ${actual.name}`;
    }
    else if (typeof actual === 'object' && actual != null) {
        if (actual.constructor && actual.constructor.name) {
            msg += ` Received an instance of ${actual.constructor.name}`;
        }
    }
    return msg;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((actual, ...types) => {
    return message('Key must be ', actual, ...types);
});
function withAlg(alg, actual, ...types) {
    return message(`Key for the ${alg} algorithm must be `, actual, ...types);
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/is_disjoint.js":
/*!*****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/is_disjoint.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const isDisjoint = (...headers) => {
    const sources = headers.filter(Boolean);
    if (sources.length === 0 || sources.length === 1) {
        return true;
    }
    let acc;
    for (const header of sources) {
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
        }
        for (const parameter of parameters) {
            if (acc.has(parameter)) {
                return false;
            }
            acc.add(parameter);
        }
    }
    return true;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isDisjoint);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/is_object.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/is_object.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isObject)
/* harmony export */ });
function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
}
function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {
        return false;
    }
    if (Object.getPrototypeOf(input) === null) {
        return true;
    }
    let proto = input;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(input) === proto;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/iv.js":
/*!********************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/iv.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitLength": () => (/* binding */ bitLength),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _runtime_random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime/random.js */ "../core/node_modules/jose/dist/browser/runtime/random.js");


function bitLength(alg) {
    switch (alg) {
        case 'A128GCM':
        case 'A128GCMKW':
        case 'A192GCM':
        case 'A192GCMKW':
        case 'A256GCM':
        case 'A256GCMKW':
            return 96;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            return 128;
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((alg) => (0,_runtime_random_js__WEBPACK_IMPORTED_MODULE_1__["default"])(new Uint8Array(bitLength(alg) >> 3)));


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/jwt_claims_set.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/jwt_claims_set.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _epoch_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./epoch.js */ "../core/node_modules/jose/dist/browser/lib/epoch.js");
/* harmony import */ var _secs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./secs.js */ "../core/node_modules/jose/dist/browser/lib/secs.js");
/* harmony import */ var _is_object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");





const normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, '');
const checkAudiencePresence = (audPayload, audOption) => {
    if (typeof audPayload === 'string') {
        return audOption.includes(audPayload);
    }
    if (Array.isArray(audPayload)) {
        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
    }
    return false;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((protectedHeader, encodedPayload, options = {}) => {
    const { typ } = options;
    if (typ &&
        (typeof protectedHeader.typ !== 'string' ||
            normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('unexpected "typ" JWT header value', 'typ', 'check_failed');
    }
    let payload;
    try {
        payload = JSON.parse(_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(encodedPayload));
    }
    catch (_a) {
    }
    if (!(0,_is_object_js__WEBPACK_IMPORTED_MODULE_4__["default"])(payload)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTInvalid('JWT Claims Set must be a top-level JSON object');
    }
    const { issuer } = options;
    if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('unexpected "iss" claim value', 'iss', 'check_failed');
    }
    const { subject } = options;
    if (subject && payload.sub !== subject) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('unexpected "sub" claim value', 'sub', 'check_failed');
    }
    const { audience } = options;
    if (audience &&
        !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('unexpected "aud" claim value', 'aud', 'check_failed');
    }
    let tolerance;
    switch (typeof options.clockTolerance) {
        case 'string':
            tolerance = (0,_secs_js__WEBPACK_IMPORTED_MODULE_3__["default"])(options.clockTolerance);
            break;
        case 'number':
            tolerance = options.clockTolerance;
            break;
        case 'undefined':
            tolerance = 0;
            break;
        default:
            throw new TypeError('Invalid clockTolerance option type');
    }
    const { currentDate } = options;
    const now = (0,_epoch_js__WEBPACK_IMPORTED_MODULE_2__["default"])(currentDate || new Date());
    if ((payload.iat !== undefined || options.maxTokenAge) && typeof payload.iat !== 'number') {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('"iat" claim must be a number', 'iat', 'invalid');
    }
    if (payload.nbf !== undefined) {
        if (typeof payload.nbf !== 'number') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('"nbf" claim must be a number', 'nbf', 'invalid');
        }
        if (payload.nbf > now + tolerance) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('"nbf" claim timestamp check failed', 'nbf', 'check_failed');
        }
    }
    if (payload.exp !== undefined) {
        if (typeof payload.exp !== 'number') {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('"exp" claim must be a number', 'exp', 'invalid');
        }
        if (payload.exp <= now - tolerance) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTExpired('"exp" claim timestamp check failed', 'exp', 'check_failed');
        }
    }
    if (options.maxTokenAge) {
        const age = now - payload.iat;
        const max = typeof options.maxTokenAge === 'number' ? options.maxTokenAge : (0,_secs_js__WEBPACK_IMPORTED_MODULE_3__["default"])(options.maxTokenAge);
        if (age - tolerance > max) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTExpired('"iat" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');
        }
        if (age < 0 - tolerance) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
        }
    }
    return payload;
});


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/secs.js":
/*!**********************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/secs.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((str) => {
    const matched = REGEX.exec(str);
    if (!matched) {
        throw new TypeError('Invalid time period format');
    }
    const value = parseFloat(matched[1]);
    const unit = matched[2].toLowerCase();
    switch (unit) {
        case 'sec':
        case 'secs':
        case 'second':
        case 'seconds':
        case 's':
            return Math.round(value);
        case 'minute':
        case 'minutes':
        case 'min':
        case 'mins':
        case 'm':
            return Math.round(value * minute);
        case 'hour':
        case 'hours':
        case 'hr':
        case 'hrs':
        case 'h':
            return Math.round(value * hour);
        case 'day':
        case 'days':
        case 'd':
            return Math.round(value * day);
        case 'week':
        case 'weeks':
        case 'w':
            return Math.round(value * week);
        default:
            return Math.round(value * year);
    }
});


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/validate_algorithms.js":
/*!*************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/validate_algorithms.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const validateAlgorithms = (option, algorithms) => {
    if (algorithms !== undefined &&
        (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== 'string'))) {
        throw new TypeError(`"${option}" option must be an array of strings`);
    }
    if (!algorithms) {
        return undefined;
    }
    return new Set(algorithms);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validateAlgorithms);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/lib/validate_crit.js":
/*!*******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/lib/validate_crit.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");

function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {
        throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    }
    if (!protectedHeader || protectedHeader.crit === undefined) {
        return new Set();
    }
    if (!Array.isArray(protectedHeader.crit) ||
        protectedHeader.crit.length === 0 ||
        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) {
        throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    }
    let recognized;
    if (recognizedOption !== undefined) {
        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
    }
    else {
        recognized = recognizedDefault;
    }
    for (const parameter of protectedHeader.crit) {
        if (!recognized.has(parameter)) {
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
        }
        if (joseHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" is missing`);
        }
        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
        }
    }
    return new Set(protectedHeader.crit);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validateCrit);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/aeskw.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/aeskw.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unwrap": () => (/* binding */ unwrap),
/* harmony export */   "wrap": () => (/* binding */ wrap)
/* harmony export */ });
/* harmony import */ var _bogus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bogus.js */ "../core/node_modules/jose/dist/browser/runtime/bogus.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");





function checkKeySize(key, alg) {
    if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) {
        throw new TypeError(`Invalid key size for alg: ${alg}`);
    }
}
function getCryptoKey(key, alg, usage) {
    if ((0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_1__.isCryptoKey)(key)) {
        (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_2__.checkEncCryptoKey)(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        return _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey('raw', key, 'AES-KW', true, [usage]);
    }
    throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_4__.types, 'Uint8Array'));
}
const wrap = async (alg, key, cek) => {
    const cryptoKey = await getCryptoKey(key, alg, 'wrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey('raw', cek, ..._bogus_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
    return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.wrapKey('raw', cryptoKeyCek, cryptoKey, 'AES-KW'));
};
const unwrap = async (alg, key, encryptedKey) => {
    const cryptoKey = await getCryptoKey(key, alg, 'unwrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.unwrapKey('raw', encryptedKey, cryptoKey, 'AES-KW', ..._bogus_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
    return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.exportKey('raw', cryptoKeyCek));
};


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/asn1.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/asn1.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromPKCS8": () => (/* binding */ fromPKCS8),
/* harmony export */   "fromSPKI": () => (/* binding */ fromSPKI),
/* harmony export */   "fromX509": () => (/* binding */ fromX509),
/* harmony export */   "toPKCS8": () => (/* binding */ toPKCS8),
/* harmony export */   "toSPKI": () => (/* binding */ toSPKI)
/* harmony export */ });
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ "../core/node_modules/jose/dist/browser/runtime/env.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _base64url_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _lib_format_pem_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/format_pem.js */ "../core/node_modules/jose/dist/browser/lib/format_pem.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");







const genericExport = async (keyType, keyFormat, key) => {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_1__.isCryptoKey)(key)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_2__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_6__.types));
    }
    if (!key.extractable) {
        throw new TypeError('CryptoKey is not extractable');
    }
    if (key.type !== keyType) {
        throw new TypeError(`key is not a ${keyType} key`);
    }
    return (0,_lib_format_pem_js__WEBPACK_IMPORTED_MODULE_4__["default"])((0,_base64url_js__WEBPACK_IMPORTED_MODULE_3__.encodeBase64)(new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
};
const toSPKI = (key) => {
    return genericExport('public', 'spki', key);
};
const toPKCS8 = (key) => {
    return genericExport('private', 'pkcs8', key);
};
const findOid = (keyData, oid, from = 0) => {
    if (from === 0) {
        oid.unshift(oid.length);
        oid.unshift(0x06);
    }
    let i = keyData.indexOf(oid[0], from);
    if (i === -1)
        return false;
    const sub = keyData.subarray(i, i + oid.length);
    if (sub.length !== oid.length)
        return false;
    return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);
};
const getNamedCurve = (keyData) => {
    switch (true) {
        case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):
            return 'P-256';
        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):
            return 'P-384';
        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):
            return 'P-521';
        case findOid(keyData, [0x2b, 0x65, 0x6e]):
            return 'X25519';
        case findOid(keyData, [0x2b, 0x65, 0x6f]):
            return 'X448';
        case findOid(keyData, [0x2b, 0x65, 0x70]):
            return 'Ed25519';
        case findOid(keyData, [0x2b, 0x65, 0x71]):
            return 'Ed448';
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');
    }
};
const genericImport = async (replace, keyFormat, pem, alg, options) => {
    var _a, _b;
    let algorithm;
    let keyUsages;
    const keyData = new Uint8Array(atob(pem.replace(replace, ''))
        .split('')
        .map((c) => c.charCodeAt(0)));
    const isPublic = keyFormat === 'spki';
    switch (alg) {
        case 'PS256':
        case 'PS384':
        case 'PS512':
            algorithm = { name: 'RSA-PSS', hash: `SHA-${alg.slice(-3)}` };
            keyUsages = isPublic ? ['verify'] : ['sign'];
            break;
        case 'RS256':
        case 'RS384':
        case 'RS512':
            algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${alg.slice(-3)}` };
            keyUsages = isPublic ? ['verify'] : ['sign'];
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            algorithm = {
                name: 'RSA-OAEP',
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
            };
            keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];
            break;
        case 'ES256':
            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };
            keyUsages = isPublic ? ['verify'] : ['sign'];
            break;
        case 'ES384':
            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };
            keyUsages = isPublic ? ['verify'] : ['sign'];
            break;
        case 'ES512':
            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };
            keyUsages = isPublic ? ['verify'] : ['sign'];
            break;
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            const namedCurve = getNamedCurve(keyData);
            algorithm = namedCurve.startsWith('P-') ? { name: 'ECDH', namedCurve } : { name: namedCurve };
            keyUsages = isPublic ? [] : ['deriveBits'];
            break;
        }
        case 'EdDSA':
            algorithm = { name: getNamedCurve(keyData) };
            keyUsages = isPublic ? ['verify'] : ['sign'];
            break;
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_5__.JOSENotSupported('Invalid or unsupported "alg" (Algorithm) value');
    }
    try {
        return await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
    }
    catch (err) {
        if (algorithm.name === 'Ed25519' &&
            (err === null || err === void 0 ? void 0 : err.name) === 'NotSupportedError' &&
            (0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isCloudflareWorkers)()) {
            algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };
            return await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey(keyFormat, keyData, algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages);
        }
        throw err;
    }
};
const fromPKCS8 = (pem, alg, options) => {
    return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, 'pkcs8', pem, alg, options);
};
const fromSPKI = (pem, alg, options) => {
    return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, 'spki', pem, alg, options);
};
function getElement(seq) {
    let result = [];
    let next = 0;
    while (next < seq.length) {
        let nextPart = parseElement(seq.subarray(next));
        result.push(nextPart);
        next += nextPart.byteLength;
    }
    return result;
}
function parseElement(bytes) {
    let position = 0;
    let tag = bytes[0] & 0x1f;
    position++;
    if (tag === 0x1f) {
        tag = 0;
        while (bytes[position] >= 0x80) {
            tag = tag * 128 + bytes[position] - 0x80;
            position++;
        }
        tag = tag * 128 + bytes[position] - 0x80;
        position++;
    }
    let length = 0;
    if (bytes[position] < 0x80) {
        length = bytes[position];
        position++;
    }
    else if (length === 0x80) {
        length = 0;
        while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {
            if (length > bytes.byteLength) {
                throw new TypeError('invalid indefinite form length');
            }
            length++;
        }
        const byteLength = position + length + 2;
        return {
            byteLength,
            contents: bytes.subarray(position, position + length),
            raw: bytes.subarray(0, byteLength),
        };
    }
    else {
        let numberOfDigits = bytes[position] & 0x7f;
        position++;
        length = 0;
        for (let i = 0; i < numberOfDigits; i++) {
            length = length * 256 + bytes[position];
            position++;
        }
    }
    const byteLength = position + length;
    return {
        byteLength,
        contents: bytes.subarray(position, byteLength),
        raw: bytes.subarray(0, byteLength),
    };
}
function spkiFromX509(buf) {
    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
    return (0,_base64url_js__WEBPACK_IMPORTED_MODULE_3__.encodeBase64)(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);
}
function getSPKI(x509) {
    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, '');
    const raw = (0,_base64url_js__WEBPACK_IMPORTED_MODULE_3__.decodeBase64)(pem);
    return (0,_lib_format_pem_js__WEBPACK_IMPORTED_MODULE_4__["default"])(spkiFromX509(raw), 'PUBLIC KEY');
}
const fromX509 = (pem, alg, options) => {
    let spki;
    try {
        spki = getSPKI(pem);
    }
    catch (cause) {
        throw new TypeError('failed to parse the X.509 certificate', { cause });
    }
    return fromSPKI(spki, alg, options);
};


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/base64url.js":
/*!*******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/base64url.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": () => (/* binding */ decode),
/* harmony export */   "decodeBase64": () => (/* binding */ decodeBase64),
/* harmony export */   "encode": () => (/* binding */ encode),
/* harmony export */   "encodeBase64": () => (/* binding */ encodeBase64)
/* harmony export */ });
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");

const encodeBase64 = (input) => {
    let unencoded = input;
    if (typeof unencoded === 'string') {
        unencoded = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.encoder.encode(unencoded);
    }
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
    }
    return btoa(arr.join(''));
};
const encode = (input) => {
    return encodeBase64(input).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
};
const decodeBase64 = (encoded) => {
    const binary = atob(encoded);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return bytes;
};
const decode = (input) => {
    let encoded = input;
    if (encoded instanceof Uint8Array) {
        encoded = _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.decoder.decode(encoded);
    }
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
    try {
        return decodeBase64(encoded);
    }
    catch (_a) {
        throw new TypeError('The input to be decoded is not correctly encoded.');
    }
};


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/bogus.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/bogus.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const bogusWebCrypto = [
    { hash: 'SHA-256', name: 'HMAC' },
    true,
    ['sign'],
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bogusWebCrypto);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/check_cek_length.js":
/*!**************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/check_cek_length.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");

const checkCekLength = (cek, expected) => {
    const actual = cek.byteLength << 3;
    if (actual !== expected) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (checkCekLength);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/check_key_length.js":
/*!**************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/check_key_length.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((alg, key) => {
    if (alg.startsWith('RS') || alg.startsWith('PS')) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== 'number' || modulusLength < 2048) {
            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
        }
    }
});


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/decrypt.js":
/*!*****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/decrypt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_check_iv_length_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/check_iv_length.js */ "../core/node_modules/jose/dist/browser/lib/check_iv_length.js");
/* harmony import */ var _check_cek_length_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./check_cek_length.js */ "../core/node_modules/jose/dist/browser/runtime/check_cek_length.js");
/* harmony import */ var _timing_safe_equal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./timing_safe_equal.js */ "../core/node_modules/jose/dist/browser/runtime/timing_safe_equal.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");









async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    if (!(cek instanceof Uint8Array)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_7__["default"])(cek, 'Uint8Array'));
    }
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['decrypt']);
    const macKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: 'HMAC',
    }, false, ['sign']);
    const macData = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.concat)(aad, iv, ciphertext, (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.uint64be)(aad.length << 3));
    const expectedTag = new Uint8Array((await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    let macCheckPassed;
    try {
        macCheckPassed = (0,_timing_safe_equal_js__WEBPACK_IMPORTED_MODULE_3__["default"])(tag, expectedTag);
    }
    catch (_a) {
    }
    if (!macCheckPassed) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_4__.JWEDecryptionFailed();
    }
    let plaintext;
    try {
        plaintext = new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.decrypt({ iv, name: 'AES-CBC' }, encKey, ciphertext));
    }
    catch (_b) {
    }
    if (!plaintext) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_4__.JWEDecryptionFailed();
    }
    return plaintext;
}
async function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    let encKey;
    if (cek instanceof Uint8Array) {
        encKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.importKey('raw', cek, 'AES-GCM', false, ['decrypt']);
    }
    else {
        (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_6__.checkEncCryptoKey)(cek, enc, 'decrypt');
        encKey = cek;
    }
    try {
        return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.decrypt({
            additionalData: aad,
            iv,
            name: 'AES-GCM',
            tagLength: 128,
        }, encKey, (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.concat)(ciphertext, tag)));
    }
    catch (_a) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_4__.JWEDecryptionFailed();
    }
}
const decrypt = async (enc, cek, ciphertext, iv, tag, aad) => {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_5__.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_7__["default"])(cek, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_8__.types, 'Uint8Array'));
    }
    (0,_lib_check_iv_length_js__WEBPACK_IMPORTED_MODULE_1__["default"])(enc, iv);
    switch (enc) {
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            if (cek instanceof Uint8Array)
                (0,_check_cek_length_js__WEBPACK_IMPORTED_MODULE_2__["default"])(cek, parseInt(enc.slice(-3), 10));
            return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            if (cek instanceof Uint8Array)
                (0,_check_cek_length_js__WEBPACK_IMPORTED_MODULE_2__["default"])(cek, parseInt(enc.slice(1, 4), 10));
            return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_4__.JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (decrypt);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/digest.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/digest.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");

const digest = async (algorithm, data) => {
    const subtleDigest = `SHA-${algorithm.slice(-3)}`;
    return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__["default"].subtle.digest(subtleDigest, data));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (digest);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/ecdhes.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/ecdhes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deriveKey": () => (/* binding */ deriveKey),
/* harmony export */   "ecdhAllowed": () => (/* binding */ ecdhAllowed),
/* harmony export */   "generateEpk": () => (/* binding */ generateEpk)
/* harmony export */ });
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");





async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_1__.isCryptoKey)(publicKey)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__["default"])(publicKey, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_4__.types));
    }
    (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_2__.checkEncCryptoKey)(publicKey, 'ECDH');
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_1__.isCryptoKey)(privateKey)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__["default"])(privateKey, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_4__.types));
    }
    (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_2__.checkEncCryptoKey)(privateKey, 'ECDH', 'deriveBits');
    const value = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.concat)((0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.lengthAndInput)(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.encoder.encode(algorithm)), (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.lengthAndInput)(apu), (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.lengthAndInput)(apv), (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.uint32be)(keyLength));
    let length;
    if (publicKey.algorithm.name === 'X25519') {
        length = 256;
    }
    else if (publicKey.algorithm.name === 'X448') {
        length = 448;
    }
    else {
        length =
            Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
    }
    const sharedSecret = new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.deriveBits({
        name: publicKey.algorithm.name,
        public: publicKey,
    }, privateKey, length));
    return (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatKdf)(sharedSecret, keyLength, value);
}
async function generateEpk(key) {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_1__.isCryptoKey)(key)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_4__.types));
    }
    return _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.generateKey(key.algorithm, true, ['deriveBits']);
}
function ecdhAllowed(key) {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_1__.isCryptoKey)(key)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_3__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_4__.types));
    }
    return (['P-256', 'P-384', 'P-521'].includes(key.algorithm.namedCurve) ||
        key.algorithm.name === 'X25519' ||
        key.algorithm.name === 'X448');
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/encrypt.js":
/*!*****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/encrypt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_check_iv_length_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/check_iv_length.js */ "../core/node_modules/jose/dist/browser/lib/check_iv_length.js");
/* harmony import */ var _check_cek_length_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./check_cek_length.js */ "../core/node_modules/jose/dist/browser/runtime/check_cek_length.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");








async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
    if (!(cek instanceof Uint8Array)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_5__["default"])(cek, 'Uint8Array'));
    }
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__["default"].subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['encrypt']);
    const macKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__["default"].subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: 'HMAC',
    }, false, ['sign']);
    const ciphertext = new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__["default"].subtle.encrypt({
        iv,
        name: 'AES-CBC',
    }, encKey, plaintext));
    const macData = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.concat)(aad, iv, ciphertext, (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_0__.uint64be)(aad.length << 3));
    const tag = new Uint8Array((await _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__["default"].subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    return { ciphertext, tag };
}
async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
    let encKey;
    if (cek instanceof Uint8Array) {
        encKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__["default"].subtle.importKey('raw', cek, 'AES-GCM', false, ['encrypt']);
    }
    else {
        (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_4__.checkEncCryptoKey)(cek, enc, 'encrypt');
        encKey = cek;
    }
    const encrypted = new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_3__["default"].subtle.encrypt({
        additionalData: aad,
        iv,
        name: 'AES-GCM',
        tagLength: 128,
    }, encKey, plaintext));
    const tag = encrypted.slice(-16);
    const ciphertext = encrypted.slice(0, -16);
    return { ciphertext, tag };
}
const encrypt = async (enc, plaintext, cek, iv, aad) => {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_3__.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_5__["default"])(cek, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_7__.types, 'Uint8Array'));
    }
    (0,_lib_check_iv_length_js__WEBPACK_IMPORTED_MODULE_1__["default"])(enc, iv);
    switch (enc) {
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            if (cek instanceof Uint8Array)
                (0,_check_cek_length_js__WEBPACK_IMPORTED_MODULE_2__["default"])(cek, parseInt(enc.slice(-3), 10));
            return cbcEncrypt(enc, plaintext, cek, iv, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            if (cek instanceof Uint8Array)
                (0,_check_cek_length_js__WEBPACK_IMPORTED_MODULE_2__["default"])(cek, parseInt(enc.slice(1, 4), 10));
            return gcmEncrypt(enc, plaintext, cek, iv, aad);
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_6__.JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (encrypt);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/env.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/env.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isCloudflareWorkers": () => (/* binding */ isCloudflareWorkers)
/* harmony export */ });
function isCloudflareWorkers() {
    return (typeof WebSocketPair !== 'undefined' ||
        (typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers') ||
        (typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel'));
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/fetch_jwks.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/fetch_jwks.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");

const fetchJwks = async (url, timeout, options) => {
    let controller;
    let id;
    let timedOut = false;
    if (typeof AbortController === 'function') {
        controller = new AbortController();
        id = setTimeout(() => {
            timedOut = true;
            controller.abort();
        }, timeout);
    }
    const response = await fetch(url.href, {
        signal: controller ? controller.signal : undefined,
        redirect: 'manual',
        headers: options.headers,
    }).catch((err) => {
        if (timedOut)
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JWKSTimeout();
        throw err;
    });
    if (id !== undefined)
        clearTimeout(id);
    if (response.status !== 200) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');
    }
    try {
        return await response.json();
    }
    catch (_a) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fetchJwks);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/generate.js":
/*!******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/generate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateKeyPair": () => (/* binding */ generateKeyPair),
/* harmony export */   "generateSecret": () => (/* binding */ generateSecret)
/* harmony export */ });
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ "../core/node_modules/jose/dist/browser/runtime/env.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./random.js */ "../core/node_modules/jose/dist/browser/runtime/random.js");




async function generateSecret(alg, options) {
    var _a;
    let length;
    let algorithm;
    let keyUsages;
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512':
            length = parseInt(alg.slice(-3), 10);
            algorithm = { name: 'HMAC', hash: `SHA-${length}`, length };
            keyUsages = ['sign', 'verify'];
            break;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            length = parseInt(alg.slice(-3), 10);
            return (0,_random_js__WEBPACK_IMPORTED_MODULE_3__["default"])(new Uint8Array(length >> 3));
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = { name: 'AES-KW', length };
            keyUsages = ['wrapKey', 'unwrapKey'];
            break;
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW':
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = { name: 'AES-GCM', length };
            keyUsages = ['encrypt', 'decrypt'];
            break;
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
}
function getModulusLengthOption(options) {
    var _a;
    const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;
    if (typeof modulusLength !== 'number' || modulusLength < 2048) {
        throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');
    }
    return modulusLength;
}
async function generateKeyPair(alg, options) {
    var _a, _b, _c, _d;
    let algorithm;
    let keyUsages;
    switch (alg) {
        case 'PS256':
        case 'PS384':
        case 'PS512':
            algorithm = {
                name: 'RSA-PSS',
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['sign', 'verify'];
            break;
        case 'RS256':
        case 'RS384':
        case 'RS512':
            algorithm = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['sign', 'verify'];
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            algorithm = {
                name: 'RSA-OAEP',
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];
            break;
        case 'ES256':
            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ES384':
            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ES512':
            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'EdDSA':
            keyUsages = ['sign', 'verify'];
            const crv = (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'Ed25519';
            switch (crv) {
                case 'Ed25519':
                case 'Ed448':
                    algorithm = { name: crv };
                    break;
                default:
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported crv option provided');
            }
            break;
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            keyUsages = ['deriveKey', 'deriveBits'];
            const crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : 'P-256';
            switch (crv) {
                case 'P-256':
                case 'P-384':
                case 'P-521': {
                    algorithm = { name: 'ECDH', namedCurve: crv };
                    break;
                }
                case 'X25519':
                case 'X448':
                    algorithm = { name: crv };
                    break;
                default:
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');
            }
            break;
        }
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    try {
        return (await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.generateKey(algorithm, (_c = options === null || options === void 0 ? void 0 : options.extractable) !== null && _c !== void 0 ? _c : false, keyUsages));
    }
    catch (err) {
        if (algorithm.name === 'Ed25519' &&
            (err === null || err === void 0 ? void 0 : err.name) === 'NotSupportedError' &&
            (0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isCloudflareWorkers)()) {
            algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };
            return (await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.generateKey(algorithm, (_d = options === null || options === void 0 ? void 0 : options.extractable) !== null && _d !== void 0 ? _d : false, keyUsages));
        }
        throw err;
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js":
/*!*****************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCryptoKey)
/* harmony export */ });
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");




function getCryptoKey(alg, key, usage) {
    if ((0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_0__.isCryptoKey)(key)) {
        (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_1__.checkSigCryptoKey)(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        if (!alg.startsWith('HS')) {
            throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_2__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_3__.types));
        }
        return _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__["default"].subtle.importKey('raw', key, { hash: `SHA-${alg.slice(-3)}`, name: 'HMAC' }, false, [usage]);
    }
    throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_2__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_3__.types, 'Uint8Array'));
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js":
/*!*********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/is_key_like.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "types": () => (/* binding */ types)
/* harmony export */ });
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((key) => {
    return (0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_0__.isCryptoKey)(key);
});
const types = ['CryptoKey'];


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/jwk_to_key.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/jwk_to_key.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ "../core/node_modules/jose/dist/browser/runtime/env.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");
/* harmony import */ var _base64url_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");




function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch (jwk.kty) {
        case 'oct': {
            switch (jwk.alg) {
                case 'HS256':
                case 'HS384':
                case 'HS512':
                    algorithm = { name: 'HMAC', hash: `SHA-${jwk.alg.slice(-3)}` };
                    keyUsages = ['sign', 'verify'];
                    break;
                case 'A128CBC-HS256':
                case 'A192CBC-HS384':
                case 'A256CBC-HS512':
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
                case 'A128GCM':
                case 'A192GCM':
                case 'A256GCM':
                case 'A128GCMKW':
                case 'A192GCMKW':
                case 'A256GCMKW':
                    algorithm = { name: 'AES-GCM' };
                    keyUsages = ['encrypt', 'decrypt'];
                    break;
                case 'A128KW':
                case 'A192KW':
                case 'A256KW':
                    algorithm = { name: 'AES-KW' };
                    keyUsages = ['wrapKey', 'unwrapKey'];
                    break;
                case 'PBES2-HS256+A128KW':
                case 'PBES2-HS384+A192KW':
                case 'PBES2-HS512+A256KW':
                    algorithm = { name: 'PBKDF2' };
                    keyUsages = ['deriveBits'];
                    break;
                default:
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'RSA': {
            switch (jwk.alg) {
                case 'PS256':
                case 'PS384':
                case 'PS512':
                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'RS256':
                case 'RS384':
                case 'RS512':
                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'RSA-OAEP':
                case 'RSA-OAEP-256':
                case 'RSA-OAEP-384':
                case 'RSA-OAEP-512':
                    algorithm = {
                        name: 'RSA-OAEP',
                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,
                    };
                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];
                    break;
                default:
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'EC': {
            switch (jwk.alg) {
                case 'ES256':
                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ES384':
                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ES512':
                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };
                    keyUsages = jwk.d ? ['deriveBits'] : [];
                    break;
                default:
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'OKP': {
            switch (jwk.alg) {
                case 'EdDSA':
                    algorithm = { name: jwk.crv };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = { name: jwk.crv };
                    keyUsages = jwk.d ? ['deriveBits'] : [];
                    break;
                default:
                    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_2__.JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
    }
    return { algorithm, keyUsages };
}
const parse = async (jwk) => {
    var _a, _b;
    if (!jwk.alg) {
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
    }
    const { algorithm, keyUsages } = subtleMapping(jwk);
    const rest = [
        algorithm,
        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,
        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages,
    ];
    if (algorithm.name === 'PBKDF2') {
        return _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey('raw', (0,_base64url_js__WEBPACK_IMPORTED_MODULE_3__.decode)(jwk.k), ...rest);
    }
    const keyData = { ...jwk };
    delete keyData.alg;
    delete keyData.use;
    try {
        return await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey('jwk', keyData, ...rest);
    }
    catch (err) {
        if (algorithm.name === 'Ed25519' &&
            (err === null || err === void 0 ? void 0 : err.name) === 'NotSupportedError' &&
            (0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isCloudflareWorkers)()) {
            rest[0] = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };
            return await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.importKey('jwk', keyData, ...rest);
        }
        throw err;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/key_to_jwk.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/key_to_jwk.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _base64url_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");




const keyToJWK = async (key) => {
    if (key instanceof Uint8Array) {
        return {
            kty: 'oct',
            k: (0,_base64url_js__WEBPACK_IMPORTED_MODULE_2__.encode)(key),
        };
    }
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_0__.isCryptoKey)(key)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_1__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_3__.types, 'Uint8Array'));
    }
    if (!key.extractable) {
        throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');
    }
    const { ext, key_ops, alg, use, ...jwk } = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__["default"].subtle.exportKey('jwk', key);
    return jwk;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keyToJWK);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/pbes2kw.js":
/*!*****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/pbes2kw.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decrypt": () => (/* binding */ decrypt),
/* harmony export */   "encrypt": () => (/* binding */ encrypt)
/* harmony export */ });
/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./random.js */ "../core/node_modules/jose/dist/browser/runtime/random.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _base64url_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");
/* harmony import */ var _aeskw_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./aeskw.js */ "../core/node_modules/jose/dist/browser/runtime/aeskw.js");
/* harmony import */ var _lib_check_p2s_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/check_p2s.js */ "../core/node_modules/jose/dist/browser/lib/check_p2s.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");









function getCryptoKey(key, alg) {
    if (key instanceof Uint8Array) {
        return _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);
    }
    if ((0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_5__.isCryptoKey)(key)) {
        (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_6__.checkEncCryptoKey)(key, alg, 'deriveBits', 'deriveKey');
        return key;
    }
    throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_7__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_8__.types, 'Uint8Array'));
}
async function deriveKey(p2s, alg, p2c, key) {
    (0,_lib_check_p2s_js__WEBPACK_IMPORTED_MODULE_4__["default"])(p2s);
    const salt = (0,_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__.p2s)(alg, p2s);
    const keylen = parseInt(alg.slice(13, 16), 10);
    const subtleAlg = {
        hash: `SHA-${alg.slice(8, 11)}`,
        iterations: p2c,
        name: 'PBKDF2',
        salt,
    };
    const wrapAlg = {
        length: keylen,
        name: 'AES-KW',
    };
    const cryptoKey = await getCryptoKey(key, alg);
    if (cryptoKey.usages.includes('deriveBits')) {
        return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    }
    if (cryptoKey.usages.includes('deriveKey')) {
        return _webcrypto_js__WEBPACK_IMPORTED_MODULE_5__["default"].subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);
    }
    throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
const encrypt = async (alg, key, cek, p2c = 2048, p2s = (0,_random_js__WEBPACK_IMPORTED_MODULE_0__["default"])(new Uint8Array(16))) => {
    const derived = await deriveKey(p2s, alg, p2c, key);
    const encryptedKey = await (0,_aeskw_js__WEBPACK_IMPORTED_MODULE_3__.wrap)(alg.slice(-6), derived, cek);
    return { encryptedKey, p2c, p2s: (0,_base64url_js__WEBPACK_IMPORTED_MODULE_2__.encode)(p2s) };
};
const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {
    const derived = await deriveKey(p2s, alg, p2c, key);
    return (0,_aeskw_js__WEBPACK_IMPORTED_MODULE_3__.unwrap)(alg.slice(-6), derived, encryptedKey);
};


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/random.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/random.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_webcrypto_js__WEBPACK_IMPORTED_MODULE_0__["default"].getRandomValues.bind(_webcrypto_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/rsaes.js":
/*!***************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/rsaes.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decrypt": () => (/* binding */ decrypt),
/* harmony export */   "encrypt": () => (/* binding */ encrypt)
/* harmony export */ });
/* harmony import */ var _subtle_rsaes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subtle_rsaes.js */ "../core/node_modules/jose/dist/browser/runtime/subtle_rsaes.js");
/* harmony import */ var _bogus_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bogus.js */ "../core/node_modules/jose/dist/browser/runtime/bogus.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/crypto_key.js */ "../core/node_modules/jose/dist/browser/lib/crypto_key.js");
/* harmony import */ var _check_key_length_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./check_key_length.js */ "../core/node_modules/jose/dist/browser/runtime/check_key_length.js");
/* harmony import */ var _lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/invalid_key_input.js */ "../core/node_modules/jose/dist/browser/lib/invalid_key_input.js");
/* harmony import */ var _is_key_like_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./is_key_like.js */ "../core/node_modules/jose/dist/browser/runtime/is_key_like.js");







const encrypt = async (alg, key, cek) => {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_2__.isCryptoKey)(key)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_5__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_6__.types));
    }
    (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_3__.checkEncCryptoKey)(key, alg, 'encrypt', 'wrapKey');
    (0,_check_key_length_js__WEBPACK_IMPORTED_MODULE_4__["default"])(alg, key);
    if (key.usages.includes('encrypt')) {
        return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__["default"].subtle.encrypt((0,_subtle_rsaes_js__WEBPACK_IMPORTED_MODULE_0__["default"])(alg), key, cek));
    }
    if (key.usages.includes('wrapKey')) {
        const cryptoKeyCek = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__["default"].subtle.importKey('raw', cek, ..._bogus_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__["default"].subtle.wrapKey('raw', cryptoKeyCek, key, (0,_subtle_rsaes_js__WEBPACK_IMPORTED_MODULE_0__["default"])(alg)));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
};
const decrypt = async (alg, key, encryptedKey) => {
    if (!(0,_webcrypto_js__WEBPACK_IMPORTED_MODULE_2__.isCryptoKey)(key)) {
        throw new TypeError((0,_lib_invalid_key_input_js__WEBPACK_IMPORTED_MODULE_5__["default"])(key, ..._is_key_like_js__WEBPACK_IMPORTED_MODULE_6__.types));
    }
    (0,_lib_crypto_key_js__WEBPACK_IMPORTED_MODULE_3__.checkEncCryptoKey)(key, alg, 'decrypt', 'unwrapKey');
    (0,_check_key_length_js__WEBPACK_IMPORTED_MODULE_4__["default"])(alg, key);
    if (key.usages.includes('decrypt')) {
        return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__["default"].subtle.decrypt((0,_subtle_rsaes_js__WEBPACK_IMPORTED_MODULE_0__["default"])(alg), key, encryptedKey));
    }
    if (key.usages.includes('unwrapKey')) {
        const cryptoKeyCek = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__["default"].subtle.unwrapKey('raw', encryptedKey, key, (0,_subtle_rsaes_js__WEBPACK_IMPORTED_MODULE_0__["default"])(alg), ..._bogus_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        return new Uint8Array(await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__["default"].subtle.exportKey('raw', cryptoKeyCek));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/sign.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/sign.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _subtle_dsa_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subtle_dsa.js */ "../core/node_modules/jose/dist/browser/runtime/subtle_dsa.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _check_key_length_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./check_key_length.js */ "../core/node_modules/jose/dist/browser/runtime/check_key_length.js");
/* harmony import */ var _get_sign_verify_key_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get_sign_verify_key.js */ "../core/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js");




const sign = async (alg, key, data) => {
    const cryptoKey = await (0,_get_sign_verify_key_js__WEBPACK_IMPORTED_MODULE_3__["default"])(alg, key, 'sign');
    (0,_check_key_length_js__WEBPACK_IMPORTED_MODULE_2__["default"])(alg, cryptoKey);
    const signature = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.sign((0,_subtle_dsa_js__WEBPACK_IMPORTED_MODULE_0__["default"])(alg, cryptoKey.algorithm), cryptoKey, data);
    return new Uint8Array(signature);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sign);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/subtle_dsa.js":
/*!********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/subtle_dsa.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ subtleDsa)
/* harmony export */ });
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ "../core/node_modules/jose/dist/browser/runtime/env.js");
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");


function subtleDsa(alg, algorithm) {
    const hash = `SHA-${alg.slice(-3)}`;
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512':
            return { hash, name: 'HMAC' };
        case 'PS256':
        case 'PS384':
        case 'PS512':
            return { hash, name: 'RSA-PSS', saltLength: alg.slice(-3) >> 3 };
        case 'RS256':
        case 'RS384':
        case 'RS512':
            return { hash, name: 'RSASSA-PKCS1-v1_5' };
        case 'ES256':
        case 'ES384':
        case 'ES512':
            return { hash, name: 'ECDSA', namedCurve: algorithm.namedCurve };
        case 'EdDSA':
            if ((0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isCloudflareWorkers)() && algorithm.name === 'NODE-ED25519') {
                return { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };
            }
            return { name: algorithm.name };
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_1__.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/subtle_rsaes.js":
/*!**********************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/subtle_rsaes.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ subtleRsaEs)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");

function subtleRsaEs(alg) {
    switch (alg) {
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            return 'RSA-OAEP';
        default:
            throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/timing_safe_equal.js":
/*!***************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/timing_safe_equal.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const timingSafeEqual = (a, b) => {
    if (!(a instanceof Uint8Array)) {
        throw new TypeError('First argument must be a buffer');
    }
    if (!(b instanceof Uint8Array)) {
        throw new TypeError('Second argument must be a buffer');
    }
    if (a.length !== b.length) {
        throw new TypeError('Input buffers must have the same length');
    }
    const len = a.length;
    let out = 0;
    let i = -1;
    while (++i < len) {
        out |= a[i] ^ b[i];
    }
    return out === 0;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (timingSafeEqual);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/verify.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/verify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _subtle_dsa_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subtle_dsa.js */ "../core/node_modules/jose/dist/browser/runtime/subtle_dsa.js");
/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto.js */ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js");
/* harmony import */ var _check_key_length_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./check_key_length.js */ "../core/node_modules/jose/dist/browser/runtime/check_key_length.js");
/* harmony import */ var _get_sign_verify_key_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get_sign_verify_key.js */ "../core/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js");




const verify = async (alg, key, signature, data) => {
    const cryptoKey = await (0,_get_sign_verify_key_js__WEBPACK_IMPORTED_MODULE_3__["default"])(alg, key, 'verify');
    (0,_check_key_length_js__WEBPACK_IMPORTED_MODULE_2__["default"])(alg, cryptoKey);
    const algorithm = (0,_subtle_dsa_js__WEBPACK_IMPORTED_MODULE_0__["default"])(alg, cryptoKey.algorithm);
    try {
        return await _webcrypto_js__WEBPACK_IMPORTED_MODULE_1__["default"].subtle.verify(algorithm, cryptoKey, signature, data);
    }
    catch (_a) {
        return false;
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (verify);


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/webcrypto.js":
/*!*******************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/webcrypto.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "isCryptoKey": () => (/* binding */ isCryptoKey)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crypto);
const isCryptoKey = (key) => key instanceof CryptoKey;


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/runtime/zlib.js":
/*!**************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/runtime/zlib.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deflate": () => (/* binding */ deflate),
/* harmony export */   "inflate": () => (/* binding */ inflate)
/* harmony export */ });
/* harmony import */ var _util_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");

const inflate = async () => {
    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `inflateRaw` decrypt option to provide Inflate Raw implementation.');
};
const deflate = async () => {
    throw new _util_errors_js__WEBPACK_IMPORTED_MODULE_0__.JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `deflateRaw` encrypt option to provide Deflate Raw implementation.');
};


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/util/base64url.js":
/*!****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/util/base64url.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": () => (/* binding */ decode),
/* harmony export */   "encode": () => (/* binding */ encode)
/* harmony export */ });
/* harmony import */ var _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime/base64url.js */ "../core/node_modules/jose/dist/browser/runtime/base64url.js");

const encode = _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.encode;
const decode = _runtime_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode;


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/util/decode_jwt.js":
/*!*****************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/util/decode_jwt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeJwt": () => (/* binding */ decodeJwt)
/* harmony export */ });
/* harmony import */ var _base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.js */ "../core/node_modules/jose/dist/browser/util/base64url.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ "../core/node_modules/jose/dist/browser/util/errors.js");




function decodeJwt(jwt) {
    if (typeof jwt !== 'string')
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');
    const { 1: payload, length } = jwt.split('.');
    if (length === 5)
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');
    if (length !== 3)
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('Invalid JWT');
    if (!payload)
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('JWTs must contain a payload');
    let decoded;
    try {
        decoded = (0,_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(payload);
    }
    catch (_a) {
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('Failed to parse the base64url encoded payload');
    }
    let result;
    try {
        result = JSON.parse(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode(decoded));
    }
    catch (_b) {
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('Failed to parse the decoded payload as JSON');
    }
    if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])(result))
        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.JWTInvalid('Invalid JWT Claims Set');
    return result;
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/util/decode_protected_header.js":
/*!******************************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/util/decode_protected_header.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeProtectedHeader": () => (/* binding */ decodeProtectedHeader)
/* harmony export */ });
/* harmony import */ var _base64url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.js */ "../core/node_modules/jose/dist/browser/util/base64url.js");
/* harmony import */ var _lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/buffer_utils.js */ "../core/node_modules/jose/dist/browser/lib/buffer_utils.js");
/* harmony import */ var _lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/is_object.js */ "../core/node_modules/jose/dist/browser/lib/is_object.js");



function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === 'string') {
        const parts = token.split('.');
        if (parts.length === 3 || parts.length === 5) {
            ;
            [protectedB64u] = parts;
        }
    }
    else if (typeof token === 'object' && token) {
        if ('protected' in token) {
            protectedB64u = token.protected;
        }
        else {
            throw new TypeError('Token does not contain a Protected Header');
        }
    }
    try {
        if (typeof protectedB64u !== 'string' || !protectedB64u) {
            throw new Error();
        }
        const result = JSON.parse(_lib_buffer_utils_js__WEBPACK_IMPORTED_MODULE_1__.decoder.decode((0,_base64url_js__WEBPACK_IMPORTED_MODULE_0__.decode)(protectedB64u)));
        if (!(0,_lib_is_object_js__WEBPACK_IMPORTED_MODULE_2__["default"])(result)) {
            throw new Error();
        }
        return result;
    }
    catch (_a) {
        throw new TypeError('Invalid Token or Protected Header formatting');
    }
}


/***/ }),

/***/ "../core/node_modules/jose/dist/browser/util/errors.js":
/*!*************************************************************!*\
  !*** ../core/node_modules/jose/dist/browser/util/errors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JOSEAlgNotAllowed": () => (/* binding */ JOSEAlgNotAllowed),
/* harmony export */   "JOSEError": () => (/* binding */ JOSEError),
/* harmony export */   "JOSENotSupported": () => (/* binding */ JOSENotSupported),
/* harmony export */   "JWEDecryptionFailed": () => (/* binding */ JWEDecryptionFailed),
/* harmony export */   "JWEInvalid": () => (/* binding */ JWEInvalid),
/* harmony export */   "JWKInvalid": () => (/* binding */ JWKInvalid),
/* harmony export */   "JWKSInvalid": () => (/* binding */ JWKSInvalid),
/* harmony export */   "JWKSMultipleMatchingKeys": () => (/* binding */ JWKSMultipleMatchingKeys),
/* harmony export */   "JWKSNoMatchingKey": () => (/* binding */ JWKSNoMatchingKey),
/* harmony export */   "JWKSTimeout": () => (/* binding */ JWKSTimeout),
/* harmony export */   "JWSInvalid": () => (/* binding */ JWSInvalid),
/* harmony export */   "JWSSignatureVerificationFailed": () => (/* binding */ JWSSignatureVerificationFailed),
/* harmony export */   "JWTClaimValidationFailed": () => (/* binding */ JWTClaimValidationFailed),
/* harmony export */   "JWTExpired": () => (/* binding */ JWTExpired),
/* harmony export */   "JWTInvalid": () => (/* binding */ JWTInvalid)
/* harmony export */ });
class JOSEError extends Error {
    static get code() {
        return 'ERR_JOSE_GENERIC';
    }
    constructor(message) {
        var _a;
        super(message);
        this.code = 'ERR_JOSE_GENERIC';
        this.name = this.constructor.name;
        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);
    }
}
class JWTClaimValidationFailed extends JOSEError {
    static get code() {
        return 'ERR_JWT_CLAIM_VALIDATION_FAILED';
    }
    constructor(message, claim = 'unspecified', reason = 'unspecified') {
        super(message);
        this.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
        this.claim = claim;
        this.reason = reason;
    }
}
class JWTExpired extends JOSEError {
    static get code() {
        return 'ERR_JWT_EXPIRED';
    }
    constructor(message, claim = 'unspecified', reason = 'unspecified') {
        super(message);
        this.code = 'ERR_JWT_EXPIRED';
        this.claim = claim;
        this.reason = reason;
    }
}
class JOSEAlgNotAllowed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
    }
    static get code() {
        return 'ERR_JOSE_ALG_NOT_ALLOWED';
    }
}
class JOSENotSupported extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JOSE_NOT_SUPPORTED';
    }
    static get code() {
        return 'ERR_JOSE_NOT_SUPPORTED';
    }
}
class JWEDecryptionFailed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWE_DECRYPTION_FAILED';
        this.message = 'decryption operation failed';
    }
    static get code() {
        return 'ERR_JWE_DECRYPTION_FAILED';
    }
}
class JWEInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWE_INVALID';
    }
    static get code() {
        return 'ERR_JWE_INVALID';
    }
}
class JWSInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWS_INVALID';
    }
    static get code() {
        return 'ERR_JWS_INVALID';
    }
}
class JWTInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWT_INVALID';
    }
    static get code() {
        return 'ERR_JWT_INVALID';
    }
}
class JWKInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWK_INVALID';
    }
    static get code() {
        return 'ERR_JWK_INVALID';
    }
}
class JWKSInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWKS_INVALID';
    }
    static get code() {
        return 'ERR_JWKS_INVALID';
    }
}
class JWKSNoMatchingKey extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWKS_NO_MATCHING_KEY';
        this.message = 'no applicable key found in the JSON Web Key Set';
    }
    static get code() {
        return 'ERR_JWKS_NO_MATCHING_KEY';
    }
}
class JWKSMultipleMatchingKeys extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
        this.message = 'multiple matching keys found in the JSON Web Key Set';
    }
    static get code() {
        return 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
    }
}
Symbol.asyncIterator;
class JWKSTimeout extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWKS_TIMEOUT';
        this.message = 'request timed out';
    }
    static get code() {
        return 'ERR_JWKS_TIMEOUT';
    }
}
class JWSSignatureVerificationFailed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
        this.message = 'signature verification failed';
    }
    static get code() {
        return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
    }
}


/***/ }),

/***/ "../oidc-browser/node_modules/@inrupt/universal-fetch/dist/index-browser.mjs":
/*!***********************************************************************************!*\
  !*** ../oidc-browser/node_modules/@inrupt/universal-fetch/dist/index-browser.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Headers": () => (/* binding */ Headers),
/* harmony export */   "Request": () => (/* binding */ Request),
/* harmony export */   "Response": () => (/* binding */ Response),
/* harmony export */   "default": () => (/* binding */ indexBrowser),
/* harmony export */   "fetch": () => (/* binding */ fetch)
/* harmony export */ });
var indexBrowser = globalThis.fetch;
const { fetch, Response, Request, Headers } = globalThis;




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.browser.ts");
/******/ 	solidClientAuthentication = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUEsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuSkE7QUFDQSxRQUFRLG9DQUFvQzs7QUFFMEI7Ozs7Ozs7VUNIdEU7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGlDQUFpQyxXQUFXO1dBQzVDO1dBQ0E7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQTs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7O1VFTkE7VUFDQTtVQUNBO1VBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vc3JjL0NsaWVudEF1dGhlbnRpY2F0aW9uLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvU2Vzc2lvbi50cyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vc3JjL2NvbnN0YW50LnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvZGVmYXVsdFNlc3Npb24udHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9kZXBlbmRlbmNpZXMudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9pbmRleC5icm93c2VyLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9sb2dpbi9vaWRjL0FnZ3JlZ2F0ZVJlZGlyZWN0SGFuZGxlci50cyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vc3JjL2xvZ2luL29pZGMvQ2xpZW50UmVnaXN0cmFyLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvbG9naW4vb2lkYy9Jc3N1ZXJDb25maWdGZXRjaGVyLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvbG9naW4vb2lkYy9PaWRjTG9naW5IYW5kbGVyLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvbG9naW4vb2lkYy9SZWRpcmVjdG9yLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvbG9naW4vb2lkYy9pbmNvbWluZ1JlZGlyZWN0SGFuZGxlci9BdXRoQ29kZVJlZGlyZWN0SGFuZGxlci50cyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vc3JjL2xvZ2luL29pZGMvaW5jb21pbmdSZWRpcmVjdEhhbmRsZXIvRXJyb3JPaWRjSGFuZGxlci50cyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vc3JjL2xvZ2luL29pZGMvaW5jb21pbmdSZWRpcmVjdEhhbmRsZXIvRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9sb2dpbi9vaWRjL29pZGNIYW5kbGVycy9BdXRob3JpemF0aW9uQ29kZVdpdGhQa2NlT2lkY0hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9sb2dpbi9vaWRjL3JlZnJlc2gvVG9rZW5SZWZyZXNoZXIudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9sb2dvdXQvR2VuZXJhbExvZ291dEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9zZXNzaW9uSW5mby9TZXNzaW9uSW5mb01hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL3NyYy9zdG9yYWdlL0Jyb3dzZXJTdG9yYWdlLnRzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9zcmMvc3RvcmFnZS9TdG9yYWdlVXRpbGl0eS50cyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL0BpbnJ1cHQvdW5pdmVyc2FsLWZldGNoL2Rpc3QvaW5kZXgtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL21kNS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL25pbC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3BhcnNlLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9zaGExLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvdjEuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci92My5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3YzNS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvdjUuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9AaW5ydXB0L3VuaXZlcnNhbC1mZXRjaC9kaXN0L2luZGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9tZDUuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9uYXRpdmUuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9uaWwuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci9wYXJzZS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3JlZ2V4LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvc2hhMS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3YxLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvdjMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci92MzUuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci92NC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9jb21tb25qcy1icm93c2VyL3Y1LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2NvbW1vbmpzLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY29tbW9uanMtYnJvd3Nlci92ZXJzaW9uLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vb2lkYy1icm93c2VyL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9vaWRjLWJyb3dzZXIvbm9kZV9tb2R1bGVzL0BpbnJ1cHQvb2lkYy1jbGllbnQvbGliL29pZGMtY2xpZW50Lm1pbi5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvZGlzdC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9AaW5ydXB0L3VuaXZlcnNhbC1mZXRjaC9kaXN0L2luZGV4LWJyb3dzZXIubWpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd2UvY29tcGFjdC9kZWNyeXB0LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandlL2NvbXBhY3QvZW5jcnlwdC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2p3ZS9mbGF0dGVuZWQvZGVjcnlwdC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2p3ZS9mbGF0dGVuZWQvZW5jcnlwdC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2p3ZS9nZW5lcmFsL2RlY3J5cHQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd2UvZ2VuZXJhbC9lbmNyeXB0LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandrL2VtYmVkZGVkLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandrL3RodW1icHJpbnQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd2tzL2xvY2FsLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandrcy9yZW1vdGUuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd3MvY29tcGFjdC9zaWduLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandzL2NvbXBhY3QvdmVyaWZ5LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandzL2ZsYXR0ZW5lZC9zaWduLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandzL2ZsYXR0ZW5lZC92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd3MvZ2VuZXJhbC9zaWduLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandzL2dlbmVyYWwvdmVyaWZ5LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvand0L2RlY3J5cHQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd3QvZW5jcnlwdC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2p3dC9wcm9kdWNlLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvand0L3NpZ24uanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd3QvdW5zZWN1cmVkLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvand0L3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2tleS9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9rZXkvZ2VuZXJhdGVfa2V5X3BhaXIuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9rZXkvZ2VuZXJhdGVfc2VjcmV0LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIva2V5L2ltcG9ydC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9hZXNnY21rdy5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9idWZmZXJfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvY2VrLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvbGliL2NoZWNrX2l2X2xlbmd0aC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9jaGVja19rZXlfdHlwZS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9jaGVja19wMnMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvY3J5cHRvX2tleS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9kZWNyeXB0X2tleV9tYW5hZ2VtZW50LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvbGliL2VuY3J5cHRfa2V5X21hbmFnZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvZXBvY2guanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvZm9ybWF0X3BlbS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9pc19kaXNqb2ludC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9pc19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvaXYuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvand0X2NsYWltc19zZXQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvc2Vjcy5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvbGliL3ZhbGlkYXRlX2NyaXQuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2Flc2t3LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9hc24xLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9iYXNlNjR1cmwuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2JvZ3VzLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9jaGVja19jZWtfbGVuZ3RoLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9jaGVja19rZXlfbGVuZ3RoLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9kZWNyeXB0LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9kaWdlc3QuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2VjZGhlcy5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvZW5jcnlwdC5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvZW52LmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9mZXRjaF9qd2tzLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9nZW5lcmF0ZS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvZ2V0X3NpZ25fdmVyaWZ5X2tleS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvaXNfa2V5X2xpa2UuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2p3a190b19rZXkuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2tleV90b19qd2suanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL3BiZXMya3cuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL3JhbmRvbS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvcnNhZXMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL3NpZ24uanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL3N1YnRsZV9kc2EuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL3N1YnRsZV9yc2Flcy5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvdGltaW5nX3NhZmVfZXF1YWwuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uLy4uL2NvcmUvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvd2ViY3J5cHRvLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS96bGliLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvdXRpbC9iYXNlNjR1cmwuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci91dGlsL2RlY29kZV9qd3QuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9jb3JlL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci91dGlsL2RlY29kZV9wcm90ZWN0ZWRfaGVhZGVyLmpzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vLi4vY29yZS9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvdXRpbC9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi8uLi9vaWRjLWJyb3dzZXIvbm9kZV9tb2R1bGVzL0BpbnJ1cHQvdW5pdmVyc2FsLWZldGNoL2Rpc3QvaW5kZXgtYnJvd3Nlci5tanMiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc29saWRDbGllbnRBdXRoZW50aWNhdGlvbi93ZWJwYWNrL2JlZm9yZS1zdGFydHVwIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vd2VicGFjay9zdGFydHVwIiwid2VicGFjazovL3NvbGlkQ2xpZW50QXV0aGVudGljYXRpb24vd2VicGFjay9hZnRlci1zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHtcbiAgSUxvZ2luSGFuZGxlcixcbiAgSUxvZ291dEhhbmRsZXIsXG4gIElJbmNvbWluZ1JlZGlyZWN0SGFuZGxlcixcbiAgSVNlc3Npb25JbmZvLFxuICBJU2Vzc2lvbkluZm9NYW5hZ2VyLFxuICBJSXNzdWVyQ29uZmlnRmV0Y2hlcixcbiAgSVNlc3Npb25JbnRlcm5hbEluZm8sXG4gIElMb2dpbk9wdGlvbnMsXG4gIEVWRU5UUyxcbiAgaXNWYWxpZFJlZGlyZWN0VXJsLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuaW1wb3J0IHsgZmV0Y2ggfSBmcm9tIFwiQGlucnVwdC91bml2ZXJzYWwtZmV0Y2hcIjtcbmltcG9ydCB7IHJlbW92ZU9pZGNRdWVyeVBhcmFtIH0gZnJvbSBcIkBpbnJ1cHQvb2lkYy1jbGllbnQtZXh0XCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiZXZlbnRzXCI7XG5cbi8vIEJ5IG9ubHkgcmVmZXJyaW5nIHRvIGB3aW5kb3dgIGF0IHJ1bnRpbWUsIGFwcHMgdGhhdCBkbyBzZXJ2ZXItc2lkZSByZW5kZXJpbmdcbi8vIHdvbid0IHJ1biBpbnRvIGVycm9ycyB3aGVuIHJlbmRlcmluZyBjb2RlIHRoYXQgaW5zdGFudGlhdGVzIGFcbi8vIENsaWVudEF1dGhlbnRpY2F0aW9uOlxuY29uc3QgZ2xvYmFsRmV0Y2g6IHR5cGVvZiBmZXRjaCA9IChyZXF1ZXN0LCBpbml0KSA9PiBmZXRjaChyZXF1ZXN0LCBpbml0KTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWVudEF1dGhlbnRpY2F0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBsb2dpbkhhbmRsZXI6IElMb2dpbkhhbmRsZXIsXG4gICAgcHJpdmF0ZSByZWRpcmVjdEhhbmRsZXI6IElJbmNvbWluZ1JlZGlyZWN0SGFuZGxlcixcbiAgICBwcml2YXRlIGxvZ291dEhhbmRsZXI6IElMb2dvdXRIYW5kbGVyLFxuICAgIHByaXZhdGUgc2Vzc2lvbkluZm9NYW5hZ2VyOiBJU2Vzc2lvbkluZm9NYW5hZ2VyLFxuICAgIHByaXZhdGUgaXNzdWVyQ29uZmlnRmV0Y2hlcjogSUlzc3VlckNvbmZpZ0ZldGNoZXJcbiAgKSB7fVxuXG4gIC8vIERlZmluZSB0aGVzZSBmdW5jdGlvbnMgYXMgcHJvcGVydGllcyBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGFjY2lkZW50YWxseSByZS1ib3VuZC5cbiAgLy8gSXNuJ3QgSmF2YXNjcmlwdCBmdW4/XG4gIGxvZ2luID0gYXN5bmMgKFxuICAgIG9wdGlvbnM6IElMb2dpbk9wdGlvbnMsXG4gICAgZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXJcbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gSW4gb3JkZXIgdG8gZ2V0IGEgY2xlYW4gc3RhcnQsIG1ha2Ugc3VyZSB0aGF0IHRoZSBzZXNzaW9uIGlzIGxvZ2dlZCBvdXRcbiAgICAvLyBvbiBsb2dpbi5cbiAgICAvLyBCdXQgd2UgbWF5IHdhbnQgdG8gcHJlc2VydmUgb3VyIGNsaWVudCBhcHBsaWNhdGlvbiBpbmZvLCBwYXJ0aWN1bGFybHkgaWZcbiAgICAvLyB3ZSB1c2VkIER5bmFtaWMgQ2xpZW50IFJlZ2lzdHJhdGlvbiB0byByZWdpc3RlciAoc2luY2Ugd2UgZG9uJ3RcbiAgICAvLyBuZWNlc3NhcmlseSB3YW50IHRoZSB1c2VyIHRvIGhhdmUgdG8gcmVnaXN0ZXIgdGhpcyBhcHAgZWFjaCB0aW1lIHRoZXlcbiAgICAvLyBsb2dpbikuXG4gICAgYXdhaXQgdGhpcy5zZXNzaW9uSW5mb01hbmFnZXIuY2xlYXIob3B0aW9ucy5zZXNzaW9uSWQpO1xuXG4gICAgLy8gSW4gdGhlIGNhc2Ugb2YgdGhlIHVzZXIgaGl0dGluZyB0aGUgJ2JhY2snIGJ1dHRvbiBpbiB0aGVpciBicm93c2VyLCB0aGV5XG4gICAgLy8gY291bGQgcmV0dXJuIHRvIGEgcHJldmlvdXMgcmVkaXJlY3QgVVJMIHRoYXQgY29udGFpbnMgT0lEQyBwYXJhbXMgdGhhdFxuICAgIC8vIGFyZSBub3cgbG9uZ2VyIHZhbGlkLiBUbyBiZSBzYWZlLCBzdHJpcCByZWxldmFudCBwYXJhbXMgbm93LlxuICAgIC8vIElmIHRoZSB1c2VyIGlzIHByb3ZpZGluZyBhIHJlZGlyZWN0IElSSSwgaXQgc2hvdWxkIG5vdCBiZSBtb2RpZmllZCwgc29cbiAgICAvLyBub3JtYWxpemF0aW9uIG9ubHkgYXBwbGllcyBpZiB3ZSBkZWZhdWx0IHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uICh3aGljaCBpc1xuICAgIC8vIGEgYmFkIHByYWN0aWNlIGFuZCBzaG91bGQgYmUgZGlzY291cmFnZWQpLlxuICAgIGNvbnN0IHJlZGlyZWN0VXJsID1cbiAgICAgIG9wdGlvbnMucmVkaXJlY3RVcmwgPz8gcmVtb3ZlT2lkY1F1ZXJ5UGFyYW0od2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGlmICghaXNWYWxpZFJlZGlyZWN0VXJsKHJlZGlyZWN0VXJsKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgJHtyZWRpcmVjdFVybH0gaXMgbm90IGEgdmFsaWQgcmVkaXJlY3QgVVJMLCBpdCBpcyBlaXRoZXIgYSBtYWxmb3JtZWQgSVJJIG9yIGl0IGluY2x1ZGVzIGEgaGFzaCBmcmFnbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmxvZ2luSGFuZGxlci5oYW5kbGUoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHJlZGlyZWN0VXJsLFxuICAgICAgLy8gSWYgbm8gY2xpZW50TmFtZSBpcyBwcm92aWRlZCwgdGhlIGNsaWVudElkIG1heSBiZSB1c2VkIGluc3RlYWQuXG4gICAgICBjbGllbnROYW1lOiBvcHRpb25zLmNsaWVudE5hbWUgPz8gb3B0aW9ucy5jbGllbnRJZCxcbiAgICAgIGV2ZW50RW1pdHRlcixcbiAgICB9KTtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBvdXIgZmV0Y2goKSByZXNvbHZlcyB0byB0aGUgZW52aXJvbm1lbnQgZmV0Y2goKSBmdW5jdGlvbi5cbiAgZmV0Y2ggPSBnbG9iYWxGZXRjaDtcblxuICBsb2dvdXQgPSBhc3luYyAoc2Vzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBhd2FpdCB0aGlzLmxvZ291dEhhbmRsZXIuaGFuZGxlKHNlc3Npb25JZCk7XG5cbiAgICAvLyBSZXN0b3JlIG91ciBmZXRjaCgpIGZ1bmN0aW9uIGJhY2sgdG8gdGhlIGVudmlyb25tZW50IGZldGNoKCksIGVmZmVjdGl2ZWx5XG4gICAgLy8gbGVhdmluZyB1cyB3aXRoIHVuLWF1dGhlbnRpY2F0ZWQgZmV0Y2hlcyBmcm9tIG5vdyBvbi5cbiAgICB0aGlzLmZldGNoID0gZ2xvYmFsRmV0Y2g7XG4gIH07XG5cbiAgZ2V0U2Vzc2lvbkluZm8gPSBhc3luYyAoXG4gICAgc2Vzc2lvbklkOiBzdHJpbmdcbiAgKTogUHJvbWlzZTwoSVNlc3Npb25JbmZvICYgSVNlc3Npb25JbnRlcm5hbEluZm8pIHwgdW5kZWZpbmVkPiA9PiB7XG4gICAgLy8gVE9ETyBjb21wbGV0ZVxuICAgIHJldHVybiB0aGlzLnNlc3Npb25JbmZvTWFuYWdlci5nZXQoc2Vzc2lvbklkKTtcbiAgfTtcblxuICBnZXRBbGxTZXNzaW9uSW5mbyA9IGFzeW5jICgpOiBQcm9taXNlPElTZXNzaW9uSW5mb1tdPiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc2Vzc2lvbkluZm9NYW5hZ2VyLmdldEFsbCgpO1xuICB9O1xuXG4gIC8vIENvbGxlY3RzIHNlc3Npb24gaW5mb3JtYXRpb24gZnJvbSBzdG9yYWdlLCBhbmQgcmV0dXJucyB0aGVtLiBSZXR1cm5zIG51bGxcbiAgLy8gaWYgdGhlIGV4cGVjdGVkIGluZm9ybWF0aW9uIGNhbm5vdCBiZSBmb3VuZC5cbiAgLy8gTm90ZSB0aGF0IHRoZSBJRCB0b2tlbiBpcyBub3Qgc3RvcmVkLCB3aGljaCBtZWFucyB0aGUgc2Vzc2lvbiBpbmZvcm1hdGlvblxuICAvLyBjYW5ub3QgYmUgdmFsaWRhdGVkIGF0IHRoaXMgcG9pbnQuXG4gIHZhbGlkYXRlQ3VycmVudFNlc3Npb24gPSBhc3luYyAoXG4gICAgY3VycmVudFNlc3Npb25JZDogc3RyaW5nXG4gICk6IFByb21pc2U8KElTZXNzaW9uSW5mbyAmIElTZXNzaW9uSW50ZXJuYWxJbmZvKSB8IG51bGw+ID0+IHtcbiAgICBjb25zdCBzZXNzaW9uSW5mbyA9IGF3YWl0IHRoaXMuc2Vzc2lvbkluZm9NYW5hZ2VyLmdldChjdXJyZW50U2Vzc2lvbklkKTtcbiAgICBpZiAoXG4gICAgICBzZXNzaW9uSW5mbyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBzZXNzaW9uSW5mby5jbGllbnRBcHBJZCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBzZXNzaW9uSW5mby5pc3N1ZXIgPT09IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uSW5mbztcbiAgfTtcblxuICBoYW5kbGVJbmNvbWluZ1JlZGlyZWN0ID0gYXN5bmMgKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyXG4gICk6IFByb21pc2U8SVNlc3Npb25JbmZvIHwgdW5kZWZpbmVkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlZGlyZWN0SW5mbyA9IGF3YWl0IHRoaXMucmVkaXJlY3RIYW5kbGVyLmhhbmRsZSh1cmwsIGV2ZW50RW1pdHRlcik7XG4gICAgICAvLyBUaGUgYEZhbGxiYWNrUmVkaXJlY3RIYW5kbGVyYCBkaXJlY3RseSByZXR1cm5zIHRoZSBnbG9iYWwgYGZldGNoYCBmb3JcbiAgICAgIC8vIGhpcyB2YWx1ZSwgc28gd2Ugc2hvdWxkIGVuc3VyZSBpdCdzIGJvdW5kIHRvIGB3aW5kb3dgIHJhdGhlciB0aGFuIHRvXG4gICAgICAvLyBDbGllbnRBdXRoZW50aWNhdGlvbiwgdG8gYXZvaWQgdGhlIGZvbGxvd2luZyBlcnJvcjpcbiAgICAgIC8vID4gJ2ZldGNoJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IGludGVyZmFjZSBXaW5kb3cuXG4gICAgICB0aGlzLmZldGNoID0gcmVkaXJlY3RJbmZvLmZldGNoLmJpbmQod2luZG93KTtcblxuICAgICAgLy8gU3RyaXAgdGhlIG9hdXRoIHBhcmFtczpcbiAgICAgIHRoaXMuY2xlYW5VcmxBZnRlclJlZGlyZWN0KHVybCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzTG9nZ2VkSW46IHJlZGlyZWN0SW5mby5pc0xvZ2dlZEluLFxuICAgICAgICB3ZWJJZDogcmVkaXJlY3RJbmZvLndlYklkLFxuICAgICAgICBzZXNzaW9uSWQ6IHJlZGlyZWN0SW5mby5zZXNzaW9uSWQsXG4gICAgICAgIGV4cGlyYXRpb25EYXRlOiByZWRpcmVjdEluZm8uZXhwaXJhdGlvbkRhdGUsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gU3RyaXAgdGhlIG9hdXRoIHBhcmFtczpcbiAgICAgIHRoaXMuY2xlYW5VcmxBZnRlclJlZGlyZWN0KHVybCk7XG5cbiAgICAgIC8vIEZJWE1FOiBFVkVOVFMuRVJST1Igc2hvdWxkIGJlIGVycm9yQ29kZSwgZXJyb3JEZXNjcmlwdGlvblxuICAgICAgLy9cbiAgICAgIC8vIEknbSBub3Qgc3VyZSBpZiBcInJlZGlyZWN0XCIgaXMgYSBnb29kIGVycm9yIGNvZGUsIGFuZCBpbiB0aGVvcnkgYGVycmBcbiAgICAgIC8vIG1heWJlIGFuIEVycm9yIG9iamVjdCBhbmQgbm90IGEgc3RyaW5nOyBNYXliZSB3ZSB3YW50IHRvIGp1c3QgaGFyZGNvZGVcbiAgICAgIC8vIGEgZGVzY3JpcHRpb24gaW5zdGVhZD9cbiAgICAgIGV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5FUlJPUiwgXCJyZWRpcmVjdFwiLCBlcnIpO1xuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGNsZWFuVXJsQWZ0ZXJSZWRpcmVjdCh1cmw6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGNsZWFuZWRVcFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICBjbGVhbmVkVXBVcmwuc2VhcmNoUGFyYW1zLmRlbGV0ZShcInN0YXRlXCIpO1xuICAgIC8vIEZvciBhdXRoIGNvZGUgZmxvd1xuICAgIGNsZWFuZWRVcFVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKFwiY29kZVwiKTtcbiAgICAvLyBGb3IgaW1wbGljaXQgZmxvd1xuICAgIGNsZWFuZWRVcFVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKFwiaWRfdG9rZW5cIik7XG4gICAgY2xlYW5lZFVwVXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoXCJhY2Nlc3NfdG9rZW5cIik7XG4gICAgLy8gRm9yIGxvZ2luIGVycm9yXG4gICAgY2xlYW5lZFVwVXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoXCJlcnJvclwiKTtcbiAgICBjbGVhbmVkVXBVcmwuc2VhcmNoUGFyYW1zLmRlbGV0ZShcImVycm9yX2Rlc2NyaXB0aW9uXCIpO1xuICAgIGNsZWFuZWRVcFVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKFwiaXNzXCIpO1xuXG4gICAgLy8gUmVtb3ZlIE9BdXRoLXNwZWNpZmljIHF1ZXJ5IHBhcmFtcyAoc2luY2UgdGhlIGxvZ2luIGZsb3cgZmluaXNoZXMgd2l0aFxuICAgIC8vIHRoZSBicm93c2VyIGJlaW5nIHJlZGlyZWN0ZWQgYmFjayB3aXRoIE9BdXRoMiBxdWVyeSBwYXJhbXMgKGUuZy4gZm9yXG4gICAgLy8gJ2NvZGUnIGFuZCAnc3RhdGUnKSwgYW5kIHNvIGlmIHRoZSB1c2VyIHNpbXBseSByZWZyZXNoZXMgdGhpcyBwYWdlIG91clxuICAgIC8vIGF1dGhlbnRpY2F0aW9uIGxpYnJhcnkgd2lsbCBiZSBjYWxsZWQgYWdhaW4gd2l0aCB3aGF0IGFyZSBub3cgaW52YWxpZFxuICAgIC8vIHF1ZXJ5IHBhcmFtZXRlcnMhKS5cbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgXCJcIiwgY2xlYW5lZFVwVXJsLnRvU3RyaW5nKCkpO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuaW1wb3J0IHtcbiAgRVZFTlRTLFxuICBJTG9naW5JbnB1dE9wdGlvbnMsXG4gIElTZXNzaW9uSW5mbyxcbiAgSVN0b3JhZ2UsXG4gIElIYXNTZXNzaW9uRXZlbnRMaXN0ZW5lcixcbiAgSVNlc3Npb25FdmVudExpc3RlbmVyLFxuICBidWlsZFByb3h5SGFuZGxlcixcbn0gZnJvbSBcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIjtcbmltcG9ydCB7IGZldGNoIH0gZnJvbSBcIkBpbnJ1cHQvdW5pdmVyc2FsLWZldGNoXCI7XG5pbXBvcnQgeyB2NCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudHNcIjtcbmltcG9ydCBDbGllbnRBdXRoZW50aWNhdGlvbiBmcm9tIFwiLi9DbGllbnRBdXRoZW50aWNhdGlvblwiO1xuaW1wb3J0IHsgZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4vZGVwZW5kZW5jaWVzXCI7XG5pbXBvcnQgeyBLRVlfQ1VSUkVOVF9TRVNTSU9OLCBLRVlfQ1VSUkVOVF9VUkwgfSBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZXNzaW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBIHByaXZhdGUgc3RvcmFnZSwgdW5yZWFjaGFibGUgdG8gb3RoZXIgc2NyaXB0cyBvbiB0aGUgcGFnZS4gVHlwaWNhbGx5IGluLW1lbW9yeS5cbiAgICovXG4gIHNlY3VyZVN0b3JhZ2U6IElTdG9yYWdlO1xuICAvKipcbiAgICogQSBzdG9yYWdlIHdoZXJlIG5vbi1zZW5zaXRpdmUgaW5mb3JtYXRpb24gbWF5IGJlIHN0b3JlZCwgcG90ZW50aWFsbHkgbG9uZ2VyLWxpdmVkIHRoYW4gdGhlIHNlY3VyZSBzdG9yYWdlLlxuICAgKi9cbiAgaW5zZWN1cmVTdG9yYWdlOiBJU3RvcmFnZTtcbiAgLyoqXG4gICAqIERldGFpbHMgYWJvdXQgdGhlIGN1cnJlbnQgc2Vzc2lvblxuICAgKi9cbiAgc2Vzc2lvbkluZm86IElTZXNzaW9uSW5mbztcbiAgLyoqXG4gICAqIEFuIGluc3RhbmNlIG9mIHRoZSBsaWJyYXJ5IGNvcmUuIFR5cGljYWxseSBvYnRhaW5lZCB1c2luZyBgZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzYC5cbiAgICovXG4gIGNsaWVudEF1dGhlbnRpY2F0aW9uOiBDbGllbnRBdXRoZW50aWNhdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJSGFuZGxlSW5jb21pbmdSZWRpcmVjdE9wdGlvbnMge1xuICAvKipcbiAgICogSWYgdGhlIHVzZXIgaGFzIHNpZ25lZCBpbiBiZWZvcmUsIHNldHRpbmcgdGhpcyB0byBgdHJ1ZWAgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAqIHJlZGlyZWN0IHRoZW0gdG8gdGhlaXIgU29saWQgSWRlbnRpdHkgUHJvdmlkZXIsIHdoaWNoIHdpbGwgdGhlbiBhdHRlbXB0IHRvXG4gICAqIHJlLWFjdGl2YXRlIHRoZSBzZXNzaW9uIGFuZCBzZW5kIHRoZSB1c2VyIGJhY2sgdG8geW91ciBhcHAgd2l0aG91dFxuICAgKiByZXF1aXJpbmcgdXNlciBpbnRlcmFjdGlvbi5cbiAgICogSWYgeW91ciBhcHAncyBhY2Nlc3MgaGFzIG5vdCBleHBpcmVkIHlldCBhbmQgcmUtYWN0aXZhdGlvbiBjb21wbGV0ZWRcbiAgICogc3VjY2Vzc2Z1bGx5LCBhIGBzZXNzaW9uUmVzdG9yZWAgZXZlbnQgd2lsbCBiZSBmaXJlZCB3aXRoIHRoZSBVUkwgdGhlIHVzZXJcbiAgICogd2FzIGF0IGJlZm9yZSB0aGV5IHdlcmUgcmVkaXJlY3RlZCB0byB0aGVpciBTb2xpZCBJZGVudGl0eSBQcm92aWRlci5cbiAgICoge0BzZWUgb25TZXNzaW9uUmVzdG9yZX1cbiAgICovXG4gIHJlc3RvcmVQcmV2aW91c1Nlc3Npb24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJbnJ1cHQncyBFbnRlcnByaXNlIFNvbGlkIFNlcnZlciBjYW4gc2V0IGEgY29va2llIHRvIGFsbG93IHRoZSBicm93c2VyIHRvXG4gICAqIGFjY2VzcyBwcml2YXRlIHJlc291cmNlcyBvbiBhIFBvZC4gSW4gb3JkZXIgdG8gbWl0aWdhdGUgdGhlIGxvZ291dC1vbi1yZWZyZXNoXG4gICAqIGlzc3VlIG9uIHRoZSBzaG9ydCB0ZXJtLCB0aGUgc2VydmVyIGFsc28gaW1wbGVtZW50ZWQgYSBzZXNzaW9uIGVuZHBvaW50XG4gICAqIGVuYWJsaW5nIHRoZSBjbGllbnQgYXBwIHRvIGtub3cgd2hldGhlciB0aGUgY29va2llIGlzIHNldC4gV2hlbiBhIHVzZXJcbiAgICogbG9ncyBpbiB0byBhIHNlcnZlciB0aGF0IGhhcyB0aGF0IGNhcGFiaWxpdHkgZW5hYmxlZCwgYXBwbGljYXRpb25zIHRoYXQgc2V0XG4gICAqIHRoaXMgb3B0aW9uIHRvIGB0cnVlYCB3aWxsIGJlIGFibGUgdG8gbWFrZSB1c2Ugb2YgaXQuXG4gICAqXG4gICAqIElmIHlvdXIgYXBwIHN1cHBvcnRzIHRoZSBuZXdlc3Qgc2Vzc2lvbiByZXN0b3JlIGFwcHJvYWNoLCBhbmQgYHJlc3RvcmVQcmV2aW91c1Nlc3Npb25gXG4gICAqIGlzIHNldCB0byB0cnVlLCB0aGlzIG9wdGlvbiBpcyBhdXRvbWF0aWNhbGx5IHNldCB0byBmYWxzZSwgYnV0IHlvdXIgYXBwIHdpbGxcbiAgICogbm90IGJlIGxvZ2dlZCBvdXQgd2hlbiByZWxvYWRlZC5cbiAgICpcbiAgICogYHVzZUVzc1Nlc3Npb25gIGRlZmF1bHRzIHRvIGZhbHNlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZTsgdG9cbiAgICogcHJlc2VydmUgc2Vzc2lvbnMgYWNyb3NzIHBhZ2UgcmVsb2FkcywgdXNlIG9mIGByZXN0b3JlUHJldmlvdXNTZXNzaW9uYCBpc1xuICAgKiByZWNvbW1lbmRlZC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgdW5yZWxlYXNlZFxuICAgKi9cbiAgdXNlRXNzU2Vzc2lvbj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgVVJMIG9mIHRoZSBwYWdlIGhhbmRsaW5nIHRoZSByZWRpcmVjdCwgaW5jbHVkaW5nIHRoZSBxdWVyeVxuICAgKiBwYXJhbWV0ZXJzIOKAlCB0aGVzZSBjb250YWluIHRoZSBpbmZvcm1hdGlvbiB0byBwcm9jZXNzIHRoZSBsb2dpbi5cbiAgICogTm90ZTogYXMgYSBjb252ZW5pZW5jZSwgaWYgbm8gVVJMIHZhbHVlIGlzIHNwZWNpZmllZCBoZXJlLCB3ZSBkZWZhdWx0IHRvXG4gICAqIHVzaW5nIHRoZSBicm93c2VyJ3MgY3VycmVudCBsb2NhdGlvbi5cbiAgICovXG4gIHVybD86IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpbGVudGx5QXV0aGVudGljYXRlKFxuICBzZXNzaW9uSWQ6IHN0cmluZyxcbiAgY2xpZW50QXV0aG46IENsaWVudEF1dGhlbnRpY2F0aW9uLFxuICBzZXNzaW9uOiBTZXNzaW9uXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3Qgc3RvcmVkU2Vzc2lvbkluZm8gPSBhd2FpdCBjbGllbnRBdXRobi52YWxpZGF0ZUN1cnJlbnRTZXNzaW9uKHNlc3Npb25JZCk7XG4gIGlmIChzdG9yZWRTZXNzaW9uSW5mbyAhPT0gbnVsbCkge1xuICAgIC8vIEl0IGNhbiBiZSByZWFsbHkgdXNlZnVsIHRvIHNhdmUgdGhlIHVzZXIncyBjdXJyZW50IGJyb3dzZXIgbG9jYXRpb24sXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gcmVzdG9yZSBpdCBhZnRlciBjb21wbGV0aW5nIHRoZSBzaWxlbnQgYXV0aGVudGljYXRpb25cbiAgICAvLyBvbiBpbmNvbWluZyByZWRpcmVjdC4gVGhpcyB3YXksIHRoZSB1c2VyIGlzIGV2ZW50dWFsbHkgcmVkaXJlY3RlZCBiYWNrXG4gICAgLy8gdG8gdGhlIHBhZ2UgdGhleSB3ZXJlIG9uIGFuZCBub3QgdG8gdGhlIGFwcCdzIHJlZGlyZWN0IHBhZ2UuXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKEtFWV9DVVJSRU5UX1VSTCwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGF3YWl0IGNsaWVudEF1dGhuLmxvZ2luKFxuICAgICAge1xuICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgIHByb21wdDogXCJub25lXCIsXG4gICAgICAgIG9pZGNJc3N1ZXI6IHN0b3JlZFNlc3Npb25JbmZvLmlzc3VlcixcbiAgICAgICAgcmVkaXJlY3RVcmw6IHN0b3JlZFNlc3Npb25JbmZvLnJlZGlyZWN0VXJsLFxuICAgICAgICBjbGllbnRJZDogc3RvcmVkU2Vzc2lvbkluZm8uY2xpZW50QXBwSWQsXG4gICAgICAgIGNsaWVudFNlY3JldDogc3RvcmVkU2Vzc2lvbkluZm8uY2xpZW50QXBwU2VjcmV0LFxuICAgICAgICB0b2tlblR5cGU6IHN0b3JlZFNlc3Npb25JbmZvLnRva2VuVHlwZSA/PyBcIkRQb1BcIixcbiAgICAgIH0sXG4gICAgICBzZXNzaW9uLmV2ZW50c1xuICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0xvZ2dlZEluKFxuICBzZXNzaW9uSW5mbz86IElTZXNzaW9uSW5mb1xuKTogc2Vzc2lvbkluZm8gaXMgSVNlc3Npb25JbmZvICYgeyBpc0xvZ2dlZEluOiB0cnVlIH0ge1xuICByZXR1cm4gISFzZXNzaW9uSW5mbz8uaXNMb2dnZWRJbjtcbn1cblxuLyoqXG4gKiBBIHtAbGluayBTZXNzaW9ufSBvYmplY3QgcmVwcmVzZW50cyBhIHVzZXIncyBzZXNzaW9uIG9uIGFuIGFwcGxpY2F0aW9uLiBUaGUgc2Vzc2lvbiBob2xkcyBzdGF0ZSwgYXMgaXQgc3RvcmVzIGluZm9ybWF0aW9uIGVuYWJsaW5nIGFjY2VzIHRvIHByaXZhdGUgcmVzb3VyY2VzIGFmdGVyIGxvZ2luIGZvciBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb24gZXh0ZW5kcyBFdmVudEVtaXR0ZXIgaW1wbGVtZW50cyBJSGFzU2Vzc2lvbkV2ZW50TGlzdGVuZXIge1xuICAvKipcbiAgICogSW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBjdXJyZW50IHNlc3Npb24uXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaW5mbzogSVNlc3Npb25JbmZvO1xuXG4gIC8qKlxuICAgKiBTZXNzaW9uIGF0dHJpYnV0ZSBleHBvc2luZyB0aGUgRXZlbnRFbWl0dGVyIGludGVyZmFjZSwgdG8gbGlzdGVuIG9uIHNlc3Npb25cbiAgICogZXZlbnRzIHN1Y2ggYXMgbG9naW4sIGxvZ291dCwgZXRjLlxuICAgKiBAc2luY2UgMS4xNS4wXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgZXZlbnRzOiBJU2Vzc2lvbkV2ZW50TGlzdGVuZXI7XG5cbiAgcHJpdmF0ZSBjbGllbnRBdXRoZW50aWNhdGlvbjogQ2xpZW50QXV0aGVudGljYXRpb247XG5cbiAgcHJpdmF0ZSB0b2tlblJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFNlc3Npb24gb2JqZWN0IGNvbnN0cnVjdG9yLiBUeXBpY2FsbHkgY2FsbGVkIGFzIGZvbGxvd3M6XG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3Qgc2Vzc2lvbiA9IG5ldyBTZXNzaW9uKCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBTZWUgYWxzbyBbZ2V0RGVmYXVsdFNlc3Npb25dKGh0dHBzOi8vZG9jcy5pbnJ1cHQuY29tL2RldmVsb3Blci10b29scy9hcGkvamF2YXNjcmlwdC9zb2xpZC1jbGllbnQtYXV0aG4tYnJvd3Nlci9mdW5jdGlvbnMuaHRtbCNnZXRkZWZhdWx0c2Vzc2lvbikuXG4gICAqXG4gICAqIEBwYXJhbSBzZXNzaW9uT3B0aW9ucyBUaGUgb3B0aW9ucyBlbmFibGluZyB0aGUgY29ycmVjdCBpbnN0YW50aWF0aW9uIG9mXG4gICAqIHRoZSBzZXNzaW9uLiBFaXRoZXIgYm90aCBzdG9yYWdlcyBvciBjbGllbnRBdXRoZW50aWNhdGlvbiBhcmUgcmVxdWlyZWQuIEZvclxuICAgKiBtb3JlIGluZm9ybWF0aW9uLCBzZWUge0BsaW5rIElTZXNzaW9uT3B0aW9uc30uXG4gICAqIEBwYXJhbSBzZXNzaW9uSWQgQSBzdHJpbmcgdW5pcXVlbHkgaWRlbnRpZnlpbmcgdGhlIHNlc3Npb24uXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBzZXNzaW9uT3B0aW9uczogUGFydGlhbDxJU2Vzc2lvbk9wdGlvbnM+ID0ge30sXG4gICAgc2Vzc2lvbklkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBVbnRpbCBTZXNzaW9uIG5vIGxvbmdlciBpbXBsZW1lbnRzIEV2ZW50RW1pdHRlciwgdGhpcy5ldmVudHMgaXMganVzdCBhIHByb3h5XG4gICAgLy8gdG8gdGhpcyAod2l0aCBzb21lIGludGVyZmFjZSBmaWx0ZXJpbmcpLiBXaGVuIHdlIG1ha2UgdGhlIGJyZWFraW5nIGNoYW5nZSxcbiAgICAvLyB0aGlzLmV2ZW50cyB3aWxsIGJlIGEgcmVndWxhciBFdmVudEVtaXR0ZXIgKGltcGxlbWVudGluZyBJU2Vzc2lvbkV2ZW50RW1pdHRlcik6XG4gICAgLy8gdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgUHJveHkoXG4gICAgICB0aGlzLFxuICAgICAgYnVpbGRQcm94eUhhbmRsZXIoXG4gICAgICAgIFNlc3Npb24ucHJvdG90eXBlLFxuICAgICAgICBcImV2ZW50cyBvbmx5IGltcGxlbWVudHMgSVNlc3Npb25FdmVudExpc3RlbmVyXCJcbiAgICAgIClcbiAgICApO1xuICAgIGlmIChzZXNzaW9uT3B0aW9ucy5jbGllbnRBdXRoZW50aWNhdGlvbikge1xuICAgICAgdGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbiA9IHNlc3Npb25PcHRpb25zLmNsaWVudEF1dGhlbnRpY2F0aW9uO1xuICAgIH0gZWxzZSBpZiAoc2Vzc2lvbk9wdGlvbnMuc2VjdXJlU3RvcmFnZSAmJiBzZXNzaW9uT3B0aW9ucy5pbnNlY3VyZVN0b3JhZ2UpIHtcbiAgICAgIHRoaXMuY2xpZW50QXV0aGVudGljYXRpb24gPSBnZXRDbGllbnRBdXRoZW50aWNhdGlvbldpdGhEZXBlbmRlbmNpZXMoe1xuICAgICAgICBzZWN1cmVTdG9yYWdlOiBzZXNzaW9uT3B0aW9ucy5zZWN1cmVTdG9yYWdlLFxuICAgICAgICBpbnNlY3VyZVN0b3JhZ2U6IHNlc3Npb25PcHRpb25zLmluc2VjdXJlU3RvcmFnZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsaWVudEF1dGhlbnRpY2F0aW9uID0gZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzKHt9KTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuc2Vzc2lvbkluZm8pIHtcbiAgICAgIHRoaXMuaW5mbyA9IHtcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uT3B0aW9ucy5zZXNzaW9uSW5mby5zZXNzaW9uSWQsXG4gICAgICAgIGlzTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgICB3ZWJJZDogc2Vzc2lvbk9wdGlvbnMuc2Vzc2lvbkluZm8ud2ViSWQsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluZm8gPSB7XG4gICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkID8/IHY0KCksXG4gICAgICAgIGlzTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIGEgc2Vzc2lvbiBpcyBsb2dnZWQgaW4sIHdlIHdhbnQgdG8gdHJhY2sgaXRzIElEIGluIGxvY2FsIHN0b3JhZ2UgdG9cbiAgICAvLyBlbmFibGUgc2lsZW50IHJlZnJlc2guIFRoZSBjdXJyZW50IHNlc3Npb24gSUQgc3BlY2lmaWNhbGx5IHN0b3JlZCBpbiAnbG9jYWxTdG9yYWdlJ1xuICAgIC8vIChhcyBvcHBvc2VkIHRvIHVzaW5nIG91ciBzdG9yYWdlIGFic3RyYWN0aW9uIGxheWVyKSBiZWNhdXNlIGl0IGlzIG9ubHlcbiAgICAvLyB1c2VkIGluIGEgYnJvd3Nlci1zcGVjaWZpYyBtZWNoYW5pc20uXG4gICAgdGhpcy5ldmVudHMub24oRVZFTlRTLkxPR0lOLCAoKSA9PlxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKEtFWV9DVVJSRU5UX1NFU1NJT04sIHRoaXMuaW5mby5zZXNzaW9uSWQpXG4gICAgKTtcblxuICAgIHRoaXMuZXZlbnRzLm9uKEVWRU5UUy5TRVNTSU9OX0VYUElSRUQsICgpID0+IHRoaXMuaW50ZXJuYWxMb2dvdXQoZmFsc2UpKTtcblxuICAgIHRoaXMuZXZlbnRzLm9uKEVWRU5UUy5FUlJPUiwgKCkgPT4gdGhpcy5pbnRlcm5hbExvZ291dChmYWxzZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXJzIHRoZSBsb2dpbiBwcm9jZXNzLiBOb3RlIHRoYXQgdGhpcyBtZXRob2Qgd2lsbCByZWRpcmVjdCB0aGUgdXNlciBhd2F5IGZyb20geW91ciBhcHAuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIFBhcmFtZXRlciB0byBjdXN0b21pemUgdGhlIGxvZ2luIGJlaGF2aW91ci4gSW4gcGFydGljdWxhciwgdHdvIG9wdGlvbnMgYXJlIG1hbmRhdG9yeTogYG9wdGlvbnMub2lkY0lzc3VlcmAsIHRoZSB1c2VyJ3MgaWRlbnRpdHkgcHJvdmlkZXIsIGFuZCBgb3B0aW9ucy5yZWRpcmVjdFVybGAsIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHVzZXIgd2lsbCBiZSByZWRpcmVjdGVkIGFmdGVyIGxvZ2dpbmcgaW4gdGhlaXIgaWRlbnRpdHkgcHJvdmlkZXIuXG4gICAqIEByZXR1cm5zIFRoaXMgbWV0aG9kIHNob3VsZCByZWRpcmVjdCB0aGUgdXNlciBhd2F5IGZyb20gdGhlIGFwcDogaXQgZG9lcyBub3QgcmV0dXJuIGFueXRoaW5nLiBUaGUgbG9naW4gcHJvY2VzcyBpcyBjb21wbGV0ZWQgYnkge0BsaW5rY29kZSBoYW5kbGVJbmNvbWluZ1JlZGlyZWN0fS5cbiAgICovXG4gIC8vIERlZmluZSB0aGVzZSBmdW5jdGlvbnMgYXMgcHJvcGVydGllcyBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGFjY2lkZW50YWxseSByZS1ib3VuZC5cbiAgLy8gSXNuJ3QgSmF2YXNjcmlwdCBmdW4/XG4gIGxvZ2luID0gYXN5bmMgKG9wdGlvbnM6IElMb2dpbklucHV0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGF3YWl0IHRoaXMuY2xpZW50QXV0aGVudGljYXRpb24ubG9naW4oXG4gICAgICB7XG4gICAgICAgIHNlc3Npb25JZDogdGhpcy5pbmZvLnNlc3Npb25JZCxcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgLy8gRGVmYXVsdHMgdGhlIHRva2VuIHR5cGUgdG8gRFBvUFxuICAgICAgICB0b2tlblR5cGU6IG9wdGlvbnMudG9rZW5UeXBlID8/IFwiRFBvUFwiLFxuICAgICAgfSxcbiAgICAgIHRoaXMuZXZlbnRzXG4gICAgKTtcbiAgICAvLyBgbG9naW5gIHJlZGlyZWN0cyB0aGUgdXNlciBhd2F5IGZyb20gdGhlIGFwcCxcbiAgICAvLyBzbyB1bmxlc3MgaXQgdGhyb3dzIGFuIGVycm9yLCB0aGVyZSBpcyBubyBjb2RlIHRoYXQgc2hvdWxkIHJ1biBhZnRlcndhcmRzXG4gICAgLy8gKHNpbmNlIHRoZXJlIGlzIG5vIFwiYWZ0ZXJcIiBpbiB0aGUgbGlmZXRpbWUgb2YgdGhlIHNjcmlwdCkuXG4gICAgLy8gSGVuY2UsIHRoaXMgUHJvbWlzZSBuZXZlciByZXNvbHZlczpcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGRhdGEgdXNpbmcgYXZhaWxhYmxlIGxvZ2luIGluZm9ybWF0aW9uLiBJZiB0aGUgdXNlciBpcyBub3QgbG9nZ2VkIGluLCB0aGlzIHdpbGwgYmVoYXZlIGFzIGEgcmVndWxhciBgZmV0Y2hgLiBUaGUgc2lnbmF0dXJlIG9mIHRoaXMgbWV0aG9kIGlzIGlkZW50aWNhbCB0byB0aGUgW2Nhbm9uaWNhbCBgZmV0Y2hgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJKS5cbiAgICpcbiAgICogQHBhcmFtIHVybCBUaGUgVVJMIGZyb20gd2hpY2ggZGF0YSBzaG91bGQgYmUgZmV0Y2hlZC5cbiAgICogQHBhcmFtIGluaXQgT3B0aW9uYWwgcGFyYW1ldGVycyBjdXN0b21pemluZyB0aGUgcmVxdWVzdCwgYnkgc3BlY2lmeWluZyBhbiBIVFRQIG1ldGhvZCwgaGVhZGVycywgYSBib2R5LCBldGMuIEZvbGxvd3MgdGhlIFtXSEFUV0cgRmV0Y2ggU3RhbmRhcmRdKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLykuXG4gICAqL1xuICBmZXRjaDogdHlwZW9mIGZldGNoID0gYXN5bmMgKHVybCwgaW5pdCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmNsaWVudEF1dGhlbnRpY2F0aW9uLmZldGNoKHVybCwgaW5pdCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFuIGludGVybmFsIGxvZ291dCBmdW5jdGlvbiwgdG8gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGUgbG9nb3V0IHNpZ25hbFxuICAgKiBzaG91bGQgYmUgc2VudCwgaS5lLiBpZiB0aGUgbG9nb3V0IHdhcyB1c2VyLWluaXRpYXRlZCBvciBpcyB0aGUgcmVzdWx0IG9mXG4gICAqIGFuIGV4dGVybmFsIGV2ZW50LlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIGludGVybmFsTG9nb3V0ID0gYXN5bmMgKGVtaXRTaWduYWw6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAvLyBDbGVhcmluZyB0aGlzIHZhbHVlIG1lYW5zIHRoYXQgc2lsZW50IHJlZnJlc2ggd2lsbCBubyBsb25nZXIgYmUgYXR0ZW1wdGVkLlxuICAgIC8vIEluIHBhcnRpY3VsYXIsIGluIHRoZSBjYXNlIG9mIGEgc2lsZW50IGF1dGhlbnRpY2F0aW9uIGVycm9yIGl0IHByZXZlbnRzXG4gICAgLy8gZnJvbSBnZXR0aW5nIHN0dWNrIGluIGFuIGF1dGhlbnRpY2F0aW9uIHJldHJpZXMgbG9vcC5cbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oS0VZX0NVUlJFTlRfU0VTU0lPTik7XG4gICAgYXdhaXQgdGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbi5sb2dvdXQodGhpcy5pbmZvLnNlc3Npb25JZCk7XG4gICAgdGhpcy5pbmZvLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICBpZiAoZW1pdFNpZ25hbCkge1xuICAgICAgKHRoaXMuZXZlbnRzIGFzIEV2ZW50RW1pdHRlcikuZW1pdChFVkVOVFMuTE9HT1VUKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIExvZ3MgdGhlIHVzZXIgb3V0IG9mIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBkb2VzIG5vdCBsb2cgdGhlIHVzZXIgb3V0IG9mIHRoZWlyIFNvbGlkIGlkZW50aXR5IHByb3ZpZGVyLCBhbmQgc2hvdWxkIG5vdCByZWRpcmVjdCB0aGUgdXNlciBhd2F5LlxuICAgKi9cbiAgbG9nb3V0ID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4gdGhpcy5pbnRlcm5hbExvZ291dCh0cnVlKTtcblxuICAvKipcbiAgICogQ29tcGxldGVzIHRoZSBsb2dpbiBwcm9jZXNzIGJ5IHByb2Nlc3NpbmcgdGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IHRoZVxuICAgKiBTb2xpZCBpZGVudGl0eSBwcm92aWRlciB0aHJvdWdoIHJlZGlyZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBTZWUge0BzZWUgSUhhbmRsZUluY29taW5nUmVkaXJlY3RPcHRpb25zfS5cbiAgICovXG4gIGhhbmRsZUluY29taW5nUmVkaXJlY3QgPSBhc3luYyAoXG4gICAgaW5wdXRPcHRpb25zOiBzdHJpbmcgfCBJSGFuZGxlSW5jb21pbmdSZWRpcmVjdE9wdGlvbnMgPSB7fVxuICApOiBQcm9taXNlPElTZXNzaW9uSW5mbyB8IHVuZGVmaW5lZD4gPT4ge1xuICAgIGlmICh0aGlzLmluZm8uaXNMb2dnZWRJbikge1xuICAgICAgcmV0dXJuIHRoaXMuaW5mbztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50b2tlblJlcXVlc3RJblByb2dyZXNzKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID1cbiAgICAgIHR5cGVvZiBpbnB1dE9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyB7IHVybDogaW5wdXRPcHRpb25zIH0gOiBpbnB1dE9wdGlvbnM7XG4gICAgY29uc3QgdXJsID0gb3B0aW9ucy51cmwgPz8gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICB0aGlzLnRva2VuUmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIGNvbnN0IHNlc3Npb25JbmZvID0gYXdhaXQgdGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbi5oYW5kbGVJbmNvbWluZ1JlZGlyZWN0KFxuICAgICAgdXJsLFxuICAgICAgdGhpcy5ldmVudHNcbiAgICApO1xuICAgIGlmIChpc0xvZ2dlZEluKHNlc3Npb25JbmZvKSkge1xuICAgICAgdGhpcy5zZXRTZXNzaW9uSW5mbyhzZXNzaW9uSW5mbyk7XG4gICAgICBjb25zdCBjdXJyZW50VXJsID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKEtFWV9DVVJSRU5UX1VSTCk7XG4gICAgICBpZiAoY3VycmVudFVybCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgbG9naW4gZXZlbnQgY2FuIG9ubHkgYmUgdHJpZ2dlcmVkICoqYWZ0ZXIqKiB0aGUgdXNlciBoYXMgYmVlblxuICAgICAgICAvLyByZWRpcmVjdGVkIGZyb20gdGhlIElkUCB3aXRoIGFjY2VzcyBhbmQgSUQgdG9rZW5zLlxuICAgICAgICAodGhpcy5ldmVudHMgYXMgRXZlbnRFbWl0dGVyKS5lbWl0KEVWRU5UUy5MT0dJTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBhbiBVUkwgaXMgc3RvcmVkIGluIGxvY2FsIHN0b3JhZ2UsIHdlIGFyZSBiZWluZyBsb2dnZWQgaW4gYWZ0ZXIgYVxuICAgICAgICAvLyBzaWxlbnQgYXV0aGVudGljYXRpb24sIHNvIHJlbW92ZSBvdXIgY3VycmVudGx5IHN0b3JlZCBVUkwgbG9jYXRpb25cbiAgICAgICAgLy8gdG8gY2xlYW4gdXAgb3VyIHN0YXRlIG5vdyB0aGF0IHdlIGFyZSBjb21wbGV0aW5nIHRoZSByZS1sb2dpbiBwcm9jZXNzLlxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oS0VZX0NVUlJFTlRfVVJMKTtcbiAgICAgICAgKHRoaXMuZXZlbnRzIGFzIEV2ZW50RW1pdHRlcikuZW1pdChFVkVOVFMuU0VTU0lPTl9SRVNUT1JFRCwgY3VycmVudFVybCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJlc3RvcmVQcmV2aW91c1Nlc3Npb24gPT09IHRydWUpIHtcbiAgICAgIC8vIFNpbGVudCBhdXRoZW50aWNhdGlvbiBoYXBwZW5zIGFmdGVyIGEgcmVmcmVzaCwgd2hpY2ggbWVhbnMgdGhlcmUgYXJlIG5vXG4gICAgICAvLyBPQXV0aCBwYXJhbXMgaW4gdGhlIGN1cnJlbnQgbG9jYXRpb24gSVJJLiBJdCBjYW4gb25seSBzdWNjZWVkIGlmIGEgc2Vzc2lvblxuICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbG9nZ2VkIGluLCBpbiB3aGljaCBjYXNlIGl0cyBJRCB3aWxsIGJlIHByZXNlbnQgd2l0aCBhIGtub3duXG4gICAgICAvLyBpZGVudGlmaWVyIGluIGxvY2FsIHN0b3JhZ2UuXG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgbG9jYWxseSBzdG9yZWQgc2Vzc2lvbiBJRC4uLlxuICAgICAgY29uc3Qgc3RvcmVkU2Vzc2lvbklkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKEtFWV9DVVJSRU5UX1NFU1NJT04pO1xuICAgICAgLy8gLi4uaWYgbm90LCB0aGVuIHRoZXJlIGlzIG5vIElEIHRva2VuLCBhbmQgc28gc2lsZW50IGF1dGhlbnRpY2F0aW9uIGNhbm5vdCBoYXBwZW4sIGJ1dFxuICAgICAgLy8gaWYgd2UgZG8gaGF2ZSBhIHN0b3JlZCBzZXNzaW9uIElELCBhdHRlbXB0IHRvIHJlLWF1dGhlbnRpY2F0ZSBub3cgc2lsZW50bHkuXG4gICAgICBpZiAoc3RvcmVkU2Vzc2lvbklkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGF0dGVtcHRlZFNpbGVudEF1dGhlbnRpY2F0aW9uID0gYXdhaXQgc2lsZW50bHlBdXRoZW50aWNhdGUoXG4gICAgICAgICAgc3RvcmVkU2Vzc2lvbklkLFxuICAgICAgICAgIHRoaXMuY2xpZW50QXV0aGVudGljYXRpb24sXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHRoYXQgdGhlIG1haW4gd2luZG93IHdpbGwgaW1taW5lbnRseSBiZSByZWRpcmVjdGVkLlxuICAgICAgICAvLyBIb3dldmVyLCB0aGlzIHJlZGlyZWN0IGlzIGFzeW5jaHJvbm91cyBhbmQgdGhlcmUgaXMgbm8gd2F5IHRvIGhhbHQgZXhlY3V0aW9uXG4gICAgICAgIC8vIHVudGlsIGl0IGhhcHBlbnMgcHJlY2lzZWx5LiBUaGF0J3Mgd2h5IHRoZSBjdXJyZW50IFByb21pc2Ugc2ltcGx5IGRvZXMgbm90XG4gICAgICAgIC8vIHJlc29sdmUuXG4gICAgICAgIGlmIChhdHRlbXB0ZWRTaWxlbnRBdXRoZW50aWNhdGlvbikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50b2tlblJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgcmV0dXJuIHNlc3Npb25JbmZvO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIGEgdXNlciBjb21wbGV0ZXMgbG9naW4uXG4gICAqXG4gICAqIFRoZSBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB7QGxpbmsgaGFuZGxlSW5jb21pbmdSZWRpcmVjdH0gY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHVzZXIgY29tcGxldGVzIGxvZ2luLlxuICAgKiBAZGVwcmVjYXRlZCBQcmVmZXIgc2Vzc2lvbi5ldmVudHMub24oRVZFTlRTLkxPR0lOLCBjYWxsYmFjaylcbiAgICovXG4gIG9uTG9naW4oY2FsbGJhY2s6ICgpID0+IHVua25vd24pOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50cy5vbihFVkVOVFMuTE9HSU4sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIGEgdXNlciBsb2dzIG91dDpcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHVzZXIgY29tcGxldGVzIGxvZ291dC5cbiAgICogQGRlcHJlY2F0ZWQgUHJlZmVyIHNlc3Npb24uZXZlbnRzLm9uKEVWRU5UUy5MT0dPVVQsIGNhbGxiYWNrKVxuICAgKi9cbiAgb25Mb2dvdXQoY2FsbGJhY2s6ICgpID0+IHVua25vd24pOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50cy5vbihFVkVOVFMuTE9HT1VULCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIHVzZXIgbG9ncyBvdXQ6XG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLlxuICAgKiBAc2luY2UgMS4xMS4wXG4gICAqIEBkZXByZWNhdGVkIFByZWZlciBzZXNzaW9uLmV2ZW50cy5vbihFVkVOVFMuRVJST1IsIGNhbGxiYWNrKVxuICAgKi9cbiAgb25FcnJvcihcbiAgICBjYWxsYmFjazogKFxuICAgICAgZXJyb3I6IHN0cmluZyB8IG51bGwsXG4gICAgICBlcnJvckRlc2NyaXB0aW9uPzogc3RyaW5nIHwgbnVsbFxuICAgICkgPT4gdW5rbm93blxuICApOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50cy5vbihFVkVOVFMuRVJST1IsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIGEgc2Vzc2lvbiBpcyByZXN0b3JlZC5cbiAgICpcbiAgICogTm90ZTogdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHNhdmVkIHZhbHVlIG9mIHRoZSAnY3VycmVudCBVUkwnXG4gICAqIGF0IHRoZSB0aW1lIHRoZSBzZXNzaW9uIHdhcyByZXN0b3JlZC5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHVzZXIncyBhbHJlYWR5IGxvZ2dlZC1pbiBzZXNzaW9uIGlzIHJlc3RvcmVkLCBlLmcuLCBhZnRlciBhIHNpbGVudCBhdXRoZW50aWNhdGlvbiBpcyBjb21wbGV0ZWQgYWZ0ZXIgYSBwYWdlIHJlZnJlc2guXG4gICAqIEBkZXByZWNhdGVkIFByZWZlciBzZXNzaW9uLmV2ZW50cy5vbihFVkVOVFMuU0VTU0lPTl9SRVNUT1JFRCwgY2FsbGJhY2spXG4gICAqL1xuICBvblNlc3Npb25SZXN0b3JlKGNhbGxiYWNrOiAoY3VycmVudFVybDogc3RyaW5nKSA9PiB1bmtub3duKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudHMub24oRVZFTlRTLlNFU1NJT05fUkVTVE9SRUQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRoYXQgcnVucyB3aGVuIHRoZSBzZXNzaW9uIGV4cGlyZXMgYW5kIGNhbiBubyBsb25nZXJcbiAgICogbWFrZSBhdXRoZW50aWNhdGVkIHJlcXVlc3RzLCBidXQgZm9sbG93aW5nIGEgdXNlciBsb2dvdXQuXG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBydW5zIG9uIHNlc3Npb24gZXhwaXJhdGlvbi5cbiAgICogQHNpbmNlIDEuMTEuMFxuICAgKiBAZGVwcmVjYXRlZCBQcmVmZXIgc2Vzc2lvbi5ldmVudHMub24oRVZFTlRTLlNFU1NJT05fRVhQSVJFRCwgY2FsbGJhY2spXG4gICAqL1xuICBvblNlc3Npb25FeHBpcmF0aW9uKGNhbGxiYWNrOiAoKSA9PiB1bmtub3duKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudHMub24oRVZFTlRTLlNFU1NJT05fRVhQSVJFRCwgY2FsbGJhY2spO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRTZXNzaW9uSW5mbyhcbiAgICBzZXNzaW9uSW5mbzogSVNlc3Npb25JbmZvICYgeyBpc0xvZ2dlZEluOiB0cnVlIH1cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5pbmZvLmlzTG9nZ2VkSW4gPSBzZXNzaW9uSW5mby5pc0xvZ2dlZEluO1xuICAgIHRoaXMuaW5mby53ZWJJZCA9IHNlc3Npb25JbmZvLndlYklkO1xuICAgIHRoaXMuaW5mby5zZXNzaW9uSWQgPSBzZXNzaW9uSW5mby5zZXNzaW9uSWQ7XG4gICAgdGhpcy5pbmZvLmV4cGlyYXRpb25EYXRlID0gc2Vzc2lvbkluZm8uZXhwaXJhdGlvbkRhdGU7XG4gICAgdGhpcy5ldmVudHMub24oRVZFTlRTLlNFU1NJT05fRVhURU5ERUQsIChleHBpcmVzSW46IG51bWJlcikgPT4ge1xuICAgICAgdGhpcy5pbmZvLmV4cGlyYXRpb25EYXRlID0gRGF0ZS5ub3coKSArIGV4cGlyZXNJbiAqIDEwMDA7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbmltcG9ydCB7IFNPTElEX0NMSUVOVF9BVVRITl9LRVlfUFJFRklYIH0gZnJvbSBcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIjtcblxuZXhwb3J0IGNvbnN0IEtFWV9DVVJSRU5UX1NFU1NJT04gPSBgJHtTT0xJRF9DTElFTlRfQVVUSE5fS0VZX1BSRUZJWH1jdXJyZW50U2Vzc2lvbmA7XG5cbmV4cG9ydCBjb25zdCBLRVlfQ1VSUkVOVF9VUkwgPSBgJHtTT0xJRF9DTElFTlRfQVVUSE5fS0VZX1BSRUZJWH1jdXJyZW50VXJsYDtcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbmltcG9ydCB7IFNlc3Npb24gfSBmcm9tIFwiLi9TZXNzaW9uXCI7XG5cbmxldCBkZWZhdWx0U2Vzc2lvbjogU2Vzc2lvbiB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBPYnRhaW4gdGhlIHtAbGluayBTZXNzaW9ufSB1c2VkIHdoZW4gbm90IGV4cGxpY2l0bHkgaW5zdGFudGlhdGluZyBvbmUgeW91cnNlbGYuXG4gKlxuICogV2hlbiB1c2luZyB0aGUgdG9wLWxldmVsIGV4cG9ydHMge0BsaW5rIGZldGNofSwge0BsaW5rIGxvZ2lufSwge0BsaW5rIGxvZ291dH0sXG4gKiB7QGxpbmsgaGFuZGxlSW5jb21pbmdSZWRpcmVjdH0sIHtAbGluayBvbkxvZ2lufSBhbmQge0BsaW5rIG9uTG9nb3V0fSwgdGhlc2UgYXBwbHkgdG8gYW5cbiAqIGltcGxpY2l0bHktaW5zdGFudGlhdGVkIHtAbGluayBTZXNzaW9ufS5cbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGF0IFNlc3Npb24gaW4gb3JkZXIgdG8gb2J0YWluIGUuZy4gdGhlIGN1cnJlbnQgdXNlcidzXG4gKiBXZWJJRC5cbiAqIEBzaW5jZSAxLjMuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFNlc3Npb24oKTogU2Vzc2lvbiB7XG4gIGlmICh0eXBlb2YgZGVmYXVsdFNlc3Npb24gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBkZWZhdWx0U2Vzc2lvbiA9IG5ldyBTZXNzaW9uKCk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRTZXNzaW9uO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24ncyBzaWduYXR1cmUgaXMgZXF1YWwgdG8gYHdpbmRvdy5mZXRjaGAsIGJ1dCBpZiB0aGUgY3VycmVudCB1c2VyIGlzIGF1dGhlbnRpY2F0ZWRcbiAqIChzZWUgW1tsb2dpbl1dIGFuZCBbW2hhbmRsZUluY29taW5nUmVkaXJlY3RdXSksIHJlcXVlc3RzIG1hZGUgdXNpbmcgaXQgd2lsbCBpbmNsdWRlIHRoYXQgdXNlcidzXG4gKiBjcmVkZW50aWFscy4gSWYgbm90LCB0aGlzIHdpbGwgYmVoYXZlIGp1c3QgbGlrZSB0aGUgcmVndWxhciBgd2luZG93LmZldGNoYC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93T3JXb3JrZXJHbG9iYWxTY29wZS9mZXRjaH1cbiAqIEBzaW5jZSAxLjMuMFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93ICovXG5leHBvcnQgY29uc3QgZmV0Y2g6IFNlc3Npb25bXCJmZXRjaFwiXSA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHNlc3Npb24gPSBnZXREZWZhdWx0U2Vzc2lvbigpO1xuICByZXR1cm4gc2Vzc2lvbi5mZXRjaCguLi5hcmdzKTtcbn07XG5cbi8qKlxuICogVHJpZ2dlcnMgdGhlIGxvZ2luIHByb2Nlc3MuIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCB3aWxsIHJlZGlyZWN0IHRoZSB1c2VyIGF3YXkgZnJvbSB5b3VyIGFwcC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBQYXJhbWV0ZXIgdG8gY3VzdG9taXplIHRoZSBsb2dpbiBiZWhhdmlvdXIuIEluIHBhcnRpY3VsYXIsIHR3byBvcHRpb25zIGFyZSBtYW5kYXRvcnk6IGBvcHRpb25zLm9pZGNJc3N1ZXJgLCB0aGUgdXNlcidzIGlkZW50aXR5IHByb3ZpZGVyLCBhbmQgYG9wdGlvbnMucmVkaXJlY3RVcmxgLCB0aGUgVVJMIHRvIHdoaWNoIHRoZSB1c2VyIHdpbGwgYmUgcmVkaXJlY3RlZCBhZnRlciBsb2dnaW5nIGluIHRoZWlyIGlkZW50aXR5IHByb3ZpZGVyLlxuICogQHJldHVybnMgVGhpcyBtZXRob2Qgc2hvdWxkIHJlZGlyZWN0IHRoZSB1c2VyIGF3YXkgZnJvbSB0aGUgYXBwOiBpdCBkb2VzIG5vdCByZXR1cm4gYW55dGhpbmcuIFRoZSBsb2dpbiBwcm9jZXNzIGlzIGNvbXBsZXRlZCBieSBbW2hhbmRsZUluY29taW5nUmVkaXJlY3RdXS5cbiAqIEBzaW5jZSAxLjMuMFxuICovXG5leHBvcnQgY29uc3QgbG9naW46IFNlc3Npb25bXCJsb2dpblwiXSA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHNlc3Npb24gPSBnZXREZWZhdWx0U2Vzc2lvbigpO1xuICByZXR1cm4gc2Vzc2lvbi5sb2dpbiguLi5hcmdzKTtcbn07XG5cbi8qKlxuICogTG9ncyB0aGUgdXNlciBvdXQgb2YgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGRvZXMgbm90IGxvZyB0aGUgdXNlciBvdXQgb2YgdGhlaXJcbiAqIFNvbGlkIGlkZW50aXR5IHByb3ZpZGVyLCBhbmQgc2hvdWxkIG5vdCByZWRpcmVjdCB0aGUgdXNlciBhd2F5LlxuICpcbiAqIEBzaW5jZSAxLjMuMFxuICovXG5leHBvcnQgY29uc3QgbG9nb3V0OiBTZXNzaW9uW1wibG9nb3V0XCJdID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGdldERlZmF1bHRTZXNzaW9uKCk7XG4gIHJldHVybiBzZXNzaW9uLmxvZ291dCguLi5hcmdzKTtcbn07XG5cbi8qKlxuICogQ29tcGxldGVzIHRoZSBsb2dpbiBwcm9jZXNzIGJ5IHByb2Nlc3NpbmcgdGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IHRoZSBTb2xpZCBpZGVudGl0eSBwcm92aWRlciB0aHJvdWdoIHJlZGlyZWN0LlxuICpcbiAqIEBwYXJhbSB1cmwgVGhlIFVSTCBvZiB0aGUgcGFnZSBoYW5kbGluZyB0aGUgcmVkaXJlY3QsIGluY2x1ZGluZyB0aGUgcXVlcnkgcGFyYW1ldGVycyDigJQgdGhlc2UgY29udGFpbiB0aGUgaW5mb3JtYXRpb24gdG8gcHJvY2VzcyB0aGUgbG9naW4uXG4gKiBAc2luY2UgMS4zLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZUluY29taW5nUmVkaXJlY3Q6IFNlc3Npb25bXCJoYW5kbGVJbmNvbWluZ1JlZGlyZWN0XCJdID0gKFxuICAuLi5hcmdzXG4pID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGdldERlZmF1bHRTZXNzaW9uKCk7XG4gIHJldHVybiBzZXNzaW9uLmhhbmRsZUluY29taW5nUmVkaXJlY3QoLi4uYXJncyk7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYSB1c2VyIGNvbXBsZXRlcyBsb2dpbi5cbiAqXG4gKiBUaGUgY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4ge0BsaW5rIGhhbmRsZUluY29taW5nUmVkaXJlY3R9IGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAc2luY2UgMS4zLjBcbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIGEgdXNlciBjb21wbGV0ZXMgbG9naW4uXG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgZXZlbnRzLm9uKEVWRU5UUy5MT0dJTiwgY2FsbGJhY2spXG5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uTG9naW46IFNlc3Npb25bXCJvbkxvZ2luXCJdID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGdldERlZmF1bHRTZXNzaW9uKCk7XG4gIHJldHVybiBzZXNzaW9uLm9uTG9naW4oLi4uYXJncyk7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYSB1c2VyIGxvZ3Mgb3V0OlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHdoZW4gYSB1c2VyIGNvbXBsZXRlcyBsb2dvdXQuXG4gKiBAc2luY2UgMS4zLjBcbiAqIEBkZXByZWNhdGVkIFByZWZlciBldmVudHMub24oRVZFTlRTLkxPR09VVCwgY2FsbGJhY2spXG5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uTG9nb3V0OiBTZXNzaW9uW1wib25Mb2dvdXRcIl0gPSAoLi4uYXJncykgPT4ge1xuICBjb25zdCBzZXNzaW9uID0gZ2V0RGVmYXVsdFNlc3Npb24oKTtcbiAgcmV0dXJuIHNlc3Npb24ub25Mb2dvdXQoLi4uYXJncyk7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYSBzZXNzaW9uIGlzIHJlc3RvcmVkOlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHdoZW4gYSBzZXNzaW9uIGlzIHJlc3RvcmVkLlxuICogQHNpbmNlIDEuMy4wXG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgZXZlbnRzLm9uKEVWRU5UUy5TRVNTSU9OX1JFU1RPUkVELCBjYWxsYmFjaylcbiAqL1xuZXhwb3J0IGNvbnN0IG9uU2Vzc2lvblJlc3RvcmU6IFNlc3Npb25bXCJvblNlc3Npb25SZXN0b3JlXCJdID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IGdldERlZmF1bHRTZXNzaW9uKCk7XG4gIHJldHVybiBzZXNzaW9uLm9uU2Vzc2lvblJlc3RvcmUoLi4uYXJncyk7XG59O1xuXG4vKipcbiAqIHtAbGluayBTZXNzaW9uRXZlbnRFbWl0dGVyfSBpbnN0YW5jZSB0byBzdWJzY3JpYmUgdG8gZXZlbnRzIGJ5IHRoZSBkZWZhdWx0IHNlc3Npb24uXG4gKlxuICogQHNpbmNlIFVucmVsZWFzZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGV2ZW50cyA9ICgpOiBTZXNzaW9uW1wiZXZlbnRzXCJdID0+IHtcbiAgcmV0dXJuIGdldERlZmF1bHRTZXNzaW9uKCkuZXZlbnRzO1xufTtcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuLyoqXG4gKiBUb3AgTGV2ZWwgY29yZSBkb2N1bWVudC4gUmVzcG9uc2libGUgZm9yIHNldHRpbmcgdXAgdGhlIGRlcGVuZGVuY3kgZ3JhcGhcbiAqL1xuaW1wb3J0IHsgSVN0b3JhZ2UsIEluTWVtb3J5U3RvcmFnZSB9IGZyb20gXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCI7XG5pbXBvcnQgU3RvcmFnZVV0aWxpdHlCcm93c2VyIGZyb20gXCIuL3N0b3JhZ2UvU3RvcmFnZVV0aWxpdHlcIjtcbmltcG9ydCBDbGllbnRBdXRoZW50aWNhdGlvbiBmcm9tIFwiLi9DbGllbnRBdXRoZW50aWNhdGlvblwiO1xuaW1wb3J0IE9pZGNMb2dpbkhhbmRsZXIgZnJvbSBcIi4vbG9naW4vb2lkYy9PaWRjTG9naW5IYW5kbGVyXCI7XG5pbXBvcnQgQXV0aG9yaXphdGlvbkNvZGVXaXRoUGtjZU9pZGNIYW5kbGVyIGZyb20gXCIuL2xvZ2luL29pZGMvb2lkY0hhbmRsZXJzL0F1dGhvcml6YXRpb25Db2RlV2l0aFBrY2VPaWRjSGFuZGxlclwiO1xuaW1wb3J0IElzc3VlckNvbmZpZ0ZldGNoZXIgZnJvbSBcIi4vbG9naW4vb2lkYy9Jc3N1ZXJDb25maWdGZXRjaGVyXCI7XG5pbXBvcnQgeyBGYWxsYmFja1JlZGlyZWN0SGFuZGxlciB9IGZyb20gXCIuL2xvZ2luL29pZGMvaW5jb21pbmdSZWRpcmVjdEhhbmRsZXIvRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXJcIjtcbmltcG9ydCBHZW5lcmFsTG9nb3V0SGFuZGxlciBmcm9tIFwiLi9sb2dvdXQvR2VuZXJhbExvZ291dEhhbmRsZXJcIjtcbmltcG9ydCB7IFNlc3Npb25JbmZvTWFuYWdlciB9IGZyb20gXCIuL3Nlc3Npb25JbmZvL1Nlc3Npb25JbmZvTWFuYWdlclwiO1xuaW1wb3J0IHsgQXV0aENvZGVSZWRpcmVjdEhhbmRsZXIgfSBmcm9tIFwiLi9sb2dpbi9vaWRjL2luY29taW5nUmVkaXJlY3RIYW5kbGVyL0F1dGhDb2RlUmVkaXJlY3RIYW5kbGVyXCI7XG5pbXBvcnQgQWdncmVnYXRlUmVkaXJlY3RIYW5kbGVyIGZyb20gXCIuL2xvZ2luL29pZGMvQWdncmVnYXRlUmVkaXJlY3RIYW5kbGVyXCI7XG5pbXBvcnQgQnJvd3NlclN0b3JhZ2UgZnJvbSBcIi4vc3RvcmFnZS9Ccm93c2VyU3RvcmFnZVwiO1xuaW1wb3J0IFJlZGlyZWN0b3IgZnJvbSBcIi4vbG9naW4vb2lkYy9SZWRpcmVjdG9yXCI7XG5pbXBvcnQgQ2xpZW50UmVnaXN0cmFyIGZyb20gXCIuL2xvZ2luL29pZGMvQ2xpZW50UmVnaXN0cmFyXCI7XG5pbXBvcnQgeyBFcnJvck9pZGNIYW5kbGVyIH0gZnJvbSBcIi4vbG9naW4vb2lkYy9pbmNvbWluZ1JlZGlyZWN0SGFuZGxlci9FcnJvck9pZGNIYW5kbGVyXCI7XG5pbXBvcnQgVG9rZW5SZWZyZXNoZXIgZnJvbSBcIi4vbG9naW4vb2lkYy9yZWZyZXNoL1Rva2VuUmVmcmVzaGVyXCI7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBkZXBlbmRlbmNpZXNcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV4dGVybmFsIEFQSSBpbiBhbiB1cGNvbWluZyByZWxlYXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50QXV0aGVudGljYXRpb25XaXRoRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llczoge1xuICBzZWN1cmVTdG9yYWdlPzogSVN0b3JhZ2U7XG4gIGluc2VjdXJlU3RvcmFnZT86IElTdG9yYWdlO1xufSk6IENsaWVudEF1dGhlbnRpY2F0aW9uIHtcbiAgY29uc3QgaW5NZW1vcnlTdG9yYWdlID0gbmV3IEluTWVtb3J5U3RvcmFnZSgpO1xuICBjb25zdCBzZWN1cmVTdG9yYWdlID0gZGVwZW5kZW5jaWVzLnNlY3VyZVN0b3JhZ2UgfHwgaW5NZW1vcnlTdG9yYWdlO1xuICBjb25zdCBpbnNlY3VyZVN0b3JhZ2UgPSBkZXBlbmRlbmNpZXMuaW5zZWN1cmVTdG9yYWdlIHx8IG5ldyBCcm93c2VyU3RvcmFnZSgpO1xuXG4gIGNvbnN0IHN0b3JhZ2VVdGlsaXR5ID0gbmV3IFN0b3JhZ2VVdGlsaXR5QnJvd3NlcihcbiAgICBzZWN1cmVTdG9yYWdlLFxuICAgIGluc2VjdXJlU3RvcmFnZVxuICApO1xuXG4gIGNvbnN0IGlzc3VlckNvbmZpZ0ZldGNoZXIgPSBuZXcgSXNzdWVyQ29uZmlnRmV0Y2hlcihzdG9yYWdlVXRpbGl0eSk7XG4gIGNvbnN0IGNsaWVudFJlZ2lzdHJhciA9IG5ldyBDbGllbnRSZWdpc3RyYXIoc3RvcmFnZVV0aWxpdHkpO1xuXG4gIGNvbnN0IHNlc3Npb25JbmZvTWFuYWdlciA9IG5ldyBTZXNzaW9uSW5mb01hbmFnZXIoc3RvcmFnZVV0aWxpdHkpO1xuXG4gIGNvbnN0IHRva2VuUmVmcmVzaGVyID0gbmV3IFRva2VuUmVmcmVzaGVyKFxuICAgIHN0b3JhZ2VVdGlsaXR5LFxuICAgIGlzc3VlckNvbmZpZ0ZldGNoZXIsXG4gICAgY2xpZW50UmVnaXN0cmFyXG4gICk7XG5cbiAgLy8gbWFrZSBuZXcgaGFuZGxlciBmb3IgcmVkaXJlY3QgYW5kIGxvZ2luXG4gIGNvbnN0IGxvZ2luSGFuZGxlciA9IG5ldyBPaWRjTG9naW5IYW5kbGVyKFxuICAgIHN0b3JhZ2VVdGlsaXR5LFxuICAgIG5ldyBBdXRob3JpemF0aW9uQ29kZVdpdGhQa2NlT2lkY0hhbmRsZXIoc3RvcmFnZVV0aWxpdHksIG5ldyBSZWRpcmVjdG9yKCkpLFxuICAgIGlzc3VlckNvbmZpZ0ZldGNoZXIsXG4gICAgY2xpZW50UmVnaXN0cmFyXG4gICk7XG5cbiAgY29uc3QgcmVkaXJlY3RIYW5kbGVyID0gbmV3IEFnZ3JlZ2F0ZVJlZGlyZWN0SGFuZGxlcihbXG4gICAgbmV3IEVycm9yT2lkY0hhbmRsZXIoKSxcbiAgICBuZXcgQXV0aENvZGVSZWRpcmVjdEhhbmRsZXIoXG4gICAgICBzdG9yYWdlVXRpbGl0eSxcbiAgICAgIHNlc3Npb25JbmZvTWFuYWdlcixcbiAgICAgIGlzc3VlckNvbmZpZ0ZldGNoZXIsXG4gICAgICBjbGllbnRSZWdpc3RyYXIsXG4gICAgICB0b2tlblJlZnJlc2hlclxuICAgICksXG4gICAgLy8gVGhpcyBjYXRjaC1hbGwgY2xhc3Mgd2lsbCBhbHdheXMgYmUgYWJsZSB0byBoYW5kbGUgdGhlXG4gICAgLy8gcmVkaXJlY3QgSVJJLCBzbyBpdCBtdXN0IGJlIHJlZ2lzdGVyZWQgbGFzdC5cbiAgICBuZXcgRmFsbGJhY2tSZWRpcmVjdEhhbmRsZXIoKSxcbiAgXSk7XG5cbiAgcmV0dXJuIG5ldyBDbGllbnRBdXRoZW50aWNhdGlvbihcbiAgICBsb2dpbkhhbmRsZXIsXG4gICAgcmVkaXJlY3RIYW5kbGVyLFxuICAgIG5ldyBHZW5lcmFsTG9nb3V0SGFuZGxlcihzZXNzaW9uSW5mb01hbmFnZXIpLFxuICAgIHNlc3Npb25JbmZvTWFuYWdlcixcbiAgICBpc3N1ZXJDb25maWdGZXRjaGVyXG4gICk7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG5pbXBvcnQgKiBhcyBzb2xpZENsaWVudEF1dGhlbnRpY2F0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHNvbGlkQ2xpZW50QXV0aGVudGljYXRpb247XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG5leHBvcnQgeyBTZXNzaW9uLCBJU2Vzc2lvbk9wdGlvbnMgfSBmcm9tIFwiLi9TZXNzaW9uXCI7XG5cbmV4cG9ydCB7IGdldENsaWVudEF1dGhlbnRpY2F0aW9uV2l0aERlcGVuZGVuY2llcyB9IGZyb20gXCIuL2RlcGVuZGVuY2llc1wiO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9kZWZhdWx0U2Vzc2lvblwiO1xuXG4vLyBSZS1leHBvcnQgb2YgdHlwZXMgZGVmaW5lZCBpbiB0aGUgY29yZSBtb2R1bGUgYW5kIHByb2R1Y2VkL2NvbnN1bWVkIGJ5IG91ciBBUElcblxuZXhwb3J0IHtcbiAgSUxvZ2luSW5wdXRPcHRpb25zLFxuICBJU2Vzc2lvbkluZm8sXG4gIElTdG9yYWdlLFxuICBOb3RJbXBsZW1lbnRlZEVycm9yLFxuICBDb25maWd1cmF0aW9uRXJyb3IsXG4gIEluTWVtb3J5U3RvcmFnZSxcbiAgRVZFTlRTLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIyIElucnVwdCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxuLy8gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4vLyBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlXG4vLyBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbi8vIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbi8vIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy9cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciBzZWxlY3RpbmcgdGhlIGNvcnJlY3QgT2lkY0hhbmRsZXIgdG8gaGFuZGxlIHRoZSBwcm92aWRlZCBPSURDIE9wdGlvbnNcbiAqL1xuaW1wb3J0IHtcbiAgSUluY29taW5nUmVkaXJlY3RIYW5kbGVyLFxuICBBZ2dyZWdhdGVIYW5kbGVyLFxuICBJbmNvbWluZ1JlZGlyZWN0SW5wdXQsXG4gIEluY29taW5nUmVkaXJlY3RSZXN1bHQsXG59IGZyb20gXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZ2dyZWdhdGVSZWRpcmVjdEhhbmRsZXJcbiAgZXh0ZW5kcyBBZ2dyZWdhdGVIYW5kbGVyPEluY29taW5nUmVkaXJlY3RJbnB1dCwgSW5jb21pbmdSZWRpcmVjdFJlc3VsdD5cbiAgaW1wbGVtZW50cyBJSW5jb21pbmdSZWRpcmVjdEhhbmRsZXJcbntcbiAgY29uc3RydWN0b3IocmVkaXJlY3RIYW5kbGVyczogSUluY29taW5nUmVkaXJlY3RIYW5kbGVyW10pIHtcbiAgICBzdXBlcihyZWRpcmVjdEhhbmRsZXJzKTtcbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIyIElucnVwdCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxuLy8gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4vLyBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlXG4vLyBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbi8vIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbi8vIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy9cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG5pbXBvcnQge1xuICBJU3RvcmFnZVV0aWxpdHksXG4gIElDbGllbnRSZWdpc3RyYXIsXG4gIElJc3N1ZXJDb25maWcsXG4gIElDbGllbnQsXG4gIElDbGllbnRSZWdpc3RyYXJPcHRpb25zLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuaW1wb3J0IHsgcmVnaXN0ZXJDbGllbnQgfSBmcm9tIFwiQGlucnVwdC9vaWRjLWNsaWVudC1leHRcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWVudFJlZ2lzdHJhciBpbXBsZW1lbnRzIElDbGllbnRSZWdpc3RyYXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2VVdGlsaXR5OiBJU3RvcmFnZVV0aWxpdHkpIHt9XG5cbiAgYXN5bmMgZ2V0Q2xpZW50KFxuICAgIG9wdGlvbnM6IElDbGllbnRSZWdpc3RyYXJPcHRpb25zLFxuICAgIGlzc3VlckNvbmZpZzogSUlzc3VlckNvbmZpZ1xuICApOiBQcm9taXNlPElDbGllbnQ+IHtcbiAgICAvLyBJZiBjbGllbnQgc2VjcmV0IGFuZC9vciBjbGllbnQgaWQgYXJlIHN0b3JlZCBpbiBzdG9yYWdlLCB1c2UgdGhvc2UuXG4gICAgY29uc3QgW1xuICAgICAgc3RvcmVkQ2xpZW50SWQsXG4gICAgICBzdG9yZWRDbGllbnRTZWNyZXQsXG4gICAgICAvLyBzdG9yZWRDbGllbnROYW1lLFxuICAgIF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIFwiY2xpZW50SWRcIiwge1xuICAgICAgICBzZWN1cmU6IGZhbHNlLFxuICAgICAgfSksXG4gICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIFwiY2xpZW50U2VjcmV0XCIsIHtcbiAgICAgICAgc2VjdXJlOiBmYWxzZSxcbiAgICAgIH0pLFxuICAgICAgLy8gdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCBcImNsaWVudE5hbWVcIiwge1xuICAgICAgLy8gICAvLyBGSVhNRTogZmlndXJlIG91dCBob3cgdG8gcGVyc2lzdCBzZWN1cmUgc3RvcmFnZSBhdCByZWxvYWRcbiAgICAgIC8vICAgc2VjdXJlOiBmYWxzZSxcbiAgICAgIC8vIH0pLFxuICAgIF0pO1xuICAgIGlmIChzdG9yZWRDbGllbnRJZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2xpZW50SWQ6IHN0b3JlZENsaWVudElkLFxuICAgICAgICBjbGllbnRTZWNyZXQ6IHN0b3JlZENsaWVudFNlY3JldCxcbiAgICAgICAgY2xpZW50VHlwZTogXCJkeW5hbWljXCIsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZWdpc3RlcmVkQ2xpZW50ID0gYXdhaXQgcmVnaXN0ZXJDbGllbnQob3B0aW9ucywgaXNzdWVyQ29uZmlnKTtcbiAgICAgIC8vIFNhdmUgaW5mb1xuICAgICAgY29uc3QgaW5mb1RvU2F2ZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICAgY2xpZW50SWQ6IHJlZ2lzdGVyZWRDbGllbnQuY2xpZW50SWQsXG4gICAgICB9O1xuICAgICAgaWYgKHJlZ2lzdGVyZWRDbGllbnQuY2xpZW50U2VjcmV0KSB7XG4gICAgICAgIGluZm9Ub1NhdmUuY2xpZW50U2VjcmV0ID0gcmVnaXN0ZXJlZENsaWVudC5jbGllbnRTZWNyZXQ7XG4gICAgICB9XG4gICAgICBpZiAocmVnaXN0ZXJlZENsaWVudC5pZFRva2VuU2lnbmVkUmVzcG9uc2VBbGcpIHtcbiAgICAgICAgaW5mb1RvU2F2ZS5pZFRva2VuU2lnbmVkUmVzcG9uc2VBbGcgPVxuICAgICAgICAgIHJlZ2lzdGVyZWRDbGllbnQuaWRUb2tlblNpZ25lZFJlc3BvbnNlQWxnO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCBpbmZvVG9TYXZlLCB7XG4gICAgICAgIC8vIEZJWE1FOiBmaWd1cmUgb3V0IGhvdyB0byBwZXJzaXN0IHNlY3VyZSBzdG9yYWdlIGF0IHJlbG9hZFxuICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSBjbGllbnQgaW5mbyBjYW5ub3QgYmUgcmV0cmlldmVkIGZyb20gc3RvcmFnZSwgYW5kXG4gICAgICAgIC8vIHRoZSBsaWIgdHJpZXMgdG8gcmUtcmVnaXN0ZXIgdGhlIGNsaWVudCBvbiBlYWNoIGZldGNoXG4gICAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZWdpc3RlcmVkQ2xpZW50O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENsaWVudCByZWdpc3RyYXRpb24gZmFpbGVkOiBbJHtlcnJvcn1dYCk7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbi8qKlxuICogUmVzcG9uc2libGUgZm9yIGZldGNoaW5nIGFuIElEUCBjb25maWd1cmF0aW9uXG4gKi9cbmltcG9ydCB7XG4gIElJc3N1ZXJDb25maWcsXG4gIElJc3N1ZXJDb25maWdGZXRjaGVyLFxuICBJU3RvcmFnZVV0aWxpdHksXG4gIENvbmZpZ3VyYXRpb25FcnJvcixcbn0gZnJvbSBcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIjtcbmltcG9ydCB7IGZldGNoIH0gZnJvbSBcIkBpbnJ1cHQvdW5pdmVyc2FsLWZldGNoXCI7XG5cbmV4cG9ydCBjb25zdCBXRUxMX0tOT1dOX09QRU5JRF9DT05GSUcgPSBcIi53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuY29uc3QgaXNzdWVyQ29uZmlnS2V5TWFwOiBSZWNvcmQ8XG4gIHN0cmluZyxcbiAgeyB0b0tleTogc3RyaW5nOyBjb252ZXJ0VG9Vcmw/OiBib29sZWFuIH1cbj4gPSB7XG4gIGlzc3Vlcjoge1xuICAgIHRvS2V5OiBcImlzc3VlclwiLFxuICAgIGNvbnZlcnRUb1VybDogdHJ1ZSxcbiAgfSxcbiAgYXV0aG9yaXphdGlvbl9lbmRwb2ludDoge1xuICAgIHRvS2V5OiBcImF1dGhvcml6YXRpb25FbmRwb2ludFwiLFxuICAgIGNvbnZlcnRUb1VybDogdHJ1ZSxcbiAgfSxcbiAgdG9rZW5fZW5kcG9pbnQ6IHtcbiAgICB0b0tleTogXCJ0b2tlbkVuZHBvaW50XCIsXG4gICAgY29udmVydFRvVXJsOiB0cnVlLFxuICB9LFxuICB1c2VyaW5mb19lbmRwb2ludDoge1xuICAgIHRvS2V5OiBcInVzZXJpbmZvRW5kcG9pbnRcIixcbiAgICBjb252ZXJ0VG9Vcmw6IHRydWUsXG4gIH0sXG4gIGp3a3NfdXJpOiB7XG4gICAgdG9LZXk6IFwiandrc1VyaVwiLFxuICAgIGNvbnZlcnRUb1VybDogdHJ1ZSxcbiAgfSxcbiAgcmVnaXN0cmF0aW9uX2VuZHBvaW50OiB7XG4gICAgdG9LZXk6IFwicmVnaXN0cmF0aW9uRW5kcG9pbnRcIixcbiAgICBjb252ZXJ0VG9Vcmw6IHRydWUsXG4gIH0sXG4gIHNjb3Blc19zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwic2NvcGVzU3VwcG9ydGVkXCIgfSxcbiAgcmVzcG9uc2VfdHlwZXNfc3VwcG9ydGVkOiB7IHRvS2V5OiBcInJlc3BvbnNlVHlwZXNTdXBwb3J0ZWRcIiB9LFxuICByZXNwb25zZV9tb2Rlc19zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwicmVzcG9uc2VNb2Rlc1N1cHBvcnRlZFwiIH0sXG4gIGdyYW50X3R5cGVzX3N1cHBvcnRlZDogeyB0b0tleTogXCJncmFudFR5cGVzU3VwcG9ydGVkXCIgfSxcbiAgYWNyX3ZhbHVlc19zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwiYWNyVmFsdWVzU3VwcG9ydGVkXCIgfSxcbiAgc3ViamVjdF90eXBlc19zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwic3ViamVjdFR5cGVzU3VwcG9ydGVkXCIgfSxcbiAgaWRfdG9rZW5fc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZDoge1xuICAgIHRvS2V5OiBcImlkVG9rZW5TaWduaW5nQWxnVmFsdWVzU3VwcG9ydGVkXCIsXG4gIH0sXG4gIGlkX3Rva2VuX2VuY3J5cHRpb25fYWxnX3ZhbHVlc19zdXBwb3J0ZWQ6IHtcbiAgICB0b0tleTogXCJpZFRva2VuRW5jcnlwdGlvbkFsZ1ZhbHVlc1N1cHBvcnRlZFwiLFxuICB9LFxuICBpZF90b2tlbl9lbmNyeXB0aW9uX2VuY192YWx1ZXNfc3VwcG9ydGVkOiB7XG4gICAgdG9LZXk6IFwiaWRUb2tlbkVuY3J5cHRpb25FbmNWYWx1ZXNTdXBwb3J0ZWRcIixcbiAgfSxcbiAgdXNlcmluZm9fc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZDoge1xuICAgIHRvS2V5OiBcInVzZXJpbmZvU2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnRlZFwiLFxuICB9LFxuICB1c2VyaW5mb19lbmNyeXB0aW9uX2FsZ192YWx1ZXNfc3VwcG9ydGVkOiB7XG4gICAgdG9LZXk6IFwidXNlcmluZm9FbmNyeXB0aW9uQWxnVmFsdWVzU3VwcG9ydGVkXCIsXG4gIH0sXG4gIHVzZXJpbmZvX2VuY3J5cHRpb25fZW5jX3ZhbHVlc19zdXBwb3J0ZWQ6IHtcbiAgICB0b0tleTogXCJ1c2VyaW5mb0VuY3J5cHRpb25FbmNWYWx1ZXNTdXBwb3J0ZWRcIixcbiAgfSxcbiAgcmVxdWVzdF9vYmplY3Rfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZDoge1xuICAgIHRvS2V5OiBcInJlcXVlc3RPYmplY3RTaWduaW5nQWxnVmFsdWVzU3VwcG9ydGVkXCIsXG4gIH0sXG4gIHJlcXVlc3Rfb2JqZWN0X2VuY3J5cHRpb25fYWxnX3ZhbHVlc19zdXBwb3J0ZWQ6IHtcbiAgICB0b0tleTogXCJyZXF1ZXN0T2JqZWN0RW5jcnlwdGlvbkFsZ1ZhbHVlc1N1cHBvcnRlZFwiLFxuICB9LFxuICByZXF1ZXN0X29iamVjdF9lbmNyeXB0aW9uX2VuY192YWx1ZXNfc3VwcG9ydGVkOiB7XG4gICAgdG9LZXk6IFwicmVxdWVzdE9iamVjdEVuY3J5cHRpb25FbmNWYWx1ZXNTdXBwb3J0ZWRcIixcbiAgfSxcbiAgdG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2RzX3N1cHBvcnRlZDoge1xuICAgIHRvS2V5OiBcInRva2VuRW5kcG9pbnRBdXRoTWV0aG9kc1N1cHBvcnRlZFwiLFxuICB9LFxuICB0b2tlbl9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQ6IHtcbiAgICB0b0tleTogXCJ0b2tlbkVuZHBvaW50QXV0aFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0ZWRcIixcbiAgfSxcbiAgZGlzcGxheV92YWx1ZXNfc3VwcG9ydGVkOiB7IHRvS2V5OiBcImRpc3BsYXlWYWx1ZXNTdXBwb3J0ZWRcIiB9LFxuICBjbGFpbV90eXBlc19zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwiY2xhaW1UeXBlc1N1cHBvcnRlZFwiIH0sXG4gIGNsYWltc19zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwiY2xhaW1zU3VwcG9ydGVkXCIgfSxcbiAgc2VydmljZV9kb2N1bWVudGF0aW9uOiB7IHRvS2V5OiBcInNlcnZpY2VEb2N1bWVudGF0aW9uXCIgfSxcbiAgY2xhaW1zX2xvY2FsZXNfc3VwcG9ydGVkOiB7IHRvS2V5OiBcImNsYWltc0xvY2FsZXNTdXBwb3J0ZWRcIiB9LFxuICB1aV9sb2NhbGVzX3N1cHBvcnRlZDogeyB0b0tleTogXCJ1aUxvY2FsZXNTdXBwb3J0ZWRcIiB9LFxuICBjbGFpbXNfcGFyYW1ldGVyX3N1cHBvcnRlZDogeyB0b0tleTogXCJjbGFpbXNQYXJhbWV0ZXJTdXBwb3J0ZWRcIiB9LFxuICByZXF1ZXN0X3BhcmFtZXRlcl9zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwicmVxdWVzdFBhcmFtZXRlclN1cHBvcnRlZFwiIH0sXG4gIHJlcXVlc3RfdXJpX3BhcmFtZXRlcl9zdXBwb3J0ZWQ6IHsgdG9LZXk6IFwicmVxdWVzdFVyaVBhcmFtZXRlclN1cHBvcnRlZFwiIH0sXG4gIHJlcXVpcmVfcmVxdWVzdF91cmlfcmVnaXN0cmF0aW9uOiB7IHRvS2V5OiBcInJlcXVpcmVSZXF1ZXN0VXJpUmVnaXN0cmF0aW9uXCIgfSxcbiAgb3BfcG9saWN5X3VyaToge1xuICAgIHRvS2V5OiBcIm9wUG9saWN5VXJpXCIsXG4gICAgY29udmVydFRvVXJsOiB0cnVlLFxuICB9LFxuICBvcF90b3NfdXJpOiB7XG4gICAgdG9LZXk6IFwib3BUb3NVcmlcIixcbiAgICBjb252ZXJ0VG9Vcmw6IHRydWUsXG4gIH0sXG59O1xuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbmZpZyhcbiAgY29uZmlnOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT5cbik6IElJc3N1ZXJDb25maWcge1xuICBjb25zdCBwYXJzZWRDb25maWc6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdPiA9IHt9O1xuICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChpc3N1ZXJDb25maWdLZXlNYXBba2V5XSkge1xuICAgICAgLy8gVE9ETzogUE1jQjU1OiBWYWxpZGF0ZSBVUkwgaWYgXCJpc3N1ZXJDb25maWdLZXlNYXBba2V5XS5jb252ZXJ0VG9VcmxcIlxuICAgICAgLy8gIGlmIChpc3N1ZXJDb25maWdLZXlNYXBba2V5XS5jb252ZXJ0VG9VcmwpIHtcbiAgICAgIC8vICAgdmFsaWRhdGVVcmwoY29uZmlnW2tleV0pO1xuICAgICAgLy8gIH1cbiAgICAgIHBhcnNlZENvbmZpZ1tpc3N1ZXJDb25maWdLZXlNYXBba2V5XS50b0tleV0gPSBjb25maWdba2V5XTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIUFycmF5LmlzQXJyYXkocGFyc2VkQ29uZmlnLnNjb3Blc1N1cHBvcnRlZCkpIHtcbiAgICBwYXJzZWRDb25maWcuc2NvcGVzU3VwcG9ydGVkID0gW1wib3BlbmlkXCJdO1xuICB9XG4gIHJldHVybiBwYXJzZWRDb25maWcgYXMgdW5rbm93biBhcyBJSXNzdWVyQ29uZmlnO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSXNzdWVyQ29uZmlnRmV0Y2hlciBpbXBsZW1lbnRzIElJc3N1ZXJDb25maWdGZXRjaGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlVXRpbGl0eTogSVN0b3JhZ2VVdGlsaXR5KSB7fVxuXG4gIC8vIFRoaXMgbWV0aG9kIG5lZWRzIG5vIHN0YXRlIChzbyBjYW4gYmUgc3RhdGljKSwgYW5kIGNhbiBiZSBleHBvc2VkIHRvIGFsbG93XG4gIC8vIGNhbGxlcnMgdG8ga25vdyB3aGVyZSB0aGlzIGltcGxlbWVudGF0aW9uIHB1dHMgc3RhdGUgaXQgbmVlZHMuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TG9jYWxTdG9yYWdlS2V5KGlzc3Vlcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGlzc3VlckNvbmZpZzoke2lzc3Vlcn1gO1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hDb25maWcoaXNzdWVyOiBzdHJpbmcpOiBQcm9taXNlPElJc3N1ZXJDb25maWc+IHtcbiAgICBsZXQgaXNzdWVyQ29uZmlnOiBJSXNzdWVyQ29uZmlnO1xuXG4gICAgY29uc3Qgb3BlbklkQ29uZmlnVXJsID0gbmV3IFVSTChcbiAgICAgIFdFTExfS05PV05fT1BFTklEX0NPTkZJRyxcbiAgICAgIC8vIE1ha2Ugc3VyZSB0byBhcHBlbmQgYSBzbGFzaCBhdCBpc3N1ZXIgVVJMLCBzbyB0aGF0IHRoZSAud2VsbC1rbm93biBVUkxcbiAgICAgIC8vIGluY2x1ZGVzIHRoZSBmdWxsIGlzc3VlciBwYXRoLiBTZWUgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWRpc2NvdmVyeS0xXzAuaHRtbCNQcm92aWRlckNvbmZpZy5cbiAgICAgIGlzc3Vlci5lbmRzV2l0aChcIi9cIikgPyBpc3N1ZXIgOiBgJHtpc3N1ZXJ9L2BcbiAgICApLmhyZWY7XG4gICAgY29uc3QgaXNzdWVyQ29uZmlnUmVxdWVzdEJvZHkgPSBhd2FpdCBmZXRjaChvcGVuSWRDb25maWdVcmwpO1xuICAgIC8vIENoZWNrIHRoZSB2YWxpZGl0eSBvZiB0aGUgZmV0Y2hlZCBjb25maWdcbiAgICB0cnkge1xuICAgICAgaXNzdWVyQ29uZmlnID0gcHJvY2Vzc0NvbmZpZyhhd2FpdCBpc3N1ZXJDb25maWdSZXF1ZXN0Qm9keS5qc29uKCkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25FcnJvcihcbiAgICAgICAgYFske2lzc3Vlci50b1N0cmluZygpfV0gaGFzIGFuIGludmFsaWQgY29uZmlndXJhdGlvbjogJHtcbiAgICAgICAgICAoZXJyIGFzIHsgbWVzc2FnZTogc3RyaW5nIH0pLm1lc3NhZ2VcbiAgICAgICAgfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHN0b3JlIHdpdGggZmV0Y2hlZCBjb25maWdcbiAgICBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LnNldChcbiAgICAgIElzc3VlckNvbmZpZ0ZldGNoZXIuZ2V0TG9jYWxTdG9yYWdlS2V5KGlzc3VlciksXG4gICAgICBKU09OLnN0cmluZ2lmeShpc3N1ZXJDb25maWcpXG4gICAgKTtcblxuICAgIHJldHVybiBpc3N1ZXJDb25maWc7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuLyoqXG4gKiBIYW5kbGVzIENvbW1vbiBPaWRjIGxvZ2luIGZ1bmN0aW9ucyAoTGlrZSBmZXRjaGluZyB0aGUgY29uZmlndXJhdGlvbilcbiAqL1xuXG5pbXBvcnQge1xuICBJQ2xpZW50UmVnaXN0cmFyLFxuICBJSXNzdWVyQ29uZmlnLFxuICBJSXNzdWVyQ29uZmlnRmV0Y2hlcixcbiAgSUxvZ2luT3B0aW9ucyxcbiAgSUxvZ2luSGFuZGxlcixcbiAgSU9pZGNIYW5kbGVyLFxuICBJT2lkY09wdGlvbnMsXG4gIElTdG9yYWdlVXRpbGl0eSxcbiAgQ29uZmlndXJhdGlvbkVycm9yLFxuICBMb2dpblJlc3VsdCxcbiAgaGFuZGxlUmVnaXN0cmF0aW9uLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuXG5mdW5jdGlvbiBoYXNJc3N1ZXIoXG4gIG9wdGlvbnM6IElMb2dpbk9wdGlvbnNcbik6IG9wdGlvbnMgaXMgSUxvZ2luT3B0aW9ucyAmIHsgb2lkY0lzc3Vlcjogc3RyaW5nIH0ge1xuICByZXR1cm4gdHlwZW9mIG9wdGlvbnMub2lkY0lzc3VlciA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZnVuY3Rpb24gaGFzUmVkaXJlY3RVcmwoXG4gIG9wdGlvbnM6IElMb2dpbk9wdGlvbnNcbik6IG9wdGlvbnMgaXMgSUxvZ2luT3B0aW9ucyAmIHsgcmVkaXJlY3RVcmw6IHN0cmluZyB9IHtcbiAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLnJlZGlyZWN0VXJsID09PSBcInN0cmluZ1wiO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2lkY0xvZ2luSGFuZGxlciBpbXBsZW1lbnRzIElMb2dpbkhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHN0b3JhZ2VVdGlsaXR5OiBJU3RvcmFnZVV0aWxpdHksXG4gICAgcHJpdmF0ZSBvaWRjSGFuZGxlcjogSU9pZGNIYW5kbGVyLFxuICAgIHByaXZhdGUgaXNzdWVyQ29uZmlnRmV0Y2hlcjogSUlzc3VlckNvbmZpZ0ZldGNoZXIsXG4gICAgcHJpdmF0ZSBjbGllbnRSZWdpc3RyYXI6IElDbGllbnRSZWdpc3RyYXJcbiAgKSB7fVxuXG4gIGFzeW5jIGNhbkhhbmRsZShvcHRpb25zOiBJTG9naW5PcHRpb25zKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIGhhc0lzc3VlcihvcHRpb25zKSAmJiBoYXNSZWRpcmVjdFVybChvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZShvcHRpb25zOiBJTG9naW5PcHRpb25zKTogUHJvbWlzZTxMb2dpblJlc3VsdD4ge1xuICAgIGlmICghaGFzSXNzdWVyKG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvbkVycm9yKFxuICAgICAgICBgT2lkY0xvZ2luSGFuZGxlciByZXF1aXJlcyBhbiBPSURDIGlzc3VlcjogbWlzc2luZyBwcm9wZXJ0eSAnb2lkY0lzc3VlcicgaW4gJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICl9YFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFoYXNSZWRpcmVjdFVybChvcHRpb25zKSkge1xuICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25FcnJvcihcbiAgICAgICAgYE9pZGNMb2dpbkhhbmRsZXIgcmVxdWlyZXMgYSByZWRpcmVjdCBVUkw6IG1pc3NpbmcgcHJvcGVydHkgJ3JlZGlyZWN0VXJsJyBpbiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKX1gXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEZldGNoIGlzc3VlciBjb25maWcuXG4gICAgY29uc3QgaXNzdWVyQ29uZmlnOiBJSXNzdWVyQ29uZmlnID1cbiAgICAgIGF3YWl0IHRoaXMuaXNzdWVyQ29uZmlnRmV0Y2hlci5mZXRjaENvbmZpZyhvcHRpb25zLm9pZGNJc3N1ZXIpO1xuXG4gICAgY29uc3QgY2xpZW50UmVnaXN0cmF0aW9uID0gYXdhaXQgaGFuZGxlUmVnaXN0cmF0aW9uKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIGlzc3VlckNvbmZpZyxcbiAgICAgIHRoaXMuc3RvcmFnZVV0aWxpdHksXG4gICAgICB0aGlzLmNsaWVudFJlZ2lzdHJhclxuICAgICk7XG5cbiAgICAvLyBDb25zdHJ1Y3QgT0lEQyBPcHRpb25zXG4gICAgY29uc3QgT2lkY09wdGlvbnM6IElPaWRjT3B0aW9ucyA9IHtcbiAgICAgIC8vIE5vdGUgdGhhdCBoZXJlLCB0aGUgaXNzdWVyIGlzIG5vdCB0aGUgb25lIGZyb20gdGhlIHJlY2VpdmVkIG9wdGlvbnMsIGJ1dFxuICAgICAgLy8gZnJvbSB0aGUgaXNzdWVyJ3MgY29uZmlnLiBUaGlzIGVuZm9yY2VzIHRoZSBjYW5vbmljYWwgVVJMIGlzIHVzZWQgYW5kIHN0b3JlZCxcbiAgICAgIC8vIHdoaWNoIGlzIGFsc28gdGhlIG9uZSBwcmVzZW50IGluIHRoZSBJRCB0b2tlbiwgc28gc3RvcmluZyBhIHRlY2huaWNhbGx5XG4gICAgICAvLyB2YWxpZCwgYnV0IGRpZmZlcmVudCBpc3N1ZXIgVVJMIChlLmcuIHVzaW5nIGEgdHJhaWxpbmcgc2xhc2ggb3Igbm90KSBub3dcbiAgICAgIC8vIGNvdWxkIHByZXZlbnQgZnJvbSB2YWxpZGF0aW5nIHRoZSBJRCB0b2tlbiBsYXRlci5cbiAgICAgIGlzc3VlcjogaXNzdWVyQ29uZmlnLmlzc3VlcixcbiAgICAgIC8vIFRPRE86IGRpZmZlcmVudGlhdGUgaWYgRFBvUCBzaG91bGQgYmUgdHJ1ZVxuICAgICAgZHBvcDogb3B0aW9ucy50b2tlblR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJkcG9wXCIsXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaXNzdWVyQ29uZmlndXJhdGlvbjogaXNzdWVyQ29uZmlnLFxuICAgICAgY2xpZW50OiBjbGllbnRSZWdpc3RyYXRpb24sXG4gICAgfTtcblxuICAgIC8vIENhbGwgcHJvcGVyIE9JREMgSGFuZGxlclxuICAgIHJldHVybiB0aGlzLm9pZGNIYW5kbGVyLmhhbmRsZShPaWRjT3B0aW9ucyk7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHtcbiAgSVJlZGlyZWN0b3IsXG4gIElSZWRpcmVjdG9yT3B0aW9ucyxcbn0gZnJvbSBcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZGlyZWN0b3IgaW1wbGVtZW50cyBJUmVkaXJlY3RvciB7XG4gIHJlZGlyZWN0KHJlZGlyZWN0VXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBJUmVkaXJlY3Rvck9wdGlvbnMpOiB2b2lkIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmhhbmRsZVJlZGlyZWN0KSB7XG4gICAgICBvcHRpb25zLmhhbmRsZVJlZGlyZWN0KHJlZGlyZWN0VXJsKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWRpcmVjdEJ5UmVwbGFjaW5nU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgXCJcIiwgcmVkaXJlY3RVcmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlZGlyZWN0VXJsO1xuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIyIElucnVwdCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxuLy8gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4vLyBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlXG4vLyBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbi8vIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbi8vIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy9cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuLy8gRklYTUU6IFRoZSBmb2xsb3dpbmcgZG9lc24ndCB3b3JrIGluIHRoZSBicm93c2VyLCBpdCByZXN1bHRzIGluIGFsbCB0aGUgZmV0Y2hlc1xuLy8gYmVpbmcgdW5hdXRoZW50aWNhdGVkLiBUaGlzIHNob3VsZCBiZSBsb29rZWQgaW50byB3aGVuIG1pZ3JhdGluZyB0byB1bml2ZXJzYWwtZmV0Y2guXG4vLyBpbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJjcm9zcy1mZXRjaFwiO1xuXG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJAaW5ydXB0L3VuaXZlcnNhbC1mZXRjaFwiO1xuXG5pbXBvcnQge1xuICBidWlsZEF1dGhlbnRpY2F0ZWRGZXRjaCxcbiAgSUNsaWVudCxcbiAgSUNsaWVudFJlZ2lzdHJhcixcbiAgSUlzc3VlckNvbmZpZ0ZldGNoZXIsXG4gIElJbmNvbWluZ1JlZGlyZWN0SGFuZGxlcixcbiAgSVNlc3Npb25JbmZvLFxuICBJU2Vzc2lvbkluZm9NYW5hZ2VyLFxuICBJU3RvcmFnZVV0aWxpdHksXG4gIElUb2tlblJlZnJlc2hlcixcbiAgbG9hZE9pZGNDb250ZXh0RnJvbVN0b3JhZ2UsXG4gIFJlZnJlc2hPcHRpb25zLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuaW1wb3J0IHtcbiAgZ2V0RHBvcFRva2VuLFxuICBnZXRCZWFyZXJUb2tlbixcbiAgQ29kZUV4Y2hhbmdlUmVzdWx0LFxufSBmcm9tIFwiQGlucnVwdC9vaWRjLWNsaWVudC1leHRcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoQ29kZVJlZGlyZWN0SGFuZGxlciBpbXBsZW1lbnRzIElJbmNvbWluZ1JlZGlyZWN0SGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RvcmFnZVV0aWxpdHk6IElTdG9yYWdlVXRpbGl0eSxcbiAgICBwcml2YXRlIHNlc3Npb25JbmZvTWFuYWdlcjogSVNlc3Npb25JbmZvTWFuYWdlcixcbiAgICBwcml2YXRlIGlzc3VlckNvbmZpZ0ZldGNoZXI6IElJc3N1ZXJDb25maWdGZXRjaGVyLFxuICAgIHByaXZhdGUgY2xpZW50UmVnaXN0cmFyOiBJQ2xpZW50UmVnaXN0cmFyLFxuICAgIHByaXZhdGUgdG9rZXJSZWZyZXNoZXI6IElUb2tlblJlZnJlc2hlclxuICApIHt9XG5cbiAgYXN5bmMgY2FuSGFuZGxlKHJlZGlyZWN0VXJsOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbXlVcmwgPSBuZXcgVVJMKHJlZGlyZWN0VXJsKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIG15VXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJjb2RlXCIpICE9PSBudWxsICYmXG4gICAgICAgIG15VXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJzdGF0ZVwiKSAhPT0gbnVsbFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBbJHtyZWRpcmVjdFVybH1dIGlzIG5vdCBhIHZhbGlkIFVSTCwgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGEgcmVkaXJlY3QgVVJMOiAke2V9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGUoXG4gICAgcmVkaXJlY3RVcmw6IHN0cmluZyxcbiAgICBldmVudEVtaXR0ZXI/OiBFdmVudEVtaXR0ZXJcbiAgKTogUHJvbWlzZTxJU2Vzc2lvbkluZm8gJiB7IGZldGNoOiB0eXBlb2YgZmV0Y2ggfT4ge1xuICAgIGlmICghKGF3YWl0IHRoaXMuY2FuSGFuZGxlKHJlZGlyZWN0VXJsKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEF1dGhDb2RlUmVkaXJlY3RIYW5kbGVyIGNhbm5vdCBoYW5kbGUgWyR7cmVkaXJlY3RVcmx9XTogaXQgaXMgbWlzc2luZyBvbmUgb2YgW2NvZGUsIHN0YXRlXS5gXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVkaXJlY3RVcmwpO1xuICAgIGNvbnN0IG9hdXRoU3RhdGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldChcInN0YXRlXCIpIGFzIHN0cmluZztcblxuICAgIGNvbnN0IHN0b3JlZFNlc3Npb25JZCA9IChhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoXG4gICAgICBvYXV0aFN0YXRlLFxuICAgICAgXCJzZXNzaW9uSWRcIixcbiAgICAgIHtcbiAgICAgICAgZXJyb3JJZk51bGw6IHRydWUsXG4gICAgICB9XG4gICAgKSkgYXMgc3RyaW5nO1xuXG4gICAgY29uc3Qge1xuICAgICAgaXNzdWVyQ29uZmlnLFxuICAgICAgY29kZVZlcmlmaWVyLFxuICAgICAgcmVkaXJlY3RVcmw6IHN0b3JlZFJlZGlyZWN0SXJpLFxuICAgICAgZHBvcDogaXNEcG9wLFxuICAgIH0gPSBhd2FpdCBsb2FkT2lkY0NvbnRleHRGcm9tU3RvcmFnZShcbiAgICAgIHN0b3JlZFNlc3Npb25JZCxcbiAgICAgIHRoaXMuc3RvcmFnZVV0aWxpdHksXG4gICAgICB0aGlzLmlzc3VlckNvbmZpZ0ZldGNoZXJcbiAgICApO1xuXG4gICAgY29uc3QgaXNzID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJpc3NcIik7XG5cbiAgICBpZiAodHlwZW9mIGlzcyA9PT0gXCJzdHJpbmdcIiAmJiBpc3MgIT09IGlzc3VlckNvbmZpZy5pc3N1ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRoZSB2YWx1ZSBvZiB0aGUgaXNzIHBhcmFtZXRlciAoJHtpc3N9KSBkb2VzIG5vdCBtYXRjaCB0aGUgaXNzdWVyIGlkZW50aWZpZXIgb2YgdGhlIGF1dGhvcml6YXRpb24gc2VydmVyICgke2lzc3VlckNvbmZpZy5pc3N1ZXJ9KS4gU2VlIFtyZmM5MjA3XShodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTIwNy5odG1sI3NlY3Rpb24tMi4zLTMuMS4xKWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGNvZGVWZXJpZmllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGUgY29kZSB2ZXJpZmllciBmb3Igc2Vzc2lvbiAke3N0b3JlZFNlc3Npb25JZH0gaXMgbWlzc2luZyBmcm9tIHN0b3JhZ2UuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoc3RvcmVkUmVkaXJlY3RJcmkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIHJlZGlyZWN0IFVSTCBmb3Igc2Vzc2lvbiAke3N0b3JlZFNlc3Npb25JZH0gaXMgbWlzc2luZyBmcm9tIHN0b3JhZ2UuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjbGllbnQ6IElDbGllbnQgPSBhd2FpdCB0aGlzLmNsaWVudFJlZ2lzdHJhci5nZXRDbGllbnQoXG4gICAgICB7IHNlc3Npb25JZDogc3RvcmVkU2Vzc2lvbklkIH0sXG4gICAgICBpc3N1ZXJDb25maWdcbiAgICApO1xuXG4gICAgbGV0IHRva2VuczogQ29kZUV4Y2hhbmdlUmVzdWx0O1xuICAgIGNvbnN0IHRva2VuQ3JlYXRlZEF0ID0gRGF0ZS5ub3coKTtcblxuICAgIGlmIChpc0Rwb3ApIHtcbiAgICAgIHRva2VucyA9IGF3YWl0IGdldERwb3BUb2tlbihpc3N1ZXJDb25maWcsIGNsaWVudCwge1xuICAgICAgICBncmFudFR5cGU6IFwiYXV0aG9yaXphdGlvbl9jb2RlXCIsXG4gICAgICAgIC8vIFdlIHJlbHkgb24gb3VyICdjYW5IYW5kbGUnIGZ1bmN0aW9uIGNoZWNraW5nIHRoYXQgdGhlIE9BdXRoICdjb2RlJ1xuICAgICAgICAvLyBwYXJhbWV0ZXIgaXMgcHJlc2VudCBpbiBvdXIgcXVlcnkgc3RyaW5nLlxuICAgICAgICBjb2RlOiB1cmwuc2VhcmNoUGFyYW1zLmdldChcImNvZGVcIikgYXMgc3RyaW5nLFxuICAgICAgICBjb2RlVmVyaWZpZXIsXG4gICAgICAgIHJlZGlyZWN0VXJsOiBzdG9yZWRSZWRpcmVjdElyaSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBEZWxldGUgb2lkYy1jbGllbnQtc3BlY2lmaWMgc2Vzc2lvbiBpbmZvcm1hdGlvbiBmcm9tIHN0b3JhZ2UuIFRoaXMgaXNcbiAgICAgIC8vIGRvbmUgYXV0b21hdGljYWxseSB3aGVuIHJldHJpZXZpbmcgYSBiZWFyZXIgdG9rZW4sIGJ1dCBzaW5jZSB0aGUgRFBvUFxuICAgICAgLy8gYmluZGluZyB1c2VzIG91ciBjdXN0b20gY29kZSwgdGhpcyBuZWVkcyB0byBiZSBkb25lIG1hbnVhbGx5LlxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGBvaWRjLiR7b2F1dGhTdGF0ZX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9rZW5zID0gYXdhaXQgZ2V0QmVhcmVyVG9rZW4odXJsLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIGxldCByZWZyZXNoT3B0aW9uczogUmVmcmVzaE9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgaWYgKHRva2Vucy5yZWZyZXNoVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVmcmVzaE9wdGlvbnMgPSB7XG4gICAgICAgIHNlc3Npb25JZDogc3RvcmVkU2Vzc2lvbklkLFxuICAgICAgICByZWZyZXNoVG9rZW46IHRva2Vucy5yZWZyZXNoVG9rZW4sXG4gICAgICAgIHRva2VuUmVmcmVzaGVyOiB0aGlzLnRva2VyUmVmcmVzaGVyLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBhdXRoRmV0Y2ggPSBhd2FpdCBidWlsZEF1dGhlbnRpY2F0ZWRGZXRjaChmZXRjaCwgdG9rZW5zLmFjY2Vzc1Rva2VuLCB7XG4gICAgICBkcG9wS2V5OiB0b2tlbnMuZHBvcEtleSxcbiAgICAgIHJlZnJlc2hPcHRpb25zLFxuICAgICAgZXZlbnRFbWl0dGVyLFxuICAgICAgZXhwaXJlc0luOiB0b2tlbnMuZXhwaXJlc0luLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKFxuICAgICAgc3RvcmVkU2Vzc2lvbklkLFxuICAgICAge1xuICAgICAgICB3ZWJJZDogdG9rZW5zLndlYklkLFxuICAgICAgICBpc0xvZ2dlZEluOiBcInRydWVcIixcbiAgICAgIH0sXG4gICAgICB7IHNlY3VyZTogdHJ1ZSB9XG4gICAgKTtcblxuICAgIGNvbnN0IHNlc3Npb25JbmZvID0gYXdhaXQgdGhpcy5zZXNzaW9uSW5mb01hbmFnZXIuZ2V0KHN0b3JlZFNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uSW5mbykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcmV0cmlldmUgc2Vzc2lvbjogWyR7c3RvcmVkU2Vzc2lvbklkfV0uYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc2Vzc2lvbkluZm8sIHtcbiAgICAgIGZldGNoOiBhdXRoRmV0Y2gsXG4gICAgICBleHBpcmF0aW9uRGF0ZTpcbiAgICAgICAgdHlwZW9mIHRva2Vucy5leHBpcmVzSW4gPT09IFwibnVtYmVyXCJcbiAgICAgICAgICA/IHRva2VuQ3JlYXRlZEF0ICsgdG9rZW5zLmV4cGlyZXNJbiAqIDEwMDBcbiAgICAgICAgICA6IG51bGwsXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHtcbiAgRVZFTlRTLFxuICBJSW5jb21pbmdSZWRpcmVjdEhhbmRsZXIsXG4gIElTZXNzaW9uSW5mbyxcbn0gZnJvbSBcIkBpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmVcIjtcbmltcG9ydCB0eXBlIHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuXG5pbXBvcnQgeyBnZXRVbmF1dGhlbnRpY2F0ZWRTZXNzaW9uIH0gZnJvbSBcIi4uLy4uLy4uL3Nlc3Npb25JbmZvL1Nlc3Npb25JbmZvTWFuYWdlclwiO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaGFuZGxlcyByZWRpcmVjdCBJUklzIHdpdGhvdXQgYW55IHF1ZXJ5IHBhcmFtcywgYW5kIHJldHVybnMgYW4gdW5hdXRoZW50aWNhdGVkXG4gKiBzZXNzaW9uLiBJdCBzZXJ2ZXMgYXMgYSBmYWxsYmFjayBzbyB0aGF0IGNvbnN1bWluZyBsaWJyYXJpZXMgZG9uJ3QgaGF2ZSB0byB0ZXN0XG4gKiBmb3IgdGhlIHF1ZXJ5IHBhcmFtcyB0aGVtc2VsdmVzLCBhbmQgY2FuIGFsd2F5cyB0cnkgdG8gdXNlIHRoZW0gYXMgYSByZWRpcmVjdCBJUkkuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvck9pZGNIYW5kbGVyIGltcGxlbWVudHMgSUluY29taW5nUmVkaXJlY3RIYW5kbGVyIHtcbiAgYXN5bmMgY2FuSGFuZGxlKHJlZGlyZWN0VXJsOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xuICAgICAgcmV0dXJuIG5ldyBVUkwocmVkaXJlY3RVcmwpLnNlYXJjaFBhcmFtcy5oYXMoXCJlcnJvclwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBbJHtyZWRpcmVjdFVybH1dIGlzIG5vdCBhIHZhbGlkIFVSTCwgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGEgcmVkaXJlY3QgVVJMOiAke2V9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGUoXG4gICAgcmVkaXJlY3RVcmw6IHN0cmluZyxcbiAgICBldmVudEVtaXR0ZXI/OiBFdmVudEVtaXR0ZXJcbiAgKTogUHJvbWlzZTxJU2Vzc2lvbkluZm8gJiB7IGZldGNoOiB0eXBlb2YgZmV0Y2ggfT4ge1xuICAgIGlmIChldmVudEVtaXR0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZWRpcmVjdFVybCk7XG4gICAgICBjb25zdCBlcnJvclVybCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KFwiZXJyb3JcIik7XG4gICAgICBjb25zdCBlcnJvckRlc2NyaXB0aW9uVXJsID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJlcnJvcl9kZXNjcmlwdGlvblwiKTtcbiAgICAgIGV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5FUlJPUiwgZXJyb3JVcmwsIGVycm9yRGVzY3JpcHRpb25VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0VW5hdXRoZW50aWNhdGVkU2Vzc2lvbigpO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbmltcG9ydCB7XG4gIElJbmNvbWluZ1JlZGlyZWN0SGFuZGxlcixcbiAgSVNlc3Npb25JbmZvLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuXG5pbXBvcnQgeyBnZXRVbmF1dGhlbnRpY2F0ZWRTZXNzaW9uIH0gZnJvbSBcIi4uLy4uLy4uL3Nlc3Npb25JbmZvL1Nlc3Npb25JbmZvTWFuYWdlclwiO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaGFuZGxlcyByZWRpcmVjdCBJUklzIHdpdGhvdXQgYW55IHF1ZXJ5IHBhcmFtcywgYW5kIHJldHVybnMgYW4gdW5hdXRoZW50aWNhdGVkXG4gKiBzZXNzaW9uLiBJdCBzZXJ2ZXMgYXMgYSBmYWxsYmFjayBzbyB0aGF0IGNvbnN1bWluZyBsaWJyYXJpZXMgZG9uJ3QgaGF2ZSB0byB0ZXN0XG4gKiBmb3IgdGhlIHF1ZXJ5IHBhcmFtcyB0aGVtc2VsdmVzLCBhbmQgY2FuIGFsd2F5cyB0cnkgdG8gdXNlIHRoZW0gYXMgYSByZWRpcmVjdCBJUkkuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWxsYmFja1JlZGlyZWN0SGFuZGxlciBpbXBsZW1lbnRzIElJbmNvbWluZ1JlZGlyZWN0SGFuZGxlciB7XG4gIGFzeW5jIGNhbkhhbmRsZShyZWRpcmVjdFVybDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZSBuZXh0IFVSTCBvYmplY3QgaXMgYnVpbHQgZm9yIHZhbGlkYXRpbmcgaXQuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVVJMKHJlZGlyZWN0VXJsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFske3JlZGlyZWN0VXJsfV0gaXMgbm90IGEgdmFsaWQgVVJMLCBhbmQgY2Fubm90IGJlIHVzZWQgYXMgYSByZWRpcmVjdCBVUkw6ICR7ZX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGhhbmRsZShcbiAgICAvLyBUaGUgYXJndW1lbnQgaXMgaWdub3JlZCwgYnV0IG11c3QgYmUgcHJlc2VudCB0byBpbXBsZW1lbnQgdGhlIGludGVyZmFjZVxuICAgIF9yZWRpcmVjdFVybDogc3RyaW5nXG4gICk6IFByb21pc2U8SVNlc3Npb25JbmZvICYgeyBmZXRjaDogdHlwZW9mIGZldGNoIH0+IHtcbiAgICByZXR1cm4gZ2V0VW5hdXRoZW50aWNhdGVkU2Vzc2lvbigpO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbi8qKlxuICogSGFuZGxlciBmb3IgdGhlIEF1dGhvcml6YXRpb24gQ29kZSB3aXRoIFBLQ0UgRmxvd1xuICovXG5pbXBvcnQge1xuICBJT2lkY0hhbmRsZXIsXG4gIElPaWRjT3B0aW9ucyxcbiAgSVJlZGlyZWN0b3IsXG4gIElTdG9yYWdlVXRpbGl0eSxcbiAgTG9naW5SZXN1bHQsXG4gIERFRkFVTFRfU0NPUEVTLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuaW1wb3J0IHsgT2lkY0NsaWVudCB9IGZyb20gXCJAaW5ydXB0L29pZGMtY2xpZW50LWV4dFwiO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqIEF1dGhvcml6YXRpb24gY29kZSBmbG93IHNwZWM6IGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0NvZGVGbG93QXV0aFxuICogUEtDRTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2MzZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aG9yaXphdGlvbkNvZGVXaXRoUGtjZU9pZGNIYW5kbGVyXG4gIGltcGxlbWVudHMgSU9pZGNIYW5kbGVyXG57XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RvcmFnZVV0aWxpdHk6IElTdG9yYWdlVXRpbGl0eSxcbiAgICBwcml2YXRlIHJlZGlyZWN0b3I6IElSZWRpcmVjdG9yXG4gICkge31cblxuICBhc3luYyBjYW5IYW5kbGUob2lkY0xvZ2luT3B0aW9uczogSU9pZGNPcHRpb25zKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgb2lkY0xvZ2luT3B0aW9ucy5pc3N1ZXJDb25maWd1cmF0aW9uLmdyYW50VHlwZXNTdXBwb3J0ZWQgJiZcbiAgICAgIG9pZGNMb2dpbk9wdGlvbnMuaXNzdWVyQ29uZmlndXJhdGlvbi5ncmFudFR5cGVzU3VwcG9ydGVkLmluZGV4T2YoXG4gICAgICAgIFwiYXV0aG9yaXphdGlvbl9jb2RlXCJcbiAgICAgICkgPiAtMVxuICAgICk7XG4gIH1cblxuICBhc3luYyBoYW5kbGUob2lkY0xvZ2luT3B0aW9uczogSU9pZGNPcHRpb25zKTogUHJvbWlzZTxMb2dpblJlc3VsdD4ge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuICAgIGNvbnN0IG9pZGNPcHRpb25zID0ge1xuICAgICAgYXV0aG9yaXR5OiBvaWRjTG9naW5PcHRpb25zLmlzc3Vlci50b1N0cmluZygpLFxuICAgICAgY2xpZW50X2lkOiBvaWRjTG9naW5PcHRpb25zLmNsaWVudC5jbGllbnRJZCxcbiAgICAgIGNsaWVudF9zZWNyZXQ6IG9pZGNMb2dpbk9wdGlvbnMuY2xpZW50LmNsaWVudFNlY3JldCxcbiAgICAgIHJlZGlyZWN0X3VyaTogb2lkY0xvZ2luT3B0aW9ucy5yZWRpcmVjdFVybC50b1N0cmluZygpLFxuICAgICAgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpOiBvaWRjTG9naW5PcHRpb25zLnJlZGlyZWN0VXJsLnRvU3RyaW5nKCksXG4gICAgICByZXNwb25zZV90eXBlOiBcImNvZGVcIixcbiAgICAgIHNjb3BlOiBERUZBVUxUX1NDT1BFUyxcbiAgICAgIGZpbHRlclByb3RvY29sQ2xhaW1zOiB0cnVlLFxuICAgICAgLy8gVGhlIHVzZXJpbmZvIGVuZHBvaW50IG9uIE5TUyBmYWlscywgc28gZGlzYWJsZSB0aGlzIGZvciBub3dcbiAgICAgIC8vIE5vdGUgdGhhdCBpbiBTb2xpZCwgaW5mb3JtYXRpb24gc2hvdWxkIGJlIHJldHJpZXZlZCBmcm9tIHRoZVxuICAgICAgLy8gcHJvZmlsZSByZWZlcmVuY2VkIGJ5IHRoZSBXZWJJZC5cbiAgICAgIGxvYWRVc2VySW5mbzogZmFsc2UsXG4gICAgICBjb2RlX3ZlcmlmaWVyOiB0cnVlLFxuICAgICAgcHJvbXB0OiBvaWRjTG9naW5PcHRpb25zLnByb21wdCA/PyBcImNvbnNlbnRcIixcbiAgICB9O1xuICAgIC8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG5cbiAgICBjb25zdCBvaWRjQ2xpZW50TGlicmFyeSA9IG5ldyBPaWRjQ2xpZW50KG9pZGNPcHRpb25zKTtcblxuICAgIGNvbnN0IHsgcmVkaXJlY3RvciB9ID0gdGhpcztcbiAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5zdG9yYWdlVXRpbGl0eTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBzaWduaW5nUmVxdWVzdCA9IGF3YWl0IG9pZGNDbGllbnRMaWJyYXJ5LmNyZWF0ZVNpZ25pblJlcXVlc3QoKTtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgLy8gV2UgdXNlIHRoZSBPQXV0aCAnc3RhdGUnIHZhbHVlICh3aGljaCBzaG91bGQgYmUgY3J5cHRvLXJhbmRvbSkgYXNcbiAgICAgICAgLy8gdGhlIGtleSBpbiBvdXIgc3RvcmFnZSB0byBzdG9yZSBvdXIgYWN0dWFsIFNlc3Npb25JRC4gV2UgZG8gdGhpc1xuICAgICAgICAvLyAnY29zIHdlJ2xsIG5lZWQgdG8gbG9va3VwIG91ciBzZXNzaW9uIGluZm9ybWF0aW9uIGFnYWluIHdoZW4gdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgaXMgcmVkaXJlY3RlZCBiYWNrIHRvIHVzIChpLmUuIHRoZSBPQXV0aCBjbGllbnRcbiAgICAgICAgLy8gYXBwbGljYXRpb24pIGZyb20gdGhlIEF1dGhvcml6YXRpb24gU2VydmVyLlxuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHVzZSBvdXIgc2Vzc2lvbiBJRCBhcyB0aGUgT0F1dGggJ3N0YXRlJyB2YWx1ZSwgYXNcbiAgICAgICAgLy8gdGhhdCBzZXNzaW9uIElEIGNhbiBiZSBhbnkgZGV2ZWxvcGVyLXNwZWNpZmllZCB2YWx1ZSwgYW5kIHRoZXJlZm9yZVxuICAgICAgICAvLyBtYXkgbm90IGJlIGFwcHJvcHJpYXRlIChzaW5jZSB0aGUgT0F1dGggJ3N0YXRlJyB2YWx1ZSBzaG91bGQgcmVhbGx5XG4gICAgICAgIC8vIGJlIGFuIHVuZ3Vlc3NhYmxlIGNyeXB0by1yYW5kb20gdmFsdWUpLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICAgICAgc3RvcmFnZS5zZXRGb3JVc2VyKHNpZ25pbmdSZXF1ZXN0LnN0YXRlLl9pZCwge1xuICAgICAgICAgIHNlc3Npb25JZDogb2lkY0xvZ2luT3B0aW9ucy5zZXNzaW9uSWQsXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8vIFN0b3JlIG91ciBsb2dpbi1wcm9jZXNzIHN0YXRlIHVzaW5nIHRoZSBzZXNzaW9uIElEIGFzIHRoZSBrZXkuXG4gICAgICAgIC8vIFN0cmljdGx5IHNwZWFraW5nLCB0aGlzIGluZGlyZWN0aW9uIGZyb20gb3VyIE9BdXRoIHN0YXRlIHZhbHVlIHRvXG4gICAgICAgIC8vIG91ciBzZXNzaW9uIElEIGlzIHVubmVjZXNzYXJ5LCBidXQgaXQgcHJvdmlkZXMgYSBzbGlnaHRseSBjbGVhbmVyXG4gICAgICAgIC8vIHNlcGFyYXRpb24gb2YgY29uY2VybnMuXG4gICAgICAgIHN0b3JhZ2Uuc2V0Rm9yVXNlcihvaWRjTG9naW5PcHRpb25zLnNlc3Npb25JZCwge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAgICAgICAgIGNvZGVWZXJpZmllcjogc2lnbmluZ1JlcXVlc3Quc3RhdGUuX2NvZGVfdmVyaWZpZXIsXG4gICAgICAgICAgaXNzdWVyOiBvaWRjTG9naW5PcHRpb25zLmlzc3Vlci50b1N0cmluZygpLFxuICAgICAgICAgIC8vIFRoZSByZWRpcmVjdCBVUkwgaXMgcmVhZCBhZnRlciByZWRpcmVjdCwgc28gaXQgbXVzdCBiZSBzdG9yZWQgbm93LlxuICAgICAgICAgIHJlZGlyZWN0VXJsOiBvaWRjTG9naW5PcHRpb25zLnJlZGlyZWN0VXJsLFxuICAgICAgICAgIGRwb3A6IG9pZGNMb2dpbk9wdGlvbnMuZHBvcCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiLFxuICAgICAgICB9KSxcbiAgICAgIF0pO1xuXG4gICAgICByZWRpcmVjdG9yLnJlZGlyZWN0KHNpZ25pbmdSZXF1ZXN0LnVybC50b1N0cmluZygpLCB7XG4gICAgICAgIGhhbmRsZVJlZGlyZWN0OiBvaWRjTG9naW5PcHRpb25zLmhhbmRsZVJlZGlyZWN0LFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cblxuICAgIC8vIFRoZSBsb2dpbiBpcyBvbmx5IGNvbXBsZXRlZCBBRlRFUiByZWRpcmVjdCwgc28gbm90aGluZyB0byByZXR1cm4gaGVyZS5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbmltcG9ydCB7XG4gIElDbGllbnQsXG4gIElDbGllbnRSZWdpc3RyYXIsXG4gIElJc3N1ZXJDb25maWdGZXRjaGVyLFxuICBJU3RvcmFnZVV0aWxpdHksXG4gIGxvYWRPaWRjQ29udGV4dEZyb21TdG9yYWdlLFxuICBLZXlQYWlyLFxuICBJVG9rZW5SZWZyZXNoZXIsXG4gIFRva2VuRW5kcG9pbnRSZXNwb25zZSxcbiAgRVZFTlRTLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuaW1wb3J0IHsgcmVmcmVzaCB9IGZyb20gXCJAaW5ydXB0L29pZGMtY2xpZW50LWV4dFwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuXG4vLyBTb21lIGlkZW50aWZpZXJzIGFyZSBub3QgaW4gY2FtZWxjYXNlIG9uIHB1cnBvc2UsIGFzIHRoZXkgYXJlIG5hbWVkIHVzaW5nIHRoZVxuLy8gb2ZmaWNpYWwgbmFtZXMgZnJvbSB0aGUgT0lEQy9PQXV0aDIgc3BlY2lmaWNhdGlvbnMuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRva2VuUmVmcmVzaGVyIGltcGxlbWVudHMgSVRva2VuUmVmcmVzaGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzdG9yYWdlVXRpbGl0eTogSVN0b3JhZ2VVdGlsaXR5LFxuICAgIHByaXZhdGUgaXNzdWVyQ29uZmlnRmV0Y2hlcjogSUlzc3VlckNvbmZpZ0ZldGNoZXIsXG4gICAgcHJpdmF0ZSBjbGllbnRSZWdpc3RyYXI6IElDbGllbnRSZWdpc3RyYXJcbiAgKSB7fVxuXG4gIGFzeW5jIHJlZnJlc2goXG4gICAgc2Vzc2lvbklkOiBzdHJpbmcsXG4gICAgcmVmcmVzaFRva2VuPzogc3RyaW5nLFxuICAgIGRwb3BLZXk/OiBLZXlQYWlyLFxuICAgIGV2ZW50RW1pdHRlcj86IEV2ZW50RW1pdHRlclxuICApOiBQcm9taXNlPFRva2VuRW5kcG9pbnRSZXNwb25zZT4ge1xuICAgIGNvbnN0IG9pZGNDb250ZXh0ID0gYXdhaXQgbG9hZE9pZGNDb250ZXh0RnJvbVN0b3JhZ2UoXG4gICAgICBzZXNzaW9uSWQsXG4gICAgICB0aGlzLnN0b3JhZ2VVdGlsaXR5LFxuICAgICAgdGhpcy5pc3N1ZXJDb25maWdGZXRjaGVyXG4gICAgKTtcbiAgICAvLyBUaGlzIHNob3VsZCBhbHNvIHJldHJpZXZlIHRoZSBjbGllbnQgZnJvbSBzdG9yYWdlXG4gICAgY29uc3QgY2xpZW50SW5mbzogSUNsaWVudCA9IGF3YWl0IHRoaXMuY2xpZW50UmVnaXN0cmFyLmdldENsaWVudChcbiAgICAgIHsgc2Vzc2lvbklkIH0sXG4gICAgICBvaWRjQ29udGV4dC5pc3N1ZXJDb25maWdcbiAgICApO1xuXG4gICAgaWYgKHJlZnJlc2hUb2tlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBUT0RPOiBpbiBhIG5leHQgUFIsIGxvb2sgdXAgc3RvcmFnZSBmb3IgYSByZWZyZXNoIHRva2VuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBTZXNzaW9uIFske3Nlc3Npb25JZH1dIGhhcyBubyByZWZyZXNoIHRva2VuIHRvIGFsbG93IGl0IHRvIHJlZnJlc2ggaXRzIGFjY2VzcyB0b2tlbi5gXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChvaWRjQ29udGV4dC5kcG9wICYmIGRwb3BLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRm9yIHNlc3Npb24gWyR7c2Vzc2lvbklkfV0sIHRoZSBrZXkgYm91bmQgdG8gdGhlIERQb1AgYWNjZXNzIHRva2VuIG11c3QgYmUgcHJvdmlkZWQgdG8gcmVmcmVzaCBzYWlkIGFjY2VzcyB0b2tlbi5gXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuU2V0ID0gYXdhaXQgcmVmcmVzaChcbiAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgIG9pZGNDb250ZXh0Lmlzc3VlckNvbmZpZyxcbiAgICAgIGNsaWVudEluZm8sXG4gICAgICBkcG9wS2V5XG4gICAgKTtcblxuICAgIGlmICh0b2tlblNldC5yZWZyZXNoVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgZXZlbnRFbWl0dGVyPy5lbWl0KEVWRU5UUy5ORVdfUkVGUkVTSF9UT0tFTiwgdG9rZW5TZXQucmVmcmVzaFRva2VuKTtcbiAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihzZXNzaW9uSWQsIHtcbiAgICAgICAgcmVmcmVzaFRva2VuOiB0b2tlblNldC5yZWZyZXNoVG9rZW4sXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuU2V0O1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjIgSW5ydXB0IEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbi8vIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGVcbi8vIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbi8vIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vL1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbmltcG9ydCB7XG4gIElMb2dvdXRIYW5kbGVyLFxuICBJU2Vzc2lvbkluZm9NYW5hZ2VyLFxufSBmcm9tIFwiQGlucnVwdC9zb2xpZC1jbGllbnQtYXV0aG4tY29yZVwiO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VuZXJhbExvZ291dEhhbmRsZXIgaW1wbGVtZW50cyBJTG9nb3V0SGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2Vzc2lvbkluZm9NYW5hZ2VyOiBJU2Vzc2lvbkluZm9NYW5hZ2VyKSB7fVxuXG4gIGFzeW5jIGNhbkhhbmRsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZSh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuc2Vzc2lvbkluZm9NYW5hZ2VyLmNsZWFyKHVzZXJJZCk7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHtcbiAgSVNlc3Npb25JbmZvLFxuICBJU2Vzc2lvbkluZm9NYW5hZ2VyLFxuICBJU2Vzc2lvbkludGVybmFsSW5mbyxcbiAgSVNlc3Npb25JbmZvTWFuYWdlck9wdGlvbnMsXG4gIElTdG9yYWdlVXRpbGl0eSxcbiAgaXNTdXBwb3J0ZWRUb2tlblR5cGUsXG59IGZyb20gXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCI7XG5pbXBvcnQgeyB2NCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgeyBjbGVhck9pZGNQZXJzaXN0ZW50U3RvcmFnZSB9IGZyb20gXCJAaW5ydXB0L29pZGMtY2xpZW50LWV4dFwiO1xuaW1wb3J0IHsgZmV0Y2ggfSBmcm9tIFwiQGlucnVwdC91bml2ZXJzYWwtZmV0Y2hcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuYXV0aGVudGljYXRlZFNlc3Npb24oKTogSVNlc3Npb25JbmZvICYge1xuICBmZXRjaDogdHlwZW9mIGZldGNoO1xufSB7XG4gIHJldHVybiB7XG4gICAgaXNMb2dnZWRJbjogZmFsc2UsXG4gICAgc2Vzc2lvbklkOiB2NCgpLFxuICAgIGZldGNoLFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSBzZXNzaW9uSWRcbiAqIEBwYXJhbSBzdG9yYWdlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhcihcbiAgc2Vzc2lvbklkOiBzdHJpbmcsXG4gIHN0b3JhZ2U6IElTdG9yYWdlVXRpbGl0eVxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBzdG9yYWdlLmRlbGV0ZUFsbFVzZXJEYXRhKHNlc3Npb25JZCwgeyBzZWN1cmU6IGZhbHNlIH0pLFxuICAgIHN0b3JhZ2UuZGVsZXRlQWxsVXNlckRhdGEoc2Vzc2lvbklkLCB7IHNlY3VyZTogdHJ1ZSB9KSxcbiAgICAvLyBGSVhNRTogVGhpcyBpcyBuZWVkZWQgdW50aWwgdGhlIERQb1Aga2V5IGlzIHN0b3JlZCBzYWZlbHlcbiAgICBzdG9yYWdlLmRlbGV0ZShcImNsaWVudEtleVwiLCB7IHNlY3VyZTogZmFsc2UgfSksXG4gIF0pO1xuICBhd2FpdCBjbGVhck9pZGNQZXJzaXN0ZW50U3RvcmFnZSgpO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb25JbmZvTWFuYWdlciBpbXBsZW1lbnRzIElTZXNzaW9uSW5mb01hbmFnZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2VVdGlsaXR5OiBJU3RvcmFnZVV0aWxpdHkpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgdXBkYXRlKFxuICAgIF9zZXNzaW9uSWQ6IHN0cmluZyxcbiAgICBfb3B0aW9uczogSVNlc3Npb25JbmZvTWFuYWdlck9wdGlvbnNcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gY29uc3QgbG9jYWxVc2VySWQ6IHN0cmluZyA9IG9wdGlvbnMubG9jYWxVc2VySWQgfHwgdGhpcy51dWlkR2VuZXJhdG9yLnY0KCk7XG4gICAgLy8gaWYgKG9wdGlvbnMubG9nZ2VkSW4pIHtcbiAgICAvLyAgIHJldHVybiB7XG4gICAgLy8gICAgIHNlc3Npb25JZCxcbiAgICAvLyAgICAgbG9nZ2VkSW46IHRydWUsXG4gICAgLy8gICAgIHdlYklkOiBvcHRpb25zLndlYklkIGFzIHN0cmluZyxcbiAgICAvLyAgICAgbmVlZGVkQWN0aW9uOiBvcHRpb25zLm5lZWRlZEFjdGlvbiB8fCB7IGFjdGlvblR5cGU6IFwiaW5hY3Rpb25cIiB9LFxuICAgIC8vICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAvLyAgICAgbG9nb3V0OiBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gICAgICAgLy8gVE9ETzogaGFuZGxlIGlmIHdlYmlkIGlzbid0IGhlcmVcbiAgICAvLyAgICAgICByZXR1cm4gdGhpcy5sb2dvdXRIYW5kbGVyLmhhbmRsZShsb2NhbFVzZXJJZCk7XG4gICAgLy8gICAgIH0sXG4gICAgLy8gICAgIGZldGNoOiAodXJsOiBSZXF1ZXN0SW5mbywgaW5pdD86IFJlcXVlc3RJbml0KTogUHJvbWlzZTxSZXNwb25zZT4gPT4ge1xuICAgIC8vICAgICAgIC8vIFRPRE86IGhhbmRsZSBpZiB3ZWJpZCBpc24ndCBoZXJlXG4gICAgLy8gICAgICAgcmV0dXJuIHRoaXMuYXV0aGVudGljYXRlZEZldGNoZXIuaGFuZGxlKFxuICAgIC8vICAgICAgICAge1xuICAgIC8vICAgICAgICAgICBsb2NhbFVzZXJJZCxcbiAgICAvLyAgICAgICAgICAgdHlwZTogXCJkcG9wXCJcbiAgICAvLyAgICAgICAgIH0sXG4gICAgLy8gICAgICAgICB1cmwsXG4gICAgLy8gICAgICAgICBpbml0XG4gICAgLy8gICAgICAgKTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgcmV0dXJuIHtcbiAgICAvLyAgICAgbG9jYWxVc2VySWQsXG4gICAgLy8gICAgIGxvZ2dlZEluOiBmYWxzZSxcbiAgICAvLyAgICAgbmVlZGVkQWN0aW9uOiBvcHRpb25zLm5lZWRlZEFjdGlvbiB8fCB7IGFjdGlvblR5cGU6IFwiaW5hY3Rpb25cIiB9XG4gICAgLy8gICB9O1xuICAgIC8vIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgSW1wbGVtZW50ZWRcIik7XG4gIH1cblxuICBhc3luYyBnZXQoXG4gICAgc2Vzc2lvbklkOiBzdHJpbmdcbiAgKTogUHJvbWlzZTwoSVNlc3Npb25JbmZvICYgSVNlc3Npb25JbnRlcm5hbEluZm8pIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihcbiAgICAgIHNlc3Npb25JZCxcbiAgICAgIFwiaXNMb2dnZWRJblwiLFxuICAgICAge1xuICAgICAgICBzZWN1cmU6IHRydWUsXG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IHdlYklkID0gYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJ3ZWJJZFwiLCB7XG4gICAgICBzZWN1cmU6IHRydWUsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjbGllbnRJZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihcbiAgICAgIHNlc3Npb25JZCxcbiAgICAgIFwiY2xpZW50SWRcIixcbiAgICAgIHtcbiAgICAgICAgc2VjdXJlOiBmYWxzZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgY2xpZW50U2VjcmV0ID0gYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKFxuICAgICAgc2Vzc2lvbklkLFxuICAgICAgXCJjbGllbnRTZWNyZXRcIixcbiAgICAgIHtcbiAgICAgICAgc2VjdXJlOiBmYWxzZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgcmVkaXJlY3RVcmwgPSBhd2FpdCB0aGlzLnN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoXG4gICAgICBzZXNzaW9uSWQsXG4gICAgICBcInJlZGlyZWN0VXJsXCIsXG4gICAgICB7XG4gICAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihcbiAgICAgIHNlc3Npb25JZCxcbiAgICAgIFwicmVmcmVzaFRva2VuXCIsXG4gICAgICB7XG4gICAgICAgIHNlY3VyZTogdHJ1ZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgaXNzdWVyID0gYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJpc3N1ZXJcIiwge1xuICAgICAgc2VjdXJlOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuVHlwZSA9XG4gICAgICAoYXdhaXQgdGhpcy5zdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJ0b2tlblR5cGVcIiwge1xuICAgICAgICBzZWN1cmU6IGZhbHNlLFxuICAgICAgfSkpID8/IFwiRFBvUFwiO1xuXG4gICAgaWYgKCFpc1N1cHBvcnRlZFRva2VuVHlwZSh0b2tlblR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRva2VucyBvZiB0eXBlIFske3Rva2VuVHlwZX1dIGFyZSBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNsaWVudElkID09PSB1bmRlZmluZWQgJiZcbiAgICAgIGlzTG9nZ2VkSW4gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgd2ViSWQgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgcmVmcmVzaFRva2VuID09PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlc3Npb25JZCxcbiAgICAgIHdlYklkLFxuICAgICAgaXNMb2dnZWRJbjogaXNMb2dnZWRJbiA9PT0gXCJ0cnVlXCIsXG4gICAgICByZWRpcmVjdFVybCxcbiAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgIGlzc3VlcixcbiAgICAgIGNsaWVudEFwcElkOiBjbGllbnRJZCxcbiAgICAgIGNsaWVudEFwcFNlY3JldDogY2xpZW50U2VjcmV0LFxuICAgICAgdG9rZW5UeXBlLFxuICAgIH07XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBhc3luYyBnZXRBbGwoKTogUHJvbWlzZTwoSVNlc3Npb25JbmZvICYgSVNlc3Npb25JbnRlcm5hbEluZm8pW10+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZW1vdmVzIGFsbCBzZXNzaW9uLXJlbGF0ZWQgaW5mb3JtYXRpb24gZnJvbSBzdG9yYWdlLlxuICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uIGlkZW50aWZpZXJcbiAgICogQHBhcmFtIHN0b3JhZ2UgdGhlIHN0b3JhZ2Ugd2hlcmUgc2Vzc2lvbiBpbmZvIGlzIHN0b3JlZFxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBhc3luYyBjbGVhcihzZXNzaW9uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBjbGVhcihzZXNzaW9uSWQsIHRoaXMuc3RvcmFnZVV0aWxpdHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBzZXNzaW9uLCBzbyB0aGF0IGl0cyBJRCBjYW4gYmUgcmV0cmlldmVkLlxuICAgKiBAcGFyYW0gc2Vzc2lvbklkXG4gICAqL1xuICBhc3luYyByZWdpc3Rlcihfc2Vzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdGhlIHJlZ2lzdGVyZWQgc2Vzc2lvbiBJRHMuIERpZmZlcnMgZnJvbSBnZXRBbGwsIHdoaWNoIGFsc29cbiAgICogcmV0dXJucyBhZGRpdGlvbmFsIHNlc3Npb24gaW5mb3JtYXRpb24uXG4gICAqL1xuICBhc3luYyBnZXRSZWdpc3RlcmVkU2Vzc2lvbklkQWxsKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaW5mb3JtYXRpb24gYWJvdXQgYWxsIHNlc3Npb25zLCBpbmNsdWRpbmcgdGhlaXIgcmVnaXN0cmF0aW9ucy5cbiAgICovXG4gIGFzeW5jIGNsZWFyQWxsKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIyIElucnVwdCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxuLy8gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4vLyBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlXG4vLyBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbi8vIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbi8vIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy9cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG5pbXBvcnQgeyBJU3RvcmFnZSB9IGZyb20gXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcm93c2VyU3RvcmFnZSBpbXBsZW1lbnRzIElTdG9yYWdlIHtcbiAgZ2V0IHN0b3JhZ2UoKTogdHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2Uge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9XG5cbiAgYXN5bmMgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KSB8fCB1bmRlZmluZWQ7XG4gIH1cblxuICBhc3luYyBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMiBJbnJ1cHQgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbi8vIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZVxuLy8gU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4vLyBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8qKlxuICogQGhpZGRlblxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuLyoqXG4gKiBBIGhlbHBlciBjbGFzcyB0aGF0IHdpbGwgdmFsaWRhdGUgaXRlbXMgdGFrZW4gZnJvbSBsb2NhbCBzdG9yYWdlXG4gKi9cbmltcG9ydCB7IElTdG9yYWdlLCBTdG9yYWdlVXRpbGl0eSB9IGZyb20gXCJAaW5ydXB0L3NvbGlkLWNsaWVudC1hdXRobi1jb3JlXCI7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpbiBhIG5vLXZhbHVlLWFkZGVkIGV4dGVuc2lvbiBvZiBTdG9yYWdlVXRpbGl0eSBmcm9tIHRoZSBjb3JlIG1vZHVsZS5cbiAqIFRoZSByZWFzb24gaXQgaGFzIHRvIGJlIGRlY2xhcmVkIGlzIGZvciBUU3lyaW5nZSB0byBmaW5kIHRoZSBkZWNvcmF0b3JzIGluIHRoZVxuICogc2FtZSBtb2R1bGVzIGFzIHdoZXJlIHRoZSBkZXBlbmRlbmN5IGNvbnRhaW5lciBpcyBkZWNsYXJlZCAoaW4gdGhpcyBjYXNlLFxuICogdGhlIGJyb3dzZXIgbW9kdWxlLCB3aXRoIHRoZSBkZXBlbmRhbmN5IGNvbnRhaW5lciBpbiBkZXBlbmRlbmNpZXMudHMpLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yYWdlVXRpbGl0eUJyb3dzZXIgZXh0ZW5kcyBTdG9yYWdlVXRpbGl0eSB7XG4gIGNvbnN0cnVjdG9yKHNlY3VyZVN0b3JhZ2U6IElTdG9yYWdlLCBpbnNlY3VyZVN0b3JhZ2U6IElTdG9yYWdlKSB7XG4gICAgc3VwZXIoc2VjdXJlU3RvcmFnZSwgaW5zZWN1cmVTdG9yYWdlKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgaW5kZXhCcm93c2VyID0gZ2xvYmFsVGhpcy5mZXRjaDtcclxuY29uc3QgeyBmZXRjaCwgUmVzcG9uc2UsIFJlcXVlc3QsIEhlYWRlcnMgfSA9IGdsb2JhbFRoaXM7XG5cbmV4cG9ydHMuSGVhZGVycyA9IEhlYWRlcnM7XG5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuZXhwb3J0cy5SZXNwb25zZSA9IFJlc3BvbnNlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5kZXhCcm93c2VyO1xuZXhwb3J0cy5mZXRjaCA9IGZldGNoO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTklMXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9uaWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcGFyc2UuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInYxXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF92LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3YyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3YzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3Y0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmFsaWRhdGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3ZhbGlkYXRlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmVyc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdmVyc2lvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF92ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi92MS5qc1wiKSk7XG5cbnZhciBfdjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3YzLmpzXCIpKTtcblxudmFyIF92MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdjQuanNcIikpO1xuXG52YXIgX3Y0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi92NS5qc1wiKSk7XG5cbnZhciBfbmlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9uaWwuanNcIikpO1xuXG52YXIgX3ZlcnNpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ZlcnNpb24uanNcIikpO1xuXG52YXIgX3ZhbGlkYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi92YWxpZGF0ZS5qc1wiKSk7XG5cbnZhciBfc3RyaW5naWZ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIikpO1xuXG52YXIgX3BhcnNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wYXJzZS5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qXG4gKiBCcm93c2VyLWNvbXBhdGlibGUgSmF2YVNjcmlwdCBNRDVcbiAqXG4gKiBNb2RpZmljYXRpb24gb2YgSmF2YVNjcmlwdCBNRDVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL0phdmFTY3JpcHQtTUQ1XG4gKlxuICogQ29weXJpZ2h0IDIwMTEsIFNlYmFzdGlhbiBUc2NoYW5cbiAqIGh0dHBzOi8vYmx1ZWltcC5uZXRcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqIEJhc2VkIG9uXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3VyaXR5LCBJbmMuIE1ENSBNZXNzYWdlXG4gKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLlxuICogVmVyc2lvbiAyLjIgQ29weXJpZ2h0IChDKSBQYXVsIEpvaG5zdG9uIDE5OTkgLSAyMDA5XG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cbmZ1bmN0aW9uIG1kNShieXRlcykge1xuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShtc2cubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlc1tpXSA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZDVUb0hleEVuY29kZWRBcnJheSh3b3Jkc1RvTWQ1KGJ5dGVzVG9Xb3JkcyhieXRlcyksIGJ5dGVzLmxlbmd0aCAqIDgpKTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMgdG8gYW4gYXJyYXkgb2YgYnl0ZXNcbiAqL1xuXG5cbmZ1bmN0aW9uIG1kNVRvSGV4RW5jb2RlZEFycmF5KGlucHV0KSB7XG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICBjb25zdCBsZW5ndGgzMiA9IGlucHV0Lmxlbmd0aCAqIDMyO1xuICBjb25zdCBoZXhUYWIgPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGgzMjsgaSArPSA4KSB7XG4gICAgY29uc3QgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7XG4gICAgY29uc3QgaGV4ID0gcGFyc2VJbnQoaGV4VGFiLmNoYXJBdCh4ID4+PiA0ICYgMHgwZikgKyBoZXhUYWIuY2hhckF0KHggJiAweDBmKSwgMTYpO1xuICAgIG91dHB1dC5wdXNoKGhleCk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgb3V0cHV0IGxlbmd0aCB3aXRoIHBhZGRpbmcgYW5kIGJpdCBsZW5ndGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aDgpIHtcbiAgcmV0dXJuIChpbnB1dExlbmd0aDggKyA2NCA+Pj4gOSA8PCA0KSArIDE0ICsgMTtcbn1cbi8qXG4gKiBDYWxjdWxhdGUgdGhlIE1ENSBvZiBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoLlxuICovXG5cblxuZnVuY3Rpb24gd29yZHNUb01kNSh4LCBsZW4pIHtcbiAgLyogYXBwZW5kIHBhZGRpbmcgKi9cbiAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCBsZW4gJSAzMjtcbiAgeFtnZXRPdXRwdXRMZW5ndGgobGVuKSAtIDFdID0gbGVuO1xuICBsZXQgYSA9IDE3MzI1ODQxOTM7XG4gIGxldCBiID0gLTI3MTczMzg3OTtcbiAgbGV0IGMgPSAtMTczMjU4NDE5NDtcbiAgbGV0IGQgPSAyNzE3MzM4Nzg7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikge1xuICAgIGNvbnN0IG9sZGEgPSBhO1xuICAgIGNvbnN0IG9sZGIgPSBiO1xuICAgIGNvbnN0IG9sZGMgPSBjO1xuICAgIGNvbnN0IG9sZGQgPSBkO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2ldLCA3LCAtNjgwODc2OTM2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMV0sIDEyLCAtMzg5NTY0NTg2KTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE3LCA2MDYxMDU4MTkpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgNF0sIDcsIC0xNzY0MTg4OTcpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA1XSwgMTIsIDEyMDAwODA0MjYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyA2XSwgMTcsIC0xNDczMjMxMzQxKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgN10sIDIyLCAtNDU3MDU5ODMpO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNywgMTc3MDAzNTQxNik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE3LCAtNDIwNjMpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxMV0sIDIyLCAtMTk5MDQwNDE2Mik7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNywgMTgwNDYwMzY4Mik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDEzXSwgMTIsIC00MDM0MTEwMSk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgMTVdLCAyMiwgMTIzNjUzNTMyOSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA1LCAtMTY1Nzk2NTEwKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgNl0sIDksIC0xMDY5NTAxNjMyKTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNCwgNjQzNzE3NzEzKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpXSwgMjAsIC0zNzM4OTczMDIpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNSwgLTcwMTU1ODY5MSk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDEwXSwgOSwgMzgwMTYwODMpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE0LCAtNjYwNDc4MzM1KTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgOV0sIDUsIDU2ODQ0NjQzOCk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDE0XSwgOSwgLTEwMTk4MDM2OTApO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA4XSwgMjAsIDExNjM1MzE1MDEpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDUsIC0xNDQ0NjgxNDY3KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMl0sIDksIC01MTQwMzc4NCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNCwgMTczNTMyODQ3Myk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgNV0sIDQsIC0zNzg1NTgpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyA4XSwgMTEsIC0yMDIyNTc0NDYzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNiwgMTgzOTAzMDU2Mik7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA0LCAtMTUzMDk5MjA2MCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDRdLCAxMSwgMTI3Mjg5MzM1Myk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDEwXSwgMjMsIC0xMDk0NzMwNjQwKTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMTNdLCA0LCA2ODEyNzkxNzQpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2ldLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNiwgLTcyMjUyMTk3OSk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDZdLCAyMywgNzYwMjkxODkpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNCwgLTY0MDM2NDQ4Nyk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDEyXSwgMTEsIC00MjE4MTU4MzUpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE2LCA1MzA3NDI1MjApO1xuICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2ldLCA2LCAtMTk4NjMwODQ0KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgN10sIDEwLCAxMTI2ODkxNDE1KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA1XSwgMjEsIC01NzQzNDA1NSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNiwgMTcwMDQ4NTU3MSk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE1LCAtMTA1MTUyMyk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNiwgMTg3MzMxMzM1OSk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDE1XSwgMTAsIC0zMDYxMTc0NCk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNSwgLTE1NjAxOTgzODApO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxM10sIDIxLCAxMzA5MTUxNjQ5KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgNF0sIDYsIC0xNDU1MjMwNzApO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNSwgNzE4Nzg3MjU5KTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgOV0sIDIxLCAtMzQzNDg1NTUxKTtcbiAgICBhID0gc2FmZUFkZChhLCBvbGRhKTtcbiAgICBiID0gc2FmZUFkZChiLCBvbGRiKTtcbiAgICBjID0gc2FmZUFkZChjLCBvbGRjKTtcbiAgICBkID0gc2FmZUFkZChkLCBvbGRkKTtcbiAgfVxuXG4gIHJldHVybiBbYSwgYiwgYywgZF07XG59XG4vKlxuICogQ29udmVydCBhbiBhcnJheSBieXRlcyB0byBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzXG4gKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ5dGVzVG9Xb3JkcyhpbnB1dCkge1xuICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7XG4gIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgobGVuZ3RoOCkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoODsgaSArPSA4KSB7XG4gICAgb3V0cHV0W2kgPj4gNV0gfD0gKGlucHV0W2kgLyA4XSAmIDB4ZmYpIDw8IGkgJSAzMjtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4vKlxuICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNhZmVBZGQoeCwgeSkge1xuICBjb25zdCBsc3cgPSAoeCAmIDB4ZmZmZikgKyAoeSAmIDB4ZmZmZik7XG4gIGNvbnN0IG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmO1xufVxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgcmV0dXJuIG51bSA8PCBjbnQgfCBudW0gPj4+IDMyIC0gY250O1xufVxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKTtcbn1cblxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBjIHwgfmIgJiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBtZDU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmNvbnN0IHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG52YXIgX2RlZmF1bHQgPSB7XG4gIHJhbmRvbVVVSURcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfZGVmYXVsdCA9ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfdmFsaWRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoISgwLCBfdmFsaWRhdGUuZGVmYXVsdCkodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG52YXIgX2RlZmF1bHQgPSBwYXJzZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBybmc7XG4vLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbmxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcblxuZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8vIEFkYXB0ZWQgZnJvbSBDaHJpcyBWZW5lc3MnIFNIQTEgY29kZSBhdFxuLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9zaGExLmh0bWxcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4geCAmIHkgXiB+eCAmIHo7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHggJiB5IF4geCAmIHogXiB5ICYgejtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG4gIH1cbn1cblxuZnVuY3Rpb24gUk9UTCh4LCBuKSB7XG4gIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47XG59XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgY29uc3QgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgY29uc3QgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcblxuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlcy5wdXNoKG1zZy5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgLy8gQ29udmVydCBBcnJheS1saWtlIHRvIEFycmF5XG4gICAgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChieXRlcyk7XG4gIH1cblxuICBieXRlcy5wdXNoKDB4ODApO1xuICBjb25zdCBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gIGNvbnN0IE4gPSBNYXRoLmNlaWwobCAvIDE2KTtcbiAgY29uc3QgTSA9IG5ldyBBcnJheShOKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IE47ICsraSkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50MzJBcnJheSgxNik7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIGFycltqXSA9IGJ5dGVzW2kgKiA2NCArIGogKiA0XSA8PCAyNCB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMV0gPDwgMTYgfCBieXRlc1tpICogNjQgKyBqICogNCArIDJdIDw8IDggfCBieXRlc1tpICogNjQgKyBqICogNCArIDNdO1xuICAgIH1cblxuICAgIE1baV0gPSBhcnI7XG4gIH1cblxuICBNW04gLSAxXVsxNF0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4IC8gTWF0aC5wb3coMiwgMzIpO1xuICBNW04gLSAxXVsxNF0gPSBNYXRoLmZsb29yKE1bTiAtIDFdWzE0XSk7XG4gIE1bTiAtIDFdWzE1XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggJiAweGZmZmZmZmZmO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XG4gICAgY29uc3QgVyA9IG5ldyBVaW50MzJBcnJheSg4MCk7XG5cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgIFdbdF0gPSBNW2ldW3RdO1xuICAgIH1cblxuICAgIGZvciAobGV0IHQgPSAxNjsgdCA8IDgwOyArK3QpIHtcbiAgICAgIFdbdF0gPSBST1RMKFdbdCAtIDNdIF4gV1t0IC0gOF0gXiBXW3QgLSAxNF0gXiBXW3QgLSAxNl0sIDEpO1xuICAgIH1cblxuICAgIGxldCBhID0gSFswXTtcbiAgICBsZXQgYiA9IEhbMV07XG4gICAgbGV0IGMgPSBIWzJdO1xuICAgIGxldCBkID0gSFszXTtcbiAgICBsZXQgZSA9IEhbNF07XG5cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDgwOyArK3QpIHtcbiAgICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKHQgLyAyMCk7XG4gICAgICBjb25zdCBUID0gUk9UTChhLCA1KSArIGYocywgYiwgYywgZCkgKyBlICsgS1tzXSArIFdbdF0gPj4+IDA7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gVDtcbiAgICB9XG5cbiAgICBIWzBdID0gSFswXSArIGEgPj4+IDA7XG4gICAgSFsxXSA9IEhbMV0gKyBiID4+PiAwO1xuICAgIEhbMl0gPSBIWzJdICsgYyA+Pj4gMDtcbiAgICBIWzNdID0gSFszXSArIGQgPj4+IDA7XG4gICAgSFs0XSA9IEhbNF0gKyBlID4+PiAwO1xuICB9XG5cbiAgcmV0dXJuIFtIWzBdID4+IDI0ICYgMHhmZiwgSFswXSA+PiAxNiAmIDB4ZmYsIEhbMF0gPj4gOCAmIDB4ZmYsIEhbMF0gJiAweGZmLCBIWzFdID4+IDI0ICYgMHhmZiwgSFsxXSA+PiAxNiAmIDB4ZmYsIEhbMV0gPj4gOCAmIDB4ZmYsIEhbMV0gJiAweGZmLCBIWzJdID4+IDI0ICYgMHhmZiwgSFsyXSA+PiAxNiAmIDB4ZmYsIEhbMl0gPj4gOCAmIDB4ZmYsIEhbMl0gJiAweGZmLCBIWzNdID4+IDI0ICYgMHhmZiwgSFszXSA+PiAxNiAmIDB4ZmYsIEhbM10gPj4gOCAmIDB4ZmYsIEhbM10gJiAweGZmLCBIWzRdID4+IDI0ICYgMHhmZiwgSFs0XSA+PiAxNiAmIDB4ZmYsIEhbNF0gPj4gOCAmIDB4ZmYsIEhbNF0gJiAweGZmXTtcbn1cblxudmFyIF9kZWZhdWx0ID0gc2hhMTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuZXhwb3J0cy51bnNhZmVTdHJpbmdpZnkgPSB1bnNhZmVTdHJpbmdpZnk7XG5cbnZhciBfdmFsaWRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5mdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICByZXR1cm4gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCEoMCwgX3ZhbGlkYXRlLmRlZmF1bHQpKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG52YXIgX2RlZmF1bHQgPSBzdHJpbmdpZnk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9ybmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JuZy5qc1wiKSk7XG5cbnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5sZXQgX25vZGVJZDtcblxubGV0IF9jbG9ja3NlcTsgLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lXG5cblxubGV0IF9sYXN0TVNlY3MgPSAwO1xubGV0IF9sYXN0TlNlY3MgPSAwOyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBsZXQgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgY29uc3QgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGV0IG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgbGV0IGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgY29uc3Qgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IF9ybmcuZGVmYXVsdCkoKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuICAgIH1cblxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfSAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cblxuXG4gIGxldCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpOyAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG5cbiAgbGV0IG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxOyAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG5cbiAgY29uc3QgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwOyAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG5cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG5cblxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG5cblxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1dWlkLnYxKCk6IENhbid0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlY1wiKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTsgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG5cbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7IC8vIGB0aW1lX2xvd2BcblxuICBjb25zdCB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICBjb25zdCB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG5cbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmOyAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcblxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YFxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjsgLy8gYG5vZGVgXG5cbiAgZm9yIChsZXQgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmIHx8ICgwLCBfc3RyaW5naWZ5LnVuc2FmZVN0cmluZ2lmeSkoYik7XG59XG5cbnZhciBfZGVmYXVsdCA9IHYxO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdjM1LmpzXCIpKTtcblxudmFyIF9tZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWQ1LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgdjMgPSAoMCwgX3YuZGVmYXVsdCkoJ3YzJywgMHgzMCwgX21kLmRlZmF1bHQpO1xudmFyIF9kZWZhdWx0ID0gdjM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVVJMID0gZXhwb3J0cy5ETlMgPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHQgPSB2MzU7XG5cbnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuXG52YXIgX3BhcnNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wYXJzZS5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcblxuICBjb25zdCBieXRlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSk7XG4gIH1cblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmNvbnN0IEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0cy5ETlMgPSBETlM7XG5jb25zdCBVUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydHMuVVJMID0gVVJMO1xuXG5mdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWVzcGFjZSA9ICgwLCBfcGFyc2UuZGVmYXVsdCkobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICBpZiAoKChfbmFtZXNwYWNlID0gbmFtZXNwYWNlKSA9PT0gbnVsbCB8fCBfbmFtZXNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbmFtZXNwYWNlLmxlbmd0aCkgIT09IDE2KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ05hbWVzcGFjZSBtdXN0IGJlIGFycmF5LWxpa2UgKDE2IGl0ZXJhYmxlIGludGVnZXIgdmFsdWVzLCAwLTI1NSknKTtcbiAgICB9IC8vIENvbXB1dGUgaGFzaCBvZiBuYW1lc3BhY2UgYW5kIHZhbHVlLCBQZXIgNC4zXG4gICAgLy8gRnV0dXJlOiBVc2Ugc3ByZWFkIHN5bnRheCB3aGVuIHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1zLCBlLmcuIGBieXRlcyA9XG4gICAgLy8gaGFzaGZ1bmMoWy4uLm5hbWVzcGFjZSwgLi4uIHZhbHVlXSlgXG5cblxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWUubGVuZ3RoKTtcbiAgICBieXRlcy5zZXQobmFtZXNwYWNlKTtcbiAgICBieXRlcy5zZXQodmFsdWUsIG5hbWVzcGFjZS5sZW5ndGgpO1xuICAgIGJ5dGVzID0gaGFzaGZ1bmMoYnl0ZXMpO1xuICAgIGJ5dGVzWzZdID0gYnl0ZXNbNl0gJiAweDBmIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IGJ5dGVzWzhdICYgMHgzZiB8IDB4ODA7XG5cbiAgICBpZiAoYnVmKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3N0cmluZ2lmeS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9uYXRpdmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25hdGl2ZS5qc1wiKSk7XG5cbnZhciBfcm5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ybmcuanNcIikpO1xuXG52YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKF9uYXRpdmUuZGVmYXVsdC5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gX25hdGl2ZS5kZWZhdWx0LnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgX3JuZy5kZWZhdWx0KSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiAoMCwgX3N0cmluZ2lmeS51bnNhZmVTdHJpbmdpZnkpKHJuZHMpO1xufVxuXG52YXIgX2RlZmF1bHQgPSB2NDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3YzNS5qc1wiKSk7XG5cbnZhciBfc2hhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGExLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgdjUgPSAoMCwgX3YuZGVmYXVsdCkoJ3Y1JywgMHg1MCwgX3NoYS5kZWZhdWx0KTtcbnZhciBfZGVmYXVsdCA9IHY1O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVnZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlZ2V4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIF9yZWdleC5kZWZhdWx0LnRlc3QodXVpZCk7XG59XG5cbnZhciBfZGVmYXVsdCA9IHZhbGlkYXRlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfdmFsaWRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghKDAsIF92YWxpZGF0ZS5kZWZhdWx0KSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTUpLCAxNik7XG59XG5cbnZhciBfZGVmYXVsdCA9IHZlcnNpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciB1bml2ZXJzYWxGZXRjaCA9IHJlcXVpcmUoJ0BpbnJ1cHQvdW5pdmVyc2FsLWZldGNoJyk7XG52YXIgam9zZSA9IHJlcXVpcmUoJ2pvc2UnKTtcbnZhciB1dWlkID0gcmVxdWlyZSgndXVpZCcpO1xuXG5jb25zdCBTT0xJRF9DTElFTlRfQVVUSE5fS0VZX1BSRUZJWCA9IFwic29saWRDbGllbnRBdXRobjpcIjtcbmNvbnN0IFBSRUZFUlJFRF9TSUdOSU5HX0FMRyA9IFtcIkVTMjU2XCIsIFwiUlMyNTZcIl07XG5jb25zdCBFVkVOVFMgPSB7XG4gICAgRVJST1I6IFwiZXJyb3JcIixcbiAgICBMT0dJTjogXCJsb2dpblwiLFxuICAgIExPR09VVDogXCJsb2dvdXRcIixcbiAgICBORVdfUkVGUkVTSF9UT0tFTjogXCJuZXdSZWZyZXNoVG9rZW5cIixcbiAgICBTRVNTSU9OX0VYUElSRUQ6IFwic2Vzc2lvbkV4cGlyZWRcIixcbiAgICBTRVNTSU9OX0VYVEVOREVEOiBcInNlc3Npb25FeHRlbmRlZFwiLFxuICAgIFNFU1NJT05fUkVTVE9SRUQ6IFwic2Vzc2lvblJlc3RvcmVcIixcbiAgICBUSU1FT1VUX1NFVDogXCJ0aW1lb3V0U2V0XCIsXG59O1xuY29uc3QgUkVGUkVTSF9CRUZPUkVfRVhQSVJBVElPTl9TRUNPTkRTID0gNTtcbmNvbnN0IFNDT1BFX09QRU5JRCA9IFwib3BlbmlkXCI7XG5jb25zdCBTQ09QRV9PRkZMSU5FID0gXCJvZmZsaW5lX2FjY2Vzc1wiO1xuY29uc3QgU0NPUEVfV0VCSUQgPSBcIndlYmlkXCI7XG5jb25zdCBERUZBVUxUX1NDT1BFUyA9IFtTQ09QRV9PUEVOSUQsIFNDT1BFX09GRkxJTkUsIFNDT1BFX1dFQklEXS5qb2luKFwiIFwiKTtcblxuY29uc3QgYnVpbGRQcm94eUhhbmRsZXIgPSAodG9FeGNsdWRlLCBlcnJvck1lc3NhZ2UpID0+ICh7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhldmVudHMuRXZlbnRFbWl0dGVyKS5pbmNsdWRlcyhwcm9wKSAmJlxuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModG9FeGNsdWRlKS5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yTWVzc2FnZX06IFske3Byb3B9XSBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH0sXG59KTtcblxuY2xhc3MgQWdncmVnYXRlSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoaGFuZGxlYWJsZXMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVhYmxlcyA9IGhhbmRsZWFibGVzO1xuICAgIH1cbiAgICBhc3luYyBnZXRQcm9wZXJIYW5kbGVyKHBhcmFtcykge1xuICAgICAgICBjb25zdCBjYW5IYW5kbGVMaXN0ID0gYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5oYW5kbGVhYmxlcy5tYXAoKGhhbmRsZWFibGUpID0+IGhhbmRsZWFibGUuY2FuSGFuZGxlKC4uLnBhcmFtcykpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5IYW5kbGVMaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoY2FuSGFuZGxlTGlzdFtpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZWFibGVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBjYW5IYW5kbGUoLi4ucGFyYW1zKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRQcm9wZXJIYW5kbGVyKHBhcmFtcykpICE9PSBudWxsO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGUoLi4ucGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBhd2FpdCB0aGlzLmdldFByb3BlckhhbmRsZXIocGFyYW1zKTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZSguLi5wYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gY2Fubm90IGZpbmQgYSBzdWl0YWJsZSBoYW5kbGVyIGZvcjogJHtwYXJhbXNcbiAgICAgICAgICAgIC5tYXAoKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihcIiwgXCIpfWApO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hKd2tzKGp3a3NJcmksIGlzc3VlcklyaSkge1xuICAgIGNvbnN0IGp3a3NSZXNwb25zZSA9IGF3YWl0IHVuaXZlcnNhbEZldGNoLmZldGNoKGp3a3NJcmkpO1xuICAgIGlmIChqd2tzUmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmV0Y2ggSldLUyBmb3IgWyR7aXNzdWVySXJpfV0gYXQgWyR7andrc0lyaX1dOiAke2p3a3NSZXNwb25zZS5zdGF0dXN9ICR7andrc1Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICAgIGxldCBqd2s7XG4gICAgdHJ5IHtcbiAgICAgICAgandrID0gKGF3YWl0IGp3a3NSZXNwb25zZS5qc29uKCkpLmtleXNbMF07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTWFsZm9ybWVkIEpXS1MgZm9yIFske2lzc3VlcklyaX1dIGF0IFske2p3a3NJcml9XTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIHJldHVybiBqd2s7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJpZEZyb21Ub2tlblBheWxvYWQoaWRUb2tlbiwgandrc0lyaSwgaXNzdWVySXJpLCBjbGllbnRJZCkge1xuICAgIGNvbnN0IGp3ayA9IGF3YWl0IGZldGNoSndrcyhqd2tzSXJpLCBpc3N1ZXJJcmkpO1xuICAgIGxldCBwYXlsb2FkO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgcGF5bG9hZDogdmVyaWZpZWRQYXlsb2FkIH0gPSBhd2FpdCBqb3NlLmp3dFZlcmlmeShpZFRva2VuLCBhd2FpdCBqb3NlLmltcG9ydEpXSyhqd2spLCB7XG4gICAgICAgICAgICBpc3N1ZXI6IGlzc3VlcklyaSxcbiAgICAgICAgICAgIGF1ZGllbmNlOiBjbGllbnRJZCxcbiAgICAgICAgfSk7XG4gICAgICAgIHBheWxvYWQgPSB2ZXJpZmllZFBheWxvYWQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVG9rZW4gdmVyaWZpY2F0aW9uIGZhaWxlZDogJHtlLnN0YWNrfWApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBheWxvYWQud2ViaWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHBheWxvYWQud2ViaWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5zdWIgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgdG9rZW4gJHtKU09OLnN0cmluZ2lmeShwYXlsb2FkKX0gaXMgaW52YWxpZDogaXQgaGFzIG5vICd3ZWJpZCcgY2xhaW0gYW5kIG5vICdzdWInIGNsYWltLmApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBuZXcgVVJMKHBheWxvYWQuc3ViKTtcbiAgICAgICAgcmV0dXJuIHBheWxvYWQuc3ViO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSB0b2tlbiBoYXMgbm8gJ3dlYmlkJyBjbGFpbSwgYW5kIGl0cyAnc3ViJyBjbGFpbSBvZiBbJHtwYXlsb2FkLnN1Yn1dIGlzIGludmFsaWQgYXMgYSBVUkwgLSBlcnJvciBbJHtlfV0uYCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUmVkaXJlY3RVcmwocmVkaXJlY3RVcmwpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB1cmxPYmplY3QgPSBuZXcgVVJMKHJlZGlyZWN0VXJsKTtcbiAgICAgICAgcmV0dXJuIHVybE9iamVjdC5oYXNoID09PSBcIlwiO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1N1cHBvcnRlZFRva2VuVHlwZSh0b2tlbikge1xuICAgIHJldHVybiB0eXBlb2YgdG9rZW4gPT09IFwic3RyaW5nXCIgJiYgW1wiRFBvUFwiLCBcIkJlYXJlclwiXS5pbmNsdWRlcyh0b2tlbik7XG59XG5cbmNvbnN0IFVTRVJfU0VTU0lPTl9QUkVGSVggPSBcInNvbGlkQ2xpZW50QXV0aGVudGljYXRpb25Vc2VyXCI7XG5cbmZ1bmN0aW9uIGlzVmFsaWRVcmwodXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IFVSTCh1cmwpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVTaWduaW5nQWxnKHN1cHBvcnRlZCwgcHJlZmVycmVkKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gcHJlZmVycmVkLmZpbmQoKHNpZ25pbmdBbGcpID0+IHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZC5pbmNsdWRlcyhzaWduaW5nQWxnKTtcbiAgICB9KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbCk7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVDbGllbnRUeXBlKG9wdGlvbnMsIGlzc3VlckNvbmZpZykge1xuICAgIGlmIChvcHRpb25zLmNsaWVudElkICE9PSB1bmRlZmluZWQgJiYgIWlzVmFsaWRVcmwob3B0aW9ucy5jbGllbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIFwic3RhdGljXCI7XG4gICAgfVxuICAgIGlmIChpc3N1ZXJDb25maWcuc2NvcGVzU3VwcG9ydGVkLmluY2x1ZGVzKFwid2ViaWRcIikgJiZcbiAgICAgICAgb3B0aW9ucy5jbGllbnRJZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGlzVmFsaWRVcmwob3B0aW9ucy5jbGllbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIFwic29saWQtb2lkY1wiO1xuICAgIH1cbiAgICByZXR1cm4gXCJkeW5hbWljXCI7XG59XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVSZWdpc3RyYXRpb24ob3B0aW9ucywgaXNzdWVyQ29uZmlnLCBzdG9yYWdlVXRpbGl0eSwgY2xpZW50UmVnaXN0cmFyKSB7XG4gICAgY29uc3QgY2xpZW50VHlwZSA9IGRldGVybWluZUNsaWVudFR5cGUob3B0aW9ucywgaXNzdWVyQ29uZmlnKTtcbiAgICBpZiAoY2xpZW50VHlwZSA9PT0gXCJkeW5hbWljXCIpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudFJlZ2lzdHJhci5nZXRDbGllbnQoe1xuICAgICAgICAgICAgc2Vzc2lvbklkOiBvcHRpb25zLnNlc3Npb25JZCxcbiAgICAgICAgICAgIGNsaWVudE5hbWU6IG9wdGlvbnMuY2xpZW50TmFtZSxcbiAgICAgICAgICAgIHJlZGlyZWN0VXJsOiBvcHRpb25zLnJlZGlyZWN0VXJsLFxuICAgICAgICB9LCBpc3N1ZXJDb25maWcpO1xuICAgIH1cbiAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCB7XG4gICAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkLFxuICAgIH0pO1xuICAgIGlmIChvcHRpb25zLmNsaWVudFNlY3JldCkge1xuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCB7XG4gICAgICAgICAgICBjbGllbnRTZWNyZXQ6IG9wdGlvbnMuY2xpZW50U2VjcmV0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2xpZW50TmFtZSkge1xuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKG9wdGlvbnMuc2Vzc2lvbklkLCB7XG4gICAgICAgICAgICBjbGllbnROYW1lOiBvcHRpb25zLmNsaWVudE5hbWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjbGllbnRJZDogb3B0aW9ucy5jbGllbnRJZCxcbiAgICAgICAgY2xpZW50U2VjcmV0OiBvcHRpb25zLmNsaWVudFNlY3JldCxcbiAgICAgICAgY2xpZW50TmFtZTogb3B0aW9ucy5jbGllbnROYW1lLFxuICAgICAgICBjbGllbnRUeXBlLFxuICAgIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNlc3Npb25JZEZyb21PYXV0aFN0YXRlKHN0b3JhZ2VVdGlsaXR5LCBvYXV0aFN0YXRlKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIob2F1dGhTdGF0ZSwgXCJzZXNzaW9uSWRcIik7XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkT2lkY0NvbnRleHRGcm9tU3RvcmFnZShzZXNzaW9uSWQsIHN0b3JhZ2VVdGlsaXR5LCBjb25maWdGZXRjaGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2lzc3VlcklyaSwgY29kZVZlcmlmaWVyLCBzdG9yZWRSZWRpcmVjdElyaSwgZHBvcF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBzdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJpc3N1ZXJcIiwge1xuICAgICAgICAgICAgICAgIGVycm9ySWZOdWxsOiB0cnVlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJjb2RlVmVyaWZpZXJcIiksXG4gICAgICAgICAgICBzdG9yYWdlVXRpbGl0eS5nZXRGb3JVc2VyKHNlc3Npb25JZCwgXCJyZWRpcmVjdFVybFwiKSxcbiAgICAgICAgICAgIHN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoc2Vzc2lvbklkLCBcImRwb3BcIiwgeyBlcnJvcklmTnVsbDogdHJ1ZSB9KSxcbiAgICAgICAgXSk7XG4gICAgICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LmRlbGV0ZUZvclVzZXIoc2Vzc2lvbklkLCBcImNvZGVWZXJpZmllclwiKTtcbiAgICAgICAgY29uc3QgaXNzdWVyQ29uZmlnID0gYXdhaXQgY29uZmlnRmV0Y2hlci5mZXRjaENvbmZpZyhpc3N1ZXJJcmkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZVZlcmlmaWVyLFxuICAgICAgICAgICAgcmVkaXJlY3RVcmw6IHN0b3JlZFJlZGlyZWN0SXJpLFxuICAgICAgICAgICAgaXNzdWVyQ29uZmlnLFxuICAgICAgICAgICAgZHBvcDogZHBvcCA9PT0gXCJ0cnVlXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHJldHJpZXZlIE9JREMgY29udGV4dCBmcm9tIHN0b3JhZ2UgYXNzb2NpYXRlZCB3aXRoIHNlc3Npb24gWyR7c2Vzc2lvbklkfV06ICR7ZX1gKTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBzYXZlU2Vzc2lvbkluZm9Ub1N0b3JhZ2Uoc3RvcmFnZVV0aWxpdHksIHNlc3Npb25JZCwgd2ViSWQsIGlzTG9nZ2VkSW4sIHJlZnJlc2hUb2tlbiwgc2VjdXJlLCBkcG9wS2V5KSB7XG4gICAgaWYgKHJlZnJlc2hUb2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIoc2Vzc2lvbklkLCB7IHJlZnJlc2hUb2tlbiB9LCB7IHNlY3VyZSB9KTtcbiAgICB9XG4gICAgaWYgKHdlYklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihzZXNzaW9uSWQsIHsgd2ViSWQgfSwgeyBzZWN1cmUgfSk7XG4gICAgfVxuICAgIGlmIChpc0xvZ2dlZEluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihzZXNzaW9uSWQsIHsgaXNMb2dnZWRJbiB9LCB7IHNlY3VyZSB9KTtcbiAgICB9XG4gICAgaWYgKGRwb3BLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKHNlc3Npb25JZCwge1xuICAgICAgICAgICAgcHVibGljS2V5OiBKU09OLnN0cmluZ2lmeShkcG9wS2V5LnB1YmxpY0tleSksXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBKU09OLnN0cmluZ2lmeShhd2FpdCBqb3NlLmV4cG9ydEpXSyhkcG9wS2V5LnByaXZhdGVLZXkpKSxcbiAgICAgICAgfSwgeyBzZWN1cmUgfSk7XG4gICAgfVxufVxuY2xhc3MgU3RvcmFnZVV0aWxpdHkge1xuICAgIGNvbnN0cnVjdG9yKHNlY3VyZVN0b3JhZ2UsIGluc2VjdXJlU3RvcmFnZSkge1xuICAgICAgICB0aGlzLnNlY3VyZVN0b3JhZ2UgPSBzZWN1cmVTdG9yYWdlO1xuICAgICAgICB0aGlzLmluc2VjdXJlU3RvcmFnZSA9IGluc2VjdXJlU3RvcmFnZTtcbiAgICB9XG4gICAgZ2V0S2V5KHVzZXJJZCkge1xuICAgICAgICByZXR1cm4gYHNvbGlkQ2xpZW50QXV0aGVudGljYXRpb25Vc2VyOiR7dXNlcklkfWA7XG4gICAgfVxuICAgIGFzeW5jIGdldFVzZXJEYXRhKHVzZXJJZCwgc2VjdXJlKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlZCA9IGF3YWl0IChzZWN1cmVcbiAgICAgICAgICAgID8gdGhpcy5zZWN1cmVTdG9yYWdlXG4gICAgICAgICAgICA6IHRoaXMuaW5zZWN1cmVTdG9yYWdlKS5nZXQodGhpcy5nZXRLZXkodXNlcklkKSk7XG4gICAgICAgIGlmIChzdG9yZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdG9yZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGF0YSBmb3IgdXNlciBbJHt1c2VySWR9XSBpbiBbJHtzZWN1cmUgPyBcInNlY3VyZVwiIDogXCJ1bnNlY3VyZVwifV0gc3RvcmFnZSBpcyBjb3JydXB0ZWQgLSBleHBlY3RlZCB2YWxpZCBKU09OLCBidXQgZ290OiAke3N0b3JlZH1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBzZXRVc2VyRGF0YSh1c2VySWQsIGRhdGEsIHNlY3VyZSkge1xuICAgICAgICBhd2FpdCAoc2VjdXJlID8gdGhpcy5zZWN1cmVTdG9yYWdlIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLnNldCh0aGlzLmdldEtleSh1c2VySWQpLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgfVxuICAgIGFzeW5jIGdldChrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpXG4gICAgICAgICAgICA/IHRoaXMuc2VjdXJlU3RvcmFnZVxuICAgICAgICAgICAgOiB0aGlzLmluc2VjdXJlU3RvcmFnZSkuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JJZk51bGwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske2tleX1dIGlzIG5vdCBzdG9yZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGFzeW5jIHNldChrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpID8gdGhpcy5zZWN1cmVTdG9yYWdlIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKGtleSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKSA/IHRoaXMuc2VjdXJlU3RvcmFnZSA6IHRoaXMuaW5zZWN1cmVTdG9yYWdlKS5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Rm9yVXNlcih1c2VySWQsIGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IGF3YWl0IHRoaXMuZ2V0VXNlckRhdGEodXNlcklkLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBpZiAoIXVzZXJEYXRhIHx8ICF1c2VyRGF0YVtrZXldKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHVzZXJEYXRhW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JJZk51bGwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIFske2tleX1dIGZvciB1c2VyIFske3VzZXJJZH1dIGlzIG5vdCBzdG9yZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhc3luYyBzZXRGb3JVc2VyKHVzZXJJZCwgdmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCB1c2VyRGF0YTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVzZXJEYXRhID0gYXdhaXQgdGhpcy5nZXRVc2VyRGF0YSh1c2VySWQsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgdXNlckRhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnNldFVzZXJEYXRhKHVzZXJJZCwgeyAuLi51c2VyRGF0YSwgLi4udmFsdWVzIH0sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVGb3JVc2VyKHVzZXJJZCwga2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgdGhpcy5nZXRVc2VyRGF0YSh1c2VySWQsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpO1xuICAgICAgICBkZWxldGUgdXNlckRhdGFba2V5XTtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRVc2VyRGF0YSh1c2VySWQsIHVzZXJEYXRhLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlQWxsVXNlckRhdGEodXNlcklkLCBvcHRpb25zKSB7XG4gICAgICAgIGF3YWl0ICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNlY3VyZSkgPyB0aGlzLnNlY3VyZVN0b3JhZ2UgOiB0aGlzLmluc2VjdXJlU3RvcmFnZSkuZGVsZXRlKHRoaXMuZ2V0S2V5KHVzZXJJZCkpO1xuICAgIH1cbn1cblxuY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXAgPSB7fTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXBba2V5XSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWFwW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5tYXBba2V5XTtcbiAgICB9XG59XG5cbmNsYXNzIENvbmZpZ3VyYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2ROYW1lKSB7XG4gICAgICAgIHN1cGVyKGBbJHttZXRob2ROYW1lfV0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgfVxufVxuXG5jbGFzcyBJbnZhbGlkUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtaXNzaW5nRmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIHJlc3BvbnNlIGZyb20gT0lEQyBwcm92aWRlcjogbWlzc2luZyBmaWVsZHMgJHttaXNzaW5nRmllbGRzfWApO1xuICAgICAgICB0aGlzLm1pc3NpbmdGaWVsZHMgPSBtaXNzaW5nRmllbGRzO1xuICAgIH1cbn1cblxuY2xhc3MgT2lkY1Byb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3IsIGVycm9yRGVzY3JpcHRpb24pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5lcnJvckRlc2NyaXB0aW9uID0gZXJyb3JEZXNjcmlwdGlvbjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhUVShhdWRpZW5jZSkge1xuICAgIGNvbnN0IGF1ZGllbmNlVXJsID0gbmV3IFVSTChhdWRpZW5jZSk7XG4gICAgcmV0dXJuIG5ldyBVUkwoYXVkaWVuY2VVcmwucGF0aG5hbWUsIGF1ZGllbmNlVXJsLm9yaWdpbikudG9TdHJpbmcoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURwb3BIZWFkZXIoYXVkaWVuY2UsIG1ldGhvZCwgZHBvcEtleSkge1xuICAgIHJldHVybiBuZXcgam9zZS5TaWduSldUKHtcbiAgICAgICAgaHR1OiBub3JtYWxpemVIVFUoYXVkaWVuY2UpLFxuICAgICAgICBodG06IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgICBqdGk6IHV1aWQudjQoKSxcbiAgICB9KVxuICAgICAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHtcbiAgICAgICAgYWxnOiBQUkVGRVJSRURfU0lHTklOR19BTEdbMF0sXG4gICAgICAgIGp3azogZHBvcEtleS5wdWJsaWNLZXksXG4gICAgICAgIHR5cDogXCJkcG9wK2p3dFwiLFxuICAgIH0pXG4gICAgICAgIC5zZXRJc3N1ZWRBdCgpXG4gICAgICAgIC5zaWduKGRwb3BLZXkucHJpdmF0ZUtleSwge30pO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVEcG9wS2V5UGFpcigpIHtcbiAgICBjb25zdCB7IHByaXZhdGVLZXksIHB1YmxpY0tleSB9ID0gYXdhaXQgam9zZS5nZW5lcmF0ZUtleVBhaXIoUFJFRkVSUkVEX1NJR05JTkdfQUxHWzBdKTtcbiAgICBjb25zdCBkcG9wS2V5UGFpciA9IHtcbiAgICAgICAgcHJpdmF0ZUtleSxcbiAgICAgICAgcHVibGljS2V5OiBhd2FpdCBqb3NlLmV4cG9ydEpXSyhwdWJsaWNLZXkpLFxuICAgIH07XG4gICAgW2Rwb3BLZXlQYWlyLnB1YmxpY0tleS5hbGddID0gUFJFRkVSUkVEX1NJR05JTkdfQUxHO1xuICAgIHJldHVybiBkcG9wS2V5UGFpcjtcbn1cblxuY29uc3QgREVGQVVMVF9FWFBJUkFUSU9OX1RJTUVfU0VDT05EUyA9IDYwMDtcbmZ1bmN0aW9uIGlzRXhwZWN0ZWRBdXRoRXJyb3Ioc3RhdHVzQ29kZSkge1xuICAgIHJldHVybiBbNDAxLCA0MDNdLmluY2x1ZGVzKHN0YXR1c0NvZGUpO1xufVxuYXN5bmMgZnVuY3Rpb24gYnVpbGREcG9wRmV0Y2hPcHRpb25zKHRhcmdldFVybCwgYXV0aFRva2VuLCBkcG9wS2V5LCBkZWZhdWx0T3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IHVuaXZlcnNhbEZldGNoLkhlYWRlcnMoZGVmYXVsdE9wdGlvbnMgPT09IG51bGwgfHwgZGVmYXVsdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmF1bHRPcHRpb25zLmhlYWRlcnMpO1xuICAgIGhlYWRlcnMuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgRFBvUCAke2F1dGhUb2tlbn1gKTtcbiAgICBoZWFkZXJzLnNldChcIkRQb1BcIiwgYXdhaXQgY3JlYXRlRHBvcEhlYWRlcih0YXJnZXRVcmwsIChfYSA9IGRlZmF1bHRPcHRpb25zID09PSBudWxsIHx8IGRlZmF1bHRPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0T3B0aW9ucy5tZXRob2QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiZ2V0XCIsIGRwb3BLZXkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgaGVhZGVycyxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gYnVpbGRBdXRoZW50aWNhdGVkSGVhZGVycyh0YXJnZXRVcmwsIGF1dGhUb2tlbiwgZHBvcEtleSwgZGVmYXVsdE9wdGlvbnMpIHtcbiAgICBpZiAoZHBvcEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBidWlsZERwb3BGZXRjaE9wdGlvbnModGFyZ2V0VXJsLCBhdXRoVG9rZW4sIGRwb3BLZXksIGRlZmF1bHRPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyB1bml2ZXJzYWxGZXRjaC5IZWFkZXJzKGRlZmF1bHRPcHRpb25zID09PSBudWxsIHx8IGRlZmF1bHRPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0T3B0aW9ucy5oZWFkZXJzKTtcbiAgICBoZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgaGVhZGVycyxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gbWFrZUF1dGhlbnRpY2F0ZWRSZXF1ZXN0KHVuYXV0aEZldGNoLCBhY2Nlc3NUb2tlbiwgdXJsLCBkZWZhdWx0UmVxdWVzdEluaXQsIGRwb3BLZXkpIHtcbiAgICByZXR1cm4gdW5hdXRoRmV0Y2godXJsLCBhd2FpdCBidWlsZEF1dGhlbnRpY2F0ZWRIZWFkZXJzKHVybC50b1N0cmluZygpLCBhY2Nlc3NUb2tlbiwgZHBvcEtleSwgZGVmYXVsdFJlcXVlc3RJbml0KSk7XG59XG5hc3luYyBmdW5jdGlvbiByZWZyZXNoQWNjZXNzVG9rZW4ocmVmcmVzaE9wdGlvbnMsIGRwb3BLZXksIGV2ZW50RW1pdHRlcikge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB0b2tlblNldCA9IGF3YWl0IHJlZnJlc2hPcHRpb25zLnRva2VuUmVmcmVzaGVyLnJlZnJlc2gocmVmcmVzaE9wdGlvbnMuc2Vzc2lvbklkLCByZWZyZXNoT3B0aW9ucy5yZWZyZXNoVG9rZW4sIGRwb3BLZXkpO1xuICAgIGV2ZW50RW1pdHRlciA9PT0gbnVsbCB8fCBldmVudEVtaXR0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5TRVNTSU9OX0VYVEVOREVELCAoX2EgPSB0b2tlblNldC5leHBpcmVzSW4pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERFRkFVTFRfRVhQSVJBVElPTl9USU1FX1NFQ09ORFMpO1xuICAgIGlmICh0eXBlb2YgdG9rZW5TZXQucmVmcmVzaFRva2VuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGV2ZW50RW1pdHRlciA9PT0gbnVsbCB8fCBldmVudEVtaXR0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5ORVdfUkVGUkVTSF9UT0tFTiwgdG9rZW5TZXQucmVmcmVzaFRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWNjZXNzVG9rZW46IHRva2VuU2V0LmFjY2Vzc1Rva2VuLFxuICAgICAgICByZWZyZXNoVG9rZW46IHRva2VuU2V0LnJlZnJlc2hUb2tlbixcbiAgICAgICAgZXhwaXJlc0luOiB0b2tlblNldC5leHBpcmVzSW4sXG4gICAgfTtcbn1cbmNvbnN0IGNvbXB1dGVSZWZyZXNoRGVsYXkgPSAoZXhwaXJlc0luKSA9PiB7XG4gICAgaWYgKGV4cGlyZXNJbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBleHBpcmVzSW4gLSBSRUZSRVNIX0JFRk9SRV9FWFBJUkFUSU9OX1NFQ09ORFMgPiAwXG4gICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgZXhwaXJlc0luIC0gUkVGUkVTSF9CRUZPUkVfRVhQSVJBVElPTl9TRUNPTkRTXG4gICAgICAgICAgICA6IGV4cGlyZXNJbjtcbiAgICB9XG4gICAgcmV0dXJuIERFRkFVTFRfRVhQSVJBVElPTl9USU1FX1NFQ09ORFM7XG59O1xuYXN5bmMgZnVuY3Rpb24gYnVpbGRBdXRoZW50aWNhdGVkRmV0Y2godW5hdXRoRmV0Y2gsIGFjY2Vzc1Rva2VuLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBjdXJyZW50QWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICBsZXQgbGF0ZXN0VGltZW91dDtcbiAgICBjb25zdCBjdXJyZW50UmVmcmVzaE9wdGlvbnMgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucmVmcmVzaE9wdGlvbnM7XG4gICAgaWYgKGN1cnJlbnRSZWZyZXNoT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHByb2FjdGl2ZWx5UmVmcmVzaFRva2VuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFjY2Vzc1Rva2VuOiByZWZyZXNoZWRBY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuLCBleHBpcmVzSW4sIH0gPSBhd2FpdCByZWZyZXNoQWNjZXNzVG9rZW4oY3VycmVudFJlZnJlc2hPcHRpb25zLCBvcHRpb25zLmRwb3BLZXksIG9wdGlvbnMuZXZlbnRFbWl0dGVyKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50QWNjZXNzVG9rZW4gPSByZWZyZXNoZWRBY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgICAgICBpZiAocmVmcmVzaFRva2VuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlZnJlc2hPcHRpb25zLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxhdGVzdFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGxhdGVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KHByb2FjdGl2ZWx5UmVmcmVzaFRva2VuLCBjb21wdXRlUmVmcmVzaERlbGF5KGV4cGlyZXNJbikgKiAxMDAwKTtcbiAgICAgICAgICAgICAgICAoX2EgPSBvcHRpb25zLmV2ZW50RW1pdHRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVtaXQoRVZFTlRTLlRJTUVPVVRfU0VULCBsYXRlc3RUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBPaWRjUHJvdmlkZXJFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXZlbnRFbWl0dGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZW1pdChFVkVOVFMuRVJST1IsIGUuZXJyb3IsIGUuZXJyb3JEZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ldmVudEVtaXR0ZXIpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5lbWl0KEVWRU5UUy5TRVNTSU9OX0VYUElSRUQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEludmFsaWRSZXNwb25zZUVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgIGUubWlzc2luZ0ZpZWxkcy5pbmNsdWRlcyhcImFjY2Vzc190b2tlblwiKSkge1xuICAgICAgICAgICAgICAgICAgICAoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXZlbnRFbWl0dGVyKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZW1pdChFVkVOVFMuU0VTU0lPTl9FWFBJUkVEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxhdGVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KHByb2FjdGl2ZWx5UmVmcmVzaFRva2VuLCBjb21wdXRlUmVmcmVzaERlbGF5KG9wdGlvbnMuZXhwaXJlc0luKSAqIDEwMDApO1xuICAgICAgICAoX2EgPSBvcHRpb25zLmV2ZW50RW1pdHRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVtaXQoRVZFTlRTLlRJTUVPVVRfU0VULCBsYXRlc3RUaW1lb3V0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuZXZlbnRFbWl0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZXhwaXJhdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIG9wdGlvbnMuZXZlbnRFbWl0dGVyLmVtaXQoRVZFTlRTLlNFU1NJT05fRVhQSVJFRCk7XG4gICAgICAgIH0sIGNvbXB1dGVSZWZyZXNoRGVsYXkob3B0aW9ucy5leHBpcmVzSW4pICogMTAwMCk7XG4gICAgICAgIG9wdGlvbnMuZXZlbnRFbWl0dGVyLmVtaXQoRVZFTlRTLlRJTUVPVVRfU0VULCBleHBpcmF0aW9uVGltZW91dCk7XG4gICAgfVxuICAgIHJldHVybiBhc3luYyAodXJsLCByZXF1ZXN0SW5pdCkgPT4ge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBtYWtlQXV0aGVudGljYXRlZFJlcXVlc3QodW5hdXRoRmV0Y2gsIGN1cnJlbnRBY2Nlc3NUb2tlbiwgdXJsLCByZXF1ZXN0SW5pdCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRwb3BLZXkpO1xuICAgICAgICBjb25zdCBmYWlsZWRCdXROb3RFeHBlY3RlZEF1dGhFcnJvciA9ICFyZXNwb25zZS5vayAmJiAhaXNFeHBlY3RlZEF1dGhFcnJvcihyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICBpZiAocmVzcG9uc2Uub2sgfHwgZmFpbGVkQnV0Tm90RXhwZWN0ZWRBdXRoRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNCZWVuUmVkaXJlY3RlZCA9IHJlc3BvbnNlLnVybCAhPT0gdXJsO1xuICAgICAgICBpZiAoaGFzQmVlblJlZGlyZWN0ZWQgJiYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kcG9wS2V5KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IG1ha2VBdXRoZW50aWNhdGVkUmVxdWVzdCh1bmF1dGhGZXRjaCwgY3VycmVudEFjY2Vzc1Rva2VuLCByZXNwb25zZS51cmwsIHJlcXVlc3RJbml0LCBvcHRpb25zLmRwb3BLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9O1xufVxuXG5jb25zdCBTdG9yYWdlVXRpbGl0eUdldFJlc3BvbnNlID0gXCJnZXRSZXNwb25zZVwiO1xuY29uc3QgU3RvcmFnZVV0aWxpdHlNb2NrID0ge1xuICAgIGdldDogYXN5bmMgKGtleSwgb3B0aW9ucykgPT4gU3RvcmFnZVV0aWxpdHlHZXRSZXNwb25zZSxcbiAgICBzZXQ6IGFzeW5jIChrZXksIHZhbHVlKSA9PiB7XG4gICAgfSxcbiAgICBkZWxldGU6IGFzeW5jIChrZXkpID0+IHtcbiAgICB9LFxuICAgIGdldEZvclVzZXI6IGFzeW5jICh1c2VySWQsIGtleSwgb3B0aW9ucykgPT4gU3RvcmFnZVV0aWxpdHlHZXRSZXNwb25zZSxcbiAgICBzZXRGb3JVc2VyOiBhc3luYyAodXNlcklkLCB2YWx1ZXMsIG9wdGlvbnMpID0+IHtcbiAgICB9LFxuICAgIGRlbGV0ZUZvclVzZXI6IGFzeW5jICh1c2VySWQsIGtleSwgb3B0aW9ucykgPT4ge1xuICAgIH0sXG4gICAgZGVsZXRlQWxsVXNlckRhdGE6IGFzeW5jICh1c2VySWQsIG9wdGlvbnMpID0+IHtcbiAgICB9LFxufTtcbmNvbnN0IG1vY2tTdG9yYWdlID0gKHN0b3JlZCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVkO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldDogYXN5bmMgKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0b3JlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlW2tleV0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdG9yZVtrZXldKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBhc3luYyAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgc3RvcmVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGU6IGFzeW5jIChrZXkpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdG9yZVtrZXldO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuY29uc3QgbW9ja1N0b3JhZ2VVdGlsaXR5ID0gKHN0b3JlZCwgaXNTZWN1cmUgPSBmYWxzZSkgPT4ge1xuICAgIGlmIChpc1NlY3VyZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN0b3JhZ2VVdGlsaXR5KG1vY2tTdG9yYWdlKHN0b3JlZCksIG1vY2tTdG9yYWdlKHt9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3RvcmFnZVV0aWxpdHkobW9ja1N0b3JhZ2Uoe30pLCBtb2NrU3RvcmFnZShzdG9yZWQpKTtcbn07XG5cbmV4cG9ydHMuQWdncmVnYXRlSGFuZGxlciA9IEFnZ3JlZ2F0ZUhhbmRsZXI7XG5leHBvcnRzLkNvbmZpZ3VyYXRpb25FcnJvciA9IENvbmZpZ3VyYXRpb25FcnJvcjtcbmV4cG9ydHMuREVGQVVMVF9TQ09QRVMgPSBERUZBVUxUX1NDT1BFUztcbmV4cG9ydHMuRVZFTlRTID0gRVZFTlRTO1xuZXhwb3J0cy5Jbk1lbW9yeVN0b3JhZ2UgPSBJbk1lbW9yeVN0b3JhZ2U7XG5leHBvcnRzLkludmFsaWRSZXNwb25zZUVycm9yID0gSW52YWxpZFJlc3BvbnNlRXJyb3I7XG5leHBvcnRzLk5vdEltcGxlbWVudGVkRXJyb3IgPSBOb3RJbXBsZW1lbnRlZEVycm9yO1xuZXhwb3J0cy5PaWRjUHJvdmlkZXJFcnJvciA9IE9pZGNQcm92aWRlckVycm9yO1xuZXhwb3J0cy5QUkVGRVJSRURfU0lHTklOR19BTEcgPSBQUkVGRVJSRURfU0lHTklOR19BTEc7XG5leHBvcnRzLlJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EUyA9IFJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EUztcbmV4cG9ydHMuU09MSURfQ0xJRU5UX0FVVEhOX0tFWV9QUkVGSVggPSBTT0xJRF9DTElFTlRfQVVUSE5fS0VZX1BSRUZJWDtcbmV4cG9ydHMuU3RvcmFnZVV0aWxpdHkgPSBTdG9yYWdlVXRpbGl0eTtcbmV4cG9ydHMuU3RvcmFnZVV0aWxpdHlHZXRSZXNwb25zZSA9IFN0b3JhZ2VVdGlsaXR5R2V0UmVzcG9uc2U7XG5leHBvcnRzLlN0b3JhZ2VVdGlsaXR5TW9jayA9IFN0b3JhZ2VVdGlsaXR5TW9jaztcbmV4cG9ydHMuVVNFUl9TRVNTSU9OX1BSRUZJWCA9IFVTRVJfU0VTU0lPTl9QUkVGSVg7XG5leHBvcnRzLmJ1aWxkQXV0aGVudGljYXRlZEZldGNoID0gYnVpbGRBdXRoZW50aWNhdGVkRmV0Y2g7XG5leHBvcnRzLmJ1aWxkUHJveHlIYW5kbGVyID0gYnVpbGRQcm94eUhhbmRsZXI7XG5leHBvcnRzLmNyZWF0ZURwb3BIZWFkZXIgPSBjcmVhdGVEcG9wSGVhZGVyO1xuZXhwb3J0cy5kZXRlcm1pbmVTaWduaW5nQWxnID0gZGV0ZXJtaW5lU2lnbmluZ0FsZztcbmV4cG9ydHMuZmV0Y2hKd2tzID0gZmV0Y2hKd2tzO1xuZXhwb3J0cy5nZW5lcmF0ZURwb3BLZXlQYWlyID0gZ2VuZXJhdGVEcG9wS2V5UGFpcjtcbmV4cG9ydHMuZ2V0U2Vzc2lvbklkRnJvbU9hdXRoU3RhdGUgPSBnZXRTZXNzaW9uSWRGcm9tT2F1dGhTdGF0ZTtcbmV4cG9ydHMuZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkID0gZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkO1xuZXhwb3J0cy5oYW5kbGVSZWdpc3RyYXRpb24gPSBoYW5kbGVSZWdpc3RyYXRpb247XG5leHBvcnRzLmlzU3VwcG9ydGVkVG9rZW5UeXBlID0gaXNTdXBwb3J0ZWRUb2tlblR5cGU7XG5leHBvcnRzLmlzVmFsaWRSZWRpcmVjdFVybCA9IGlzVmFsaWRSZWRpcmVjdFVybDtcbmV4cG9ydHMubG9hZE9pZGNDb250ZXh0RnJvbVN0b3JhZ2UgPSBsb2FkT2lkY0NvbnRleHRGcm9tU3RvcmFnZTtcbmV4cG9ydHMubW9ja1N0b3JhZ2UgPSBtb2NrU3RvcmFnZTtcbmV4cG9ydHMubW9ja1N0b3JhZ2VVdGlsaXR5ID0gbW9ja1N0b3JhZ2VVdGlsaXR5O1xuZXhwb3J0cy5zYXZlU2Vzc2lvbkluZm9Ub1N0b3JhZ2UgPSBzYXZlU2Vzc2lvbkluZm9Ub1N0b3JhZ2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBpbmRleEJyb3dzZXIgPSBnbG9iYWxUaGlzLmZldGNoO1xyXG5jb25zdCB7IGZldGNoLCBSZXNwb25zZSwgUmVxdWVzdCwgSGVhZGVycyB9ID0gZ2xvYmFsVGhpcztcblxuZXhwb3J0cy5IZWFkZXJzID0gSGVhZGVycztcbmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5leHBvcnRzLlJlc3BvbnNlID0gUmVzcG9uc2U7XG5leHBvcnRzLmRlZmF1bHQgPSBpbmRleEJyb3dzZXI7XG5leHBvcnRzLmZldGNoID0gZmV0Y2g7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOSUxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX25pbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9wYXJzZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ2lmeVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjFcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3YuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2M1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdjIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2NFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdjMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2NVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdjQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2YWxpZGF0ZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdmFsaWRhdGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2ZXJzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF92ZXJzaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3YxLmpzXCIpKTtcblxudmFyIF92MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdjMuanNcIikpO1xuXG52YXIgX3YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi92NC5qc1wiKSk7XG5cbnZhciBfdjQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Y1LmpzXCIpKTtcblxudmFyIF9uaWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25pbC5qc1wiKSk7XG5cbnZhciBfdmVyc2lvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmVyc2lvbi5qc1wiKSk7XG5cbnZhciBfdmFsaWRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpKTtcblxudmFyIF9zdHJpbmdpZnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKSk7XG5cbnZhciBfcGFyc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BhcnNlLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLypcbiAqIEJyb3dzZXItY29tcGF0aWJsZSBKYXZhU2NyaXB0IE1ENVxuICpcbiAqIE1vZGlmaWNhdGlvbiBvZiBKYXZhU2NyaXB0IE1ENVxuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvSmF2YVNjcmlwdC1NRDVcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSwgU2ViYXN0aWFuIFRzY2hhblxuICogaHR0cHM6Ly9ibHVlaW1wLm5ldFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKlxuICogQmFzZWQgb25cbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUlNBIERhdGEgU2VjdXJpdHksIEluYy4gTUQ1IE1lc3NhZ2VcbiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRlZmluZWQgaW4gUkZDIDEzMjEuXG4gKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDlcbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby5cbiAqL1xuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KG1zZy5sZW5ndGgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzW2ldID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1kNVRvSGV4RW5jb2RlZEFycmF5KHdvcmRzVG9NZDUoYnl0ZXNUb1dvcmRzKGJ5dGVzKSwgYnl0ZXMubGVuZ3RoICogOCkpO1xufVxuLypcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcyB0byBhbiBhcnJheSBvZiBieXRlc1xuICovXG5cblxuZnVuY3Rpb24gbWQ1VG9IZXhFbmNvZGVkQXJyYXkoaW5wdXQpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW107XG4gIGNvbnN0IGxlbmd0aDMyID0gaW5wdXQubGVuZ3RoICogMzI7XG4gIGNvbnN0IGhleFRhYiA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDMyOyBpICs9IDgpIHtcbiAgICBjb25zdCB4ID0gaW5wdXRbaSA+PiA1XSA+Pj4gaSAlIDMyICYgMHhmZjtcbiAgICBjb25zdCBoZXggPSBwYXJzZUludChoZXhUYWIuY2hhckF0KHggPj4+IDQgJiAweDBmKSArIGhleFRhYi5jaGFyQXQoeCAmIDB4MGYpLCAxNik7XG4gICAgb3V0cHV0LnB1c2goaGV4KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZSBvdXRwdXQgbGVuZ3RoIHdpdGggcGFkZGluZyBhbmQgYml0IGxlbmd0aFxuICovXG5cblxuZnVuY3Rpb24gZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoOCkge1xuICByZXR1cm4gKGlucHV0TGVuZ3RoOCArIDY0ID4+PiA5IDw8IDQpICsgMTQgKyAxO1xufVxuLypcbiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGguXG4gKi9cblxuXG5mdW5jdGlvbiB3b3Jkc1RvTWQ1KHgsIGxlbikge1xuICAvKiBhcHBlbmQgcGFkZGluZyAqL1xuICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8IGxlbiAlIDMyO1xuICB4W2dldE91dHB1dExlbmd0aChsZW4pIC0gMV0gPSBsZW47XG4gIGxldCBhID0gMTczMjU4NDE5MztcbiAgbGV0IGIgPSAtMjcxNzMzODc5O1xuICBsZXQgYyA9IC0xNzMyNTg0MTk0O1xuICBsZXQgZCA9IDI3MTczMzg3ODtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgY29uc3Qgb2xkYSA9IGE7XG4gICAgY29uc3Qgb2xkYiA9IGI7XG4gICAgY29uc3Qgb2xkYyA9IGM7XG4gICAgY29uc3Qgb2xkZCA9IGQ7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaV0sIDcsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE0LCA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4Myk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNCwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTRdLCAyMywgLTM1MzA5NTU2KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaV0sIDExLCAtMzU4NTM3MjIyKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDldLCA0LCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaV0sIDYsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNik7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlQWRkKGMsIG9sZGMpO1xuICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICB9XG5cbiAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IGJ5dGVzIHRvIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHNcbiAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLlxuICovXG5cblxuZnVuY3Rpb24gYnl0ZXNUb1dvcmRzKGlucHV0KSB7XG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBsZW5ndGg4ID0gaW5wdXQubGVuZ3RoICogODtcbiAgY29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQzMkFycmF5KGdldE91dHB1dExlbmd0aChsZW5ndGg4KSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg4OyBpICs9IDgpIHtcbiAgICBvdXRwdXRbaSA+PiA1XSB8PSAoaW5wdXRbaSAvIDhdICYgMHhmZikgPDwgaSAlIDMyO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cbi8qXG4gKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XG4gKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gc2FmZUFkZCh4LCB5KSB7XG4gIGNvbnN0IGxzdyA9ICh4ICYgMHhmZmZmKSArICh5ICYgMHhmZmZmKTtcbiAgY29uc3QgbXN3ID0gKHggPj4gMTYpICsgKHkgPj4gMTYpICsgKGxzdyA+PiAxNik7XG4gIHJldHVybiBtc3cgPDwgMTYgfCBsc3cgJiAweGZmZmY7XG59XG4vKlxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICovXG5cblxuZnVuY3Rpb24gYml0Um90YXRlTGVmdChudW0sIGNudCkge1xuICByZXR1cm4gbnVtIDw8IGNudCB8IG51bSA+Pj4gMzIgLSBjbnQ7XG59XG4vKlxuICogVGhlc2UgZnVuY3Rpb25zIGltcGxlbWVudCB0aGUgZm91ciBiYXNpYyBvcGVyYXRpb25zIHRoZSBhbGdvcml0aG0gdXNlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1kNWNtbihxLCBhLCBiLCB4LCBzLCB0KSB7XG4gIHJldHVybiBzYWZlQWRkKGJpdFJvdGF0ZUxlZnQoc2FmZUFkZChzYWZlQWRkKGEsIHEpLCBzYWZlQWRkKHgsIHQpKSwgcyksIGIpO1xufVxuXG5mdW5jdGlvbiBtZDVmZihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYiAmIGMgfCB+YiAmIGQsIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5mdW5jdGlvbiBtZDVnZyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYiAmIGQgfCBjICYgfmQsIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5mdW5jdGlvbiBtZDVoaChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aWkoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGMgXiAoYiB8IH5kKSwgYSwgYiwgeCwgcywgdCk7XG59XG5cbnZhciBfZGVmYXVsdCA9IG1kNTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgcmFuZG9tVVVJRFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF92YWxpZGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghKDAsIF92YWxpZGF0ZS5kZWZhdWx0KSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICBsZXQgdjtcbiAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbnZhciBfZGVmYXVsdCA9IHBhcnNlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJuZztcbi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuXG5mdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pO1xuXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLy8gQWRhcHRlZCBmcm9tIENocmlzIFZlbmVzcycgU0hBMSBjb2RlIGF0XG4vLyBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL3NoYTEuaHRtbFxuZnVuY3Rpb24gZihzLCB4LCB5LCB6KSB7XG4gIHN3aXRjaCAocykge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB4ICYgeSBeIH54ICYgejtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4geCAmIHkgXiB4ICYgeiBeIHkgJiB6O1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcbiAgfVxufVxuXG5mdW5jdGlvbiBST1RMKHgsIG4pIHtcbiAgcmV0dXJuIHggPDwgbiB8IHggPj4+IDMyIC0gbjtcbn1cblxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICBjb25zdCBLID0gWzB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4Y2E2MmMxZDZdO1xuICBjb25zdCBIID0gWzB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjBdO1xuXG4gIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzLnB1c2gobXNnLmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICAvLyBDb252ZXJ0IEFycmF5LWxpa2UgdG8gQXJyYXlcbiAgICBieXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ5dGVzKTtcbiAgfVxuXG4gIGJ5dGVzLnB1c2goMHg4MCk7XG4gIGNvbnN0IGwgPSBieXRlcy5sZW5ndGggLyA0ICsgMjtcbiAgY29uc3QgTiA9IE1hdGguY2VpbChsIC8gMTYpO1xuICBjb25zdCBNID0gbmV3IEFycmF5KE4pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQzMkFycmF5KDE2KTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgYXJyW2pdID0gYnl0ZXNbaSAqIDY0ICsgaiAqIDRdIDw8IDI0IHwgYnl0ZXNbaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNiB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMl0gPDwgOCB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgM107XG4gICAgfVxuXG4gICAgTVtpXSA9IGFycjtcbiAgfVxuXG4gIE1bTiAtIDFdWzE0XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggLyBNYXRoLnBvdygyLCAzMik7XG4gIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTtcbiAgTVtOIC0gMV1bMTVdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAmIDB4ZmZmZmZmZmY7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyArK2kpIHtcbiAgICBjb25zdCBXID0gbmV3IFVpbnQzMkFycmF5KDgwKTtcblxuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgMTY7ICsrdCkge1xuICAgICAgV1t0XSA9IE1baV1bdF07XG4gICAgfVxuXG4gICAgZm9yIChsZXQgdCA9IDE2OyB0IDwgODA7ICsrdCkge1xuICAgICAgV1t0XSA9IFJPVEwoV1t0IC0gM10gXiBXW3QgLSA4XSBeIFdbdCAtIDE0XSBeIFdbdCAtIDE2XSwgMSk7XG4gICAgfVxuXG4gICAgbGV0IGEgPSBIWzBdO1xuICAgIGxldCBiID0gSFsxXTtcbiAgICBsZXQgYyA9IEhbMl07XG4gICAgbGV0IGQgPSBIWzNdO1xuICAgIGxldCBlID0gSFs0XTtcblxuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgODA7ICsrdCkge1xuICAgICAgY29uc3QgcyA9IE1hdGguZmxvb3IodCAvIDIwKTtcbiAgICAgIGNvbnN0IFQgPSBST1RMKGEsIDUpICsgZihzLCBiLCBjLCBkKSArIGUgKyBLW3NdICsgV1t0XSA+Pj4gMDtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gUk9UTChiLCAzMCkgPj4+IDA7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSBUO1xuICAgIH1cblxuICAgIEhbMF0gPSBIWzBdICsgYSA+Pj4gMDtcbiAgICBIWzFdID0gSFsxXSArIGIgPj4+IDA7XG4gICAgSFsyXSA9IEhbMl0gKyBjID4+PiAwO1xuICAgIEhbM10gPSBIWzNdICsgZCA+Pj4gMDtcbiAgICBIWzRdID0gSFs0XSArIGUgPj4+IDA7XG4gIH1cblxuICByZXR1cm4gW0hbMF0gPj4gMjQgJiAweGZmLCBIWzBdID4+IDE2ICYgMHhmZiwgSFswXSA+PiA4ICYgMHhmZiwgSFswXSAmIDB4ZmYsIEhbMV0gPj4gMjQgJiAweGZmLCBIWzFdID4+IDE2ICYgMHhmZiwgSFsxXSA+PiA4ICYgMHhmZiwgSFsxXSAmIDB4ZmYsIEhbMl0gPj4gMjQgJiAweGZmLCBIWzJdID4+IDE2ICYgMHhmZiwgSFsyXSA+PiA4ICYgMHhmZiwgSFsyXSAmIDB4ZmYsIEhbM10gPj4gMjQgJiAweGZmLCBIWzNdID4+IDE2ICYgMHhmZiwgSFszXSA+PiA4ICYgMHhmZiwgSFszXSAmIDB4ZmYsIEhbNF0gPj4gMjQgJiAweGZmLCBIWzRdID4+IDE2ICYgMHhmZiwgSFs0XSA+PiA4ICYgMHhmZiwgSFs0XSAmIDB4ZmZdO1xufVxuXG52YXIgX2RlZmF1bHQgPSBzaGExO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5leHBvcnRzLnVuc2FmZVN0cmluZ2lmeSA9IHVuc2FmZVN0cmluZ2lmeTtcblxudmFyIF92YWxpZGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5cbmZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoISgwLCBfdmFsaWRhdGUuZGVmYXVsdCkodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IHN0cmluZ2lmeTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JuZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcm5nLmpzXCIpKTtcblxudmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcbmxldCBfbm9kZUlkO1xuXG5sZXQgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG5sZXQgX2xhc3RNU2VjcyA9IDA7XG5sZXQgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGxldCBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICBjb25zdCBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICBsZXQgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOyAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcblxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICBjb25zdCBzZWVkQnl0ZXMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgX3JuZy5kZWZhdWx0KSgpO1xuXG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtzZWVkQnl0ZXNbMF0gfCAweDAxLCBzZWVkQnl0ZXNbMV0sIHNlZWRCeXRlc1syXSwgc2VlZEJ5dGVzWzNdLCBzZWVkQnl0ZXNbNF0sIHNlZWRCeXRlc1s1XV07XG4gICAgfVxuXG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxXG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG4gICAgfVxuICB9IC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuXG5cbiAgbGV0IG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IERhdGUubm93KCk7IC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcblxuICBsZXQgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7IC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcblxuICBjb25zdCBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIGNvbnN0IHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjsgLy8gYHRpbWVfbWlkYFxuXG4gIGNvbnN0IHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjsgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcblxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG5cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7IC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDsgLy8gYGNsb2NrX3NlcV9sb3dgXG5cbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmOyAvLyBgbm9kZWBcblxuICBmb3IgKGxldCBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgfHwgKDAsIF9zdHJpbmdpZnkudW5zYWZlU3RyaW5naWZ5KShiKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gdjE7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF92ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi92MzUuanNcIikpO1xuXG52YXIgX21kID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tZDUuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCB2MyA9ICgwLCBfdi5kZWZhdWx0KSgndjMnLCAweDMwLCBfbWQuZGVmYXVsdCk7XG52YXIgX2RlZmF1bHQgPSB2MztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5VUkwgPSBleHBvcnRzLkROUyA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdCA9IHYzNTtcblxudmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5cbnZhciBfcGFyc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BhcnNlLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIGNvbnN0IGJ5dGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnRzLkROUyA9IEROUztcbmNvbnN0IFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0cy5VUkwgPSBVUkw7XG5cbmZ1bmN0aW9uIHYzNShuYW1lLCB2ZXJzaW9uLCBoYXNoZnVuYykge1xuICBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQodmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpIHtcbiAgICB2YXIgX25hbWVzcGFjZTtcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gKDAsIF9wYXJzZS5kZWZhdWx0KShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmICgoKF9uYW1lc3BhY2UgPSBuYW1lc3BhY2UpID09PSBudWxsIHx8IF9uYW1lc3BhY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9uYW1lc3BhY2UubGVuZ3RoKSAhPT0gMTYpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpO1xuICAgIH0gLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcblxuXG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2UpO1xuICAgIGJ5dGVzLnNldCh2YWx1ZSwgbmFtZXNwYWNlLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7XG4gICAgYnl0ZXNbNl0gPSBieXRlc1s2XSAmIDB4MGYgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gYnl0ZXNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfc3RyaW5naWZ5LnVuc2FmZVN0cmluZ2lmeSkoYnl0ZXMpO1xuICB9IC8vIEZ1bmN0aW9uI25hbWUgaXMgbm90IHNldHRhYmxlIG9uIHNvbWUgcGxhdGZvcm1zICgjMjcwKVxuXG5cbiAgdHJ5IHtcbiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICB9IGNhdGNoIChlcnIpIHt9IC8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG5cblxuICBnZW5lcmF0ZVVVSUQuRE5TID0gRE5TO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gVVJMO1xuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX25hdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbmF0aXZlLmpzXCIpKTtcblxudmFyIF9ybmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JuZy5qc1wiKSk7XG5cbnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBpZiAoX25hdGl2ZS5kZWZhdWx0LnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgIHJldHVybiBfbmF0aXZlLmRlZmF1bHQucmFuZG9tVVVJRCgpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBfcm5nLmRlZmF1bHQpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfc3RyaW5naWZ5LnVuc2FmZVN0cmluZ2lmeSkocm5kcyk7XG59XG5cbnZhciBfZGVmYXVsdCA9IHY0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdjM1LmpzXCIpKTtcblxudmFyIF9zaGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYTEuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCB2NSA9ICgwLCBfdi5kZWZhdWx0KSgndjUnLCAweDUwLCBfc2hhLmRlZmF1bHQpO1xudmFyIF9kZWZhdWx0ID0gdjU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWdleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVnZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgX3JlZ2V4LmRlZmF1bHQudGVzdCh1dWlkKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gdmFsaWRhdGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF92YWxpZGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCEoMCwgX3ZhbGlkYXRlLmRlZmF1bHQpKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cblxudmFyIF9kZWZhdWx0ID0gdmVyc2lvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImNvbnN0IHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHJhbmRvbVVVSURcbn07IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICByZXR1cm4gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB7IE9pZGNDbGllbnQsIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlIH0gZnJvbSAnQGlucnVwdC9vaWRjLWNsaWVudCc7XG5leHBvcnQgeyBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yLCBDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IsIEluTWVtb3J5V2ViU3RvcmFnZSwgTG9nLCBPaWRjQ2xpZW50LCBTZXNzaW9uTW9uaXRvciwgVXNlciwgVXNlck1hbmFnZXIsIFZlcnNpb24sIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlIH0gZnJvbSAnQGlucnVwdC9vaWRjLWNsaWVudCc7XG5pbXBvcnQgeyBkZXRlcm1pbmVTaWduaW5nQWxnLCBQUkVGRVJSRURfU0lHTklOR19BTEcsIGdldFdlYmlkRnJvbVRva2VuUGF5bG9hZCwgT2lkY1Byb3ZpZGVyRXJyb3IsIEludmFsaWRSZXNwb25zZUVycm9yLCBnZW5lcmF0ZURwb3BLZXlQYWlyLCBjcmVhdGVEcG9wSGVhZGVyLCBERUZBVUxUX1NDT1BFUyB9IGZyb20gJ0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWNvcmUnO1xuaW1wb3J0IHsgZmV0Y2ggYXMgZmV0Y2gkMSB9IGZyb20gJ0BpbnJ1cHQvdW5pdmVyc2FsLWZldGNoJztcblxuZnVuY3Rpb24gcHJvY2Vzc0Vycm9yUmVzcG9uc2UocmVzcG9uc2VCb2R5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGlmIChyZXNwb25zZUJvZHkuZXJyb3IgPT09IFwiaW52YWxpZF9yZWRpcmVjdF91cmlcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER5bmFtaWMgY2xpZW50IHJlZ2lzdHJhdGlvbiBmYWlsZWQ6IHRoZSBwcm92aWRlZCByZWRpcmVjdCB1cmkgWyR7KF9hID0gb3B0aW9ucy5yZWRpcmVjdFVybCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvU3RyaW5nKCl9XSBpcyBpbnZhbGlkIC0gJHsoX2IgPSByZXNwb25zZUJvZHkuZXJyb3JfZGVzY3JpcHRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCJ9YCk7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZUJvZHkuZXJyb3IgPT09IFwiaW52YWxpZF9jbGllbnRfbWV0YWRhdGFcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER5bmFtaWMgY2xpZW50IHJlZ2lzdHJhdGlvbiBmYWlsZWQ6IHRoZSBwcm92aWRlZCBjbGllbnQgbWV0YWRhdGEgJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX0gaXMgaW52YWxpZCAtICR7KF9jID0gcmVzcG9uc2VCb2R5LmVycm9yX2Rlc2NyaXB0aW9uKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcIlwifWApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYER5bmFtaWMgY2xpZW50IHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICR7cmVzcG9uc2VCb2R5LmVycm9yfSAtICR7KF9kID0gcmVzcG9uc2VCb2R5LmVycm9yX2Rlc2NyaXB0aW9uKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBcIlwifWApO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVSZWdpc3RyYXRpb25SZXNwb25zZShyZXNwb25zZUJvZHksIG9wdGlvbnMpIHtcbiAgICBpZiAocmVzcG9uc2VCb2R5LmNsaWVudF9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRHluYW1pYyBjbGllbnQgcmVnaXN0cmF0aW9uIGZhaWxlZDogbm8gY2xpZW50X2lkIGhhcyBiZWVuIGZvdW5kIG9uICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2VCb2R5KX1gKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucmVkaXJlY3RVcmwgJiZcbiAgICAgICAgKHJlc3BvbnNlQm9keS5yZWRpcmVjdF91cmlzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHJlc3BvbnNlQm9keS5yZWRpcmVjdF91cmlzWzBdICE9PSBvcHRpb25zLnJlZGlyZWN0VXJsLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRHluYW1pYyBjbGllbnQgcmVnaXN0cmF0aW9uIGZhaWxlZDogdGhlIHJldHVybmVkIHJlZGlyZWN0IFVSSXMgJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZUJvZHkucmVkaXJlY3RfdXJpcyl9IGRvbid0IG1hdGNoIHRoZSBwcm92aWRlZCAke0pTT04uc3RyaW5naWZ5KFtcbiAgICAgICAgICAgIG9wdGlvbnMucmVkaXJlY3RVcmwudG9TdHJpbmcoKSxcbiAgICAgICAgXSl9YCk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJDbGllbnQob3B0aW9ucywgaXNzdWVyQ29uZmlnKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghaXNzdWVyQ29uZmlnLnJlZ2lzdHJhdGlvbkVuZHBvaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkR5bmFtaWMgUmVnaXN0cmF0aW9uIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQgYmVjYXVzZSB0aGUgaXNzdWVyIGhhcyBubyByZWdpc3RyYXRpb24gZW5kcG9pbnQuXCIpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaXNzdWVyQ29uZmlnLmlkVG9rZW5TaWduaW5nQWxnVmFsdWVzU3VwcG9ydGVkKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgT0lEQyBpc3N1ZXIgZGlzY292ZXJ5IHByb2ZpbGUgaXMgbWlzc2luZyB0aGUgJ2lkX3Rva2VuX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQnIHZhbHVlLCB3aGljaCBpcyBtYW5kYXRvcnkuXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaWduaW5nQWxnID0gZGV0ZXJtaW5lU2lnbmluZ0FsZyhpc3N1ZXJDb25maWcuaWRUb2tlblNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0ZWQsIFBSRUZFUlJFRF9TSUdOSU5HX0FMRyk7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBjbGllbnRfbmFtZTogb3B0aW9ucy5jbGllbnROYW1lLFxuICAgICAgICBhcHBsaWNhdGlvbl90eXBlOiBcIndlYlwiLFxuICAgICAgICByZWRpcmVjdF91cmlzOiBbKF9hID0gb3B0aW9ucy5yZWRpcmVjdFVybCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvU3RyaW5nKCldLFxuICAgICAgICBzdWJqZWN0X3R5cGU6IFwicHVibGljXCIsXG4gICAgICAgIHRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kOiBcImNsaWVudF9zZWNyZXRfYmFzaWNcIixcbiAgICAgICAgaWRfdG9rZW5fc2lnbmVkX3Jlc3BvbnNlX2FsZzogc2lnbmluZ0FsZyxcbiAgICAgICAgZ3JhbnRfdHlwZXM6IFtcImF1dGhvcml6YXRpb25fY29kZVwiLCBcInJlZnJlc2hfdG9rZW5cIl0sXG4gICAgfTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGNvbnN0IHJlZ2lzdGVyUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChpc3N1ZXJDb25maWcucmVnaXN0cmF0aW9uRW5kcG9pbnQudG9TdHJpbmcoKSwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjb25maWcpLFxuICAgIH0pO1xuICAgIGlmIChyZWdpc3RlclJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IGF3YWl0IHJlZ2lzdGVyUmVzcG9uc2UuanNvbigpO1xuICAgICAgICB2YWxpZGF0ZVJlZ2lzdHJhdGlvblJlc3BvbnNlKHJlc3BvbnNlQm9keSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnRJZDogcmVzcG9uc2VCb2R5LmNsaWVudF9pZCxcbiAgICAgICAgICAgIGNsaWVudFNlY3JldDogcmVzcG9uc2VCb2R5LmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICBpZFRva2VuU2lnbmVkUmVzcG9uc2VBbGc6IHJlc3BvbnNlQm9keS5pZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnLFxuICAgICAgICAgICAgY2xpZW50VHlwZTogXCJkeW5hbWljXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChyZWdpc3RlclJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgIHByb2Nlc3NFcnJvclJlc3BvbnNlKGF3YWl0IHJlZ2lzdGVyUmVzcG9uc2UuanNvbigpLCBvcHRpb25zKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBEeW5hbWljIGNsaWVudCByZWdpc3RyYXRpb24gZmFpbGVkOiB0aGUgc2VydmVyIHJldHVybmVkICR7cmVnaXN0ZXJSZXNwb25zZS5zdGF0dXN9ICR7cmVnaXN0ZXJSZXNwb25zZS5zdGF0dXNUZXh0fSAtICR7YXdhaXQgcmVnaXN0ZXJSZXNwb25zZS50ZXh0KCl9YCk7XG59XG5cbmZ1bmN0aW9uIGhhc0Vycm9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmVycm9yICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlLmVycm9yID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaGFzRXJyb3JEZXNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUuZXJyb3JfZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUuZXJyb3JfZGVzY3JpcHRpb24gPT09IFwic3RyaW5nXCIpO1xufVxuZnVuY3Rpb24gaGFzRXJyb3JVcmkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuZXJyb3JfdXJpICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlLmVycm9yX3VyaSA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGhhc0FjY2Vzc1Rva2VuKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZS5hY2Nlc3NfdG9rZW4gIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUuYWNjZXNzX3Rva2VuID09PSBcInN0cmluZ1wiKTtcbn1cbmZ1bmN0aW9uIGhhc0lkVG9rZW4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuaWRfdG9rZW4gIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUuaWRfdG9rZW4gPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBoYXNSZWZyZXNoVG9rZW4odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlLnJlZnJlc2hfdG9rZW4gIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUucmVmcmVzaF90b2tlbiA9PT0gXCJzdHJpbmdcIik7XG59XG5mdW5jdGlvbiBoYXNUb2tlblR5cGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUudG9rZW5fdHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZS50b2tlbl90eXBlID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaGFzRXhwaXJlc0luKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmV4cGlyZXNfaW4gPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdmFsdWUuZXhwaXJlc19pbiA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJlY29uZGl0aW9ucyhpc3N1ZXIsIGRhdGEpIHtcbiAgICBpZiAoZGF0YS5ncmFudFR5cGUgJiZcbiAgICAgICAgKCFpc3N1ZXIuZ3JhbnRUeXBlc1N1cHBvcnRlZCB8fFxuICAgICAgICAgICAgIWlzc3Vlci5ncmFudFR5cGVzU3VwcG9ydGVkLmluY2x1ZGVzKGRhdGEuZ3JhbnRUeXBlKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgaXNzdWVyIFske2lzc3Vlci5pc3N1ZXJ9XSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBbJHtkYXRhLmdyYW50VHlwZX1dIGdyYW50YCk7XG4gICAgfVxuICAgIGlmICghaXNzdWVyLnRva2VuRW5kcG9pbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGlzIGlzc3VlciBbJHtpc3N1ZXIuaXNzdWVyfV0gZG9lcyBub3QgaGF2ZSBhIHRva2VuIGVuZHBvaW50YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVUb2tlbkVuZHBvaW50UmVzcG9uc2UodG9rZW5SZXNwb25zZSwgZHBvcCkge1xuICAgIGlmIChoYXNFcnJvcih0b2tlblJlc3BvbnNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgT2lkY1Byb3ZpZGVyRXJyb3IoYFRva2VuIGVuZHBvaW50IHJldHVybmVkIGVycm9yIFske3Rva2VuUmVzcG9uc2UuZXJyb3J9XSR7aGFzRXJyb3JEZXNjcmlwdGlvbih0b2tlblJlc3BvbnNlKVxuICAgICAgICAgICAgPyBgOiAke3Rva2VuUmVzcG9uc2UuZXJyb3JfZGVzY3JpcHRpb259YFxuICAgICAgICAgICAgOiBcIlwifSR7aGFzRXJyb3JVcmkodG9rZW5SZXNwb25zZSkgPyBgIChzZWUgJHt0b2tlblJlc3BvbnNlLmVycm9yX3VyaX0pYCA6IFwiXCJ9YCwgdG9rZW5SZXNwb25zZS5lcnJvciwgaGFzRXJyb3JEZXNjcmlwdGlvbih0b2tlblJlc3BvbnNlKVxuICAgICAgICAgICAgPyB0b2tlblJlc3BvbnNlLmVycm9yX2Rlc2NyaXB0aW9uXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlmICghaGFzQWNjZXNzVG9rZW4odG9rZW5SZXNwb25zZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXNwb25zZUVycm9yKFtcImFjY2Vzc190b2tlblwiXSk7XG4gICAgfVxuICAgIGlmICghaGFzSWRUb2tlbih0b2tlblJlc3BvbnNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlc3BvbnNlRXJyb3IoW1wiaWRfdG9rZW5cIl0pO1xuICAgIH1cbiAgICBpZiAoIWhhc1Rva2VuVHlwZSh0b2tlblJlc3BvbnNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlc3BvbnNlRXJyb3IoW1widG9rZW5fdHlwZVwiXSk7XG4gICAgfVxuICAgIGlmICghaGFzRXhwaXJlc0luKHRva2VuUmVzcG9uc2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVzcG9uc2VFcnJvcihbXCJleHBpcmVzX2luXCJdKTtcbiAgICB9XG4gICAgaWYgKCFkcG9wICYmIHRva2VuUmVzcG9uc2UudG9rZW5fdHlwZS50b0xvd2VyQ2FzZSgpICE9PSBcImJlYXJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0b2tlbiBlbmRwb2ludCByZXNwb25zZTogcmVxdWVzdGVkIGEgW0JlYXJlcl0gdG9rZW4sIGJ1dCBnb3QgYSAndG9rZW5fdHlwZScgdmFsdWUgb2YgWyR7dG9rZW5SZXNwb25zZS50b2tlbl90eXBlfV0uYCk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlblJlc3BvbnNlO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0VG9rZW5zKGlzc3VlciwgY2xpZW50LCBkYXRhLCBkcG9wKSB7XG4gICAgdmFsaWRhdGVQcmVjb25kaXRpb25zKGlzc3VlciwgZGF0YSk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICB9O1xuICAgIGxldCBkcG9wS2V5O1xuICAgIGlmIChkcG9wKSB7XG4gICAgICAgIGRwb3BLZXkgPSBhd2FpdCBnZW5lcmF0ZURwb3BLZXlQYWlyKCk7XG4gICAgICAgIGhlYWRlcnMuRFBvUCA9IGF3YWl0IGNyZWF0ZURwb3BIZWFkZXIoaXNzdWVyLnRva2VuRW5kcG9pbnQsIFwiUE9TVFwiLCBkcG9wS2V5KTtcbiAgICB9XG4gICAgaWYgKGNsaWVudC5jbGllbnRTZWNyZXQpIHtcbiAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJhc2ljICR7YnRvYShgJHtjbGllbnQuY2xpZW50SWR9OiR7Y2xpZW50LmNsaWVudFNlY3JldH1gKX1gO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHtcbiAgICAgICAgZ3JhbnRfdHlwZTogZGF0YS5ncmFudFR5cGUsXG4gICAgICAgIHJlZGlyZWN0X3VyaTogZGF0YS5yZWRpcmVjdFVybCxcbiAgICAgICAgY29kZTogZGF0YS5jb2RlLFxuICAgICAgICBjb2RlX3ZlcmlmaWVyOiBkYXRhLmNvZGVWZXJpZmllcixcbiAgICAgICAgY2xpZW50X2lkOiBjbGllbnQuY2xpZW50SWQsXG4gICAgfTtcbiAgICBjb25zdCB0b2tlblJlcXVlc3RJbml0ID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBib2R5OiBuZXcgVVJMU2VhcmNoUGFyYW1zKHJlcXVlc3RCb2R5KS50b1N0cmluZygpLFxuICAgIH07XG4gICAgY29uc3QgcmF3VG9rZW5SZXNwb25zZSA9IGF3YWl0IGZldGNoJDEoaXNzdWVyLnRva2VuRW5kcG9pbnQsIHRva2VuUmVxdWVzdEluaXQpO1xuICAgIGNvbnN0IGpzb25Ub2tlblJlc3BvbnNlID0gKGF3YWl0IHJhd1Rva2VuUmVzcG9uc2UuanNvbigpKTtcbiAgICBjb25zdCB0b2tlblJlc3BvbnNlID0gdmFsaWRhdGVUb2tlbkVuZHBvaW50UmVzcG9uc2UoanNvblRva2VuUmVzcG9uc2UsIGRwb3ApO1xuICAgIGNvbnN0IHdlYklkID0gYXdhaXQgZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkKHRva2VuUmVzcG9uc2UuaWRfdG9rZW4sIGlzc3Vlci5qd2tzVXJpLCBpc3N1ZXIuaXNzdWVyLCBjbGllbnQuY2xpZW50SWQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFjY2Vzc1Rva2VuOiB0b2tlblJlc3BvbnNlLmFjY2Vzc190b2tlbixcbiAgICAgICAgaWRUb2tlbjogdG9rZW5SZXNwb25zZS5pZF90b2tlbixcbiAgICAgICAgcmVmcmVzaFRva2VuOiBoYXNSZWZyZXNoVG9rZW4odG9rZW5SZXNwb25zZSlcbiAgICAgICAgICAgID8gdG9rZW5SZXNwb25zZS5yZWZyZXNoX3Rva2VuXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgd2ViSWQsXG4gICAgICAgIGRwb3BLZXksXG4gICAgICAgIGV4cGlyZXNJbjogdG9rZW5SZXNwb25zZS5leHBpcmVzX2luLFxuICAgIH07XG59XG5hc3luYyBmdW5jdGlvbiBnZXRCZWFyZXJUb2tlbihyZWRpcmVjdFVybCkge1xuICAgIGxldCBzaWduaW5SZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBuZXcgT2lkY0NsaWVudCh7XG4gICAgICAgICAgICByZXNwb25zZV9tb2RlOiBcInF1ZXJ5XCIsXG4gICAgICAgICAgICBsb2FkVXNlckluZm86IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgc2lnbmluUmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlKHJlZGlyZWN0VXJsKTtcbiAgICAgICAgaWYgKGNsaWVudC5zZXR0aW5ncy5tZXRhZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmV0cmlldmUgaXNzdWVyIG1ldGFkYXRhIGZyb20gY2xpZW50IGluZm9ybWF0aW9uIGluIHN0b3JhZ2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGllbnQuc2V0dGluZ3MubWV0YWRhdGEuandrc191cmkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBzb21lIGlzc3VlciBtZXRhZGF0YSBmcm9tIGNsaWVudCBpbmZvcm1hdGlvbiBpbiBzdG9yYWdlOiAnandrc191cmknIGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xpZW50LnNldHRpbmdzLm1ldGFkYXRhLmlzc3VlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHNvbWUgaXNzdWVyIG1ldGFkYXRhIGZyb20gY2xpZW50IGluZm9ybWF0aW9uIGluIHN0b3JhZ2U6ICdpc3N1ZXInIGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xpZW50LnNldHRpbmdzLmNsaWVudF9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHNvbWUgY2xpZW50IGluZm9ybWF0aW9uIGluIHN0b3JhZ2U6ICdjbGllbnRfaWQnIGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3ZWJJZCA9IGF3YWl0IGdldFdlYmlkRnJvbVRva2VuUGF5bG9hZChzaWduaW5SZXNwb25zZS5pZF90b2tlbiwgY2xpZW50LnNldHRpbmdzLm1ldGFkYXRhLmp3a3NfdXJpLCBjbGllbnQuc2V0dGluZ3MubWV0YWRhdGEuaXNzdWVyLCBjbGllbnQuc2V0dGluZ3MuY2xpZW50X2lkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBzaWduaW5SZXNwb25zZS5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICBpZFRva2VuOiBzaWduaW5SZXNwb25zZS5pZF90b2tlbixcbiAgICAgICAgICAgIHdlYklkLFxuICAgICAgICAgICAgcmVmcmVzaFRva2VuOiBzaWduaW5SZXNwb25zZS5yZWZyZXNoX3Rva2VuLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvYmxlbSBoYW5kbGluZyBBdXRoIENvZGUgR3JhbnQgKEZsb3cpIHJlZGlyZWN0IC0gVVJMIFske3JlZGlyZWN0VXJsfV06ICR7ZXJyfWApO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGdldERwb3BUb2tlbihpc3N1ZXIsIGNsaWVudCwgZGF0YSkge1xuICAgIHJldHVybiBnZXRUb2tlbnMoaXNzdWVyLCBjbGllbnQsIGRhdGEsIHRydWUpO1xufVxuXG5jb25zdCBpc1ZhbGlkVXJsID0gKHVybCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIG5ldyBVUkwodXJsKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2gocmVmcmVzaFRva2VuLCBpc3N1ZXIsIGNsaWVudCwgZHBvcEtleSkge1xuICAgIGlmIChjbGllbnQuY2xpZW50SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjbGllbnQgSUQgYXZhaWxhYmxlIHdoZW4gdHJ5aW5nIHRvIHJlZnJlc2ggdGhlIGFjY2VzcyB0b2tlbi5cIik7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xuICAgICAgICBncmFudF90eXBlOiBcInJlZnJlc2hfdG9rZW5cIixcbiAgICAgICAgcmVmcmVzaF90b2tlbjogcmVmcmVzaFRva2VuLFxuICAgICAgICBzY29wZTogREVGQVVMVF9TQ09QRVMsXG4gICAgfTtcbiAgICBsZXQgZHBvcEhlYWRlciA9IHt9O1xuICAgIGlmIChkcG9wS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZHBvcEhlYWRlciA9IHtcbiAgICAgICAgICAgIERQb1A6IGF3YWl0IGNyZWF0ZURwb3BIZWFkZXIoaXNzdWVyLnRva2VuRW5kcG9pbnQsIFwiUE9TVFwiLCBkcG9wS2V5KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbGV0IGF1dGhIZWFkZXIgPSB7fTtcbiAgICBpZiAoY2xpZW50LmNsaWVudFNlY3JldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGF1dGhIZWFkZXIgPSB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmFzaWMgJHtidG9hKGAke2NsaWVudC5jbGllbnRJZH06JHtjbGllbnQuY2xpZW50U2VjcmV0fWApfWAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVmFsaWRVcmwoY2xpZW50LmNsaWVudElkKSkge1xuICAgICAgICByZXF1ZXN0Qm9keS5jbGllbnRfaWQgPSBjbGllbnQuY2xpZW50SWQ7XG4gICAgfVxuICAgIGNvbnN0IHJhd1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2gkMShpc3N1ZXIudG9rZW5FbmRwb2ludCwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBib2R5OiBuZXcgVVJMU2VhcmNoUGFyYW1zKHJlcXVlc3RCb2R5KS50b1N0cmluZygpLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAuLi5kcG9wSGVhZGVyLFxuICAgICAgICAgICAgLi4uYXV0aEhlYWRlcixcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgbGV0IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgcmF3UmVzcG9uc2UuanNvbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSB0b2tlbiBlbmRwb2ludCBvZiBpc3N1ZXIgJHtpc3N1ZXIuaXNzdWVyfSByZXR1cm5lZCBhIG1hbGZvcm1lZCByZXNwb25zZS5gKTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGVkUmVzcG9uc2UgPSB2YWxpZGF0ZVRva2VuRW5kcG9pbnRSZXNwb25zZShyZXNwb25zZSwgZHBvcEtleSAhPT0gdW5kZWZpbmVkKTtcbiAgICBjb25zdCB3ZWJJZCA9IGF3YWl0IGdldFdlYmlkRnJvbVRva2VuUGF5bG9hZCh2YWxpZGF0ZWRSZXNwb25zZS5pZF90b2tlbiwgaXNzdWVyLmp3a3NVcmksIGlzc3Vlci5pc3N1ZXIsIGNsaWVudC5jbGllbnRJZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWNjZXNzVG9rZW46IHZhbGlkYXRlZFJlc3BvbnNlLmFjY2Vzc190b2tlbixcbiAgICAgICAgaWRUb2tlbjogdmFsaWRhdGVkUmVzcG9uc2UuaWRfdG9rZW4sXG4gICAgICAgIHJlZnJlc2hUb2tlbjogdHlwZW9mIHZhbGlkYXRlZFJlc3BvbnNlLnJlZnJlc2hfdG9rZW4gPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgID8gdmFsaWRhdGVkUmVzcG9uc2UucmVmcmVzaF90b2tlblxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIHdlYklkLFxuICAgICAgICBkcG9wS2V5LFxuICAgICAgICBleHBpcmVzSW46IHZhbGlkYXRlZFJlc3BvbnNlLmV4cGlyZXNfaW4sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlT2lkY1F1ZXJ5UGFyYW0ocmVkaXJlY3RVcmwpIHtcbiAgICBjb25zdCBjbGVhbmVkVXJsID0gbmV3IFVSTChyZWRpcmVjdFVybCk7XG4gICAgY2xlYW5lZFVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKFwiY29kZVwiKTtcbiAgICBjbGVhbmVkVXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoXCJzdGF0ZVwiKTtcbiAgICBjbGVhbmVkVXJsLmhhc2ggPSBcIlwiO1xuICAgIGlmIChyZWRpcmVjdFVybC5pbmNsdWRlcyhgJHtjbGVhbmVkVXJsLm9yaWdpbn0vYCkpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuZWRVcmwuaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGAke2NsZWFuZWRVcmwub3JpZ2lufSR7Y2xlYW5lZFVybC5ocmVmLnN1YnN0cmluZyhjbGVhbmVkVXJsLm9yaWdpbi5sZW5ndGggKyAxKX1gO1xufVxuYXN5bmMgZnVuY3Rpb24gY2xlYXJPaWRjUGVyc2lzdGVudFN0b3JhZ2UoKSB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IE9pZGNDbGllbnQoe1xuICAgICAgICByZXNwb25zZV9tb2RlOiBcInF1ZXJ5XCIsXG4gICAgfSk7XG4gICAgYXdhaXQgY2xpZW50LmNsZWFyU3RhbGVTdGF0ZShuZXcgV2ViU3RvcmFnZVN0YXRlU3RvcmUoe30pKTtcbiAgICBjb25zdCBteVN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgIGNvbnN0IGl0ZW1zVG9SZW1vdmUgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBteVN0b3JhZ2UubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbXlTdG9yYWdlLmtleShpKTtcbiAgICAgICAgaWYgKGtleSAmJlxuICAgICAgICAgICAgKGtleS5tYXRjaCgvXm9pZGNcXC4uKyQvKSB8fFxuICAgICAgICAgICAgICAgIGtleS5tYXRjaCgvXnNvbGlkQ2xpZW50QXV0aGVudGljYXRpb25Vc2VyOi4rJC8pKSkge1xuICAgICAgICAgICAgaXRlbXNUb1JlbW92ZS5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXRlbXNUb1JlbW92ZS5mb3JFYWNoKChrZXkpID0+IG15U3RvcmFnZS5yZW1vdmVJdGVtKGtleSkpO1xufVxuXG5leHBvcnQgeyBjbGVhck9pZGNQZXJzaXN0ZW50U3RvcmFnZSwgZ2V0QmVhcmVyVG9rZW4sIGdldERwb3BUb2tlbiwgcmVmcmVzaCwgcmVnaXN0ZXJDbGllbnQsIHJlbW92ZU9pZGNRdWVyeVBhcmFtIH07XG4iLCIhZnVuY3Rpb24gdChlLHIpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPXIoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10scik7ZWxzZXt2YXIgbj1yKCk7Zm9yKHZhciBpIGluIG4pKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHM6ZSlbaV09bltpXX19KHRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIHIobil7aWYoZVtuXSlyZXR1cm4gZVtuXS5leHBvcnRzO3ZhciBpPWVbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W25dLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLHIpLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIHIubT10LHIuYz1lLHIuZD1mdW5jdGlvbih0LGUsbil7ci5vKHQsZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsZ2V0Om59KX0sci5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHIudD1mdW5jdGlvbih0LGUpe2lmKDEmZSYmKHQ9cih0KSksOCZlKXJldHVybiB0O2lmKDQmZSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZlJiZcInN0cmluZ1wiIT10eXBlb2YgdClmb3IodmFyIGkgaW4gdClyLmQobixpLGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfS5iaW5kKG51bGwsaSkpO3JldHVybiBufSxyLm49ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uIGUoKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbiBlKCl7cmV0dXJuIHR9O3JldHVybiByLmQoZSxcImFcIixlKSxlfSxyLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LHIucD1cIlwiLHIoci5zPTIyKX0oW2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpO3ZhciBpPXtkZWJ1ZzpmdW5jdGlvbiB0KCl7fSxpbmZvOmZ1bmN0aW9uIHQoKXt9LHdhcm46ZnVuY3Rpb24gdCgpe30sZXJyb3I6ZnVuY3Rpb24gdCgpe319LG89dm9pZCAwLHM9dm9pZCAwOyhlLkxvZz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24gZSh0LHIpe2lmKCEodCBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCl9cmV0dXJuIHQucmVzZXQ9ZnVuY3Rpb24gdCgpe3M9MyxvPWl9LHQuZGVidWc9ZnVuY3Rpb24gdCgpe2lmKHM+PTQpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkoZSksbj0wO248ZTtuKyspcltuXT1hcmd1bWVudHNbbl07by5kZWJ1Zy5hcHBseShvLEFycmF5LmZyb20ocikpfX0sdC5pbmZvPWZ1bmN0aW9uIHQoKXtpZihzPj0zKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KGUpLG49MDtuPGU7bisrKXJbbl09YXJndW1lbnRzW25dO28uaW5mby5hcHBseShvLEFycmF5LmZyb20ocikpfX0sdC53YXJuPWZ1bmN0aW9uIHQoKXtpZihzPj0yKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KGUpLG49MDtuPGU7bisrKXJbbl09YXJndW1lbnRzW25dO28ud2Fybi5hcHBseShvLEFycmF5LmZyb20ocikpfX0sdC5lcnJvcj1mdW5jdGlvbiB0KCl7aWYocz49MSl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheShlKSxuPTA7bjxlO24rKylyW25dPWFyZ3VtZW50c1tuXTtvLmVycm9yLmFwcGx5KG8sQXJyYXkuZnJvbShyKSl9fSxuKHQsbnVsbCxbe2tleTpcIk5PTkVcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiAwfX0se2tleTpcIkVSUk9SXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gMX19LHtrZXk6XCJXQVJOXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gMn19LHtrZXk6XCJJTkZPXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gM319LHtrZXk6XCJERUJVR1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIDR9fSx7a2V5OlwibGV2ZWxcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24gdChlKXtpZighKDA8PWUmJmU8PTQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nIGxldmVsXCIpO3M9ZX19LHtrZXk6XCJsb2dnZXJcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24gdChlKXtpZighZS5kZWJ1ZyYmZS5pbmZvJiYoZS5kZWJ1Zz1lLmluZm8pLCEoZS5kZWJ1ZyYmZS5pbmZvJiZlLndhcm4mJmUuZXJyb3IpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nZ2VyXCIpO289ZX19XSksdH0oKSkucmVzZXQoKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lW3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKGUscixuKXtyZXR1cm4gciYmdChlLnByb3RvdHlwZSxyKSxuJiZ0KGUsbiksZX19KCk7dmFyIGk9e3NldEludGVydmFsOmZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSxyKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdC50b1N0cmluZygpfSxlfSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gc2V0SW50ZXJ2YWwodCxlKX0pKSxjbGVhckludGVydmFsOmZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHQudG9TdHJpbmcoKX0sZX0oKGZ1bmN0aW9uKHQpe3JldHVybiBjbGVhckludGVydmFsKHQpfSkpfSxvPSExLHM9bnVsbDtlLkdsb2JhbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24gZSh0LHIpe2lmKCEodCBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCl9cmV0dXJuIHQuX3Rlc3Rpbmc9ZnVuY3Rpb24gdCgpe289ITB9LHQuc2V0WE1MSHR0cFJlcXVlc3Q9ZnVuY3Rpb24gdChlKXtzPWV9LG4odCxudWxsLFt7a2V5OlwibG9jYXRpb25cIixnZXQ6ZnVuY3Rpb24gdCgpe2lmKCFvKXJldHVybiBsb2NhdGlvbn19LHtrZXk6XCJsb2NhbFN0b3JhZ2VcIixnZXQ6ZnVuY3Rpb24gdCgpe2lmKCFvJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXJldHVybiBsb2NhbFN0b3JhZ2V9fSx7a2V5Olwic2Vzc2lvblN0b3JhZ2VcIixnZXQ6ZnVuY3Rpb24gdCgpe2lmKCFvJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXJldHVybiBzZXNzaW9uU3RvcmFnZX19LHtrZXk6XCJYTUxIdHRwUmVxdWVzdFwiLGdldDpmdW5jdGlvbiB0KCl7aWYoIW8mJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpcmV0dXJuIHN8fFhNTEh0dHBSZXF1ZXN0fX0se2tleTpcInRpbWVyXCIsZ2V0OmZ1bmN0aW9uIHQoKXtpZighbylyZXR1cm4gaX19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuTWV0YWRhdGFTZXJ2aWNlPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKSxvPXIoNyk7ZnVuY3Rpb24gcyh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dmFyIGE9XCIud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvblwiO2UuTWV0YWRhdGFTZXJ2aWNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06by5Kc29uU2VydmljZTtpZihzKHRoaXMsdCksIWUpdGhyb3cgaS5Mb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2U6IE5vIHNldHRpbmdzIHBhc3NlZCB0byBNZXRhZGF0YVNlcnZpY2VcIiksbmV3IEVycm9yKFwic2V0dGluZ3NcIik7dGhpcy5fc2V0dGluZ3M9ZSx0aGlzLl9qc29uU2VydmljZT1uZXcgcihbXCJhcHBsaWNhdGlvbi9qd2stc2V0K2pzb25cIl0pfXJldHVybiB0LnByb3RvdHlwZS5yZXNldFNpZ25pbmdLZXlzPWZ1bmN0aW9uIHQoKXt0aGlzLl9zZXR0aW5ncz10aGlzLl9zZXR0aW5nc3x8e30sdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXM9dm9pZCAwfSx0LnByb3RvdHlwZS5nZXRNZXRhZGF0YT1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5fc2V0dGluZ3MubWV0YWRhdGE/KGkuTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhOiBSZXR1cm5pbmcgbWV0YWRhdGEgZnJvbSBzZXR0aW5nc1wiKSxQcm9taXNlLnJlc29sdmUodGhpcy5fc2V0dGluZ3MubWV0YWRhdGEpKTp0aGlzLm1ldGFkYXRhVXJsPyhpLkxvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogZ2V0dGluZyBtZXRhZGF0YSBmcm9tXCIsdGhpcy5tZXRhZGF0YVVybCksdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih0aGlzLm1ldGFkYXRhVXJsKS50aGVuKChmdW5jdGlvbih0KXtpLkxvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YToganNvbiByZWNlaXZlZFwiKTt2YXIgcj1lLl9zZXR0aW5ncy5tZXRhZGF0YVNlZWR8fHt9O3JldHVybiBlLl9zZXR0aW5ncy5tZXRhZGF0YT1PYmplY3QuYXNzaWduKHt9LHIsdCksZS5fc2V0dGluZ3MubWV0YWRhdGF9KSkpOihpLkxvZy5lcnJvcihcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogTm8gYXV0aG9yaXR5IG9yIG1ldGFkYXRhVXJsIGNvbmZpZ3VyZWQgb24gc2V0dGluZ3NcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gYXV0aG9yaXR5IG9yIG1ldGFkYXRhVXJsIGNvbmZpZ3VyZWQgb24gc2V0dGluZ3NcIikpKX0sdC5wcm90b3R5cGUuZ2V0SXNzdWVyPWZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImlzc3VlclwiKX0sdC5wcm90b3R5cGUuZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50PWZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImF1dGhvcml6YXRpb25fZW5kcG9pbnRcIil9LHQucHJvdG90eXBlLmdldFVzZXJJbmZvRW5kcG9pbnQ9ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidXNlcmluZm9fZW5kcG9pbnRcIil9LHQucHJvdG90eXBlLmdldFRva2VuRW5kcG9pbnQ9ZnVuY3Rpb24gdCgpe3ZhciBlPSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJ0b2tlbl9lbmRwb2ludFwiLGUpfSx0LnByb3RvdHlwZS5nZXRDaGVja1Nlc3Npb25JZnJhbWU9ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiY2hlY2tfc2Vzc2lvbl9pZnJhbWVcIiwhMCl9LHQucHJvdG90eXBlLmdldEVuZFNlc3Npb25FbmRwb2ludD1mdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJlbmRfc2Vzc2lvbl9lbmRwb2ludFwiLCEwKX0sdC5wcm90b3R5cGUuZ2V0UmV2b2NhdGlvbkVuZHBvaW50PWZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInJldm9jYXRpb25fZW5kcG9pbnRcIiwhMCl9LHQucHJvdG90eXBlLmdldEtleXNFbmRwb2ludD1mdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJqd2tzX3VyaVwiLCEwKX0sdC5wcm90b3R5cGUuX2dldE1ldGFkYXRhUHJvcGVydHk9ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO3JldHVybiBpLkxvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVByb3BlcnR5IGZvcjogXCIrZSksdGhpcy5nZXRNZXRhZGF0YSgpLnRoZW4oKGZ1bmN0aW9uKHQpe2lmKGkuTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IG1ldGFkYXRhIHJlY2lldmVkXCIpLHZvaWQgMD09PXRbZV0pe2lmKCEwPT09cilyZXR1cm4gdm9pZCBpLkxvZy53YXJuKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IE1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gb3B0aW9uYWwgcHJvcGVydHkgXCIrZSk7dGhyb3cgaS5Mb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFQcm9wZXJ0eTogTWV0YWRhdGEgZG9lcyBub3QgY29udGFpbiBwcm9wZXJ0eSBcIitlKSxuZXcgRXJyb3IoXCJNZXRhZGF0YSBkb2VzIG5vdCBjb250YWluIHByb3BlcnR5IFwiK2UpfXJldHVybiB0W2VdfSkpfSx0LnByb3RvdHlwZS5nZXRTaWduaW5nS2V5cz1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXM/KGkuTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBSZXR1cm5pbmcgc2lnbmluZ0tleXMgZnJvbSBzZXR0aW5nc1wiKSxQcm9taXNlLnJlc29sdmUodGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMpKTp0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiandrc191cmlcIikudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBqd2tzX3VyaSByZWNlaXZlZFwiLHQpLGUuX2pzb25TZXJ2aWNlLmdldEpzb24odCkudGhlbigoZnVuY3Rpb24odCl7aWYoaS5Mb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IGtleSBzZXQgcmVjZWl2ZWRcIix0KSwhdC5rZXlzKXRocm93IGkuTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBNaXNzaW5nIGtleXMgb24ga2V5c2V0XCIpLG5ldyBFcnJvcihcIk1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7cmV0dXJuIGUuX3NldHRpbmdzLnNpZ25pbmdLZXlzPXQua2V5cyxlLl9zZXR0aW5ncy5zaWduaW5nS2V5c30pKX0pKX0sbih0LFt7a2V5OlwibWV0YWRhdGFVcmxcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9tZXRhZGF0YVVybHx8KHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsP3RoaXMuX21ldGFkYXRhVXJsPXRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsOih0aGlzLl9tZXRhZGF0YVVybD10aGlzLl9zZXR0aW5ncy5hdXRob3JpdHksdGhpcy5fbWV0YWRhdGFVcmwmJnRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoYSk8MCYmKFwiL1wiIT09dGhpcy5fbWV0YWRhdGFVcmxbdGhpcy5fbWV0YWRhdGFVcmwubGVuZ3RoLTFdJiYodGhpcy5fbWV0YWRhdGFVcmwrPVwiL1wiKSx0aGlzLl9tZXRhZGF0YVVybCs9YSkpKSx0aGlzLl9tZXRhZGF0YVVybH19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuVXJsVXRpbGl0eT12b2lkIDA7dmFyIG49cigwKSxpPXIoMSk7ZS5VcmxVdGlsaXR5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbiBlKHQscil7aWYoISh0IGluc3RhbmNlb2YgcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX1yZXR1cm4gdC5hZGRRdWVyeVBhcmFtPWZ1bmN0aW9uIHQoZSxyLG4pe3JldHVybiBlLmluZGV4T2YoXCI/XCIpPDAmJihlKz1cIj9cIiksXCI/XCIhPT1lW2UubGVuZ3RoLTFdJiYoZSs9XCImXCIpLGUrPWVuY29kZVVSSUNvbXBvbmVudChyKSxlKz1cIj1cIixlKz1lbmNvZGVVUklDb21wb25lbnQobil9LHQucGFyc2VVcmxGcmFnbWVudD1mdW5jdGlvbiB0KGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIiNcIixvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTppLkdsb2JhbDtcInN0cmluZ1wiIT10eXBlb2YgZSYmKGU9by5sb2NhdGlvbi5ocmVmKTt2YXIgcz1lLmxhc3RJbmRleE9mKHIpO3M+PTAmJihlPWUuc3Vic3RyKHMrMSkpLFwiP1wiPT09ciYmKHM9ZS5pbmRleE9mKFwiI1wiKSk+PTAmJihlPWUuc3Vic3RyKDAscykpO2Zvcih2YXIgYSx1PXt9LGM9LyhbXiY9XSspPShbXiZdKikvZyxoPTA7YT1jLmV4ZWMoZSk7KWlmKHVbZGVjb2RlVVJJQ29tcG9uZW50KGFbMV0pXT1kZWNvZGVVUklDb21wb25lbnQoYVsyXS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpLGgrKz41MClyZXR1cm4gbi5Mb2cuZXJyb3IoXCJVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQ6IHJlc3BvbnNlIGV4Y2VlZGVkIGV4cGVjdGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzXCIsZSkse2Vycm9yOlwiUmVzcG9uc2UgZXhjZWVkZWQgZXhwZWN0ZWQgbnVtYmVyIG9mIHBhcmFtZXRlcnNcIn07Zm9yKHZhciBsIGluIHUpcmV0dXJuIHU7cmV0dXJue319LHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLkpvc2VVdGlsPXZvaWQgMDt2YXIgbj1yKDI2KSxpPWZ1bmN0aW9uIG8odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShyKDMzKSk7ZS5Kb3NlVXRpbD0oMCxpLmRlZmF1bHQpKHtqd3M6bi5qd3MsS2V5VXRpbDpuLktleVV0aWwsWDUwOTpuLlg1MDksY3J5cHRvOm4uY3J5cHRvLGhleHRvYjY0dTpuLmhleHRvYjY0dSxiNjR0b2hleDpuLmI2NHRvaGV4LEFsbG93ZWRTaWduaW5nQWxnczpuLkFsbG93ZWRTaWduaW5nQWxnc30pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5PaWRjQ2xpZW50U2V0dGluZ3M9dm9pZCAwO3ZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxvPXIoMCkscz1yKDIzKSxhPXIoNiksdT1yKDI0KSxjPXIoMik7ZnVuY3Rpb24gaCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dmFyIGw9XCIud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvblwiLGY9XCJpZF90b2tlblwiLGc9XCJvcGVuaWRcIixkPVwiY2xpZW50X3NlY3JldF9wb3N0XCI7ZS5PaWRjQ2xpZW50U2V0dGluZ3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9ZS5hdXRob3JpdHksaT1lLm1ldGFkYXRhVXJsLG89ZS5tZXRhZGF0YSxsPWUuc2lnbmluZ0tleXMscD1lLm1ldGFkYXRhU2VlZCx2PWUuY2xpZW50X2lkLHk9ZS5jbGllbnRfc2VjcmV0LG09ZS5yZXNwb25zZV90eXBlLF89dm9pZCAwPT09bT9mOm0sUz1lLnNjb3BlLGI9dm9pZCAwPT09Uz9nOlMsdz1lLnJlZGlyZWN0X3VyaSxGPWUucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpLEU9ZS5jbGllbnRfYXV0aGVudGljYXRpb24seD12b2lkIDA9PT1FP2Q6RSxBPWUucHJvbXB0LGs9ZS5kaXNwbGF5LFA9ZS5tYXhfYWdlLEM9ZS51aV9sb2NhbGVzLFQ9ZS5hY3JfdmFsdWVzLFI9ZS5yZXNvdXJjZSxJPWUucmVzcG9uc2VfbW9kZSxEPWUuZmlsdGVyUHJvdG9jb2xDbGFpbXMsTD12b2lkIDA9PT1EfHxELE49ZS5sb2FkVXNlckluZm8sVT12b2lkIDA9PT1OfHxOLEI9ZS5zdGFsZVN0YXRlQWdlLE89dm9pZCAwPT09Qj85MDA6QixqPWUuY2xvY2tTa2V3LE09dm9pZCAwPT09aj8zMDA6aixIPWUuY2xvY2tTZXJ2aWNlLFY9dm9pZCAwPT09SD9uZXcgcy5DbG9ja1NlcnZpY2U6SCxLPWUudXNlckluZm9Kd3RJc3N1ZXIscT12b2lkIDA9PT1LP1wiT1BcIjpLLEo9ZS5tZXJnZUNsYWltcyxXPXZvaWQgMCE9PUomJkosej1lLnN0YXRlU3RvcmUsWT12b2lkIDA9PT16P25ldyBhLldlYlN0b3JhZ2VTdGF0ZVN0b3JlOnosRz1lLlJlc3BvbnNlVmFsaWRhdG9yQ3RvcixYPXZvaWQgMD09PUc/dS5SZXNwb25zZVZhbGlkYXRvcjpHLCQ9ZS5NZXRhZGF0YVNlcnZpY2VDdG9yLFE9dm9pZCAwPT09JD9jLk1ldGFkYXRhU2VydmljZTokLFo9ZS5leHRyYVF1ZXJ5UGFyYW1zLHR0PXZvaWQgMD09PVo/e306WixldD1lLmV4dHJhVG9rZW5QYXJhbXMscnQ9dm9pZCAwPT09ZXQ/e306ZXQ7aCh0aGlzLHQpLHRoaXMuX2F1dGhvcml0eT1yLHRoaXMuX21ldGFkYXRhVXJsPWksdGhpcy5fbWV0YWRhdGE9byx0aGlzLl9tZXRhZGF0YVNlZWQ9cCx0aGlzLl9zaWduaW5nS2V5cz1sLHRoaXMuX2NsaWVudF9pZD12LHRoaXMuX2NsaWVudF9zZWNyZXQ9eSx0aGlzLl9yZXNwb25zZV90eXBlPV8sdGhpcy5fc2NvcGU9Yix0aGlzLl9yZWRpcmVjdF91cmk9dyx0aGlzLl9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk9Rix0aGlzLl9jbGllbnRfYXV0aGVudGljYXRpb249eCx0aGlzLl9wcm9tcHQ9QSx0aGlzLl9kaXNwbGF5PWssdGhpcy5fbWF4X2FnZT1QLHRoaXMuX3VpX2xvY2FsZXM9Qyx0aGlzLl9hY3JfdmFsdWVzPVQsdGhpcy5fcmVzb3VyY2U9Uix0aGlzLl9yZXNwb25zZV9tb2RlPUksdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXM9ISFMLHRoaXMuX2xvYWRVc2VySW5mbz0hIVUsdGhpcy5fc3RhbGVTdGF0ZUFnZT1PLHRoaXMuX2Nsb2NrU2tldz1NLHRoaXMuX2Nsb2NrU2VydmljZT1WLHRoaXMuX3VzZXJJbmZvSnd0SXNzdWVyPXEsdGhpcy5fbWVyZ2VDbGFpbXM9ISFXLHRoaXMuX3N0YXRlU3RvcmU9WSx0aGlzLl92YWxpZGF0b3I9bmV3IFgodGhpcyksdGhpcy5fbWV0YWRhdGFTZXJ2aWNlPW5ldyBRKHRoaXMpLHRoaXMuX2V4dHJhUXVlcnlQYXJhbXM9XCJvYmplY3RcIj09PSh2b2lkIDA9PT10dD9cInVuZGVmaW5lZFwiOm4odHQpKT90dDp7fSx0aGlzLl9leHRyYVRva2VuUGFyYW1zPVwib2JqZWN0XCI9PT0odm9pZCAwPT09cnQ/XCJ1bmRlZmluZWRcIjpuKHJ0KSk/cnQ6e319cmV0dXJuIHQucHJvdG90eXBlLmdldEVwb2NoVGltZT1mdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2Nsb2NrU2VydmljZS5nZXRFcG9jaFRpbWUoKX0saSh0LFt7a2V5OlwiY2xpZW50X2lkXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fY2xpZW50X2lkfSxzZXQ6ZnVuY3Rpb24gdChlKXtpZih0aGlzLl9jbGllbnRfaWQpdGhyb3cgby5Mb2cuZXJyb3IoXCJPaWRjQ2xpZW50U2V0dGluZ3Muc2V0X2NsaWVudF9pZDogY2xpZW50X2lkIGhhcyBhbHJlYWR5IGJlZW4gYXNzaWduZWQuXCIpLG5ldyBFcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKTt0aGlzLl9jbGllbnRfaWQ9ZX19LHtrZXk6XCJjbGllbnRfc2VjcmV0XCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fY2xpZW50X3NlY3JldH19LHtrZXk6XCJyZXNwb25zZV90eXBlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcmVzcG9uc2VfdHlwZX19LHtrZXk6XCJzY29wZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3Njb3BlfX0se2tleTpcInJlZGlyZWN0X3VyaVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3JlZGlyZWN0X3VyaX19LHtrZXk6XCJwb3N0X2xvZ291dF9yZWRpcmVjdF91cmlcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9wb3N0X2xvZ291dF9yZWRpcmVjdF91cml9fSx7a2V5OlwiY2xpZW50X2F1dGhlbnRpY2F0aW9uXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fY2xpZW50X2F1dGhlbnRpY2F0aW9ufX0se2tleTpcInByb21wdFwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3Byb21wdH19LHtrZXk6XCJkaXNwbGF5XCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fZGlzcGxheX19LHtrZXk6XCJtYXhfYWdlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fbWF4X2FnZX19LHtrZXk6XCJ1aV9sb2NhbGVzXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fdWlfbG9jYWxlc319LHtrZXk6XCJhY3JfdmFsdWVzXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fYWNyX3ZhbHVlc319LHtrZXk6XCJyZXNvdXJjZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3Jlc291cmNlfX0se2tleTpcInJlc3BvbnNlX21vZGVcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9yZXNwb25zZV9tb2RlfX0se2tleTpcImF1dGhvcml0eVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2F1dGhvcml0eX0sc2V0OmZ1bmN0aW9uIHQoZSl7aWYodGhpcy5fYXV0aG9yaXR5KXRocm93IG8uTG9nLmVycm9yKFwiT2lkY0NsaWVudFNldHRpbmdzLnNldF9hdXRob3JpdHk6IGF1dGhvcml0eSBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKSxuZXcgRXJyb3IoXCJhdXRob3JpdHkgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIik7dGhpcy5fYXV0aG9yaXR5PWV9fSx7a2V5OlwibWV0YWRhdGFVcmxcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9tZXRhZGF0YVVybHx8KHRoaXMuX21ldGFkYXRhVXJsPXRoaXMuYXV0aG9yaXR5LHRoaXMuX21ldGFkYXRhVXJsJiZ0aGlzLl9tZXRhZGF0YVVybC5pbmRleE9mKGwpPDAmJihcIi9cIiE9PXRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aC0xXSYmKHRoaXMuX21ldGFkYXRhVXJsKz1cIi9cIiksdGhpcy5fbWV0YWRhdGFVcmwrPWwpKSx0aGlzLl9tZXRhZGF0YVVybH19LHtrZXk6XCJtZXRhZGF0YVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX21ldGFkYXRhfSxzZXQ6ZnVuY3Rpb24gdChlKXt0aGlzLl9tZXRhZGF0YT1lfX0se2tleTpcIm1ldGFkYXRhU2VlZFwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX21ldGFkYXRhU2VlZH0sc2V0OmZ1bmN0aW9uIHQoZSl7dGhpcy5fbWV0YWRhdGFTZWVkPWV9fSx7a2V5Olwic2lnbmluZ0tleXNcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9zaWduaW5nS2V5c30sc2V0OmZ1bmN0aW9uIHQoZSl7dGhpcy5fc2lnbmluZ0tleXM9ZX19LHtrZXk6XCJmaWx0ZXJQcm90b2NvbENsYWltc1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2ZpbHRlclByb3RvY29sQ2xhaW1zfX0se2tleTpcImxvYWRVc2VySW5mb1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2xvYWRVc2VySW5mb319LHtrZXk6XCJzdGFsZVN0YXRlQWdlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fc3RhbGVTdGF0ZUFnZX19LHtrZXk6XCJjbG9ja1NrZXdcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9jbG9ja1NrZXd9fSx7a2V5OlwidXNlckluZm9Kd3RJc3N1ZXJcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl91c2VySW5mb0p3dElzc3Vlcn19LHtrZXk6XCJtZXJnZUNsYWltc1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX21lcmdlQ2xhaW1zfX0se2tleTpcInN0YXRlU3RvcmVcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9zdGF0ZVN0b3JlfX0se2tleTpcInZhbGlkYXRvclwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3ZhbGlkYXRvcn19LHtrZXk6XCJtZXRhZGF0YVNlcnZpY2VcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2V9fSx7a2V5OlwiZXh0cmFRdWVyeVBhcmFtc1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXN9LHNldDpmdW5jdGlvbiB0KGUpe1wib2JqZWN0XCI9PT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOm4oZSkpP3RoaXMuX2V4dHJhUXVlcnlQYXJhbXM9ZTp0aGlzLl9leHRyYVF1ZXJ5UGFyYW1zPXt9fX0se2tleTpcImV4dHJhVG9rZW5QYXJhbXNcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9leHRyYVRva2VuUGFyYW1zfSxzZXQ6ZnVuY3Rpb24gdChlKXtcIm9iamVjdFwiPT09KHZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjpuKGUpKT90aGlzLl9leHRyYVRva2VuUGFyYW1zPWU6dGhpcy5fZXh0cmFUb2tlblBhcmFtcz17fX19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuV2ViU3RvcmFnZVN0YXRlU3RvcmU9dm9pZCAwO3ZhciBuPXIoMCksaT1yKDEpO2Z1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWUuV2ViU3RvcmFnZVN0YXRlU3RvcmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9ZS5wcmVmaXgsbj12b2lkIDA9PT1yP1wib2lkYy5cIjpyLHM9ZS5zdG9yZSxhPXZvaWQgMD09PXM/aS5HbG9iYWwubG9jYWxTdG9yYWdlOnM7byh0aGlzLHQpLHRoaXMuX3N0b3JlPWEsdGhpcy5fcHJlZml4PW59cmV0dXJuIHQucHJvdG90eXBlLnNldD1mdW5jdGlvbiB0KGUscil7cmV0dXJuIG4uTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuc2V0XCIsZSksZT10aGlzLl9wcmVmaXgrZSx0aGlzLl9zdG9yZS5zZXRJdGVtKGUsciksUHJvbWlzZS5yZXNvbHZlKCl9LHQucHJvdG90eXBlLmdldD1mdW5jdGlvbiB0KGUpe24uTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0XCIsZSksZT10aGlzLl9wcmVmaXgrZTt2YXIgcj10aGlzLl9zdG9yZS5nZXRJdGVtKGUpO3JldHVybiBQcm9taXNlLnJlc29sdmUocil9LHQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbiB0KGUpe24uTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUucmVtb3ZlXCIsZSksZT10aGlzLl9wcmVmaXgrZTt2YXIgcj10aGlzLl9zdG9yZS5nZXRJdGVtKGUpO3JldHVybiB0aGlzLl9zdG9yZS5yZW1vdmVJdGVtKGUpLFByb21pc2UucmVzb2x2ZShyKX0sdC5wcm90b3R5cGUuZ2V0QWxsS2V5cz1mdW5jdGlvbiB0KCl7bi5Mb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5nZXRBbGxLZXlzXCIpO2Zvcih2YXIgZT1bXSxyPTA7cjx0aGlzLl9zdG9yZS5sZW5ndGg7cisrKXt2YXIgaT10aGlzLl9zdG9yZS5rZXkocik7MD09PWkuaW5kZXhPZih0aGlzLl9wcmVmaXgpJiZlLnB1c2goaS5zdWJzdHIodGhpcy5fcHJlZml4Lmxlbmd0aCkpfXJldHVybiBQcm9taXNlLnJlc29sdmUoZSl9LHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLkpzb25TZXJ2aWNlPXZvaWQgMDt2YXIgbj1yKDApLGk9cigxKTtmdW5jdGlvbiBvKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1lLkpzb25TZXJ2aWNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpudWxsLHI9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmkuR2xvYmFsLlhNTEh0dHBSZXF1ZXN0LG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7byh0aGlzLHQpLGUmJkFycmF5LmlzQXJyYXkoZSk/dGhpcy5fY29udGVudFR5cGVzPWUuc2xpY2UoKTp0aGlzLl9jb250ZW50VHlwZXM9W10sdGhpcy5fY29udGVudFR5cGVzLnB1c2goXCJhcHBsaWNhdGlvbi9qc29uXCIpLG4mJnRoaXMuX2NvbnRlbnRUeXBlcy5wdXNoKFwiYXBwbGljYXRpb24vand0XCIpLHRoaXMuX1hNTEh0dHBSZXF1ZXN0PXIsdGhpcy5fand0SGFuZGxlcj1ufXJldHVybiB0LnByb3RvdHlwZS5nZXRKc29uPWZ1bmN0aW9uIHQoZSxyKXt2YXIgaT10aGlzO2lmKCFlKXRocm93IG4uTG9nLmVycm9yKFwiSnNvblNlcnZpY2UuZ2V0SnNvbjogTm8gdXJsIHBhc3NlZFwiKSxuZXcgRXJyb3IoXCJ1cmxcIik7cmV0dXJuIG4uTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UuZ2V0SnNvbiwgdXJsOiBcIixlKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxvKXt2YXIgcz1uZXcgaS5fWE1MSHR0cFJlcXVlc3Q7cy5vcGVuKFwiR0VUXCIsZSk7dmFyIGE9aS5fY29udGVudFR5cGVzLHU9aS5fand0SGFuZGxlcjtzLm9ubG9hZD1mdW5jdGlvbigpe2lmKG4uTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UuZ2V0SnNvbjogSFRUUCByZXNwb25zZSByZWNlaXZlZCwgc3RhdHVzXCIscy5zdGF0dXMpLDIwMD09PXMuc3RhdHVzKXt2YXIgcj1zLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO2lmKHIpe3ZhciBpPWEuZmluZCgoZnVuY3Rpb24odCl7aWYoci5zdGFydHNXaXRoKHQpKXJldHVybiEwfSkpO2lmKFwiYXBwbGljYXRpb24vand0XCI9PWkpcmV0dXJuIHZvaWQgdShzKS50aGVuKHQsbyk7aWYoaSl0cnl7cmV0dXJuIHZvaWQgdChKU09OLnBhcnNlKHMucmVzcG9uc2VUZXh0KSl9Y2F0Y2godCl7cmV0dXJuIG4uTG9nLmVycm9yKFwiSnNvblNlcnZpY2UuZ2V0SnNvbjogRXJyb3IgcGFyc2luZyBKU09OIHJlc3BvbnNlXCIsdC5tZXNzYWdlKSx2b2lkIG8odCl9fW8oRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIENvbnRlbnQtVHlwZTogXCIrcitcIiwgZnJvbSBVUkw6IFwiK2UpKX1lbHNlIG8oRXJyb3Iocy5zdGF0dXNUZXh0K1wiIChcIitzLnN0YXR1cytcIilcIikpfSxzLm9uZXJyb3I9ZnVuY3Rpb24oKXtuLkxvZy5lcnJvcihcIkpzb25TZXJ2aWNlLmdldEpzb246IG5ldHdvcmsgZXJyb3JcIiksbyhFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSxyJiYobi5Mb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiB0b2tlbiBwYXNzZWQsIHNldHRpbmcgQXV0aG9yaXphdGlvbiBoZWFkZXJcIikscy5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLFwiQmVhcmVyIFwiK3IpKSxzLnNlbmQoKX0pKX0sdC5wcm90b3R5cGUucG9zdEZvcm09ZnVuY3Rpb24gdChlLHIsaSl7dmFyIG89dGhpcztpZighZSl0aHJvdyBuLkxvZy5lcnJvcihcIkpzb25TZXJ2aWNlLnBvc3RGb3JtOiBObyB1cmwgcGFzc2VkXCIpLG5ldyBFcnJvcihcInVybFwiKTtyZXR1cm4gbi5Mb2cuZGVidWcoXCJKc29uU2VydmljZS5wb3N0Rm9ybSwgdXJsOiBcIixlKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxzKXt2YXIgYT1uZXcgby5fWE1MSHR0cFJlcXVlc3Q7YS5vcGVuKFwiUE9TVFwiLGUpO3ZhciB1PW8uX2NvbnRlbnRUeXBlczthLm9ubG9hZD1mdW5jdGlvbigpe2lmKG4uTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IEhUVFAgcmVzcG9uc2UgcmVjZWl2ZWQsIHN0YXR1c1wiLGEuc3RhdHVzKSwyMDAhPT1hLnN0YXR1cyl7aWYoNDAwPT09YS5zdGF0dXMpaWYoaT1hLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKWlmKHUuZmluZCgoZnVuY3Rpb24odCl7aWYoaS5zdGFydHNXaXRoKHQpKXJldHVybiEwfSkpKXRyeXt2YXIgcj1KU09OLnBhcnNlKGEucmVzcG9uc2VUZXh0KTtpZihyJiZyLmVycm9yKXJldHVybiBuLkxvZy5lcnJvcihcIkpzb25TZXJ2aWNlLnBvc3RGb3JtOiBFcnJvciBmcm9tIHNlcnZlcjogXCIsci5lcnJvciksdm9pZCBzKG5ldyBFcnJvcihyLmVycm9yKSl9Y2F0Y2godCl7cmV0dXJuIG4uTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLHQubWVzc2FnZSksdm9pZCBzKHQpfXMoRXJyb3IoYS5zdGF0dXNUZXh0K1wiIChcIithLnN0YXR1cytcIilcIikpfWVsc2V7dmFyIGk7aWYoKGk9YS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSkmJnUuZmluZCgoZnVuY3Rpb24odCl7aWYoaS5zdGFydHNXaXRoKHQpKXJldHVybiEwfSkpKXRyeXtyZXR1cm4gdm9pZCB0KEpTT04ucGFyc2UoYS5yZXNwb25zZVRleHQpKX1jYXRjaCh0KXtyZXR1cm4gbi5Mb2cuZXJyb3IoXCJKc29uU2VydmljZS5wb3N0Rm9ybTogRXJyb3IgcGFyc2luZyBKU09OIHJlc3BvbnNlXCIsdC5tZXNzYWdlKSx2b2lkIHModCl9cyhFcnJvcihcIkludmFsaWQgcmVzcG9uc2UgQ29udGVudC1UeXBlOiBcIitpK1wiLCBmcm9tIFVSTDogXCIrZSkpfX0sYS5vbmVycm9yPWZ1bmN0aW9uKCl7bi5Mb2cuZXJyb3IoXCJKc29uU2VydmljZS5wb3N0Rm9ybTogbmV0d29yayBlcnJvclwiKSxzKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSl9O3ZhciBjPVwiXCI7Zm9yKHZhciBoIGluIHIpe3ZhciBsPXJbaF07bCYmKGMubGVuZ3RoPjAmJihjKz1cIiZcIiksYys9ZW5jb2RlVVJJQ29tcG9uZW50KGgpLGMrPVwiPVwiLGMrPWVuY29kZVVSSUNvbXBvbmVudChsKSl9YS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksdm9pZCAwIT09aSYmYS5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLFwiQmFzaWMgXCIrYnRvYShpKSksYS5zZW5kKGMpfSkpfSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5TaWduaW5SZXF1ZXN0PXZvaWQgMDt2YXIgbj1yKDApLGk9cigzKSxvPXIoMTMpO2UuU2lnbmluUmVxdWVzdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIHI9ZS51cmwscz1lLmNsaWVudF9pZCxhPWUucmVkaXJlY3RfdXJpLHU9ZS5yZXNwb25zZV90eXBlLGM9ZS5zY29wZSxoPWUuYXV0aG9yaXR5LGw9ZS5kYXRhLGY9ZS5wcm9tcHQsZz1lLmRpc3BsYXksZD1lLm1heF9hZ2UscD1lLnVpX2xvY2FsZXMsdj1lLmlkX3Rva2VuX2hpbnQseT1lLmxvZ2luX2hpbnQsbT1lLmFjcl92YWx1ZXMsXz1lLnJlc291cmNlLFM9ZS5yZXNwb25zZV9tb2RlLGI9ZS5yZXF1ZXN0LHc9ZS5yZXF1ZXN0X3VyaSxGPWUuZXh0cmFRdWVyeVBhcmFtcyxFPWUucmVxdWVzdF90eXBlLHg9ZS5jbGllbnRfc2VjcmV0LEE9ZS5leHRyYVRva2VuUGFyYW1zLGs9ZS5za2lwVXNlckluZm87aWYoZnVuY3Rpb24gUCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksIXIpdGhyb3cgbi5Mb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIHVybCBwYXNzZWRcIiksbmV3IEVycm9yKFwidXJsXCIpO2lmKCFzKXRocm93IG4uTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyBjbGllbnRfaWQgcGFzc2VkXCIpLG5ldyBFcnJvcihcImNsaWVudF9pZFwiKTtpZighYSl0aHJvdyBuLkxvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKSxuZXcgRXJyb3IoXCJyZWRpcmVjdF91cmlcIik7aWYoIXUpdGhyb3cgbi5Mb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIHJlc3BvbnNlX3R5cGUgcGFzc2VkXCIpLG5ldyBFcnJvcihcInJlc3BvbnNlX3R5cGVcIik7aWYoIWMpdGhyb3cgbi5Mb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIHNjb3BlIHBhc3NlZFwiKSxuZXcgRXJyb3IoXCJzY29wZVwiKTtpZighaCl0aHJvdyBuLkxvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gYXV0aG9yaXR5IHBhc3NlZFwiKSxuZXcgRXJyb3IoXCJhdXRob3JpdHlcIik7dmFyIEM9dC5pc09pZGModSksVD10LmlzQ29kZSh1KTtTfHwoUz10LmlzQ29kZSh1KT9cInF1ZXJ5XCI6bnVsbCksdGhpcy5zdGF0ZT1uZXcgby5TaWduaW5TdGF0ZSh7bm9uY2U6QyxkYXRhOmwsY2xpZW50X2lkOnMsYXV0aG9yaXR5OmgscmVkaXJlY3RfdXJpOmEsY29kZV92ZXJpZmllcjpULHJlcXVlc3RfdHlwZTpFLHJlc3BvbnNlX21vZGU6UyxjbGllbnRfc2VjcmV0Ongsc2NvcGU6YyxleHRyYVRva2VuUGFyYW1zOkEsc2tpcFVzZXJJbmZvOmt9KSxyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJjbGllbnRfaWRcIixzKSxyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJyZWRpcmVjdF91cmlcIixhKSxyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJyZXNwb25zZV90eXBlXCIsdSkscj1pLlVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbShyLFwic2NvcGVcIixjKSxyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJzdGF0ZVwiLHRoaXMuc3RhdGUuaWQpLEMmJihyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJub25jZVwiLHRoaXMuc3RhdGUubm9uY2UpKSxUJiYocj1pLlVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbShyLFwiY29kZV9jaGFsbGVuZ2VcIix0aGlzLnN0YXRlLmNvZGVfY2hhbGxlbmdlKSxyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJjb2RlX2NoYWxsZW5nZV9tZXRob2RcIixcIlMyNTZcIikpO3ZhciBSPXtwcm9tcHQ6ZixkaXNwbGF5OmcsbWF4X2FnZTpkLHVpX2xvY2FsZXM6cCxpZF90b2tlbl9oaW50OnYsbG9naW5faGludDp5LGFjcl92YWx1ZXM6bSxyZXNvdXJjZTpfLHJlcXVlc3Q6YixyZXF1ZXN0X3VyaTp3LHJlc3BvbnNlX21vZGU6U307Zm9yKHZhciBJIGluIFIpUltJXSYmKHI9aS5VcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0ocixJLFJbSV0pKTtmb3IodmFyIEQgaW4gRilyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsRCxGW0RdKTt0aGlzLnVybD1yfXJldHVybiB0LmlzT2lkYz1mdW5jdGlvbiB0KGUpe3JldHVybiEhZS5zcGxpdCgvXFxzKy9nKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVyblwiaWRfdG9rZW5cIj09PXR9KSlbMF19LHQuaXNPQXV0aD1mdW5jdGlvbiB0KGUpe3JldHVybiEhZS5zcGxpdCgvXFxzKy9nKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVyblwidG9rZW5cIj09PXR9KSlbMF19LHQuaXNDb2RlPWZ1bmN0aW9uIHQoZSl7cmV0dXJuISFlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuXCJjb2RlXCI9PT10fSkpWzBdfSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5TdGF0ZT12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxpPXIoMCksbz1mdW5jdGlvbiBzKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ocigxNCkpO2Z1bmN0aW9uIGEodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWUuU3RhdGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9ZS5pZCxuPWUuZGF0YSxpPWUuY3JlYXRlZCxzPWUucmVxdWVzdF90eXBlO2EodGhpcyx0KSx0aGlzLl9pZD1yfHwoMCxvLmRlZmF1bHQpKCksdGhpcy5fZGF0YT1uLHRoaXMuX2NyZWF0ZWQ9XCJudW1iZXJcIj09dHlwZW9mIGkmJmk+MD9pOnBhcnNlSW50KERhdGUubm93KCkvMWUzKSx0aGlzLl9yZXF1ZXN0X3R5cGU9c31yZXR1cm4gdC5wcm90b3R5cGUudG9TdG9yYWdlU3RyaW5nPWZ1bmN0aW9uIHQoKXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJTdGF0ZS50b1N0b3JhZ2VTdHJpbmdcIiksSlNPTi5zdHJpbmdpZnkoe2lkOnRoaXMuaWQsZGF0YTp0aGlzLmRhdGEsY3JlYXRlZDp0aGlzLmNyZWF0ZWQscmVxdWVzdF90eXBlOnRoaXMucmVxdWVzdF90eXBlfSl9LHQuZnJvbVN0b3JhZ2VTdHJpbmc9ZnVuY3Rpb24gZShyKXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJTdGF0ZS5mcm9tU3RvcmFnZVN0cmluZ1wiKSxuZXcgdChKU09OLnBhcnNlKHIpKX0sdC5jbGVhclN0YWxlU3RhdGU9ZnVuY3Rpb24gZShyLG4pe3ZhciBvPURhdGUubm93KCkvMWUzLW47cmV0dXJuIHIuZ2V0QWxsS2V5cygpLnRoZW4oKGZ1bmN0aW9uKGUpe2kuTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiBnb3Qga2V5c1wiLGUpO2Zvcih2YXIgbj1bXSxzPWZ1bmN0aW9uIHMoYSl7dmFyIGM9ZVthXTt1PXIuZ2V0KGMpLnRoZW4oKGZ1bmN0aW9uKGUpe3ZhciBuPSExO2lmKGUpdHJ5e3ZhciBzPXQuZnJvbVN0b3JhZ2VTdHJpbmcoZSk7aS5Mb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IGdvdCBpdGVtIGZyb20ga2V5OiBcIixjLHMuY3JlYXRlZCkscy5jcmVhdGVkPD1vJiYobj0hMCl9Y2F0Y2godCl7aS5Mb2cuZXJyb3IoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IEVycm9yIHBhcnNpbmcgc3RhdGUgZm9yIGtleVwiLGMsdC5tZXNzYWdlKSxuPSEwfWVsc2UgaS5Mb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IG5vIGl0ZW0gaW4gc3RvcmFnZSBmb3Iga2V5OiBcIixjKSxuPSEwO2lmKG4pcmV0dXJuIGkuTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiByZW1vdmVkIGl0ZW0gZm9yIGtleTogXCIsYyksci5yZW1vdmUoYyl9KSksbi5wdXNoKHUpfSxhPTA7YTxlLmxlbmd0aDthKyspe3ZhciB1O3MoYSl9cmV0dXJuIGkuTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiB3YWl0aW5nIG9uIHByb21pc2UgY291bnQ6XCIsbi5sZW5ndGgpLFByb21pc2UuYWxsKG4pfSkpfSxuKHQsW3trZXk6XCJpZFwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2lkfX0se2tleTpcImRhdGFcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9kYXRhfX0se2tleTpcImNyZWF0ZWRcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9jcmVhdGVkfX0se2tleTpcInJlcXVlc3RfdHlwZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3JlcXVlc3RfdHlwZX19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuT2lkY0NsaWVudD12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxpPXIoMCksbz1yKDUpLHM9cigxMiksYT1yKDgpLHU9cigzNCksYz1yKDM1KSxoPXIoMzYpLGw9cigxMyksZj1yKDkpO2Z1bmN0aW9uIGcodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWUuT2lkY0NsaWVudD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307Zyh0aGlzLHQpLGUgaW5zdGFuY2VvZiBvLk9pZGNDbGllbnRTZXR0aW5ncz90aGlzLl9zZXR0aW5ncz1lOnRoaXMuX3NldHRpbmdzPW5ldyBvLk9pZGNDbGllbnRTZXR0aW5ncyhlKX1yZXR1cm4gdC5wcm90b3R5cGUuY3JlYXRlU2lnbmluUmVxdWVzdD1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxuPXIucmVzcG9uc2VfdHlwZSxvPXIuc2NvcGUscz1yLnJlZGlyZWN0X3VyaSx1PXIuZGF0YSxjPXIuc3RhdGUsaD1yLnByb21wdCxsPXIuZGlzcGxheSxmPXIubWF4X2FnZSxnPXIudWlfbG9jYWxlcyxkPXIuaWRfdG9rZW5faGludCxwPXIubG9naW5faGludCx2PXIuYWNyX3ZhbHVlcyx5PXIucmVzb3VyY2UsbT1yLnJlcXVlc3QsXz1yLnJlcXVlc3RfdXJpLFM9ci5yZXNwb25zZV9tb2RlLGI9ci5leHRyYVF1ZXJ5UGFyYW1zLHc9ci5leHRyYVRva2VuUGFyYW1zLEY9ci5yZXF1ZXN0X3R5cGUsRT1yLnNraXBVc2VySW5mbyx4PWFyZ3VtZW50c1sxXTtpLkxvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbmluUmVxdWVzdFwiKTt2YXIgQT10aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7bj1ufHx0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV90eXBlLG89b3x8dGhpcy5fc2V0dGluZ3Muc2NvcGUscz1zfHx0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdF91cmksaD1ofHx0aGlzLl9zZXR0aW5ncy5wcm9tcHQsbD1sfHx0aGlzLl9zZXR0aW5ncy5kaXNwbGF5LGY9Znx8dGhpcy5fc2V0dGluZ3MubWF4X2FnZSxnPWd8fHRoaXMuX3NldHRpbmdzLnVpX2xvY2FsZXMsdj12fHx0aGlzLl9zZXR0aW5ncy5hY3JfdmFsdWVzLHk9eXx8dGhpcy5fc2V0dGluZ3MucmVzb3VyY2UsUz1TfHx0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlLGI9Ynx8dGhpcy5fc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtcyx3PXd8fHRoaXMuX3NldHRpbmdzLmV4dHJhVG9rZW5QYXJhbXM7dmFyIGs9dGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5O3JldHVybiBhLlNpZ25pblJlcXVlc3QuaXNDb2RlKG4pJiZcImNvZGVcIiE9PW4/UHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiT3BlbklEIENvbm5lY3QgaHlicmlkIGZsb3cgaXMgbm90IHN1cHBvcnRlZFwiKSk6dGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldEF1dGhvcml6YXRpb25FbmRwb2ludCgpLnRoZW4oKGZ1bmN0aW9uKHQpe2kuTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWduaW5SZXF1ZXN0OiBSZWNlaXZlZCBhdXRob3JpemF0aW9uIGVuZHBvaW50XCIsdCk7dmFyIHI9bmV3IGEuU2lnbmluUmVxdWVzdCh7dXJsOnQsY2xpZW50X2lkOkEscmVkaXJlY3RfdXJpOnMscmVzcG9uc2VfdHlwZTpuLHNjb3BlOm8sZGF0YTp1fHxjLGF1dGhvcml0eTprLHByb21wdDpoLGRpc3BsYXk6bCxtYXhfYWdlOmYsdWlfbG9jYWxlczpnLGlkX3Rva2VuX2hpbnQ6ZCxsb2dpbl9oaW50OnAsYWNyX3ZhbHVlczp2LHJlc291cmNlOnkscmVxdWVzdDptLHJlcXVlc3RfdXJpOl8sZXh0cmFRdWVyeVBhcmFtczpiLGV4dHJhVG9rZW5QYXJhbXM6dyxyZXF1ZXN0X3R5cGU6RixyZXNwb25zZV9tb2RlOlMsY2xpZW50X3NlY3JldDplLl9zZXR0aW5ncy5jbGllbnRfc2VjcmV0LHNraXBVc2VySW5mbzpFfSksUD1yLnN0YXRlO3JldHVybih4PXh8fGUuX3N0YXRlU3RvcmUpLnNldChQLmlkLFAudG9TdG9yYWdlU3RyaW5nKCkpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHJ9KSl9KSl9LHQucHJvdG90eXBlLnJlYWRTaWduaW5SZXNwb25zZVN0YXRlPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO2kuTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5yZWFkU2lnbmluUmVzcG9uc2VTdGF0ZVwiKTt2YXIgbz1cInF1ZXJ5XCI9PT10aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlfHwhdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfbW9kZSYmYS5TaWduaW5SZXF1ZXN0LmlzQ29kZSh0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV90eXBlKSxzPW8/XCI/XCI6XCIjXCIsYz1uZXcgdS5TaWduaW5SZXNwb25zZShlLHMpO2lmKCFjLnN0YXRlKXJldHVybiBpLkxvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGU6IE5vIHN0YXRlIGluIHJlc3BvbnNlXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpKTtyPXJ8fHRoaXMuX3N0YXRlU3RvcmU7dmFyIGg9bj9yLnJlbW92ZS5iaW5kKHIpOnIuZ2V0LmJpbmQocik7cmV0dXJuIGgoYy5zdGF0ZSkudGhlbigoZnVuY3Rpb24odCl7aWYoIXQpdGhyb3cgaS5Mb2cuZXJyb3IoXCJPaWRjQ2xpZW50LnJlYWRTaWduaW5SZXNwb25zZVN0YXRlOiBObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpLG5ldyBFcnJvcihcIk5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7cmV0dXJue3N0YXRlOmwuU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcodCkscmVzcG9uc2U6Y319KSl9LHQucHJvdG90eXBlLnByb2Nlc3NTaWduaW5SZXNwb25zZT1mdW5jdGlvbiB0KGUscil7dmFyIG49dGhpcztyZXR1cm4gaS5Mb2cuZGVidWcoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWduaW5SZXNwb25zZVwiKSx0aGlzLnJlYWRTaWduaW5SZXNwb25zZVN0YXRlKGUsciwhMCkudGhlbigoZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxyPXQucmVzcG9uc2U7cmV0dXJuIGkuTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2U6IFJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKSxuLl92YWxpZGF0b3IudmFsaWRhdGVTaWduaW5SZXNwb25zZShlLHIpfSkpfSx0LnByb3RvdHlwZS5jcmVhdGVTaWdub3V0UmVxdWVzdD1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxuPXIuaWRfdG9rZW5faGludCxvPXIuZGF0YSxzPXIuc3RhdGUsYT1yLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSx1PXIuZXh0cmFRdWVyeVBhcmFtcyxoPXIucmVxdWVzdF90eXBlLGw9YXJndW1lbnRzWzFdO3JldHVybiBpLkxvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3RcIiksYT1hfHx0aGlzLl9zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmksdT11fHx0aGlzLl9zZXR0aW5ncy5leHRyYVF1ZXJ5UGFyYW1zLHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRFbmRTZXNzaW9uRW5kcG9pbnQoKS50aGVuKChmdW5jdGlvbih0KXtpZighdCl0aHJvdyBpLkxvZy5lcnJvcihcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IE5vIGVuZCBzZXNzaW9uIGVuZHBvaW50IHVybCByZXR1cm5lZFwiKSxuZXcgRXJyb3IoXCJubyBlbmQgc2Vzc2lvbiBlbmRwb2ludFwiKTtpLkxvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFJlY2VpdmVkIGVuZCBzZXNzaW9uIGVuZHBvaW50XCIsdCk7dmFyIHI9bmV3IGMuU2lnbm91dFJlcXVlc3Qoe3VybDp0LGlkX3Rva2VuX2hpbnQ6bixwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6YSxkYXRhOm98fHMsZXh0cmFRdWVyeVBhcmFtczp1LHJlcXVlc3RfdHlwZTpofSksZj1yLnN0YXRlO3JldHVybiBmJiYoaS5Mb2cuZGVidWcoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25vdXRSZXF1ZXN0OiBTaWdub3V0IHJlcXVlc3QgaGFzIHN0YXRlIHRvIHBlcnNpc3RcIiksKGw9bHx8ZS5fc3RhdGVTdG9yZSkuc2V0KGYuaWQsZi50b1N0b3JhZ2VTdHJpbmcoKSkpLHJ9KSl9LHQucHJvdG90eXBlLnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZT1mdW5jdGlvbiB0KGUscil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtpLkxvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlXCIpO3ZhciBvPW5ldyBoLlNpZ25vdXRSZXNwb25zZShlKTtpZighby5zdGF0ZSlyZXR1cm4gaS5Mb2cuZGVidWcoXCJPaWRjQ2xpZW50LnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZTogTm8gc3RhdGUgaW4gcmVzcG9uc2VcIiksby5lcnJvcj8oaS5Mb2cud2FybihcIk9pZGNDbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlOiBSZXNwb25zZSB3YXMgZXJyb3I6IFwiLG8uZXJyb3IpLFByb21pc2UucmVqZWN0KG5ldyBzLkVycm9yUmVzcG9uc2UobykpKTpQcm9taXNlLnJlc29sdmUoe3N0YXRlOnZvaWQgMCxyZXNwb25zZTpvfSk7dmFyIGE9by5zdGF0ZTtyPXJ8fHRoaXMuX3N0YXRlU3RvcmU7dmFyIHU9bj9yLnJlbW92ZS5iaW5kKHIpOnIuZ2V0LmJpbmQocik7cmV0dXJuIHUoYSkudGhlbigoZnVuY3Rpb24odCl7aWYoIXQpdGhyb3cgaS5Mb2cuZXJyb3IoXCJPaWRjQ2xpZW50LnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZTogTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKSxuZXcgRXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO3JldHVybntzdGF0ZTpmLlN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKHQpLHJlc3BvbnNlOm99fSkpfSx0LnByb3RvdHlwZS5wcm9jZXNzU2lnbm91dFJlc3BvbnNlPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj10aGlzO3JldHVybiBpLkxvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZVwiKSx0aGlzLnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZShlLHIsITApLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUscj10LnJlc3BvbnNlO3JldHVybiBlPyhpLkxvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZTogUmVjZWl2ZWQgc3RhdGUgZnJvbSBzdG9yYWdlOyB2YWxpZGF0aW5nIHJlc3BvbnNlXCIpLG4uX3ZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZShlLHIpKTooaS5Mb2cuZGVidWcoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IE5vIHN0YXRlIGZyb20gc3RvcmFnZTsgc2tpcHBpbmcgdmFsaWRhdGluZyByZXNwb25zZVwiKSxyKX0pKX0sdC5wcm90b3R5cGUuY2xlYXJTdGFsZVN0YXRlPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIiksZT1lfHx0aGlzLl9zdGF0ZVN0b3JlLGYuU3RhdGUuY2xlYXJTdGFsZVN0YXRlKGUsdGhpcy5zZXR0aW5ncy5zdGFsZVN0YXRlQWdlKX0sbih0LFt7a2V5OlwiX3N0YXRlU3RvcmVcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLnNldHRpbmdzLnN0YXRlU3RvcmV9fSx7a2V5OlwiX3ZhbGlkYXRvclwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuc2V0dGluZ3MudmFsaWRhdG9yfX0se2tleTpcIl9tZXRhZGF0YVNlcnZpY2VcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLnNldHRpbmdzLm1ldGFkYXRhU2VydmljZX19LHtrZXk6XCJzZXR0aW5nc1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3NldHRpbmdzfX0se2tleTpcIm1ldGFkYXRhU2VydmljZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZX19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuVG9rZW5DbGllbnQ9dm9pZCAwO3ZhciBuPXIoNyksaT1yKDIpLG89cigwKTtmdW5jdGlvbiBzKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1lLlRva2VuQ2xpZW50PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bi5Kc29uU2VydmljZSxhPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTppLk1ldGFkYXRhU2VydmljZTtpZihzKHRoaXMsdCksIWUpdGhyb3cgby5Mb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5jdG9yOiBObyBzZXR0aW5ncyBwYXNzZWRcIiksbmV3IEVycm9yKFwic2V0dGluZ3NcIik7dGhpcy5fc2V0dGluZ3M9ZSx0aGlzLl9qc29uU2VydmljZT1uZXcgcix0aGlzLl9tZXRhZGF0YVNlcnZpY2U9bmV3IGEodGhpcy5fc2V0dGluZ3MpfXJldHVybiB0LnByb3RvdHlwZS5leGNoYW5nZUNvZGU9ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXMscj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307KHI9T2JqZWN0LmFzc2lnbih7fSxyKSkuZ3JhbnRfdHlwZT1yLmdyYW50X3R5cGV8fFwiYXV0aG9yaXphdGlvbl9jb2RlXCIsci5jbGllbnRfaWQ9ci5jbGllbnRfaWR8fHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCxyLmNsaWVudF9zZWNyZXQ9ci5jbGllbnRfc2VjcmV0fHx0aGlzLl9zZXR0aW5ncy5jbGllbnRfc2VjcmV0LHIucmVkaXJlY3RfdXJpPXIucmVkaXJlY3RfdXJpfHx0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdF91cmk7dmFyIG49dm9pZCAwLGk9ci5fY2xpZW50X2F1dGhlbnRpY2F0aW9ufHx0aGlzLl9zZXR0aW5ncy5fY2xpZW50X2F1dGhlbnRpY2F0aW9uO3JldHVybiBkZWxldGUgci5fY2xpZW50X2F1dGhlbnRpY2F0aW9uLHIuY29kZT9yLnJlZGlyZWN0X3VyaT9yLmNvZGVfdmVyaWZpZXI/ci5jbGllbnRfaWQ/ci5jbGllbnRfc2VjcmV0fHxcImNsaWVudF9zZWNyZXRfYmFzaWNcIiE9aT8oXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCI9PWkmJihuPXIuY2xpZW50X2lkK1wiOlwiK3IuY2xpZW50X3NlY3JldCxkZWxldGUgci5jbGllbnRfaWQsZGVsZXRlIHIuY2xpZW50X3NlY3JldCksdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFRva2VuRW5kcG9pbnQoITEpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBvLkxvZy5kZWJ1ZyhcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogUmVjZWl2ZWQgdG9rZW4gZW5kcG9pbnRcIiksZS5fanNvblNlcnZpY2UucG9zdEZvcm0odCxyLG4pLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBvLkxvZy5kZWJ1ZyhcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogcmVzcG9uc2UgcmVjZWl2ZWRcIiksdH0pKX0pKSk6KG8uTG9nLmVycm9yKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlOiBObyBjbGllbnRfc2VjcmV0IHBhc3NlZFwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIGNsaWVudF9zZWNyZXQgaXMgcmVxdWlyZWRcIikpKTooby5Mb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZUNvZGU6IE5vIGNsaWVudF9pZCBwYXNzZWRcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSBjbGllbnRfaWQgaXMgcmVxdWlyZWRcIikpKTooby5Mb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZUNvZGU6IE5vIGNvZGVfdmVyaWZpZXIgcGFzc2VkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgY29kZV92ZXJpZmllciBpcyByZXF1aXJlZFwiKSkpOihvLkxvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHJlZGlyZWN0X3VyaSBpcyByZXF1aXJlZFwiKSkpOihvLkxvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogTm8gY29kZSBwYXNzZWRcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSBjb2RlIGlzIHJlcXVpcmVkXCIpKSl9LHQucHJvdG90eXBlLmV4Y2hhbmdlUmVmcmVzaFRva2VuPWZ1bmN0aW9uIHQoKXt2YXIgZT10aGlzLHI9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9OyhyPU9iamVjdC5hc3NpZ24oe30scikpLmdyYW50X3R5cGU9ci5ncmFudF90eXBlfHxcInJlZnJlc2hfdG9rZW5cIixyLmNsaWVudF9pZD1yLmNsaWVudF9pZHx8dGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkLHIuY2xpZW50X3NlY3JldD1yLmNsaWVudF9zZWNyZXR8fHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQ7dmFyIG49dm9pZCAwLGk9ci5fY2xpZW50X2F1dGhlbnRpY2F0aW9ufHx0aGlzLl9zZXR0aW5ncy5fY2xpZW50X2F1dGhlbnRpY2F0aW9uO3JldHVybiBkZWxldGUgci5fY2xpZW50X2F1dGhlbnRpY2F0aW9uLHIucmVmcmVzaF90b2tlbj9yLmNsaWVudF9pZD8oXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCI9PWkmJihuPXIuY2xpZW50X2lkK1wiOlwiK3IuY2xpZW50X3NlY3JldCxkZWxldGUgci5jbGllbnRfaWQsZGVsZXRlIHIuY2xpZW50X3NlY3JldCksdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFRva2VuRW5kcG9pbnQoITEpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBvLkxvZy5kZWJ1ZyhcIlRva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuOiBSZWNlaXZlZCB0b2tlbiBlbmRwb2ludFwiKSxlLl9qc29uU2VydmljZS5wb3N0Rm9ybSh0LHIsbikudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIG8uTG9nLmRlYnVnKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VSZWZyZXNoVG9rZW46IHJlc3BvbnNlIHJlY2VpdmVkXCIpLHR9KSl9KSkpOihvLkxvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuOiBObyBjbGllbnRfaWQgcGFzc2VkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgY2xpZW50X2lkIGlzIHJlcXVpcmVkXCIpKSk6KG8uTG9nLmVycm9yKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VSZWZyZXNoVG9rZW46IE5vIHJlZnJlc2hfdG9rZW4gcGFzc2VkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgcmVmcmVzaF90b2tlbiBpcyByZXF1aXJlZFwiKSkpfSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5FcnJvclJlc3BvbnNlPXZvaWQgMDt2YXIgbj1yKDApO2Z1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIG8odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP3Q6ZX1lLkVycm9yUmVzcG9uc2U9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxzPXIuZXJyb3IsYT1yLmVycm9yX2Rlc2NyaXB0aW9uLHU9ci5lcnJvcl91cmksYz1yLnN0YXRlLGg9ci5zZXNzaW9uX3N0YXRlO2lmKGkodGhpcyxlKSwhcyl0aHJvdyBuLkxvZy5lcnJvcihcIk5vIGVycm9yIHBhc3NlZCB0byBFcnJvclJlc3BvbnNlXCIpLG5ldyBFcnJvcihcImVycm9yXCIpO3ZhciBsPW8odGhpcyx0LmNhbGwodGhpcyxhfHxzKSk7cmV0dXJuIGwubmFtZT1cIkVycm9yUmVzcG9uc2VcIixsLmVycm9yPXMsbC5lcnJvcl9kZXNjcmlwdGlvbj1hLGwuZXJyb3JfdXJpPXUsbC5zdGF0ZT1jLGwuc2Vzc2lvbl9zdGF0ZT1oLGx9cmV0dXJuIGZ1bmN0aW9uIHIodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX0oZSx0KSxlfShFcnJvcil9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlNpZ25pblN0YXRlPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKSxvPXIoOSkscz1yKDQpLGE9ZnVuY3Rpb24gdSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHIoMTQpKTtmdW5jdGlvbiBjKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBoKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiFlfHxcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZT90OmV9ZS5TaWduaW5TdGF0ZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LG49ci5ub25jZSxpPXIuYXV0aG9yaXR5LG89ci5jbGllbnRfaWQsdT1yLnJlZGlyZWN0X3VyaSxsPXIuY29kZV92ZXJpZmllcixmPXIucmVzcG9uc2VfbW9kZSxnPXIuY2xpZW50X3NlY3JldCxkPXIuc2NvcGUscD1yLmV4dHJhVG9rZW5QYXJhbXMsdj1yLnNraXBVc2VySW5mbztjKHRoaXMsZSk7dmFyIHk9aCh0aGlzLHQuY2FsbCh0aGlzLGFyZ3VtZW50c1swXSkpO2lmKCEwPT09bj95Ll9ub25jZT0oMCxhLmRlZmF1bHQpKCk6biYmKHkuX25vbmNlPW4pLCEwPT09bD95Ll9jb2RlX3ZlcmlmaWVyPSgwLGEuZGVmYXVsdCkoKSsoMCxhLmRlZmF1bHQpKCkrKDAsYS5kZWZhdWx0KSgpOmwmJih5Ll9jb2RlX3ZlcmlmaWVyPWwpLHkuY29kZV92ZXJpZmllcil7dmFyIG09cy5Kb3NlVXRpbC5oYXNoU3RyaW5nKHkuY29kZV92ZXJpZmllcixcIlNIQTI1NlwiKTt5Ll9jb2RlX2NoYWxsZW5nZT1zLkpvc2VVdGlsLmhleFRvQmFzZTY0VXJsKG0pfXJldHVybiB5Ll9yZWRpcmVjdF91cmk9dSx5Ll9hdXRob3JpdHk9aSx5Ll9jbGllbnRfaWQ9byx5Ll9yZXNwb25zZV9tb2RlPWYseS5fY2xpZW50X3NlY3JldD1nLHkuX3Njb3BlPWQseS5fZXh0cmFUb2tlblBhcmFtcz1wLHkuX3NraXBVc2VySW5mbz12LHl9cmV0dXJuIGZ1bmN0aW9uIHIodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX0oZSx0KSxlLnByb3RvdHlwZS50b1N0b3JhZ2VTdHJpbmc9ZnVuY3Rpb24gdCgpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlNpZ25pblN0YXRlLnRvU3RvcmFnZVN0cmluZ1wiKSxKU09OLnN0cmluZ2lmeSh7aWQ6dGhpcy5pZCxkYXRhOnRoaXMuZGF0YSxjcmVhdGVkOnRoaXMuY3JlYXRlZCxyZXF1ZXN0X3R5cGU6dGhpcy5yZXF1ZXN0X3R5cGUsbm9uY2U6dGhpcy5ub25jZSxjb2RlX3ZlcmlmaWVyOnRoaXMuY29kZV92ZXJpZmllcixyZWRpcmVjdF91cmk6dGhpcy5yZWRpcmVjdF91cmksYXV0aG9yaXR5OnRoaXMuYXV0aG9yaXR5LGNsaWVudF9pZDp0aGlzLmNsaWVudF9pZCxyZXNwb25zZV9tb2RlOnRoaXMucmVzcG9uc2VfbW9kZSxjbGllbnRfc2VjcmV0OnRoaXMuY2xpZW50X3NlY3JldCxzY29wZTp0aGlzLnNjb3BlLGV4dHJhVG9rZW5QYXJhbXM6dGhpcy5leHRyYVRva2VuUGFyYW1zLHNraXBVc2VySW5mbzp0aGlzLnNraXBVc2VySW5mb30pfSxlLmZyb21TdG9yYWdlU3RyaW5nPWZ1bmN0aW9uIHQocil7cmV0dXJuIGkuTG9nLmRlYnVnKFwiU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmdcIiksbmV3IGUoSlNPTi5wYXJzZShyKSl9LG4oZSxbe2tleTpcIm5vbmNlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fbm9uY2V9fSx7a2V5OlwiYXV0aG9yaXR5XCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fYXV0aG9yaXR5fX0se2tleTpcImNsaWVudF9pZFwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2NsaWVudF9pZH19LHtrZXk6XCJyZWRpcmVjdF91cmlcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9yZWRpcmVjdF91cml9fSx7a2V5OlwiY29kZV92ZXJpZmllclwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2NvZGVfdmVyaWZpZXJ9fSx7a2V5OlwiY29kZV9jaGFsbGVuZ2VcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9jb2RlX2NoYWxsZW5nZX19LHtrZXk6XCJyZXNwb25zZV9tb2RlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcmVzcG9uc2VfbW9kZX19LHtrZXk6XCJjbGllbnRfc2VjcmV0XCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fY2xpZW50X3NlY3JldH19LHtrZXk6XCJzY29wZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3Njb3BlfX0se2tleTpcImV4dHJhVG9rZW5QYXJhbXNcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9leHRyYVRva2VuUGFyYW1zfX0se2tleTpcInNraXBVc2VySW5mb1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3NraXBVc2VySW5mb319XSksZX0oby5TdGF0ZSl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9ZnVuY3Rpb24gbigpe3JldHVybihcInVuZGVmaW5lZFwiIT1pJiZudWxsIT09aSYmdm9pZCAwIT09aS5nZXRSYW5kb21WYWx1ZXM/bzpzKSgpLnJlcGxhY2UoLy0vZyxcIlwiKX07dmFyIGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cuY3J5cHRvfHx3aW5kb3cubXNDcnlwdG86bnVsbDtmdW5jdGlvbiBvKCl7cmV0dXJuKFsxZTddKy0xZTMrLTRlMystOGUzKy0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLChmdW5jdGlvbih0KXtyZXR1cm4odF5pLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxKSlbMF0mMTU+PnQvNCkudG9TdHJpbmcoMTYpfSkpfWZ1bmN0aW9uIHMoKXtyZXR1cm4oWzFlN10rLTFlMystNGUzKy04ZTMrLTFlMTEpLnJlcGxhY2UoL1swMThdL2csKGZ1bmN0aW9uKHQpe3JldHVybih0XjE2Kk1hdGgucmFuZG9tKCk+PnQvNCkudG9TdHJpbmcoMTYpfSkpfXQuZXhwb3J0cz1lLmRlZmF1bHR9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlVzZXI9dm9pZCAwO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lW3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKGUscixuKXtyZXR1cm4gciYmdChlLnByb3RvdHlwZSxyKSxuJiZ0KGUsbiksZX19KCksaT1yKDApO2UuVXNlcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIHI9ZS5pZF90b2tlbixuPWUuc2Vzc2lvbl9zdGF0ZSxpPWUuYWNjZXNzX3Rva2VuLG89ZS5yZWZyZXNoX3Rva2VuLHM9ZS50b2tlbl90eXBlLGE9ZS5zY29wZSx1PWUucHJvZmlsZSxjPWUuZXhwaXJlc19hdCxoPWUuc3RhdGU7IWZ1bmN0aW9uIGwodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuaWRfdG9rZW49cix0aGlzLnNlc3Npb25fc3RhdGU9bix0aGlzLmFjY2Vzc190b2tlbj1pLHRoaXMucmVmcmVzaF90b2tlbj1vLHRoaXMudG9rZW5fdHlwZT1zLHRoaXMuc2NvcGU9YSx0aGlzLnByb2ZpbGU9dSx0aGlzLmV4cGlyZXNfYXQ9Yyx0aGlzLnN0YXRlPWh9cmV0dXJuIHQucHJvdG90eXBlLnRvU3RvcmFnZVN0cmluZz1mdW5jdGlvbiB0KCl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiVXNlci50b1N0b3JhZ2VTdHJpbmdcIiksSlNPTi5zdHJpbmdpZnkoe2lkX3Rva2VuOnRoaXMuaWRfdG9rZW4sc2Vzc2lvbl9zdGF0ZTp0aGlzLnNlc3Npb25fc3RhdGUsYWNjZXNzX3Rva2VuOnRoaXMuYWNjZXNzX3Rva2VuLHJlZnJlc2hfdG9rZW46dGhpcy5yZWZyZXNoX3Rva2VuLHRva2VuX3R5cGU6dGhpcy50b2tlbl90eXBlLHNjb3BlOnRoaXMuc2NvcGUscHJvZmlsZTp0aGlzLnByb2ZpbGUsZXhwaXJlc19hdDp0aGlzLmV4cGlyZXNfYXR9KX0sdC5mcm9tU3RvcmFnZVN0cmluZz1mdW5jdGlvbiBlKHIpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlVzZXIuZnJvbVN0b3JhZ2VTdHJpbmdcIiksbmV3IHQoSlNPTi5wYXJzZShyKSl9LG4odCxbe2tleTpcImV4cGlyZXNfaW5cIixnZXQ6ZnVuY3Rpb24gdCgpe2lmKHRoaXMuZXhwaXJlc19hdCl7dmFyIGU9cGFyc2VJbnQoRGF0ZS5ub3coKS8xZTMpO3JldHVybiB0aGlzLmV4cGlyZXNfYXQtZX19LHNldDpmdW5jdGlvbiB0KGUpe3ZhciByPXBhcnNlSW50KGUpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiByJiZyPjApe3ZhciBuPXBhcnNlSW50KERhdGUubm93KCkvMWUzKTt0aGlzLmV4cGlyZXNfYXQ9bityfX19LHtrZXk6XCJleHBpcmVkXCIsZ2V0OmZ1bmN0aW9uIHQoKXt2YXIgZT10aGlzLmV4cGlyZXNfaW47aWYodm9pZCAwIT09ZSlyZXR1cm4gZTw9MH19LHtrZXk6XCJzY29wZXNcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybih0aGlzLnNjb3BlfHxcIlwiKS5zcGxpdChcIiBcIil9fV0pLHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLkFjY2Vzc1Rva2VuRXZlbnRzPXZvaWQgMDt2YXIgbj1yKDApLGk9cig0Nik7ZnVuY3Rpb24gbyh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZS5BY2Nlc3NUb2tlbkV2ZW50cz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30scj1lLmFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLG49dm9pZCAwPT09cj82MDpyLHM9ZS5hY2Nlc3NUb2tlbkV4cGlyaW5nVGltZXIsYT12b2lkIDA9PT1zP25ldyBpLlRpbWVyKFwiQWNjZXNzIHRva2VuIGV4cGlyaW5nXCIpOnMsdT1lLmFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyLGM9dm9pZCAwPT09dT9uZXcgaS5UaW1lcihcIkFjY2VzcyB0b2tlbiBleHBpcmVkXCIpOnU7byh0aGlzLHQpLHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lPW4sdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZz1hLHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZD1jfXJldHVybiB0LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uIHQoZSl7aWYoZS5hY2Nlc3NfdG9rZW4mJnZvaWQgMCE9PWUuZXhwaXJlc19pbil7dmFyIHI9ZS5leHBpcmVzX2luO2lmKG4uTG9nLmRlYnVnKFwiQWNjZXNzVG9rZW5FdmVudHMubG9hZDogYWNjZXNzIHRva2VuIHByZXNlbnQsIHJlbWFpbmluZyBkdXJhdGlvbjpcIixyKSxyPjApe3ZhciBpPXItdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7aTw9MCYmKGk9MSksbi5Mb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkOiByZWdpc3RlcmluZyBleHBpcmluZyB0aW1lciBpbjpcIixpKSx0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmluaXQoaSl9ZWxzZSBuLkxvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IGNhbmNlbGluZyBleGlzdGluZyBleHBpcmluZyB0aW1lciBiZWNhc2Ugd2UncmUgcGFzdCBleHBpcmF0aW9uLlwiKSx0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO3ZhciBvPXIrMTtuLkxvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IHJlZ2lzdGVyaW5nIGV4cGlyZWQgdGltZXIgaW46XCIsbyksdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLmluaXQobyl9ZWxzZSB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpLHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5jYW5jZWwoKX0sdC5wcm90b3R5cGUudW5sb2FkPWZ1bmN0aW9uIHQoKXtuLkxvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLnVubG9hZDogY2FuY2VsaW5nIGV4aXN0aW5nIGFjY2VzcyB0b2tlbiB0aW1lcnNcIiksdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5jYW5jZWwoKSx0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuY2FuY2VsKCl9LHQucHJvdG90eXBlLmFkZEFjY2Vzc1Rva2VuRXhwaXJpbmc9ZnVuY3Rpb24gdChlKXt0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmFkZEhhbmRsZXIoZSl9LHQucHJvdG90eXBlLnJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmc9ZnVuY3Rpb24gdChlKXt0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLnJlbW92ZUhhbmRsZXIoZSl9LHQucHJvdG90eXBlLmFkZEFjY2Vzc1Rva2VuRXhwaXJlZD1mdW5jdGlvbiB0KGUpe3RoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5hZGRIYW5kbGVyKGUpfSx0LnByb3RvdHlwZS5yZW1vdmVBY2Nlc3NUb2tlbkV4cGlyZWQ9ZnVuY3Rpb24gdChlKXt0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQucmVtb3ZlSGFuZGxlcihlKX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuRXZlbnQ9dm9pZCAwO3ZhciBuPXIoMCk7ZS5FdmVudD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7IWZ1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuX25hbWU9ZSx0aGlzLl9jYWxsYmFja3M9W119cmV0dXJuIHQucHJvdG90eXBlLmFkZEhhbmRsZXI9ZnVuY3Rpb24gdChlKXt0aGlzLl9jYWxsYmFja3MucHVzaChlKX0sdC5wcm90b3R5cGUucmVtb3ZlSGFuZGxlcj1mdW5jdGlvbiB0KGUpe3ZhciByPXRoaXMuX2NhbGxiYWNrcy5maW5kSW5kZXgoKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09ZX0pKTtyPj0wJiZ0aGlzLl9jYWxsYmFja3Muc3BsaWNlKHIsMSl9LHQucHJvdG90eXBlLnJhaXNlPWZ1bmN0aW9uIHQoKXtuLkxvZy5kZWJ1ZyhcIkV2ZW50OiBSYWlzaW5nIGV2ZW50OiBcIit0aGlzLl9uYW1lKTtmb3IodmFyIGU9MDtlPHRoaXMuX2NhbGxiYWNrcy5sZW5ndGg7ZSsrKXt2YXIgcjsocj10aGlzLl9jYWxsYmFja3MpW2VdLmFwcGx5KHIsYXJndW1lbnRzKX19LHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlNlc3Npb25Nb25pdG9yPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKSxvPXIoMTkpLHM9cigxKTtmdW5jdGlvbiBhKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1lLlNlc3Npb25Nb25pdG9yPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzLG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm8uQ2hlY2tTZXNzaW9uSUZyYW1lLHU9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnMuR2xvYmFsLnRpbWVyO2lmKGEodGhpcyx0KSwhZSl0aHJvdyBpLkxvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yLmN0b3I6IE5vIHVzZXIgbWFuYWdlciBwYXNzZWQgdG8gU2Vzc2lvbk1vbml0b3JcIiksbmV3IEVycm9yKFwidXNlck1hbmFnZXJcIik7dGhpcy5fdXNlck1hbmFnZXI9ZSx0aGlzLl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yPW4sdGhpcy5fdGltZXI9dSx0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkVXNlckxvYWRlZCh0aGlzLl9zdGFydC5iaW5kKHRoaXMpKSx0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkVXNlclVubG9hZGVkKHRoaXMuX3N0b3AuYmluZCh0aGlzKSksUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3VzZXJNYW5hZ2VyLmdldFVzZXIoKS50aGVuKChmdW5jdGlvbih0KXt0P3IuX3N0YXJ0KHQpOnIuX3NldHRpbmdzLm1vbml0b3JBbm9ueW1vdXNTZXNzaW9uJiZyLl91c2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXMoKS50aGVuKChmdW5jdGlvbih0KXt2YXIgZT17c2Vzc2lvbl9zdGF0ZTp0LnNlc3Npb25fc3RhdGV9O3Quc3ViJiZ0LnNpZCYmKGUucHJvZmlsZT17c3ViOnQuc3ViLHNpZDp0LnNpZH0pLHIuX3N0YXJ0KGUpfSkpLmNhdGNoKChmdW5jdGlvbih0KXtpLkxvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yIGN0b3I6IGVycm9yIGZyb20gcXVlcnlTZXNzaW9uU3RhdHVzOlwiLHQubWVzc2FnZSl9KSl9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe2kuTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IgY3RvcjogZXJyb3IgZnJvbSBnZXRVc2VyOlwiLHQubWVzc2FnZSl9KSkpfXJldHVybiB0LnByb3RvdHlwZS5fc3RhcnQ9ZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzLG49ZS5zZXNzaW9uX3N0YXRlO24mJihlLnByb2ZpbGU/KHRoaXMuX3N1Yj1lLnByb2ZpbGUuc3ViLHRoaXMuX3NpZD1lLnByb2ZpbGUuc2lkLGkuTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBzZXNzaW9uX3N0YXRlOlwiLG4sXCIsIHN1YjpcIix0aGlzLl9zdWIpKToodGhpcy5fc3ViPXZvaWQgMCx0aGlzLl9zaWQ9dm9pZCAwLGkuTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBzZXNzaW9uX3N0YXRlOlwiLG4sXCIsIGFub255bW91cyB1c2VyXCIpKSx0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWU/dGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KG4pOnRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRDaGVja1Nlc3Npb25JZnJhbWUoKS50aGVuKChmdW5jdGlvbih0KXtpZih0KXtpLkxvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9zdGFydDogSW5pdGlhbGl6aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lXCIpO3ZhciBlPXIuX2NsaWVudF9pZCxvPXIuX2NoZWNrU2Vzc2lvbkludGVydmFsLHM9ci5fc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7ci5fY2hlY2tTZXNzaW9uSUZyYW1lPW5ldyByLl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yKHIuX2NhbGxiYWNrLmJpbmQociksZSx0LG8scyksci5fY2hlY2tTZXNzaW9uSUZyYW1lLmxvYWQoKS50aGVuKChmdW5jdGlvbigpe3IuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdGFydChuKX0pKX1lbHNlIGkuTG9nLndhcm4oXCJTZXNzaW9uTW9uaXRvci5fc3RhcnQ6IE5vIGNoZWNrIHNlc3Npb24gaWZyYW1lIGZvdW5kIGluIHRoZSBtZXRhZGF0YVwiKX0pKS5jYXRjaCgoZnVuY3Rpb24odCl7aS5Mb2cuZXJyb3IoXCJTZXNzaW9uTW9uaXRvci5fc3RhcnQ6IEVycm9yIGZyb20gZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lOlwiLHQubWVzc2FnZSl9KSkpfSx0LnByb3RvdHlwZS5fc3RvcD1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcztpZih0aGlzLl9zdWI9dm9pZCAwLHRoaXMuX3NpZD12b2lkIDAsdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lJiYoaS5Mb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fc3RvcFwiKSx0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RvcCgpKSx0aGlzLl9zZXR0aW5ncy5tb25pdG9yQW5vbnltb3VzU2Vzc2lvbil2YXIgcj10aGlzLl90aW1lci5zZXRJbnRlcnZhbCgoZnVuY3Rpb24oKXtlLl90aW1lci5jbGVhckludGVydmFsKHIpLGUuX3VzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1cygpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciByPXtzZXNzaW9uX3N0YXRlOnQuc2Vzc2lvbl9zdGF0ZX07dC5zdWImJnQuc2lkJiYoci5wcm9maWxlPXtzdWI6dC5zdWIsc2lkOnQuc2lkfSksZS5fc3RhcnQocil9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe2kuTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3I6IGVycm9yIGZyb20gcXVlcnlTZXNzaW9uU3RhdHVzOlwiLHQubWVzc2FnZSl9KSl9KSwxZTMpfSx0LnByb3RvdHlwZS5fY2FsbGJhY2s9ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXM7dGhpcy5fdXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzKCkudGhlbigoZnVuY3Rpb24odCl7dmFyIHI9ITA7dD90LnN1Yj09PWUuX3N1Yj8ocj0hMSxlLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQodC5zZXNzaW9uX3N0YXRlKSx0LnNpZD09PWUuX3NpZD9pLkxvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2FtZSBzdWIgc3RpbGwgbG9nZ2VkIGluIGF0IE9QLCByZXN0YXJ0aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lOyBzZXNzaW9uX3N0YXRlOlwiLHQuc2Vzc2lvbl9zdGF0ZSk6KGkuTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTYW1lIHN1YiBzdGlsbCBsb2dnZWQgaW4gYXQgT1AsIHNlc3Npb24gc3RhdGUgaGFzIGNoYW5nZWQsIHJlc3RhcnRpbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWU7IHNlc3Npb25fc3RhdGU6XCIsdC5zZXNzaW9uX3N0YXRlKSxlLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkKCkpKTppLkxvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogRGlmZmVyZW50IHN1YmplY3Qgc2lnbmVkIGludG8gT1A6XCIsdC5zdWIpOmkuTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTdWJqZWN0IG5vIGxvbmdlciBzaWduZWQgaW50byBPUFwiKSxyJiYoZS5fc3ViPyhpLkxvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOyByYWlzaW5nIHNpZ25lZCBvdXQgZXZlbnRcIiksZS5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKSk6KGkuTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s7IHJhaXNpbmcgc2lnbmVkIGluIGV2ZW50XCIpLGUuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkSW4oKSkpfSkpLmNhdGNoKChmdW5jdGlvbih0KXtlLl9zdWImJihpLkxvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogRXJyb3IgY2FsbGluZyBxdWVyeUN1cnJlbnRTaWduaW5TZXNzaW9uOyByYWlzaW5nIHNpZ25lZCBvdXQgZXZlbnRcIix0Lm1lc3NhZ2UpLGUuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0KCkpfSkpfSxuKHQsW3trZXk6XCJfc2V0dGluZ3NcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl91c2VyTWFuYWdlci5zZXR0aW5nc319LHtrZXk6XCJfbWV0YWRhdGFTZXJ2aWNlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fdXNlck1hbmFnZXIubWV0YWRhdGFTZXJ2aWNlfX0se2tleTpcIl9jbGllbnRfaWRcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWR9fSx7a2V5OlwiX2NoZWNrU2Vzc2lvbkludGVydmFsXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fc2V0dGluZ3MuY2hlY2tTZXNzaW9uSW50ZXJ2YWx9fSx7a2V5OlwiX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fc2V0dGluZ3Muc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3J9fV0pLHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLkNoZWNrU2Vzc2lvbklGcmFtZT12b2lkIDA7dmFyIG49cigwKTtmdW5jdGlvbiBpKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1lLkNoZWNrU2Vzc2lvbklGcmFtZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxyLG4sbyl7dmFyIHM9IShhcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSl8fGFyZ3VtZW50c1s0XTtpKHRoaXMsdCksdGhpcy5fY2FsbGJhY2s9ZSx0aGlzLl9jbGllbnRfaWQ9cix0aGlzLl91cmw9bix0aGlzLl9pbnRlcnZhbD1vfHwyZTMsdGhpcy5fc3RvcE9uRXJyb3I9czt2YXIgYT1uLmluZGV4T2YoXCIvXCIsbi5pbmRleE9mKFwiLy9cIikrMik7dGhpcy5fZnJhbWVfb3JpZ2luPW4uc3Vic3RyKDAsYSksdGhpcy5fZnJhbWU9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIiksdGhpcy5fZnJhbWUuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiLHRoaXMuX2ZyYW1lLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIix0aGlzLl9mcmFtZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuX2ZyYW1lLndpZHRoPTAsdGhpcy5fZnJhbWUuaGVpZ2h0PTAsdGhpcy5fZnJhbWUuc3JjPW59cmV0dXJuIHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtlLl9mcmFtZS5vbmxvYWQ9ZnVuY3Rpb24oKXt0KCl9LHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUuX2ZyYW1lKSxlLl9ib3VuZE1lc3NhZ2VFdmVudD1lLl9tZXNzYWdlLmJpbmQoZSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZS5fYm91bmRNZXNzYWdlRXZlbnQsITEpfSkpfSx0LnByb3RvdHlwZS5fbWVzc2FnZT1mdW5jdGlvbiB0KGUpe2Uub3JpZ2luPT09dGhpcy5fZnJhbWVfb3JpZ2luJiZlLnNvdXJjZT09PXRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cmJihcImVycm9yXCI9PT1lLmRhdGE/KG4uTG9nLmVycm9yKFwiQ2hlY2tTZXNzaW9uSUZyYW1lOiBlcnJvciBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIiksdGhpcy5fc3RvcE9uRXJyb3ImJnRoaXMuc3RvcCgpKTpcImNoYW5nZWRcIj09PWUuZGF0YT8obi5Mb2cuZGVidWcoXCJDaGVja1Nlc3Npb25JRnJhbWU6IGNoYW5nZWQgbWVzc2FnZSBmcm9tIGNoZWNrIHNlc3Npb24gb3AgaWZyYW1lXCIpLHRoaXMuc3RvcCgpLHRoaXMuX2NhbGxiYWNrKCkpOm4uTG9nLmRlYnVnKFwiQ2hlY2tTZXNzaW9uSUZyYW1lOiBcIitlLmRhdGErXCIgbWVzc2FnZSBmcm9tIGNoZWNrIHNlc3Npb24gb3AgaWZyYW1lXCIpKX0sdC5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzO2lmKHRoaXMuX3Nlc3Npb25fc3RhdGUhPT1lKXtuLkxvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZS5zdGFydFwiKSx0aGlzLnN0b3AoKSx0aGlzLl9zZXNzaW9uX3N0YXRlPWU7dmFyIGk9ZnVuY3Rpb24gdCgpe3IuX2ZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2Uoci5fY2xpZW50X2lkK1wiIFwiK3IuX3Nlc3Npb25fc3RhdGUsci5fZnJhbWVfb3JpZ2luKX07aSgpLHRoaXMuX3RpbWVyPXdpbmRvdy5zZXRJbnRlcnZhbChpLHRoaXMuX2ludGVydmFsKX19LHQucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24gdCgpe3RoaXMuX3Nlc3Npb25fc3RhdGU9bnVsbCx0aGlzLl90aW1lciYmKG4uTG9nLmRlYnVnKFwiQ2hlY2tTZXNzaW9uSUZyYW1lLnN0b3BcIiksd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXIpLHRoaXMuX3RpbWVyPW51bGwpfSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5Ub2tlblJldm9jYXRpb25DbGllbnQ9dm9pZCAwO3ZhciBuPXIoMCksaT1yKDIpLG89cigxKTtmdW5jdGlvbiBzKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX12YXIgYT1cImFjY2Vzc190b2tlblwiLHU9XCJyZWZyZXNoX3Rva2VuXCI7ZS5Ub2tlblJldm9jYXRpb25DbGllbnQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpvLkdsb2JhbC5YTUxIdHRwUmVxdWVzdCxhPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTppLk1ldGFkYXRhU2VydmljZTtpZihzKHRoaXMsdCksIWUpdGhyb3cgbi5Mb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQuY3RvcjogTm8gc2V0dGluZ3MgcHJvdmlkZWRcIiksbmV3IEVycm9yKFwiTm8gc2V0dGluZ3MgcHJvdmlkZWQuXCIpO3RoaXMuX3NldHRpbmdzPWUsdGhpcy5fWE1MSHR0cFJlcXVlc3RDdG9yPXIsdGhpcy5fbWV0YWRhdGFTZXJ2aWNlPW5ldyBhKHRoaXMuX3NldHRpbmdzKX1yZXR1cm4gdC5wcm90b3R5cGUucmV2b2tlPWZ1bmN0aW9uIHQoZSxyKXt2YXIgaT10aGlzLG89YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiYWNjZXNzX3Rva2VuXCI7aWYoIWUpdGhyb3cgbi5Mb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBObyB0b2tlbiBwcm92aWRlZFwiKSxuZXcgRXJyb3IoXCJObyB0b2tlbiBwcm92aWRlZC5cIik7aWYobyE9PWEmJm8hPXUpdGhyb3cgbi5Mb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBJbnZhbGlkIHRva2VuIHR5cGVcIiksbmV3IEVycm9yKFwiSW52YWxpZCB0b2tlbiB0eXBlLlwiKTtyZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFJldm9jYXRpb25FbmRwb2ludCgpLnRoZW4oKGZ1bmN0aW9uKHQpe2lmKHQpe24uTG9nLmRlYnVnKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogUmV2b2tpbmcgXCIrbyk7dmFyIHM9aS5fc2V0dGluZ3MuY2xpZW50X2lkLGE9aS5fc2V0dGluZ3MuY2xpZW50X3NlY3JldDtyZXR1cm4gaS5fcmV2b2tlKHQscyxhLGUsbyl9aWYocil0aHJvdyBuLkxvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IFJldm9jYXRpb24gbm90IHN1cHBvcnRlZFwiKSxuZXcgRXJyb3IoXCJSZXZvY2F0aW9uIG5vdCBzdXBwb3J0ZWRcIil9KSl9LHQucHJvdG90eXBlLl9yZXZva2U9ZnVuY3Rpb24gdChlLHIsaSxvLHMpe3ZhciBhPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHUpe3ZhciBjPW5ldyBhLl9YTUxIdHRwUmVxdWVzdEN0b3I7Yy5vcGVuKFwiUE9TVFwiLGUpLGMub25sb2FkPWZ1bmN0aW9uKCl7bi5Mb2cuZGVidWcoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIixjLnN0YXR1cyksMjAwPT09Yy5zdGF0dXM/dCgpOnUoRXJyb3IoYy5zdGF0dXNUZXh0K1wiIChcIitjLnN0YXR1cytcIilcIikpfSxjLm9uZXJyb3I9ZnVuY3Rpb24oKXtuLkxvZy5kZWJ1ZyhcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IE5ldHdvcmsgRXJyb3IuXCIpLHUoXCJOZXR3b3JrIEVycm9yXCIpfTt2YXIgaD1cImNsaWVudF9pZD1cIitlbmNvZGVVUklDb21wb25lbnQocik7aSYmKGgrPVwiJmNsaWVudF9zZWNyZXQ9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGkpKSxoKz1cIiZ0b2tlbl90eXBlX2hpbnQ9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHMpLGgrPVwiJnRva2VuPVwiK2VuY29kZVVSSUNvbXBvbmVudChvKSxjLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSxjLnNlbmQoaCl9KSl9LHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLkNvcmRvdmFQb3B1cFdpbmRvdz12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxpPXIoMCk7ZS5Db3Jkb3ZhUG9wdXBXaW5kb3c9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciByPXRoaXM7IWZ1bmN0aW9uIG4odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuX3Byb21pc2U9bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQsZSl7ci5fcmVzb2x2ZT10LHIuX3JlamVjdD1lfSkpLHRoaXMuZmVhdHVyZXM9ZS5wb3B1cFdpbmRvd0ZlYXR1cmVzfHxcImxvY2F0aW9uPW5vLHRvb2xiYXI9bm8sem9vbT1ub1wiLHRoaXMudGFyZ2V0PWUucG9wdXBXaW5kb3dUYXJnZXR8fFwiX2JsYW5rXCIsdGhpcy5yZWRpcmVjdF91cmk9ZS5zdGFydFVybCxpLkxvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdy5jdG9yOiByZWRpcmVjdF91cmk6IFwiK3RoaXMucmVkaXJlY3RfdXJpKX1yZXR1cm4gdC5wcm90b3R5cGUuX2lzSW5BcHBCcm93c2VySW5zdGFsbGVkPWZ1bmN0aW9uIHQoZSl7cmV0dXJuW1wiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyXCIsXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIuaW5hcHBicm93c2VyXCIsXCJvcmcuYXBhY2hlLmNvcmRvdmEuaW5hcHBicm93c2VyXCJdLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBlLmhhc093blByb3BlcnR5KHQpfSkpfSx0LnByb3RvdHlwZS5uYXZpZ2F0ZT1mdW5jdGlvbiB0KGUpe2lmKGUmJmUudXJsKXtpZighd2luZG93LmNvcmRvdmEpcmV0dXJuIHRoaXMuX2Vycm9yKFwiY29yZG92YSBpcyB1bmRlZmluZWRcIik7dmFyIHI9d2luZG93LmNvcmRvdmEucmVxdWlyZShcImNvcmRvdmEvcGx1Z2luX2xpc3RcIikubWV0YWRhdGE7aWYoITE9PT10aGlzLl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZChyKSlyZXR1cm4gdGhpcy5fZXJyb3IoXCJJbkFwcEJyb3dzZXIgcGx1Z2luIG5vdCBmb3VuZFwiKTt0aGlzLl9wb3B1cD1jb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuKGUudXJsLHRoaXMudGFyZ2V0LHRoaXMuZmVhdHVyZXMpLHRoaXMuX3BvcHVwPyhpLkxvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdy5uYXZpZ2F0ZTogcG9wdXAgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcIiksdGhpcy5fZXhpdENhbGxiYWNrRXZlbnQ9dGhpcy5fZXhpdENhbGxiYWNrLmJpbmQodGhpcyksdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudD10aGlzLl9sb2FkU3RhcnRDYWxsYmFjay5iaW5kKHRoaXMpLHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJleGl0XCIsdGhpcy5fZXhpdENhbGxiYWNrRXZlbnQsITEpLHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIix0aGlzLl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50LCExKSk6dGhpcy5fZXJyb3IoXCJFcnJvciBvcGVuaW5nIHBvcHVwIHdpbmRvd1wiKX1lbHNlIHRoaXMuX2Vycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO3JldHVybiB0aGlzLnByb21pc2V9LHQucHJvdG90eXBlLl9sb2FkU3RhcnRDYWxsYmFjaz1mdW5jdGlvbiB0KGUpezA9PT1lLnVybC5pbmRleE9mKHRoaXMucmVkaXJlY3RfdXJpKSYmdGhpcy5fc3VjY2Vzcyh7dXJsOmUudXJsfSl9LHQucHJvdG90eXBlLl9leGl0Q2FsbGJhY2s9ZnVuY3Rpb24gdChlKXt0aGlzLl9lcnJvcihlKX0sdC5wcm90b3R5cGUuX3N1Y2Nlc3M9ZnVuY3Rpb24gdChlKXt0aGlzLl9jbGVhbnVwKCksaS5Mb2cuZGVidWcoXCJDb3Jkb3ZhUG9wdXBXaW5kb3c6IFN1Y2Nlc3NmdWwgcmVzcG9uc2UgZnJvbSBjb3Jkb3ZhIHBvcHVwIHdpbmRvd1wiKSx0aGlzLl9yZXNvbHZlKGUpfSx0LnByb3RvdHlwZS5fZXJyb3I9ZnVuY3Rpb24gdChlKXt0aGlzLl9jbGVhbnVwKCksaS5Mb2cuZXJyb3IoZSksdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihlKSl9LHQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uIHQoKXt0aGlzLl9jbGVhbnVwKCl9LHQucHJvdG90eXBlLl9jbGVhbnVwPWZ1bmN0aW9uIHQoKXt0aGlzLl9wb3B1cCYmKGkuTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93OiBjbGVhbmluZyB1cCBwb3B1cFwiKSx0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXhpdFwiLHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50LCExKSx0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZHN0YXJ0XCIsdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCwhMSksdGhpcy5fcG9wdXAuY2xvc2UoKSksdGhpcy5fcG9wdXA9bnVsbH0sbih0LFt7a2V5OlwicHJvbWlzZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3Byb21pc2V9fV0pLHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDApLGk9cigxMCksbz1yKDUpLHM9cig2KSxhPXIoMzcpLHU9cigzOCksYz1yKDE2KSxoPXIoMiksbD1yKDQ4KSxmPXIoNDkpLGc9cigxOSksZD1yKDIwKSxwPXIoMTgpLHY9cigxKSx5PXIoMTUpLG09cig1MCk7ZS5kZWZhdWx0PXtWZXJzaW9uOm0uVmVyc2lvbixMb2c6bi5Mb2csT2lkY0NsaWVudDppLk9pZGNDbGllbnQsT2lkY0NsaWVudFNldHRpbmdzOm8uT2lkY0NsaWVudFNldHRpbmdzLFdlYlN0b3JhZ2VTdGF0ZVN0b3JlOnMuV2ViU3RvcmFnZVN0YXRlU3RvcmUsSW5NZW1vcnlXZWJTdG9yYWdlOmEuSW5NZW1vcnlXZWJTdG9yYWdlLFVzZXJNYW5hZ2VyOnUuVXNlck1hbmFnZXIsQWNjZXNzVG9rZW5FdmVudHM6Yy5BY2Nlc3NUb2tlbkV2ZW50cyxNZXRhZGF0YVNlcnZpY2U6aC5NZXRhZGF0YVNlcnZpY2UsQ29yZG92YVBvcHVwTmF2aWdhdG9yOmwuQ29yZG92YVBvcHVwTmF2aWdhdG9yLENvcmRvdmFJRnJhbWVOYXZpZ2F0b3I6Zi5Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yLENoZWNrU2Vzc2lvbklGcmFtZTpnLkNoZWNrU2Vzc2lvbklGcmFtZSxUb2tlblJldm9jYXRpb25DbGllbnQ6ZC5Ub2tlblJldm9jYXRpb25DbGllbnQsU2Vzc2lvbk1vbml0b3I6cC5TZXNzaW9uTW9uaXRvcixHbG9iYWw6di5HbG9iYWwsVXNlcjp5LlVzZXJ9LHQuZXhwb3J0cz1lLmRlZmF1bHR9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtlLkNsb2NrU2VydmljZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24gZSh0LHIpe2lmKCEodCBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCl9cmV0dXJuIHQucHJvdG90eXBlLmdldEVwb2NoVGltZT1mdW5jdGlvbiB0KCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShEYXRlLm5vdygpLzFlM3wwKX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuUmVzcG9uc2VWYWxpZGF0b3I9dm9pZCAwO3ZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGk9cigwKSxvPXIoMikscz1yKDI1KSxhPXIoMTEpLHU9cigxMiksYz1yKDQpO2Z1bmN0aW9uIGgodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBsPVtcIm5vbmNlXCIsXCJhdF9oYXNoXCIsXCJpYXRcIixcIm5iZlwiLFwiZXhwXCIsXCJhdWRcIixcImlzc1wiLFwiY19oYXNoXCJdO2UuUmVzcG9uc2VWYWxpZGF0b3I9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpvLk1ldGFkYXRhU2VydmljZSxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpzLlVzZXJJbmZvU2VydmljZSx1PWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpjLkpvc2VVdGlsLGw9YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOmEuVG9rZW5DbGllbnQ7aWYoaCh0aGlzLHQpLCFlKXRocm93IGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuY3RvcjogTm8gc2V0dGluZ3MgcGFzc2VkIHRvIFJlc3BvbnNlVmFsaWRhdG9yXCIpLG5ldyBFcnJvcihcInNldHRpbmdzXCIpO3RoaXMuX3NldHRpbmdzPWUsdGhpcy5fbWV0YWRhdGFTZXJ2aWNlPW5ldyByKHRoaXMuX3NldHRpbmdzKSx0aGlzLl91c2VySW5mb1NlcnZpY2U9bmV3IG4odGhpcy5fc2V0dGluZ3MpLHRoaXMuX2pvc2VVdGlsPXUsdGhpcy5fdG9rZW5DbGllbnQ9bmV3IGwodGhpcy5fc2V0dGluZ3MpfXJldHVybiB0LnByb3RvdHlwZS52YWxpZGF0ZVNpZ25pblJlc3BvbnNlPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj10aGlzO3JldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2VcIiksdGhpcy5fcHJvY2Vzc1NpZ25pblBhcmFtcyhlLHIpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHN0YXRlIHByb2Nlc3NlZFwiKSxuLl92YWxpZGF0ZVRva2VucyhlLHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHRva2VucyB2YWxpZGF0ZWRcIiksbi5fcHJvY2Vzc0NsYWltcyhlLHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IGNsYWltcyBwcm9jZXNzZWRcIiksdH0pKX0pKX0pKX0sdC5wcm90b3R5cGUudmFsaWRhdGVTaWdub3V0UmVzcG9uc2U9ZnVuY3Rpb24gdChlLHIpe3JldHVybiBlLmlkIT09ci5zdGF0ZT8oaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpKTooaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogc3RhdGUgdmFsaWRhdGVkXCIpLHIuc3RhdGU9ZS5kYXRhLHIuZXJyb3I/KGkuTG9nLndhcm4oXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogUmVzcG9uc2Ugd2FzIGVycm9yXCIsci5lcnJvciksUHJvbWlzZS5yZWplY3QobmV3IHUuRXJyb3JSZXNwb25zZShyKSkpOlByb21pc2UucmVzb2x2ZShyKSl9LHQucHJvdG90eXBlLl9wcm9jZXNzU2lnbmluUGFyYW1zPWZ1bmN0aW9uIHQoZSxyKXtpZihlLmlkIT09ci5zdGF0ZSlyZXR1cm4gaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO2lmKCFlLmNsaWVudF9pZClyZXR1cm4gaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGNsaWVudF9pZCBvbiBzdGF0ZVwiKSk7aWYoIWUuYXV0aG9yaXR5KXJldHVybiBpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBObyBhdXRob3JpdHkgb24gc3RhdGVcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gYXV0aG9yaXR5IG9uIHN0YXRlXCIpKTtpZih0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkpe2lmKHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSYmdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5IT09ZS5hdXRob3JpdHkpcmV0dXJuIGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IGF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpKX1lbHNlIHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eT1lLmF1dGhvcml0eTtpZih0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQpe2lmKHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCYmdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkIT09ZS5jbGllbnRfaWQpcmV0dXJuIGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IGNsaWVudF9pZCBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImNsaWVudF9pZCBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpKX1lbHNlIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZD1lLmNsaWVudF9pZDtyZXR1cm4gaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogc3RhdGUgdmFsaWRhdGVkXCIpLHIuc3RhdGU9ZS5kYXRhLHIuZXJyb3I/KGkuTG9nLndhcm4oXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogUmVzcG9uc2Ugd2FzIGVycm9yXCIsci5lcnJvciksUHJvbWlzZS5yZWplY3QobmV3IHUuRXJyb3JSZXNwb25zZShyKSkpOmUubm9uY2UmJiFyLmlkX3Rva2VuPyhpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBFeHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW4gaW4gcmVzcG9uc2VcIikpKTohZS5ub25jZSYmci5pZF90b2tlbj8oaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogTm90IGV4cGVjdGluZyBpZF90b2tlbiBpbiByZXNwb25zZVwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpKSk6ZS5jb2RlX3ZlcmlmaWVyJiYhci5jb2RlPyhpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBFeHBlY3RpbmcgY29kZSBpbiByZXNwb25zZVwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBjb2RlIGluIHJlc3BvbnNlXCIpKSk6IWUuY29kZV92ZXJpZmllciYmci5jb2RlPyhpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBOb3QgZXhwZWN0aW5nIGNvZGUgaW4gcmVzcG9uc2VcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2RlIGluIHJlc3BvbnNlXCIpKSk6KHIuc2NvcGV8fChyLnNjb3BlPWUuc2NvcGUpLFByb21pc2UucmVzb2x2ZShyKSl9LHQucHJvdG90eXBlLl9wcm9jZXNzQ2xhaW1zPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj10aGlzO2lmKHIuaXNPcGVuSWRDb25uZWN0KXtpZihpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiByZXNwb25zZSBpcyBPSURDLCBwcm9jZXNzaW5nIGNsYWltc1wiKSxyLnByb2ZpbGU9dGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMoci5wcm9maWxlKSwhMCE9PWUuc2tpcFVzZXJJbmZvJiZ0aGlzLl9zZXR0aW5ncy5sb2FkVXNlckluZm8mJnIuYWNjZXNzX3Rva2VuKXJldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBsb2FkaW5nIHVzZXIgaW5mb1wiKSx0aGlzLl91c2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zKHIuYWNjZXNzX3Rva2VuKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogdXNlciBpbmZvIGNsYWltcyByZWNlaXZlZCBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludFwiKSx0LnN1YiE9PXIucHJvZmlsZS5zdWI/KGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHN1YiBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludCBkb2VzIG5vdCBtYXRjaCBzdWIgaW4gaWRfdG9rZW5cIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic3ViIGZyb20gdXNlciBpbmZvIGVuZHBvaW50IGRvZXMgbm90IG1hdGNoIHN1YiBpbiBpZF90b2tlblwiKSkpOihyLnByb2ZpbGU9bi5fbWVyZ2VDbGFpbXMoci5wcm9maWxlLHQpLGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHVzZXIgaW5mbyBjbGFpbXMgcmVjZWl2ZWQsIHVwZGF0ZWQgcHJvZmlsZTpcIixyLnByb2ZpbGUpLHIpfSkpO2kuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IG5vdCBsb2FkaW5nIHVzZXIgaW5mb1wiKX1lbHNlIGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHJlc3BvbnNlIGlzIG5vdCBPSURDLCBub3QgcHJvY2Vzc2luZyBjbGFpbXNcIik7cmV0dXJuIFByb21pc2UucmVzb2x2ZShyKX0sdC5wcm90b3R5cGUuX21lcmdlQ2xhaW1zPWZ1bmN0aW9uIHQoZSxyKXt2YXIgaT1PYmplY3QuYXNzaWduKHt9LGUpO2Zvcih2YXIgbyBpbiByKXt2YXIgcz1yW29dO0FycmF5LmlzQXJyYXkocyl8fChzPVtzXSk7Zm9yKHZhciBhPTA7YTxzLmxlbmd0aDthKyspe3ZhciB1PXNbYV07aVtvXT9BcnJheS5pc0FycmF5KGlbb10pP2lbb10uaW5kZXhPZih1KTwwJiZpW29dLnB1c2godSk6aVtvXSE9PXUmJihcIm9iamVjdFwiPT09KHZvaWQgMD09PXU/XCJ1bmRlZmluZWRcIjpuKHUpKSYmdGhpcy5fc2V0dGluZ3MubWVyZ2VDbGFpbXM/aVtvXT10aGlzLl9tZXJnZUNsYWltcyhpW29dLHUpOmlbb109W2lbb10sdV0pOmlbb109dX19cmV0dXJuIGl9LHQucHJvdG90eXBlLl9maWx0ZXJQcm90b2NvbENsYWltcz1mdW5jdGlvbiB0KGUpe2kuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zLCBpbmNvbWluZyBjbGFpbXM6XCIsZSk7dmFyIHI9T2JqZWN0LmFzc2lnbih7fSxlKTtyZXR1cm4gdGhpcy5fc2V0dGluZ3MuX2ZpbHRlclByb3RvY29sQ2xhaW1zPyhsLmZvckVhY2goKGZ1bmN0aW9uKHQpe2RlbGV0ZSByW3RdfSkpLGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zOiBwcm90b2NvbCBjbGFpbXMgZmlsdGVyZWRcIixyKSk6aS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyUHJvdG9jb2xDbGFpbXM6IHByb3RvY29sIGNsYWltcyBub3QgZmlsdGVyZWRcIikscn0sdC5wcm90b3R5cGUuX3ZhbGlkYXRlVG9rZW5zPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gci5jb2RlPyhpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZVRva2VuczogVmFsaWRhdGluZyBjb2RlXCIpLHRoaXMuX3Byb2Nlc3NDb2RlKGUscikpOnIuaWRfdG9rZW4/ci5hY2Nlc3NfdG9rZW4/KGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBWYWxpZGF0aW5nIGlkX3Rva2VuIGFuZCBhY2Nlc3NfdG9rZW5cIiksdGhpcy5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oZSxyKSk6KGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBWYWxpZGF0aW5nIGlkX3Rva2VuXCIpLHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihlLHIpKTooaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVUb2tlbnM6IE5vIGNvZGUgdG8gcHJvY2VzcyBvciBpZF90b2tlbiB0byB2YWxpZGF0ZVwiKSxQcm9taXNlLnJlc29sdmUocikpfSx0LnByb3RvdHlwZS5fcHJvY2Vzc0NvZGU9ZnVuY3Rpb24gdChlLHIpe3ZhciBvPXRoaXMscz17Y2xpZW50X2lkOmUuY2xpZW50X2lkLGNsaWVudF9zZWNyZXQ6ZS5jbGllbnRfc2VjcmV0LGNvZGU6ci5jb2RlLHJlZGlyZWN0X3VyaTplLnJlZGlyZWN0X3VyaSxjb2RlX3ZlcmlmaWVyOmUuY29kZV92ZXJpZmllcn07cmV0dXJuIGUuZXh0cmFUb2tlblBhcmFtcyYmXCJvYmplY3RcIj09PW4oZS5leHRyYVRva2VuUGFyYW1zKSYmT2JqZWN0LmFzc2lnbihzLGUuZXh0cmFUb2tlblBhcmFtcyksdGhpcy5fdG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlKHMpLnRoZW4oKGZ1bmN0aW9uKHQpe2Zvcih2YXIgbiBpbiB0KXJbbl09dFtuXTtyZXR1cm4gci5pZF90b2tlbj8oaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NvZGU6IHRva2VuIHJlc3BvbnNlIHN1Y2Nlc3NmdWwsIHByb2Nlc3NpbmcgaWRfdG9rZW5cIiksby5fdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlcyhlLHIpKTooaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NvZGU6IHRva2VuIHJlc3BvbnNlIHN1Y2Nlc3NmdWwsIHJldHVybmluZyByZXNwb25zZVwiKSxyKX0pKX0sdC5wcm90b3R5cGUuX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXM9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRJc3N1ZXIoKS50aGVuKChmdW5jdGlvbih0KXt2YXIgbz1lLmNsaWVudF9pZCxzPW4uX3NldHRpbmdzLmNsb2NrU2tldztyZXR1cm4gaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlczogVmFsaWRhaW5nIEpXVCBhdHRyaWJ1dGVzOyB1c2luZyBjbG9jayBza2V3IChpbiBzZWNvbmRzKSBvZjogXCIscyksbi5fc2V0dGluZ3MuZ2V0RXBvY2hUaW1lKCkudGhlbigoZnVuY3Rpb24oYSl7cmV0dXJuIG4uX2pvc2VVdGlsLnZhbGlkYXRlSnd0QXR0cmlidXRlcyhyLmlkX3Rva2VuLHQsbyxzLGEpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBlLm5vbmNlJiZlLm5vbmNlIT09dC5ub25jZT8oaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlczogSW52YWxpZCBub25jZSBpbiBpZF90b2tlblwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpKSk6dC5zdWI/KHIucHJvZmlsZT10LHIpOihpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzOiBObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKSkpfSkpfSkpfSkpfSx0LnByb3RvdHlwZS5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW49ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihlLHIpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBuLl92YWxpZGF0ZUFjY2Vzc1Rva2VuKHQpfSkpfSx0LnByb3RvdHlwZS5fZ2V0U2lnbmluZ0tleUZvckp3dD1mdW5jdGlvbiB0KGUpe3ZhciByPXRoaXM7cmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5cygpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciBuPWUuaGVhZGVyLmtpZDtpZighdClyZXR1cm4gaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKSk7aS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBSZWNlaXZlZCBzaWduaW5nIGtleXNcIik7dmFyIG89dm9pZCAwO2lmKG4pbz10LmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQua2lkPT09bn0pKVswXTtlbHNle2lmKCh0PXIuX2ZpbHRlckJ5QWxnKHQsZS5oZWFkZXIuYWxnKSkubGVuZ3RoPjEpcmV0dXJuIGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBraWQgZm91bmQgaW4gaWRfdG9rZW4gYW5kIG1vcmUgdGhhbiBvbmUga2V5IGZvdW5kIGluIG1ldGFkYXRhXCIpKTtvPXRbMF19cmV0dXJuIFByb21pc2UucmVzb2x2ZShvKX0pKX0sdC5wcm90b3R5cGUuX2dldFNpZ25pbmdLZXlGb3JKd3RXaXRoU2luZ2xlUmV0cnk9ZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzO3JldHVybiB0aGlzLl9nZXRTaWduaW5nS2V5Rm9ySnd0KGUpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0P1Byb21pc2UucmVzb2x2ZSh0KTooci5fbWV0YWRhdGFTZXJ2aWNlLnJlc2V0U2lnbmluZ0tleXMoKSxyLl9nZXRTaWduaW5nS2V5Rm9ySnd0KGUpKX0pKX0sdC5wcm90b3R5cGUuX3ZhbGlkYXRlSWRUb2tlbj1mdW5jdGlvbiB0KGUscil7dmFyIG49dGhpcztpZighZS5ub25jZSlyZXR1cm4gaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBub25jZSBvbiBzdGF0ZVwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBub25jZSBvbiBzdGF0ZVwiKSk7dmFyIG89dGhpcy5fam9zZVV0aWwucGFyc2VKd3Qoci5pZF90b2tlbik7cmV0dXJuIG8mJm8uaGVhZGVyJiZvLnBheWxvYWQ/ZS5ub25jZSE9PW8ucGF5bG9hZC5ub25jZT8oaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIikpKTp0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogUmVjZWl2ZWQgaXNzdWVyXCIpLG4uX2dldFNpZ25pbmdLZXlGb3JKd3RXaXRoU2luZ2xlUmV0cnkobykudGhlbigoZnVuY3Rpb24ocyl7aWYoIXMpcmV0dXJuIGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogTm8ga2V5IG1hdGNoaW5nIGtpZCBvciBhbGcgZm91bmQgaW4gc2lnbmluZyBrZXlzXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKSk7dmFyIGE9ZS5jbGllbnRfaWQsdT1uLl9zZXR0aW5ncy5jbG9ja1NrZXc7cmV0dXJuIGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogVmFsaWRhaW5nIEpXVDsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLHUpLG4uX2pvc2VVdGlsLnZhbGlkYXRlSnd0KHIuaWRfdG9rZW4scyx0LGEsdSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBKV1QgdmFsaWRhdGlvbiBzdWNjZXNzZnVsXCIpLG8ucGF5bG9hZC5zdWI/KHIucHJvZmlsZT1vLnBheWxvYWQscik6KGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogTm8gc3ViIHByZXNlbnQgaW4gaWRfdG9rZW5cIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc3ViIHByZXNlbnQgaW4gaWRfdG9rZW5cIikpKX0pKX0pKX0pKTooaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIixvKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpKX0sdC5wcm90b3R5cGUuX2ZpbHRlckJ5QWxnPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj1udWxsO2lmKHIuc3RhcnRzV2l0aChcIlJTXCIpKW49XCJSU0FcIjtlbHNlIGlmKHIuc3RhcnRzV2l0aChcIlBTXCIpKW49XCJQU1wiO2Vsc2V7aWYoIXIuc3RhcnRzV2l0aChcIkVTXCIpKXJldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJCeUFsZzogYWxnIG5vdCBzdXBwb3J0ZWQ6IFwiLHIpLFtdO249XCJFQ1wifXJldHVybiBpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJCeUFsZzogTG9va2luZyBmb3Iga2V5cyB0aGF0IG1hdGNoIGt0eTogXCIsbiksZT1lLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQua3R5PT09bn0pKSxpLkxvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJCeUFsZzogTnVtYmVyIG9mIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLG4sZS5sZW5ndGgpLGV9LHQucHJvdG90eXBlLl92YWxpZGF0ZUFjY2Vzc1Rva2VuPWZ1bmN0aW9uIHQoZSl7aWYoIWUucHJvZmlsZSlyZXR1cm4gaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBwcm9maWxlIGxvYWRlZCBmcm9tIGlkX3Rva2VuXCIpKTtpZighZS5wcm9maWxlLmF0X2hhc2gpcmV0dXJuIGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIGF0X2hhc2ggaW4gaWRfdG9rZW5cIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gYXRfaGFzaCBpbiBpZF90b2tlblwiKSk7aWYoIWUuaWRfdG9rZW4pcmV0dXJuIGkuTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIGlkX3Rva2VuXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGlkX3Rva2VuXCIpKTt2YXIgcj10aGlzLl9qb3NlVXRpbC5wYXJzZUp3dChlLmlkX3Rva2VuKTtpZighcnx8IXIuaGVhZGVyKXJldHVybiBpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIixyKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO3ZhciBuPXIuaGVhZGVyLmFsZztpZighbnx8NSE9PW4ubGVuZ3RoKXJldHVybiBpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBVbnN1cHBvcnRlZCBhbGc6XCIsbiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOiBcIituKSk7dmFyIG89bi5zdWJzdHIoMiwzKTtpZighbylyZXR1cm4gaS5Mb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogVW5zdXBwb3J0ZWQgYWxnOlwiLG4sbyksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOiBcIituKSk7aWYoMjU2IT09KG89cGFyc2VJbnQobykpJiYzODQhPT1vJiY1MTIhPT1vKXJldHVybiBpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBVbnN1cHBvcnRlZCBhbGc6XCIsbixvKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiK24pKTt2YXIgcz1cInNoYVwiK28sYT10aGlzLl9qb3NlVXRpbC5oYXNoU3RyaW5nKGUuYWNjZXNzX3Rva2VuLHMpO2lmKCFhKXJldHVybiBpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBhY2Nlc3NfdG9rZW4gaGFzaCBmYWlsZWQ6XCIscyksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIikpO3ZhciB1PWEuc3Vic3RyKDAsYS5sZW5ndGgvMiksYz10aGlzLl9qb3NlVXRpbC5oZXhUb0Jhc2U2NFVybCh1KTtyZXR1cm4gYyE9PWUucHJvZmlsZS5hdF9oYXNoPyhpLkxvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiLGMsZS5wcm9maWxlLmF0X2hhc2gpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byB2YWxpZGF0ZSBhdF9oYXNoXCIpKSk6KGkuTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IHN1Y2Nlc3NcIiksUHJvbWlzZS5yZXNvbHZlKGUpKX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuVXNlckluZm9TZXJ2aWNlPXZvaWQgMDt2YXIgbj1yKDcpLGk9cigyKSxvPXIoMCkscz1yKDQpO2Z1bmN0aW9uIGEodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWUuVXNlckluZm9TZXJ2aWNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bi5Kc29uU2VydmljZSx1PWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTppLk1ldGFkYXRhU2VydmljZSxjPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpzLkpvc2VVdGlsO2lmKGEodGhpcyx0KSwhZSl0aHJvdyBvLkxvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5jdG9yOiBObyBzZXR0aW5ncyBwYXNzZWRcIiksbmV3IEVycm9yKFwic2V0dGluZ3NcIik7dGhpcy5fc2V0dGluZ3M9ZSx0aGlzLl9qc29uU2VydmljZT1uZXcgcih2b2lkIDAsdm9pZCAwLHRoaXMuX2dldENsYWltc0Zyb21Kd3QuYmluZCh0aGlzKSksdGhpcy5fbWV0YWRhdGFTZXJ2aWNlPW5ldyB1KHRoaXMuX3NldHRpbmdzKSx0aGlzLl9qb3NlVXRpbD1jfXJldHVybiB0LnByb3RvdHlwZS5nZXRDbGFpbXM9ZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzO3JldHVybiBlP3RoaXMuX21ldGFkYXRhU2VydmljZS5nZXRVc2VySW5mb0VuZHBvaW50KCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIG8uTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogcmVjZWl2ZWQgdXNlcmluZm8gdXJsXCIsdCksci5fanNvblNlcnZpY2UuZ2V0SnNvbih0LGUpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBvLkxvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5nZXRDbGFpbXM6IGNsYWltcyByZWNlaXZlZFwiLHQpLHR9KSl9KSk6KG8uTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogTm8gdG9rZW4gcGFzc2VkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgdG9rZW4gaXMgcmVxdWlyZWRcIikpKX0sdC5wcm90b3R5cGUuX2dldENsYWltc0Zyb21Kd3Q9ZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzO3RyeXt2YXIgbj10aGlzLl9qb3NlVXRpbC5wYXJzZUp3dChlLnJlc3BvbnNlVGV4dCk7aWYoIW58fCFuLmhlYWRlcnx8IW4ucGF5bG9hZClyZXR1cm4gby5Mb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IEZhaWxlZCB0byBwYXJzZSBKV1RcIixuKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO3ZhciBpPW4uaGVhZGVyLmtpZCxzPXZvaWQgMDtzd2l0Y2godGhpcy5fc2V0dGluZ3MudXNlckluZm9Kd3RJc3N1ZXIpe2Nhc2VcIk9QXCI6cz10aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCk7YnJlYWs7Y2FzZVwiQU5ZXCI6cz1Qcm9taXNlLnJlc29sdmUobi5wYXlsb2FkLmlzcyk7YnJlYWs7ZGVmYXVsdDpzPVByb21pc2UucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy51c2VySW5mb0p3dElzc3Vlcil9cmV0dXJuIHMudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIG8uTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLl9nZXRDbGFpbXNGcm9tSnd0OiBSZWNlaXZlZCBpc3N1ZXI6XCIrdCksci5fbWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzKCkudGhlbigoZnVuY3Rpb24ocyl7aWYoIXMpcmV0dXJuIG8uTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLl9nZXRDbGFpbXNGcm9tSnd0OiBObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKSk7by5Mb2cuZGVidWcoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IFJlY2VpdmVkIHNpZ25pbmcga2V5c1wiKTt2YXIgYT12b2lkIDA7aWYoaSlhPXMuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdC5raWQ9PT1pfSkpWzBdO2Vsc2V7aWYoKHM9ci5fZmlsdGVyQnlBbGcocyxuLmhlYWRlci5hbGcpKS5sZW5ndGg+MSlyZXR1cm4gby5Mb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IE5vIGtpZCBmb3VuZCBpbiBpZF90b2tlbiBhbmQgbW9yZSB0aGFuIG9uZSBrZXkgZm91bmQgaW4gbWV0YWRhdGFcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSk7YT1zWzBdfWlmKCFhKXJldHVybiBvLkxvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogTm8ga2V5IG1hdGNoaW5nIGtpZCBvciBhbGcgZm91bmQgaW4gc2lnbmluZyBrZXlzXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKSk7dmFyIHU9ci5fc2V0dGluZ3MuY2xpZW50X2lkLGM9ci5fc2V0dGluZ3MuY2xvY2tTa2V3O3JldHVybiBvLkxvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogVmFsaWRhaW5nIEpXVDsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLGMpLHIuX2pvc2VVdGlsLnZhbGlkYXRlSnd0KGUucmVzcG9uc2VUZXh0LGEsdCx1LGMsdm9pZCAwLCEwKS50aGVuKChmdW5jdGlvbigpe3JldHVybiBvLkxvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogSldUIHZhbGlkYXRpb24gc3VjY2Vzc2Z1bFwiKSxuLnBheWxvYWR9KSl9KSl9KSl9Y2F0Y2godCl7cmV0dXJuIG8uTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLl9nZXRDbGFpbXNGcm9tSnd0OiBFcnJvciBwYXJzaW5nIEpXVCByZXNwb25zZVwiLHQubWVzc2FnZSksdm9pZCByZWplY3QodCl9fSx0LnByb3RvdHlwZS5fZmlsdGVyQnlBbGc9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPW51bGw7aWYoci5zdGFydHNXaXRoKFwiUlNcIikpbj1cIlJTQVwiO2Vsc2UgaWYoci5zdGFydHNXaXRoKFwiUFNcIikpbj1cIlBTXCI7ZWxzZXtpZighci5zdGFydHNXaXRoKFwiRVNcIikpcmV0dXJuIG8uTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLl9maWx0ZXJCeUFsZzogYWxnIG5vdCBzdXBwb3J0ZWQ6IFwiLHIpLFtdO249XCJFQ1wifXJldHVybiBvLkxvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZmlsdGVyQnlBbGc6IExvb2tpbmcgZm9yIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLG4pLGU9ZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lmt0eT09PW59KSksby5Mb2cuZGVidWcoXCJVc2VySW5mb1NlcnZpY2UuX2ZpbHRlckJ5QWxnOiBOdW1iZXIgb2Yga2V5cyB0aGF0IG1hdGNoIGt0eTogXCIsbixlLmxlbmd0aCksZX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuQWxsb3dlZFNpZ25pbmdBbGdzPWUuYjY0dG9oZXg9ZS5oZXh0b2I2NHU9ZS5jcnlwdG89ZS5YNTA5PWUuS2V5VXRpbD1lLmp3cz12b2lkIDA7dmFyIG49cigyNyk7ZS5qd3M9bi5qd3MsZS5LZXlVdGlsPW4uS0VZVVRJTCxlLlg1MDk9bi5YNTA5LGUuY3J5cHRvPW4uY3J5cHRvLGUuaGV4dG9iNjR1PW4uaGV4dG9iNjR1LGUuYjY0dG9oZXg9bi5iNjR0b2hleCxlLkFsbG93ZWRTaWduaW5nQWxncz1bXCJSUzI1NlwiLFwiUlMzODRcIixcIlJTNTEyXCIsXCJQUzI1NlwiLFwiUFMzODRcIixcIlBTNTEyXCIsXCJFUzI1NlwiLFwiRVMzODRcIixcIkVTNTEyXCJdfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLG4saSxvLHMsYSx1LGMsaCxsLGYsZz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxkPXt1c2VyQWdlbnQ6ITF9LHA9e30sdj12fHwocj1NYXRoLGk9KG49e30pLmxpYj17fSxvPWkuQmFzZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJue2V4dGVuZDpmdW5jdGlvbiBlKHIpe3QucHJvdG90eXBlPXRoaXM7dmFyIG49bmV3IHQ7cmV0dXJuIHImJm4ubWl4SW4ociksbi5oYXNPd25Qcm9wZXJ0eShcImluaXRcIil8fChuLmluaXQ9ZnVuY3Rpb24oKXtuLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLG4uaW5pdC5wcm90b3R5cGU9bixuLiRzdXBlcj10aGlzLG59LGNyZWF0ZTpmdW5jdGlvbiB0KCl7dmFyIGU9dGhpcy5leHRlbmQoKTtyZXR1cm4gZS5pbml0LmFwcGx5KGUsYXJndW1lbnRzKSxlfSxpbml0OmZ1bmN0aW9uIHQoKXt9LG1peEluOmZ1bmN0aW9uIHQoZSl7Zm9yKHZhciByIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShyKSYmKHRoaXNbcl09ZVtyXSk7ZS5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpJiYodGhpcy50b1N0cmluZz1lLnRvU3RyaW5nKX0sY2xvbmU6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19fSgpLHM9aS5Xb3JkQXJyYXk9by5leHRlbmQoe2luaXQ6ZnVuY3Rpb24gdChlLHIpe2U9dGhpcy53b3Jkcz1lfHxbXSx0aGlzLnNpZ0J5dGVzPW51bGwhPXI/cjo0KmUubGVuZ3RofSx0b1N0cmluZzpmdW5jdGlvbiB0KGUpe3JldHVybihlfHx1KS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbiB0KGUpe3ZhciByPXRoaXMud29yZHMsbj1lLndvcmRzLGk9dGhpcy5zaWdCeXRlcyxvPWUuc2lnQnl0ZXM7aWYodGhpcy5jbGFtcCgpLGklNClmb3IodmFyIHM9MDtzPG87cysrKXt2YXIgYT1uW3M+Pj4yXT4+PjI0LXMlNCo4JjI1NTtyW2krcz4+PjJdfD1hPDwyNC0oaStzKSU0Kjh9ZWxzZSBmb3Iocz0wO3M8bztzKz00KXJbaStzPj4+Ml09bltzPj4+Ml07cmV0dXJuIHRoaXMuc2lnQnl0ZXMrPW8sdGhpc30sY2xhbXA6ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXMud29yZHMsbj10aGlzLnNpZ0J5dGVzO2Vbbj4+PjJdJj00Mjk0OTY3Mjk1PDwzMi1uJTQqOCxlLmxlbmd0aD1yLmNlaWwobi80KX0sY2xvbmU6ZnVuY3Rpb24gdCgpe3ZhciBlPW8uY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gZS53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLGV9LHJhbmRvbTpmdW5jdGlvbiB0KGUpe2Zvcih2YXIgbj1bXSxpPTA7aTxlO2krPTQpbi5wdXNoKDQyOTQ5NjcyOTYqci5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChuLGUpfX0pLGE9bi5lbmM9e30sdT1hLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uIHQoZSl7Zm9yKHZhciByPWUud29yZHMsbj1lLnNpZ0J5dGVzLGk9W10sbz0wO288bjtvKyspe3ZhciBzPXJbbz4+PjJdPj4+MjQtbyU0KjgmMjU1O2kucHVzaCgocz4+PjQpLnRvU3RyaW5nKDE2KSksaS5wdXNoKCgxNSZzKS50b1N0cmluZygxNikpfXJldHVybiBpLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uIHQoZSl7Zm9yKHZhciByPWUubGVuZ3RoLG49W10saT0wO2k8cjtpKz0yKW5baT4+PjNdfD1wYXJzZUludChlLnN1YnN0cihpLDIpLDE2KTw8MjQtaSU4KjQ7cmV0dXJuIG5ldyBzLmluaXQobixyLzIpfX0sYz1hLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uIHQoZSl7Zm9yKHZhciByPWUud29yZHMsbj1lLnNpZ0J5dGVzLGk9W10sbz0wO288bjtvKyspe3ZhciBzPXJbbz4+PjJdPj4+MjQtbyU0KjgmMjU1O2kucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHMpKX1yZXR1cm4gaS5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbiB0KGUpe2Zvcih2YXIgcj1lLmxlbmd0aCxuPVtdLGk9MDtpPHI7aSsrKW5baT4+PjJdfD0oMjU1JmUuY2hhckNvZGVBdChpKSk8PDI0LWklNCo4O3JldHVybiBuZXcgcy5pbml0KG4scil9fSxoPWEuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uIHQoZSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGMuc3RyaW5naWZ5KGUpKSl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIFVURi04IGRhdGFcIil9fSxwYXJzZTpmdW5jdGlvbiB0KGUpe3JldHVybiBjLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChlKSkpfX0sbD1pLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09by5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uIHQoKXt0aGlzLl9kYXRhPW5ldyBzLmluaXQsdGhpcy5fbkRhdGFCeXRlcz0wfSxfYXBwZW5kOmZ1bmN0aW9uIHQoZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWgucGFyc2UoZSkpLHRoaXMuX2RhdGEuY29uY2F0KGUpLHRoaXMuX25EYXRhQnl0ZXMrPWUuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uIHQoZSl7dmFyIG49dGhpcy5fZGF0YSxpPW4ud29yZHMsbz1uLnNpZ0J5dGVzLGE9dGhpcy5ibG9ja1NpemUsdT1vLyg0KmEpLGM9KHU9ZT9yLmNlaWwodSk6ci5tYXgoKDB8dSktdGhpcy5fbWluQnVmZmVyU2l6ZSwwKSkqYSxoPXIubWluKDQqYyxvKTtpZihjKXtmb3IodmFyIGw9MDtsPGM7bCs9YSl0aGlzLl9kb1Byb2Nlc3NCbG9jayhpLGwpO3ZhciBmPWkuc3BsaWNlKDAsYyk7bi5zaWdCeXRlcy09aH1yZXR1cm4gbmV3IHMuaW5pdChmLGgpfSxjbG9uZTpmdW5jdGlvbiB0KCl7dmFyIGU9by5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLl9kYXRhPXRoaXMuX2RhdGEuY2xvbmUoKSxlfSxfbWluQnVmZmVyU2l6ZTowfSksaS5IYXNoZXI9bC5leHRlbmQoe2NmZzpvLmV4dGVuZCgpLGluaXQ6ZnVuY3Rpb24gdChlKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoZSksdGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbiB0KCl7bC5yZXNldC5jYWxsKHRoaXMpLHRoaXMuX2RvUmVzZXQoKX0sdXBkYXRlOmZ1bmN0aW9uIHQoZSl7cmV0dXJuIHRoaXMuX2FwcGVuZChlKSx0aGlzLl9wcm9jZXNzKCksdGhpc30sZmluYWxpemU6ZnVuY3Rpb24gdChlKXtyZXR1cm4gZSYmdGhpcy5fYXBwZW5kKGUpLHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24gdChlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXtyZXR1cm4gbmV3IGUuaW5pdChyKS5maW5hbGl6ZSh0KX19LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uIHQoZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7cmV0dXJuIG5ldyBmLkhNQUMuaW5pdChlLHIpLmZpbmFsaXplKHQpfX19KSxmPW4uYWxnbz17fSxuKTshZnVuY3Rpb24odCl7dmFyIGUscj0oZT12KS5saWIsbj1yLkJhc2UsaT1yLldvcmRBcnJheTsoZT1lLng2ND17fSkuV29yZD1uLmV4dGVuZCh7aW5pdDpmdW5jdGlvbiB0KGUscil7dGhpcy5oaWdoPWUsdGhpcy5sb3c9cn19KSxlLldvcmRBcnJheT1uLmV4dGVuZCh7aW5pdDpmdW5jdGlvbiB0KGUscil7ZT10aGlzLndvcmRzPWV8fFtdLHRoaXMuc2lnQnl0ZXM9bnVsbCE9cj9yOjgqZS5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uIHQoKXtmb3IodmFyIGU9dGhpcy53b3JkcyxyPWUubGVuZ3RoLG49W10sbz0wO288cjtvKyspe3ZhciBzPWVbb107bi5wdXNoKHMuaGlnaCksbi5wdXNoKHMubG93KX1yZXR1cm4gaS5jcmVhdGUobix0aGlzLnNpZ0J5dGVzKX0sY2xvbmU6ZnVuY3Rpb24gdCgpe2Zvcih2YXIgZT1uLmNsb25lLmNhbGwodGhpcykscj1lLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCksaT1yLmxlbmd0aCxvPTA7bzxpO28rKylyW29dPXJbb10uY2xvbmUoKTtyZXR1cm4gZX19KX0oKSxmdW5jdGlvbigpe3ZhciB0PXYsZT10LmxpYi5Xb3JkQXJyYXk7dC5lbmMuQmFzZTY0PXtzdHJpbmdpZnk6ZnVuY3Rpb24gdChlKXt2YXIgcj1lLndvcmRzLG49ZS5zaWdCeXRlcyxpPXRoaXMuX21hcDtlLmNsYW1wKCksZT1bXTtmb3IodmFyIG89MDtvPG47bys9Mylmb3IodmFyIHM9KHJbbz4+PjJdPj4+MjQtbyU0KjgmMjU1KTw8MTZ8KHJbbysxPj4+Ml0+Pj4yNC0obysxKSU0KjgmMjU1KTw8OHxyW28rMj4+PjJdPj4+MjQtKG8rMiklNCo4JjI1NSxhPTA7ND5hJiZvKy43NSphPG47YSsrKWUucHVzaChpLmNoYXJBdChzPj4+NiooMy1hKSY2MykpO2lmKHI9aS5jaGFyQXQoNjQpKWZvcig7ZS5sZW5ndGglNDspZS5wdXNoKHIpO3JldHVybiBlLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uIHQocil7dmFyIG49ci5sZW5ndGgsaT10aGlzLl9tYXA7KG89aS5jaGFyQXQoNjQpKSYmKC0xIT0obz1yLmluZGV4T2YobykpJiYobj1vKSk7Zm9yKHZhciBvPVtdLHM9MCxhPTA7YTxuO2ErKylpZihhJTQpe3ZhciB1PWkuaW5kZXhPZihyLmNoYXJBdChhLTEpKTw8YSU0KjIsYz1pLmluZGV4T2Yoci5jaGFyQXQoYSkpPj4+Ni1hJTQqMjtvW3M+Pj4yXXw9KHV8Yyk8PDI0LXMlNCo4LHMrK31yZXR1cm4gZS5jcmVhdGUobyxzKX0sX21hcDpcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCJ9fSgpLGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT12LHI9KGk9ZS5saWIpLldvcmRBcnJheSxuPWkuSGFzaGVyLGk9ZS5hbGdvLG89W10scz1bXSxhPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGUtKDB8ZSkpfDB9LHU9MixjPTA7NjQ+Yzspe3ZhciBoO3Q6e2g9dTtmb3IodmFyIGw9dC5zcXJ0KGgpLGY9MjtmPD1sO2YrKylpZighKGglZikpe2g9ITE7YnJlYWsgdH1oPSEwfWgmJig4PmMmJihvW2NdPWEodC5wb3codSwuNSkpKSxzW2NdPWEodC5wb3codSwxLzMpKSxjKyspLHUrK312YXIgZz1bXTtpPWkuU0hBMjU2PW4uZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbiB0KCl7dGhpcy5faGFzaD1uZXcgci5pbml0KG8uc2xpY2UoMCkpfSxfZG9Qcm9jZXNzQmxvY2s6ZnVuY3Rpb24gdChlLHIpe2Zvcih2YXIgbj10aGlzLl9oYXNoLndvcmRzLGk9blswXSxvPW5bMV0sYT1uWzJdLHU9blszXSxjPW5bNF0saD1uWzVdLGw9bls2XSxmPW5bN10sZD0wOzY0PmQ7ZCsrKXtpZigxNj5kKWdbZF09MHxlW3IrZF07ZWxzZXt2YXIgcD1nW2QtMTVdLHY9Z1tkLTJdO2dbZF09KChwPDwyNXxwPj4+NyleKHA8PDE0fHA+Pj4xOClecD4+PjMpK2dbZC03XSsoKHY8PDE1fHY+Pj4xNyleKHY8PDEzfHY+Pj4xOSledj4+PjEwKStnW2QtMTZdfXA9ZisoKGM8PDI2fGM+Pj42KV4oYzw8MjF8Yz4+PjExKV4oYzw8N3xjPj4+MjUpKSsoYyZoXn5jJmwpK3NbZF0rZ1tkXSx2PSgoaTw8MzB8aT4+PjIpXihpPDwxOXxpPj4+MTMpXihpPDwxMHxpPj4+MjIpKSsoaSZvXmkmYV5vJmEpLGY9bCxsPWgsaD1jLGM9dStwfDAsdT1hLGE9byxvPWksaT1wK3Z8MH1uWzBdPW5bMF0raXwwLG5bMV09blsxXStvfDAsblsyXT1uWzJdK2F8MCxuWzNdPW5bM10rdXwwLG5bNF09bls0XStjfDAsbls1XT1uWzVdK2h8MCxuWzZdPW5bNl0rbHwwLG5bN109bls3XStmfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uIGUoKXt2YXIgcj10aGlzLl9kYXRhLG49ci53b3JkcyxpPTgqdGhpcy5fbkRhdGFCeXRlcyxvPTgqci5zaWdCeXRlcztyZXR1cm4gbltvPj4+NV18PTEyODw8MjQtbyUzMixuWzE0KyhvKzY0Pj4+OTw8NCldPXQuZmxvb3IoaS80Mjk0OTY3Mjk2KSxuWzE1KyhvKzY0Pj4+OTw8NCldPWksci5zaWdCeXRlcz00Km4ubGVuZ3RoLHRoaXMuX3Byb2Nlc3MoKSx0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbiB0KCl7dmFyIGU9bi5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKSxlfX0pO2UuU0hBMjU2PW4uX2NyZWF0ZUhlbHBlcihpKSxlLkhtYWNTSEEyNTY9bi5fY3JlYXRlSG1hY0hlbHBlcihpKX0oTWF0aCksZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG4uY3JlYXRlLmFwcGx5KG4sYXJndW1lbnRzKX1mb3IodmFyIGU9dixyPWUubGliLkhhc2hlcixuPShvPWUueDY0KS5Xb3JkLGk9by5Xb3JkQXJyYXksbz1lLmFsZ28scz1bdCgxMTE2MzUyNDA4LDM2MDk3Njc0NTgpLHQoMTg5OTQ0NzQ0MSw2MDI4OTE3MjUpLHQoMzA0OTMyMzQ3MSwzOTY0NDg0Mzk5KSx0KDM5MjEwMDk1NzMsMjE3MzI5NTU0OCksdCg5NjE5ODcxNjMsNDA4MTYyODQ3MiksdCgxNTA4OTcwOTkzLDMwNTM4MzQyNjUpLHQoMjQ1MzYzNTc0OCwyOTM3NjcxNTc5KSx0KDI4NzA3NjMyMjEsMzY2NDYwOTU2MCksdCgzNjI0MzgxMDgwLDI3MzQ4ODMzOTQpLHQoMzEwNTk4NDAxLDExNjQ5OTY1NDIpLHQoNjA3MjI1Mjc4LDEzMjM2MTA3NjQpLHQoMTQyNjg4MTk4NywzNTkwMzA0OTk0KSx0KDE5MjUwNzgzODgsNDA2ODE4MjM4MyksdCgyMTYyMDc4MjA2LDk5MTMzNjExMyksdCgyNjE0ODg4MTAzLDYzMzgwMzMxNyksdCgzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgpLHQoMzgzNTM5MDQwMSwyNjY2NjEzNDU4KSx0KDQwMjIyMjQ3NzQsOTQ0NzExMTM5KSx0KDI2NDM0NzA3OCwyMzQxMjYyNzczKSx0KDYwNDgwNzYyOCwyMDA3ODAwOTMzKSx0KDc3MDI1NTk4MywxNDk1OTkwOTAxKSx0KDEyNDkxNTAxMjIsMTg1NjQzMTIzNSksdCgxNTU1MDgxNjkyLDMxNzUyMTgxMzIpLHQoMTk5NjA2NDk4NiwyMTk4OTUwODM3KSx0KDI1NTQyMjA4ODIsMzk5OTcxOTMzOSksdCgyODIxODM0MzQ5LDc2Njc4NDAxNiksdCgyOTUyOTk2ODA4LDI1NjY1OTQ4NzkpLHQoMzIxMDMxMzY3MSwzMjAzMzM3OTU2KSx0KDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiksdCgzNTg0NTI4NzExLDI0NjY5NDg5MDEpLHQoMTEzOTI2OTkzLDM3NTgzMjYzODMpLHQoMzM4MjQxODk1LDE2ODcxNzkzNiksdCg2NjYzMDcyMDUsMTE4ODE3OTk2NCksdCg3NzM1Mjk5MTIsMTU0NjA0NTczNCksdCgxMjk0NzU3MzcyLDE1MjI4MDU0ODUpLHQoMTM5NjE4MjI5MSwyNjQzODMzODIzKSx0KDE2OTUxODM3MDAsMjM0MzUyNzM5MCksdCgxOTg2NjYxMDUxLDEwMTQ0Nzc0ODApLHQoMjE3NzAyNjM1MCwxMjA2NzU5MTQyKSx0KDI0NTY5NTYwMzcsMzQ0MDc3NjI3KSx0KDI3MzA0ODU5MjEsMTI5MDg2MzQ2MCksdCgyODIwMzAyNDExLDMxNTg0NTQyNzMpLHQoMzI1OTczMDgwMCwzNTA1OTUyNjU3KSx0KDMzNDU3NjQ3NzEsMTA2MjE3MDA4KSx0KDM1MTYwNjU4MTcsMzYwNjAwODM0NCksdCgzNjAwMzUyODA0LDE0MzI3MjU3NzYpLHQoNDA5NDU3MTkwOSwxNDY3MDMxNTk0KSx0KDI3NTQyMzM0NCw4NTExNjk3MjApLHQoNDMwMjI3NzM0LDMxMDA4MjM3NTIpLHQoNTA2OTQ4NjE2LDEzNjMyNTgxOTUpLHQoNjU5MDYwNTU2LDM3NTA2ODU1OTMpLHQoODgzOTk3ODc3LDM3ODUwNTAyODApLHQoOTU4MTM5NTcxLDMzMTgzMDc0MjcpLHQoMTMyMjgyMjIxOCwzODEyNzIzNDAzKSx0KDE1MzcwMDIwNjMsMjAwMzAzNDk5NSksdCgxNzQ3ODczNzc5LDM2MDIwMzY4OTkpLHQoMTk1NTU2MjIyMiwxNTc1OTkwMDEyKSx0KDIwMjQxMDQ4MTUsMTEyNTU5MjkyOCksdCgyMjI3NzMwNDUyLDI3MTY5MDQzMDYpLHQoMjM2MTg1MjQyNCw0NDI3NzYwNDQpLHQoMjQyODQzNjQ3NCw1OTM2OTgzNDQpLHQoMjc1NjczNDE4NywzNzMzMTEwMjQ5KSx0KDMyMDQwMzE0NzksMjk5OTM1MTU3MyksdCgzMzI5MzI1Mjk4LDM4MTU5MjA0MjcpLHQoMzM5MTU2OTYxNCwzOTI4MzgzOTAwKSx0KDM1MTUyNjcyNzEsNTY2MjgwNzExKSx0KDM5NDAxODc2MDYsMzQ1NDA2OTUzNCksdCg0MTE4NjMwMjcxLDQwMDAyMzk5OTIpLHQoMTE2NDE4NDc0LDE5MTQxMzg1NTQpLHQoMTc0MjkyNDIxLDI3MzEwNTUyNzApLHQoMjg5MzgwMzU2LDMyMDM5OTMwMDYpLHQoNDYwMzkzMjY5LDMyMDYyMDMxNSksdCg2ODU0NzE3MzMsNTg3NDk2ODM2KSx0KDg1MjE0Mjk3MSwxMDg2NzkyODUxKSx0KDEwMTcwMzYyOTgsMzY1NTQzMTAwKSx0KDExMjYwMDA1ODAsMjYxODI5NzY3NiksdCgxMjg4MDMzNDcwLDM0MDk4NTUxNTgpLHQoMTUwMTUwNTk0OCw0MjM0NTA5ODY2KSx0KDE2MDcxNjc5MTUsOTg3MTY3NDY4KSx0KDE4MTY0MDIzMTYsMTI0NjE4OTU5MSldLGE9W10sdT0wOzgwPnU7dSsrKWFbdV09dCgpO289by5TSEE1MTI9ci5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uIHQoKXt0aGlzLl9oYXNoPW5ldyBpLmluaXQoW25ldyBuLmluaXQoMTc3OTAzMzcwMyw0MDg5MjM1NzIwKSxuZXcgbi5pbml0KDMxNDQxMzQyNzcsMjIyNzg3MzU5NSksbmV3IG4uaW5pdCgxMDEzOTA0MjQyLDQyNzExNzU3MjMpLG5ldyBuLmluaXQoMjc3MzQ4MDc2MiwxNTk1NzUwMTI5KSxuZXcgbi5pbml0KDEzNTk4OTMxMTksMjkxNzU2NTEzNyksbmV3IG4uaW5pdCgyNjAwODIyOTI0LDcyNTUxMTE5OSksbmV3IG4uaW5pdCg1Mjg3MzQ2MzUsNDIxNTM4OTU0NyksbmV3IG4uaW5pdCgxNTQxNDU5MjI1LDMyNzAzMzIwOSldKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uIHQoZSxyKXtmb3IodmFyIG49KGY9dGhpcy5faGFzaC53b3JkcylbMF0saT1mWzFdLG89ZlsyXSx1PWZbM10sYz1mWzRdLGg9Zls1XSxsPWZbNl0sZj1mWzddLGc9bi5oaWdoLGQ9bi5sb3cscD1pLmhpZ2gsdj1pLmxvdyx5PW8uaGlnaCxtPW8ubG93LF89dS5oaWdoLFM9dS5sb3csYj1jLmhpZ2gsdz1jLmxvdyxGPWguaGlnaCxFPWgubG93LHg9bC5oaWdoLEE9bC5sb3csaz1mLmhpZ2gsUD1mLmxvdyxDPWcsVD1kLFI9cCxJPXYsRD15LEw9bSxOPV8sVT1TLEI9YixPPXcsaj1GLE09RSxIPXgsVj1BLEs9ayxxPVAsSj0wOzgwPko7SisrKXt2YXIgVz1hW0pdO2lmKDE2PkopdmFyIHo9Vy5oaWdoPTB8ZVtyKzIqSl0sWT1XLmxvdz0wfGVbcisyKkorMV07ZWxzZXt6PSgoWT0oej1hW0otMTVdKS5oaWdoKT4+PjF8KEc9ei5sb3cpPDwzMSleKFk+Pj44fEc8PDI0KV5ZPj4+Nzt2YXIgRz0oRz4+PjF8WTw8MzEpXihHPj4+OHxZPDwyNCleKEc+Pj43fFk8PDI1KSxYPSgoWT0oWD1hW0otMl0pLmhpZ2gpPj4+MTl8KCQ9WC5sb3cpPDwxMyleKFk8PDN8JD4+PjI5KV5ZPj4+NiwkPSgkPj4+MTl8WTw8MTMpXigkPDwzfFk+Pj4yOSleKCQ+Pj42fFk8PDI2KSxRPShZPWFbSi03XSkuaGlnaCxaPSh0dD1hW0otMTZdKS5oaWdoLHR0PXR0Lmxvdzt6PSh6PSh6PXorUSsoKFk9RytZLmxvdyk+Pj4wPEc+Pj4wPzE6MCkpK1grKChZPVkrJCk+Pj4wPCQ+Pj4wPzE6MCkpK1orKChZPVkrdHQpPj4+MDx0dD4+PjA/MTowKTtXLmhpZ2g9eixXLmxvdz1ZfVE9QiZqXn5CJkgsdHQ9TyZNXn5PJlYsVz1DJlJeQyZEXlImRDt2YXIgZXQ9VCZJXlQmTF5JJkwscnQ9KEc9KEM+Pj4yOHxUPDw0KV4oQzw8MzB8VD4+PjIpXihDPDwyNXxUPj4+NyksWD0oVD4+PjI4fEM8PDQpXihUPDwzMHxDPj4+MileKFQ8PDI1fEM+Pj43KSwoJD1zW0pdKS5oaWdoKSxudD0kLmxvdztaPUsrKChCPj4+MTR8Tzw8MTgpXihCPj4+MTh8Tzw8MTQpXihCPDwyM3xPPj4+OSkpKygoJD1xKygoTz4+PjE0fEI8PDE4KV4oTz4+PjE4fEI8PDE0KV4oTzw8MjN8Qj4+PjkpKSk+Pj4wPHE+Pj4wPzE6MCksSz1ILHE9VixIPWosVj1NLGo9QixNPU8sQj1OKyhaPShaPShaPVorUSsoKCQ9JCt0dCk+Pj4wPHR0Pj4+MD8xOjApKStydCsoKCQ9JCtudCk+Pj4wPG50Pj4+MD8xOjApKSt6KygoJD0kK1kpPj4+MDxZPj4+MD8xOjApKSsoKE89VSskfDApPj4+MDxVPj4+MD8xOjApfDAsTj1ELFU9TCxEPVIsTD1JLFI9QyxJPVQsQz1aKyhXPUcrVysoKFk9WCtldCk+Pj4wPFg+Pj4wPzE6MCkpKygoVD0kK1l8MCk+Pj4wPCQ+Pj4wPzE6MCl8MH1kPW4ubG93PWQrVCxuLmhpZ2g9ZytDKyhkPj4+MDxUPj4+MD8xOjApLHY9aS5sb3c9ditJLGkuaGlnaD1wK1IrKHY+Pj4wPEk+Pj4wPzE6MCksbT1vLmxvdz1tK0wsby5oaWdoPXkrRCsobT4+PjA8TD4+PjA/MTowKSxTPXUubG93PVMrVSx1LmhpZ2g9XytOKyhTPj4+MDxVPj4+MD8xOjApLHc9Yy5sb3c9dytPLGMuaGlnaD1iK0IrKHc+Pj4wPE8+Pj4wPzE6MCksRT1oLmxvdz1FK00saC5oaWdoPUYraisoRT4+PjA8TT4+PjA/MTowKSxBPWwubG93PUErVixsLmhpZ2g9eCtIKyhBPj4+MDxWPj4+MD8xOjApLFA9Zi5sb3c9UCtxLGYuaGlnaD1rK0srKFA+Pj4wPHE+Pj4wPzE6MCl9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uIHQoKXt2YXIgZT10aGlzLl9kYXRhLHI9ZS53b3JkcyxuPTgqdGhpcy5fbkRhdGFCeXRlcyxpPTgqZS5zaWdCeXRlcztyZXR1cm4gcltpPj4+NV18PTEyODw8MjQtaSUzMixyWzMwKyhpKzEyOD4+PjEwPDw1KV09TWF0aC5mbG9vcihuLzQyOTQ5NjcyOTYpLHJbMzErKGkrMTI4Pj4+MTA8PDUpXT1uLGUuc2lnQnl0ZXM9NCpyLmxlbmd0aCx0aGlzLl9wcm9jZXNzKCksdGhpcy5faGFzaC50b1gzMigpfSxjbG9uZTpmdW5jdGlvbiB0KCl7dmFyIGU9ci5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKSxlfSxibG9ja1NpemU6MzJ9KSxlLlNIQTUxMj1yLl9jcmVhdGVIZWxwZXIobyksZS5IbWFjU0hBNTEyPXIuX2NyZWF0ZUhtYWNIZWxwZXIobyl9KCksZnVuY3Rpb24oKXt2YXIgdD12LGU9KGk9dC54NjQpLldvcmQscj1pLldvcmRBcnJheSxuPShpPXQuYWxnbykuU0hBNTEyLGk9aS5TSEEzODQ9bi5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uIHQoKXt0aGlzLl9oYXNoPW5ldyByLmluaXQoW25ldyBlLmluaXQoMzQxODA3MDM2NSwzMjM4MzcxMDMyKSxuZXcgZS5pbml0KDE2NTQyNzAyNTAsOTE0MTUwNjYzKSxuZXcgZS5pbml0KDI0Mzg1MjkzNzAsODEyNzAyOTk5KSxuZXcgZS5pbml0KDM1NTQ2MjM2MCw0MTQ0OTEyNjk3KSxuZXcgZS5pbml0KDE3MzE0MDU0MTUsNDI5MDc3NTg1NyksbmV3IGUuaW5pdCgyMzk0MTgwMjMxLDE3NTA2MDMwMjUpLG5ldyBlLmluaXQoMzY3NTAwODUyNSwxNjk0MDc2ODM5KSxuZXcgZS5pbml0KDEyMDMwNjI4MTMsMzIwNDA3NTQyOCldKX0sX2RvRmluYWxpemU6ZnVuY3Rpb24gdCgpe3ZhciBlPW4uX2RvRmluYWxpemUuY2FsbCh0aGlzKTtyZXR1cm4gZS5zaWdCeXRlcy09MTYsZX19KTt0LlNIQTM4ND1uLl9jcmVhdGVIZWxwZXIoaSksdC5IbWFjU0hBMzg0PW4uX2NyZWF0ZUhtYWNIZWxwZXIoaSl9KCk7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xudmFyIHksbT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtmdW5jdGlvbiBfKHQpe3ZhciBlLHIsbj1cIlwiO2ZvcihlPTA7ZSszPD10Lmxlbmd0aDtlKz0zKXI9cGFyc2VJbnQodC5zdWJzdHJpbmcoZSxlKzMpLDE2KSxuKz1tLmNoYXJBdChyPj42KSttLmNoYXJBdCg2MyZyKTtmb3IoZSsxPT10Lmxlbmd0aD8ocj1wYXJzZUludCh0LnN1YnN0cmluZyhlLGUrMSksMTYpLG4rPW0uY2hhckF0KHI8PDIpKTplKzI9PXQubGVuZ3RoJiYocj1wYXJzZUludCh0LnN1YnN0cmluZyhlLGUrMiksMTYpLG4rPW0uY2hhckF0KHI+PjIpK20uY2hhckF0KCgzJnIpPDw0KSksXCI9XCI7KDMmbi5sZW5ndGgpPjA7KW4rPVwiPVwiO3JldHVybiBufWZ1bmN0aW9uIFModCl7dmFyIGUscixuLGk9XCJcIixvPTA7Zm9yKGU9MDtlPHQubGVuZ3RoJiZcIj1cIiE9dC5jaGFyQXQoZSk7KytlKShuPW0uaW5kZXhPZih0LmNoYXJBdChlKSkpPDB8fCgwPT1vPyhpKz1UKG4+PjIpLHI9MyZuLG89MSk6MT09bz8oaSs9VChyPDwyfG4+PjQpLHI9MTUmbixvPTIpOjI9PW8/KGkrPVQociksaSs9VChuPj4yKSxyPTMmbixvPTMpOihpKz1UKHI8PDJ8bj4+NCksaSs9VCgxNSZuKSxvPTApKTtyZXR1cm4gMT09byYmKGkrPVQocjw8MikpLGl9ZnVuY3Rpb24gYih0KXt2YXIgZSxyPVModCksbj1uZXcgQXJyYXk7Zm9yKGU9MDsyKmU8ci5sZW5ndGg7KytlKW5bZV09cGFyc2VJbnQoci5zdWJzdHJpbmcoMiplLDIqZSsyKSwxNik7cmV0dXJuIG59ZnVuY3Rpb24gdyh0LGUscil7bnVsbCE9dCYmKFwibnVtYmVyXCI9PXR5cGVvZiB0P3RoaXMuZnJvbU51bWJlcih0LGUscik6bnVsbD09ZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQ/dGhpcy5mcm9tU3RyaW5nKHQsMjU2KTp0aGlzLmZyb21TdHJpbmcodCxlKSl9ZnVuY3Rpb24gRigpe3JldHVybiBuZXcgdyhudWxsKX1cIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiPT1kLmFwcE5hbWU/KHcucHJvdG90eXBlLmFtPWZ1bmN0aW9uIEUodCxlLHIsbixpLG8pe2Zvcih2YXIgcz0zMjc2NyZlLGE9ZT4+MTU7LS1vPj0wOyl7dmFyIHU9MzI3NjcmdGhpc1t0XSxjPXRoaXNbdCsrXT4+MTUsaD1hKnUrYypzO2k9KCh1PXMqdSsoKDMyNzY3JmgpPDwxNSkrcltuXSsoMTA3Mzc0MTgyMyZpKSk+Pj4zMCkrKGg+Pj4xNSkrYSpjKyhpPj4+MzApLHJbbisrXT0xMDczNzQxODIzJnV9cmV0dXJuIGl9LHk9MzApOlwiTmV0c2NhcGVcIiE9ZC5hcHBOYW1lPyh3LnByb3RvdHlwZS5hbT1mdW5jdGlvbiB4KHQsZSxyLG4saSxvKXtmb3IoOy0tbz49MDspe3ZhciBzPWUqdGhpc1t0KytdK3Jbbl0raTtpPU1hdGguZmxvb3Iocy82NzEwODg2NCkscltuKytdPTY3MTA4ODYzJnN9cmV0dXJuIGl9LHk9MjYpOih3LnByb3RvdHlwZS5hbT1mdW5jdGlvbiBBKHQsZSxyLG4saSxvKXtmb3IodmFyIHM9MTYzODMmZSxhPWU+PjE0Oy0tbz49MDspe3ZhciB1PTE2MzgzJnRoaXNbdF0sYz10aGlzW3QrK10+PjE0LGg9YSp1K2MqcztpPSgodT1zKnUrKCgxNjM4MyZoKTw8MTQpK3Jbbl0raSk+PjI4KSsoaD4+MTQpK2EqYyxyW24rK109MjY4NDM1NDU1JnV9cmV0dXJuIGl9LHk9MjgpLHcucHJvdG90eXBlLkRCPXksdy5wcm90b3R5cGUuRE09KDE8PHkpLTEsdy5wcm90b3R5cGUuRFY9MTw8eTt3LnByb3RvdHlwZS5GVj1NYXRoLnBvdygyLDUyKSx3LnByb3RvdHlwZS5GMT01Mi15LHcucHJvdG90eXBlLkYyPTIqeS01Mjt2YXIgayxQLEM9bmV3IEFycmF5O2ZvcihrPVwiMFwiLmNoYXJDb2RlQXQoMCksUD0wO1A8PTk7KytQKUNbaysrXT1QO2ZvcihrPVwiYVwiLmNoYXJDb2RlQXQoMCksUD0xMDtQPDM2OysrUClDW2srK109UDtmb3Ioaz1cIkFcIi5jaGFyQ29kZUF0KDApLFA9MTA7UDwzNjsrK1ApQ1trKytdPVA7ZnVuY3Rpb24gVCh0KXtyZXR1cm5cIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLmNoYXJBdCh0KX1mdW5jdGlvbiBSKHQsZSl7dmFyIHI9Q1t0LmNoYXJDb2RlQXQoZSldO3JldHVybiBudWxsPT1yPy0xOnJ9ZnVuY3Rpb24gSSh0KXt2YXIgZT1GKCk7cmV0dXJuIGUuZnJvbUludCh0KSxlfWZ1bmN0aW9uIEQodCl7dmFyIGUscj0xO3JldHVybiAwIT0oZT10Pj4+MTYpJiYodD1lLHIrPTE2KSwwIT0oZT10Pj44KSYmKHQ9ZSxyKz04KSwwIT0oZT10Pj40KSYmKHQ9ZSxyKz00KSwwIT0oZT10Pj4yKSYmKHQ9ZSxyKz0yKSwwIT0oZT10Pj4xKSYmKHQ9ZSxyKz0xKSxyfWZ1bmN0aW9uIEwodCl7dGhpcy5tPXR9ZnVuY3Rpb24gTih0KXt0aGlzLm09dCx0aGlzLm1wPXQuaW52RGlnaXQoKSx0aGlzLm1wbD0zMjc2NyZ0aGlzLm1wLHRoaXMubXBoPXRoaXMubXA+PjE1LHRoaXMudW09KDE8PHQuREItMTUpLTEsdGhpcy5tdDI9Mip0LnR9ZnVuY3Rpb24gVSh0LGUpe3JldHVybiB0JmV9ZnVuY3Rpb24gQih0LGUpe3JldHVybiB0fGV9ZnVuY3Rpb24gTyh0LGUpe3JldHVybiB0XmV9ZnVuY3Rpb24gaih0LGUpe3JldHVybiB0Jn5lfWZ1bmN0aW9uIE0odCl7aWYoMD09dClyZXR1cm4tMTt2YXIgZT0wO3JldHVybiAwPT0oNjU1MzUmdCkmJih0Pj49MTYsZSs9MTYpLDA9PSgyNTUmdCkmJih0Pj49OCxlKz04KSwwPT0oMTUmdCkmJih0Pj49NCxlKz00KSwwPT0oMyZ0KSYmKHQ+Pj0yLGUrPTIpLDA9PSgxJnQpJiYrK2UsZX1mdW5jdGlvbiBIKHQpe2Zvcih2YXIgZT0wOzAhPXQ7KXQmPXQtMSwrK2U7cmV0dXJuIGV9ZnVuY3Rpb24gVigpe31mdW5jdGlvbiBLKHQpe3JldHVybiB0fWZ1bmN0aW9uIHEodCl7dGhpcy5yMj1GKCksdGhpcy5xMz1GKCksdy5PTkUuZGxTaGlmdFRvKDIqdC50LHRoaXMucjIpLHRoaXMubXU9dGhpcy5yMi5kaXZpZGUodCksdGhpcy5tPXR9TC5wcm90b3R5cGUuY29udmVydD1mdW5jdGlvbiBKKHQpe3JldHVybiB0LnM8MHx8dC5jb21wYXJlVG8odGhpcy5tKT49MD90Lm1vZCh0aGlzLm0pOnR9LEwucHJvdG90eXBlLnJldmVydD1mdW5jdGlvbiBXKHQpe3JldHVybiB0fSxMLnByb3RvdHlwZS5yZWR1Y2U9ZnVuY3Rpb24geih0KXt0LmRpdlJlbVRvKHRoaXMubSxudWxsLHQpfSxMLnByb3RvdHlwZS5tdWxUbz1mdW5jdGlvbiBZKHQsZSxyKXt0Lm11bHRpcGx5VG8oZSxyKSx0aGlzLnJlZHVjZShyKX0sTC5wcm90b3R5cGUuc3FyVG89ZnVuY3Rpb24gRyh0LGUpe3Quc3F1YXJlVG8oZSksdGhpcy5yZWR1Y2UoZSl9LE4ucHJvdG90eXBlLmNvbnZlcnQ9ZnVuY3Rpb24gWCh0KXt2YXIgZT1GKCk7cmV0dXJuIHQuYWJzKCkuZGxTaGlmdFRvKHRoaXMubS50LGUpLGUuZGl2UmVtVG8odGhpcy5tLG51bGwsZSksdC5zPDAmJmUuY29tcGFyZVRvKHcuWkVSTyk+MCYmdGhpcy5tLnN1YlRvKGUsZSksZX0sTi5wcm90b3R5cGUucmV2ZXJ0PWZ1bmN0aW9uICQodCl7dmFyIGU9RigpO3JldHVybiB0LmNvcHlUbyhlKSx0aGlzLnJlZHVjZShlKSxlfSxOLnByb3RvdHlwZS5yZWR1Y2U9ZnVuY3Rpb24gUSh0KXtmb3IoO3QudDw9dGhpcy5tdDI7KXRbdC50KytdPTA7Zm9yKHZhciBlPTA7ZTx0aGlzLm0udDsrK2Upe3ZhciByPTMyNzY3JnRbZV0sbj1yKnRoaXMubXBsKygocip0aGlzLm1waCsodFtlXT4+MTUpKnRoaXMubXBsJnRoaXMudW0pPDwxNSkmdC5ETTtmb3IodFtyPWUrdGhpcy5tLnRdKz10aGlzLm0uYW0oMCxuLHQsZSwwLHRoaXMubS50KTt0W3JdPj10LkRWOyl0W3JdLT10LkRWLHRbKytyXSsrfXQuY2xhbXAoKSx0LmRyU2hpZnRUbyh0aGlzLm0udCx0KSx0LmNvbXBhcmVUbyh0aGlzLm0pPj0wJiZ0LnN1YlRvKHRoaXMubSx0KX0sTi5wcm90b3R5cGUubXVsVG89ZnVuY3Rpb24gWih0LGUscil7dC5tdWx0aXBseVRvKGUsciksdGhpcy5yZWR1Y2Uocil9LE4ucHJvdG90eXBlLnNxclRvPWZ1bmN0aW9uIHR0KHQsZSl7dC5zcXVhcmVUbyhlKSx0aGlzLnJlZHVjZShlKX0sdy5wcm90b3R5cGUuY29weVRvPWZ1bmN0aW9uIGV0KHQpe2Zvcih2YXIgZT10aGlzLnQtMTtlPj0wOy0tZSl0W2VdPXRoaXNbZV07dC50PXRoaXMudCx0LnM9dGhpcy5zfSx3LnByb3RvdHlwZS5mcm9tSW50PWZ1bmN0aW9uIHJ0KHQpe3RoaXMudD0xLHRoaXMucz10PDA/LTE6MCx0PjA/dGhpc1swXT10OnQ8LTE/dGhpc1swXT10K3RoaXMuRFY6dGhpcy50PTB9LHcucHJvdG90eXBlLmZyb21TdHJpbmc9ZnVuY3Rpb24gbnQodCxlKXt2YXIgcjtpZigxNj09ZSlyPTQ7ZWxzZSBpZig4PT1lKXI9MztlbHNlIGlmKDI1Nj09ZSlyPTg7ZWxzZSBpZigyPT1lKXI9MTtlbHNlIGlmKDMyPT1lKXI9NTtlbHNle2lmKDQhPWUpcmV0dXJuIHZvaWQgdGhpcy5mcm9tUmFkaXgodCxlKTtyPTJ9dGhpcy50PTAsdGhpcy5zPTA7Zm9yKHZhciBuPXQubGVuZ3RoLGk9ITEsbz0wOy0tbj49MDspe3ZhciBzPTg9PXI/MjU1JnRbbl06Uih0LG4pO3M8MD9cIi1cIj09dC5jaGFyQXQobikmJihpPSEwKTooaT0hMSwwPT1vP3RoaXNbdGhpcy50KytdPXM6bytyPnRoaXMuREI/KHRoaXNbdGhpcy50LTFdfD0ocyYoMTw8dGhpcy5EQi1vKS0xKTw8byx0aGlzW3RoaXMudCsrXT1zPj50aGlzLkRCLW8pOnRoaXNbdGhpcy50LTFdfD1zPDxvLChvKz1yKT49dGhpcy5EQiYmKG8tPXRoaXMuREIpKX04PT1yJiYwIT0oMTI4JnRbMF0pJiYodGhpcy5zPS0xLG8+MCYmKHRoaXNbdGhpcy50LTFdfD0oMTw8dGhpcy5EQi1vKS0xPDxvKSksdGhpcy5jbGFtcCgpLGkmJncuWkVSTy5zdWJUbyh0aGlzLHRoaXMpfSx3LnByb3RvdHlwZS5jbGFtcD1mdW5jdGlvbiBpdCgpe2Zvcih2YXIgdD10aGlzLnMmdGhpcy5ETTt0aGlzLnQ+MCYmdGhpc1t0aGlzLnQtMV09PXQ7KS0tdGhpcy50fSx3LnByb3RvdHlwZS5kbFNoaWZ0VG89ZnVuY3Rpb24gb3QodCxlKXt2YXIgcjtmb3Iocj10aGlzLnQtMTtyPj0wOy0tcillW3IrdF09dGhpc1tyXTtmb3Iocj10LTE7cj49MDstLXIpZVtyXT0wO2UudD10aGlzLnQrdCxlLnM9dGhpcy5zfSx3LnByb3RvdHlwZS5kclNoaWZ0VG89ZnVuY3Rpb24gc3QodCxlKXtmb3IodmFyIHI9dDtyPHRoaXMudDsrK3IpZVtyLXRdPXRoaXNbcl07ZS50PU1hdGgubWF4KHRoaXMudC10LDApLGUucz10aGlzLnN9LHcucHJvdG90eXBlLmxTaGlmdFRvPWZ1bmN0aW9uIGF0KHQsZSl7dmFyIHIsbj10JXRoaXMuREIsaT10aGlzLkRCLW4sbz0oMTw8aSktMSxzPU1hdGguZmxvb3IodC90aGlzLkRCKSxhPXRoaXMuczw8biZ0aGlzLkRNO2ZvcihyPXRoaXMudC0xO3I+PTA7LS1yKWVbcitzKzFdPXRoaXNbcl0+Pml8YSxhPSh0aGlzW3JdJm8pPDxuO2ZvcihyPXMtMTtyPj0wOy0tcillW3JdPTA7ZVtzXT1hLGUudD10aGlzLnQrcysxLGUucz10aGlzLnMsZS5jbGFtcCgpfSx3LnByb3RvdHlwZS5yU2hpZnRUbz1mdW5jdGlvbiB1dCh0LGUpe2Uucz10aGlzLnM7dmFyIHI9TWF0aC5mbG9vcih0L3RoaXMuREIpO2lmKHI+PXRoaXMudCllLnQ9MDtlbHNle3ZhciBuPXQldGhpcy5EQixpPXRoaXMuREItbixvPSgxPDxuKS0xO2VbMF09dGhpc1tyXT4+bjtmb3IodmFyIHM9cisxO3M8dGhpcy50OysrcyllW3Mtci0xXXw9KHRoaXNbc10mbyk8PGksZVtzLXJdPXRoaXNbc10+Pm47bj4wJiYoZVt0aGlzLnQtci0xXXw9KHRoaXMucyZvKTw8aSksZS50PXRoaXMudC1yLGUuY2xhbXAoKX19LHcucHJvdG90eXBlLnN1YlRvPWZ1bmN0aW9uIGN0KHQsZSl7Zm9yKHZhciByPTAsbj0wLGk9TWF0aC5taW4odC50LHRoaXMudCk7cjxpOyluKz10aGlzW3JdLXRbcl0sZVtyKytdPW4mdGhpcy5ETSxuPj49dGhpcy5EQjtpZih0LnQ8dGhpcy50KXtmb3Iobi09dC5zO3I8dGhpcy50OyluKz10aGlzW3JdLGVbcisrXT1uJnRoaXMuRE0sbj4+PXRoaXMuREI7bis9dGhpcy5zfWVsc2V7Zm9yKG4rPXRoaXMucztyPHQudDspbi09dFtyXSxlW3IrK109biZ0aGlzLkRNLG4+Pj10aGlzLkRCO24tPXQuc31lLnM9bjwwPy0xOjAsbjwtMT9lW3IrK109dGhpcy5EVituOm4+MCYmKGVbcisrXT1uKSxlLnQ9cixlLmNsYW1wKCl9LHcucHJvdG90eXBlLm11bHRpcGx5VG89ZnVuY3Rpb24gaHQodCxlKXt2YXIgcj10aGlzLmFicygpLG49dC5hYnMoKSxpPXIudDtmb3IoZS50PWkrbi50Oy0taT49MDspZVtpXT0wO2ZvcihpPTA7aTxuLnQ7KytpKWVbaStyLnRdPXIuYW0oMCxuW2ldLGUsaSwwLHIudCk7ZS5zPTAsZS5jbGFtcCgpLHRoaXMucyE9dC5zJiZ3LlpFUk8uc3ViVG8oZSxlKX0sdy5wcm90b3R5cGUuc3F1YXJlVG89ZnVuY3Rpb24gbHQodCl7Zm9yKHZhciBlPXRoaXMuYWJzKCkscj10LnQ9MiplLnQ7LS1yPj0wOyl0W3JdPTA7Zm9yKHI9MDtyPGUudC0xOysrcil7dmFyIG49ZS5hbShyLGVbcl0sdCwyKnIsMCwxKTsodFtyK2UudF0rPWUuYW0ocisxLDIqZVtyXSx0LDIqcisxLG4sZS50LXItMSkpPj1lLkRWJiYodFtyK2UudF0tPWUuRFYsdFtyK2UudCsxXT0xKX10LnQ+MCYmKHRbdC50LTFdKz1lLmFtKHIsZVtyXSx0LDIqciwwLDEpKSx0LnM9MCx0LmNsYW1wKCl9LHcucHJvdG90eXBlLmRpdlJlbVRvPWZ1bmN0aW9uIGZ0KHQsZSxyKXt2YXIgbj10LmFicygpO2lmKCEobi50PD0wKSl7dmFyIGk9dGhpcy5hYnMoKTtpZihpLnQ8bi50KXJldHVybiBudWxsIT1lJiZlLmZyb21JbnQoMCksdm9pZChudWxsIT1yJiZ0aGlzLmNvcHlUbyhyKSk7bnVsbD09ciYmKHI9RigpKTt2YXIgbz1GKCkscz10aGlzLnMsYT10LnMsdT10aGlzLkRCLUQobltuLnQtMV0pO3U+MD8obi5sU2hpZnRUbyh1LG8pLGkubFNoaWZ0VG8odSxyKSk6KG4uY29weVRvKG8pLGkuY29weVRvKHIpKTt2YXIgYz1vLnQsaD1vW2MtMV07aWYoMCE9aCl7dmFyIGw9aCooMTw8dGhpcy5GMSkrKGM+MT9vW2MtMl0+PnRoaXMuRjI6MCksZj10aGlzLkZWL2wsZz0oMTw8dGhpcy5GMSkvbCxkPTE8PHRoaXMuRjIscD1yLnQsdj1wLWMseT1udWxsPT1lP0YoKTplO2ZvcihvLmRsU2hpZnRUbyh2LHkpLHIuY29tcGFyZVRvKHkpPj0wJiYocltyLnQrK109MSxyLnN1YlRvKHkscikpLHcuT05FLmRsU2hpZnRUbyhjLHkpLHkuc3ViVG8obyxvKTtvLnQ8Yzspb1tvLnQrK109MDtmb3IoOy0tdj49MDspe3ZhciBtPXJbLS1wXT09aD90aGlzLkRNOk1hdGguZmxvb3IocltwXSpmKyhyW3AtMV0rZCkqZyk7aWYoKHJbcF0rPW8uYW0oMCxtLHIsdiwwLGMpKTxtKWZvcihvLmRsU2hpZnRUbyh2LHkpLHIuc3ViVG8oeSxyKTtyW3BdPC0tbTspci5zdWJUbyh5LHIpfW51bGwhPWUmJihyLmRyU2hpZnRUbyhjLGUpLHMhPWEmJncuWkVSTy5zdWJUbyhlLGUpKSxyLnQ9YyxyLmNsYW1wKCksdT4wJiZyLnJTaGlmdFRvKHUsciksczwwJiZ3LlpFUk8uc3ViVG8ocixyKX19fSx3LnByb3RvdHlwZS5pbnZEaWdpdD1mdW5jdGlvbiBndCgpe2lmKHRoaXMudDwxKXJldHVybiAwO3ZhciB0PXRoaXNbMF07aWYoMD09KDEmdCkpcmV0dXJuIDA7dmFyIGU9MyZ0O3JldHVybihlPShlPShlPShlPWUqKDItKDE1JnQpKmUpJjE1KSooMi0oMjU1JnQpKmUpJjI1NSkqKDItKCg2NTUzNSZ0KSplJjY1NTM1KSkmNjU1MzUpKigyLXQqZSV0aGlzLkRWKSV0aGlzLkRWKT4wP3RoaXMuRFYtZTotZX0sdy5wcm90b3R5cGUuaXNFdmVuPWZ1bmN0aW9uIGR0KCl7cmV0dXJuIDA9PSh0aGlzLnQ+MD8xJnRoaXNbMF06dGhpcy5zKX0sdy5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uIHB0KHQsZSl7aWYodD40Mjk0OTY3Mjk1fHx0PDEpcmV0dXJuIHcuT05FO3ZhciByPUYoKSxuPUYoKSxpPWUuY29udmVydCh0aGlzKSxvPUQodCktMTtmb3IoaS5jb3B5VG8ocik7LS1vPj0wOylpZihlLnNxclRvKHIsbiksKHQmMTw8byk+MCllLm11bFRvKG4saSxyKTtlbHNle3ZhciBzPXI7cj1uLG49c31yZXR1cm4gZS5yZXZlcnQocil9LHcucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uIHZ0KHQpe2lmKHRoaXMuczwwKXJldHVyblwiLVwiK3RoaXMubmVnYXRlKCkudG9TdHJpbmcodCk7dmFyIGU7aWYoMTY9PXQpZT00O2Vsc2UgaWYoOD09dCllPTM7ZWxzZSBpZigyPT10KWU9MTtlbHNlIGlmKDMyPT10KWU9NTtlbHNle2lmKDQhPXQpcmV0dXJuIHRoaXMudG9SYWRpeCh0KTtlPTJ9dmFyIHIsbj0oMTw8ZSktMSxpPSExLG89XCJcIixzPXRoaXMudCxhPXRoaXMuREItcyp0aGlzLkRCJWU7aWYocy0tID4wKWZvcihhPHRoaXMuREImJihyPXRoaXNbc10+PmEpPjAmJihpPSEwLG89VChyKSk7cz49MDspYTxlPyhyPSh0aGlzW3NdJigxPDxhKS0xKTw8ZS1hLHJ8PXRoaXNbLS1zXT4+KGErPXRoaXMuREItZSkpOihyPXRoaXNbc10+PihhLT1lKSZuLGE8PTAmJihhKz10aGlzLkRCLC0tcykpLHI+MCYmKGk9ITApLGkmJihvKz1UKHIpKTtyZXR1cm4gaT9vOlwiMFwifSx3LnByb3RvdHlwZS5uZWdhdGU9ZnVuY3Rpb24geXQoKXt2YXIgdD1GKCk7cmV0dXJuIHcuWkVSTy5zdWJUbyh0aGlzLHQpLHR9LHcucHJvdG90eXBlLmFicz1mdW5jdGlvbiBtdCgpe3JldHVybiB0aGlzLnM8MD90aGlzLm5lZ2F0ZSgpOnRoaXN9LHcucHJvdG90eXBlLmNvbXBhcmVUbz1mdW5jdGlvbiBfdCh0KXt2YXIgZT10aGlzLnMtdC5zO2lmKDAhPWUpcmV0dXJuIGU7dmFyIHI9dGhpcy50O2lmKDAhPShlPXItdC50KSlyZXR1cm4gdGhpcy5zPDA/LWU6ZTtmb3IoOy0tcj49MDspaWYoMCE9KGU9dGhpc1tyXS10W3JdKSlyZXR1cm4gZTtyZXR1cm4gMH0sdy5wcm90b3R5cGUuYml0TGVuZ3RoPWZ1bmN0aW9uIFN0KCl7cmV0dXJuIHRoaXMudDw9MD8wOnRoaXMuREIqKHRoaXMudC0xKStEKHRoaXNbdGhpcy50LTFdXnRoaXMucyZ0aGlzLkRNKX0sdy5wcm90b3R5cGUubW9kPWZ1bmN0aW9uIGJ0KHQpe3ZhciBlPUYoKTtyZXR1cm4gdGhpcy5hYnMoKS5kaXZSZW1Ubyh0LG51bGwsZSksdGhpcy5zPDAmJmUuY29tcGFyZVRvKHcuWkVSTyk+MCYmdC5zdWJUbyhlLGUpLGV9LHcucHJvdG90eXBlLm1vZFBvd0ludD1mdW5jdGlvbiB3dCh0LGUpe3ZhciByO3JldHVybiByPXQ8MjU2fHxlLmlzRXZlbigpP25ldyBMKGUpOm5ldyBOKGUpLHRoaXMuZXhwKHQscil9LHcuWkVSTz1JKDApLHcuT05FPUkoMSksVi5wcm90b3R5cGUuY29udmVydD1LLFYucHJvdG90eXBlLnJldmVydD1LLFYucHJvdG90eXBlLm11bFRvPWZ1bmN0aW9uIEZ0KHQsZSxyKXt0Lm11bHRpcGx5VG8oZSxyKX0sVi5wcm90b3R5cGUuc3FyVG89ZnVuY3Rpb24gRXQodCxlKXt0LnNxdWFyZVRvKGUpfSxxLnByb3RvdHlwZS5jb252ZXJ0PWZ1bmN0aW9uIHh0KHQpe2lmKHQuczwwfHx0LnQ+Mip0aGlzLm0udClyZXR1cm4gdC5tb2QodGhpcy5tKTtpZih0LmNvbXBhcmVUbyh0aGlzLm0pPDApcmV0dXJuIHQ7dmFyIGU9RigpO3JldHVybiB0LmNvcHlUbyhlKSx0aGlzLnJlZHVjZShlKSxlfSxxLnByb3RvdHlwZS5yZXZlcnQ9ZnVuY3Rpb24gQXQodCl7cmV0dXJuIHR9LHEucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbiBrdCh0KXtmb3IodC5kclNoaWZ0VG8odGhpcy5tLnQtMSx0aGlzLnIyKSx0LnQ+dGhpcy5tLnQrMSYmKHQudD10aGlzLm0udCsxLHQuY2xhbXAoKSksdGhpcy5tdS5tdWx0aXBseVVwcGVyVG8odGhpcy5yMix0aGlzLm0udCsxLHRoaXMucTMpLHRoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMyx0aGlzLm0udCsxLHRoaXMucjIpO3QuY29tcGFyZVRvKHRoaXMucjIpPDA7KXQuZEFkZE9mZnNldCgxLHRoaXMubS50KzEpO2Zvcih0LnN1YlRvKHRoaXMucjIsdCk7dC5jb21wYXJlVG8odGhpcy5tKT49MDspdC5zdWJUbyh0aGlzLm0sdCl9LHEucHJvdG90eXBlLm11bFRvPWZ1bmN0aW9uIFB0KHQsZSxyKXt0Lm11bHRpcGx5VG8oZSxyKSx0aGlzLnJlZHVjZShyKX0scS5wcm90b3R5cGUuc3FyVG89ZnVuY3Rpb24gQ3QodCxlKXt0LnNxdWFyZVRvKGUpLHRoaXMucmVkdWNlKGUpfTt2YXIgVHQ9WzIsMyw1LDcsMTEsMTMsMTcsMTksMjMsMjksMzEsMzcsNDEsNDMsNDcsNTMsNTksNjEsNjcsNzEsNzMsNzksODMsODksOTcsMTAxLDEwMywxMDcsMTA5LDExMywxMjcsMTMxLDEzNywxMzksMTQ5LDE1MSwxNTcsMTYzLDE2NywxNzMsMTc5LDE4MSwxOTEsMTkzLDE5NywxOTksMjExLDIyMywyMjcsMjI5LDIzMywyMzksMjQxLDI1MSwyNTcsMjYzLDI2OSwyNzEsMjc3LDI4MSwyODMsMjkzLDMwNywzMTEsMzEzLDMxNywzMzEsMzM3LDM0NywzNDksMzUzLDM1OSwzNjcsMzczLDM3OSwzODMsMzg5LDM5Nyw0MDEsNDA5LDQxOSw0MjEsNDMxLDQzMyw0MzksNDQzLDQ0OSw0NTcsNDYxLDQ2Myw0NjcsNDc5LDQ4Nyw0OTEsNDk5LDUwMyw1MDksNTIxLDUyMyw1NDEsNTQ3LDU1Nyw1NjMsNTY5LDU3MSw1NzcsNTg3LDU5Myw1OTksNjAxLDYwNyw2MTMsNjE3LDYxOSw2MzEsNjQxLDY0Myw2NDcsNjUzLDY1OSw2NjEsNjczLDY3Nyw2ODMsNjkxLDcwMSw3MDksNzE5LDcyNyw3MzMsNzM5LDc0Myw3NTEsNzU3LDc2MSw3NjksNzczLDc4Nyw3OTcsODA5LDgxMSw4MjEsODIzLDgyNyw4MjksODM5LDg1Myw4NTcsODU5LDg2Myw4NzcsODgxLDg4Myw4ODcsOTA3LDkxMSw5MTksOTI5LDkzNyw5NDEsOTQ3LDk1Myw5NjcsOTcxLDk3Nyw5ODMsOTkxLDk5N10sUnQ9KDE8PDI2KS9UdFtUdC5sZW5ndGgtMV07XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xuZnVuY3Rpb24gSXQoKXt0aGlzLmk9MCx0aGlzLmo9MCx0aGlzLlM9bmV3IEFycmF5fXcucHJvdG90eXBlLmNodW5rU2l6ZT1mdW5jdGlvbiBEdCh0KXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMip0aGlzLkRCL01hdGgubG9nKHQpKX0sdy5wcm90b3R5cGUudG9SYWRpeD1mdW5jdGlvbiBMdCh0KXtpZihudWxsPT10JiYodD0xMCksMD09dGhpcy5zaWdudW0oKXx8dDwyfHx0PjM2KXJldHVyblwiMFwiO3ZhciBlPXRoaXMuY2h1bmtTaXplKHQpLHI9TWF0aC5wb3codCxlKSxuPUkociksaT1GKCksbz1GKCkscz1cIlwiO2Zvcih0aGlzLmRpdlJlbVRvKG4saSxvKTtpLnNpZ251bSgpPjA7KXM9KHIrby5pbnRWYWx1ZSgpKS50b1N0cmluZyh0KS5zdWJzdHIoMSkrcyxpLmRpdlJlbVRvKG4saSxvKTtyZXR1cm4gby5pbnRWYWx1ZSgpLnRvU3RyaW5nKHQpK3N9LHcucHJvdG90eXBlLmZyb21SYWRpeD1mdW5jdGlvbiBOdCh0LGUpe3RoaXMuZnJvbUludCgwKSxudWxsPT1lJiYoZT0xMCk7Zm9yKHZhciByPXRoaXMuY2h1bmtTaXplKGUpLG49TWF0aC5wb3coZSxyKSxpPSExLG89MCxzPTAsYT0wO2E8dC5sZW5ndGg7KythKXt2YXIgdT1SKHQsYSk7dTwwP1wiLVwiPT10LmNoYXJBdChhKSYmMD09dGhpcy5zaWdudW0oKSYmKGk9ITApOihzPWUqcyt1LCsrbz49ciYmKHRoaXMuZE11bHRpcGx5KG4pLHRoaXMuZEFkZE9mZnNldChzLDApLG89MCxzPTApKX1vPjAmJih0aGlzLmRNdWx0aXBseShNYXRoLnBvdyhlLG8pKSx0aGlzLmRBZGRPZmZzZXQocywwKSksaSYmdy5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9LHcucHJvdG90eXBlLmZyb21OdW1iZXI9ZnVuY3Rpb24gVXQodCxlLHIpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKWlmKHQ8Mil0aGlzLmZyb21JbnQoMSk7ZWxzZSBmb3IodGhpcy5mcm9tTnVtYmVyKHQsciksdGhpcy50ZXN0Qml0KHQtMSl8fHRoaXMuYml0d2lzZVRvKHcuT05FLnNoaWZ0TGVmdCh0LTEpLEIsdGhpcyksdGhpcy5pc0V2ZW4oKSYmdGhpcy5kQWRkT2Zmc2V0KDEsMCk7IXRoaXMuaXNQcm9iYWJsZVByaW1lKGUpOyl0aGlzLmRBZGRPZmZzZXQoMiwwKSx0aGlzLmJpdExlbmd0aCgpPnQmJnRoaXMuc3ViVG8ody5PTkUuc2hpZnRMZWZ0KHQtMSksdGhpcyk7ZWxzZXt2YXIgbj1uZXcgQXJyYXksaT03JnQ7bi5sZW5ndGg9MSsodD4+MyksZS5uZXh0Qnl0ZXMobiksaT4wP25bMF0mPSgxPDxpKS0xOm5bMF09MCx0aGlzLmZyb21TdHJpbmcobiwyNTYpfX0sdy5wcm90b3R5cGUuYml0d2lzZVRvPWZ1bmN0aW9uIEJ0KHQsZSxyKXt2YXIgbixpLG89TWF0aC5taW4odC50LHRoaXMudCk7Zm9yKG49MDtuPG87KytuKXJbbl09ZSh0aGlzW25dLHRbbl0pO2lmKHQudDx0aGlzLnQpe2ZvcihpPXQucyZ0aGlzLkRNLG49bztuPHRoaXMudDsrK24pcltuXT1lKHRoaXNbbl0saSk7ci50PXRoaXMudH1lbHNle2ZvcihpPXRoaXMucyZ0aGlzLkRNLG49bztuPHQudDsrK24pcltuXT1lKGksdFtuXSk7ci50PXQudH1yLnM9ZSh0aGlzLnMsdC5zKSxyLmNsYW1wKCl9LHcucHJvdG90eXBlLmNoYW5nZUJpdD1mdW5jdGlvbiBPdCh0LGUpe3ZhciByPXcuT05FLnNoaWZ0TGVmdCh0KTtyZXR1cm4gdGhpcy5iaXR3aXNlVG8ocixlLHIpLHJ9LHcucHJvdG90eXBlLmFkZFRvPWZ1bmN0aW9uIGp0KHQsZSl7Zm9yKHZhciByPTAsbj0wLGk9TWF0aC5taW4odC50LHRoaXMudCk7cjxpOyluKz10aGlzW3JdK3Rbcl0sZVtyKytdPW4mdGhpcy5ETSxuPj49dGhpcy5EQjtpZih0LnQ8dGhpcy50KXtmb3Iobis9dC5zO3I8dGhpcy50OyluKz10aGlzW3JdLGVbcisrXT1uJnRoaXMuRE0sbj4+PXRoaXMuREI7bis9dGhpcy5zfWVsc2V7Zm9yKG4rPXRoaXMucztyPHQudDspbis9dFtyXSxlW3IrK109biZ0aGlzLkRNLG4+Pj10aGlzLkRCO24rPXQuc31lLnM9bjwwPy0xOjAsbj4wP2VbcisrXT1uOm48LTEmJihlW3IrK109dGhpcy5EVituKSxlLnQ9cixlLmNsYW1wKCl9LHcucHJvdG90eXBlLmRNdWx0aXBseT1mdW5jdGlvbiBNdCh0KXt0aGlzW3RoaXMudF09dGhpcy5hbSgwLHQtMSx0aGlzLDAsMCx0aGlzLnQpLCsrdGhpcy50LHRoaXMuY2xhbXAoKX0sdy5wcm90b3R5cGUuZEFkZE9mZnNldD1mdW5jdGlvbiBIdCh0LGUpe2lmKDAhPXQpe2Zvcig7dGhpcy50PD1lOyl0aGlzW3RoaXMudCsrXT0wO2Zvcih0aGlzW2VdKz10O3RoaXNbZV0+PXRoaXMuRFY7KXRoaXNbZV0tPXRoaXMuRFYsKytlPj10aGlzLnQmJih0aGlzW3RoaXMudCsrXT0wKSwrK3RoaXNbZV19fSx3LnByb3RvdHlwZS5tdWx0aXBseUxvd2VyVG89ZnVuY3Rpb24gVnQodCxlLHIpe3ZhciBuLGk9TWF0aC5taW4odGhpcy50K3QudCxlKTtmb3Ioci5zPTAsci50PWk7aT4wOylyWy0taV09MDtmb3Iobj1yLnQtdGhpcy50O2k8bjsrK2kpcltpK3RoaXMudF09dGhpcy5hbSgwLHRbaV0scixpLDAsdGhpcy50KTtmb3Iobj1NYXRoLm1pbih0LnQsZSk7aTxuOysraSl0aGlzLmFtKDAsdFtpXSxyLGksMCxlLWkpO3IuY2xhbXAoKX0sdy5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvPWZ1bmN0aW9uIEt0KHQsZSxyKXstLWU7dmFyIG49ci50PXRoaXMudCt0LnQtZTtmb3Ioci5zPTA7LS1uPj0wOylyW25dPTA7Zm9yKG49TWF0aC5tYXgoZS10aGlzLnQsMCk7bjx0LnQ7KytuKXJbdGhpcy50K24tZV09dGhpcy5hbShlLW4sdFtuXSxyLDAsMCx0aGlzLnQrbi1lKTtyLmNsYW1wKCksci5kclNoaWZ0VG8oMSxyKX0sdy5wcm90b3R5cGUubW9kSW50PWZ1bmN0aW9uIHF0KHQpe2lmKHQ8PTApcmV0dXJuIDA7dmFyIGU9dGhpcy5EViV0LHI9dGhpcy5zPDA/dC0xOjA7aWYodGhpcy50PjApaWYoMD09ZSlyPXRoaXNbMF0ldDtlbHNlIGZvcih2YXIgbj10aGlzLnQtMTtuPj0wOy0tbilyPShlKnIrdGhpc1tuXSkldDtyZXR1cm4gcn0sdy5wcm90b3R5cGUubWlsbGVyUmFiaW49ZnVuY3Rpb24gSnQodCl7dmFyIGU9dGhpcy5zdWJ0cmFjdCh3Lk9ORSkscj1lLmdldExvd2VzdFNldEJpdCgpO2lmKHI8PTApcmV0dXJuITE7dmFyIG49ZS5zaGlmdFJpZ2h0KHIpOyh0PXQrMT4+MSk+VHQubGVuZ3RoJiYodD1UdC5sZW5ndGgpO2Zvcih2YXIgaT1GKCksbz0wO288dDsrK28pe2kuZnJvbUludChUdFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqVHQubGVuZ3RoKV0pO3ZhciBzPWkubW9kUG93KG4sdGhpcyk7aWYoMCE9cy5jb21wYXJlVG8ody5PTkUpJiYwIT1zLmNvbXBhcmVUbyhlKSl7Zm9yKHZhciBhPTE7YSsrPHImJjAhPXMuY29tcGFyZVRvKGUpOylpZigwPT0ocz1zLm1vZFBvd0ludCgyLHRoaXMpKS5jb21wYXJlVG8ody5PTkUpKXJldHVybiExO2lmKDAhPXMuY29tcGFyZVRvKGUpKXJldHVybiExfX1yZXR1cm4hMH0sdy5wcm90b3R5cGUuY2xvbmU9XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xuZnVuY3Rpb24gV3QoKXt2YXIgdD1GKCk7cmV0dXJuIHRoaXMuY29weVRvKHQpLHR9LHcucHJvdG90eXBlLmludFZhbHVlPWZ1bmN0aW9uIHp0KCl7aWYodGhpcy5zPDApe2lmKDE9PXRoaXMudClyZXR1cm4gdGhpc1swXS10aGlzLkRWO2lmKDA9PXRoaXMudClyZXR1cm4tMX1lbHNle2lmKDE9PXRoaXMudClyZXR1cm4gdGhpc1swXTtpZigwPT10aGlzLnQpcmV0dXJuIDB9cmV0dXJuKHRoaXNbMV0mKDE8PDMyLXRoaXMuREIpLTEpPDx0aGlzLkRCfHRoaXNbMF19LHcucHJvdG90eXBlLmJ5dGVWYWx1ZT1mdW5jdGlvbiBZdCgpe3JldHVybiAwPT10aGlzLnQ/dGhpcy5zOnRoaXNbMF08PDI0Pj4yNH0sdy5wcm90b3R5cGUuc2hvcnRWYWx1ZT1mdW5jdGlvbiBHdCgpe3JldHVybiAwPT10aGlzLnQ/dGhpcy5zOnRoaXNbMF08PDE2Pj4xNn0sdy5wcm90b3R5cGUuc2lnbnVtPWZ1bmN0aW9uIFh0KCl7cmV0dXJuIHRoaXMuczwwPy0xOnRoaXMudDw9MHx8MT09dGhpcy50JiZ0aGlzWzBdPD0wPzA6MX0sdy5wcm90b3R5cGUudG9CeXRlQXJyYXk9ZnVuY3Rpb24gJHQoKXt2YXIgdD10aGlzLnQsZT1uZXcgQXJyYXk7ZVswXT10aGlzLnM7dmFyIHIsbj10aGlzLkRCLXQqdGhpcy5EQiU4LGk9MDtpZih0LS0gPjApZm9yKG48dGhpcy5EQiYmKHI9dGhpc1t0XT4+bikhPSh0aGlzLnMmdGhpcy5ETSk+Pm4mJihlW2krK109cnx0aGlzLnM8PHRoaXMuREItbik7dD49MDspbjw4PyhyPSh0aGlzW3RdJigxPDxuKS0xKTw8OC1uLHJ8PXRoaXNbLS10XT4+KG4rPXRoaXMuREItOCkpOihyPXRoaXNbdF0+PihuLT04KSYyNTUsbjw9MCYmKG4rPXRoaXMuREIsLS10KSksMCE9KDEyOCZyKSYmKHJ8PS0yNTYpLDA9PWkmJigxMjgmdGhpcy5zKSE9KDEyOCZyKSYmKytpLChpPjB8fHIhPXRoaXMucykmJihlW2krK109cik7cmV0dXJuIGV9LHcucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbiBRdCh0KXtyZXR1cm4gMD09dGhpcy5jb21wYXJlVG8odCl9LHcucHJvdG90eXBlLm1pbj1mdW5jdGlvbiBadCh0KXtyZXR1cm4gdGhpcy5jb21wYXJlVG8odCk8MD90aGlzOnR9LHcucHJvdG90eXBlLm1heD1mdW5jdGlvbiB0ZSh0KXtyZXR1cm4gdGhpcy5jb21wYXJlVG8odCk+MD90aGlzOnR9LHcucHJvdG90eXBlLmFuZD1mdW5jdGlvbiBlZSh0KXt2YXIgZT1GKCk7cmV0dXJuIHRoaXMuYml0d2lzZVRvKHQsVSxlKSxlfSx3LnByb3RvdHlwZS5vcj1mdW5jdGlvbiByZSh0KXt2YXIgZT1GKCk7cmV0dXJuIHRoaXMuYml0d2lzZVRvKHQsQixlKSxlfSx3LnByb3RvdHlwZS54b3I9ZnVuY3Rpb24gbmUodCl7dmFyIGU9RigpO3JldHVybiB0aGlzLmJpdHdpc2VUbyh0LE8sZSksZX0sdy5wcm90b3R5cGUuYW5kTm90PWZ1bmN0aW9uIGllKHQpe3ZhciBlPUYoKTtyZXR1cm4gdGhpcy5iaXR3aXNlVG8odCxqLGUpLGV9LHcucHJvdG90eXBlLm5vdD1mdW5jdGlvbiBvZSgpe2Zvcih2YXIgdD1GKCksZT0wO2U8dGhpcy50OysrZSl0W2VdPXRoaXMuRE0mfnRoaXNbZV07cmV0dXJuIHQudD10aGlzLnQsdC5zPX50aGlzLnMsdH0sdy5wcm90b3R5cGUuc2hpZnRMZWZ0PWZ1bmN0aW9uIHNlKHQpe3ZhciBlPUYoKTtyZXR1cm4gdDwwP3RoaXMuclNoaWZ0VG8oLXQsZSk6dGhpcy5sU2hpZnRUbyh0LGUpLGV9LHcucHJvdG90eXBlLnNoaWZ0UmlnaHQ9ZnVuY3Rpb24gYWUodCl7dmFyIGU9RigpO3JldHVybiB0PDA/dGhpcy5sU2hpZnRUbygtdCxlKTp0aGlzLnJTaGlmdFRvKHQsZSksZX0sdy5wcm90b3R5cGUuZ2V0TG93ZXN0U2V0Qml0PWZ1bmN0aW9uIHVlKCl7Zm9yKHZhciB0PTA7dDx0aGlzLnQ7Kyt0KWlmKDAhPXRoaXNbdF0pcmV0dXJuIHQqdGhpcy5EQitNKHRoaXNbdF0pO3JldHVybiB0aGlzLnM8MD90aGlzLnQqdGhpcy5EQjotMX0sdy5wcm90b3R5cGUuYml0Q291bnQ9ZnVuY3Rpb24gY2UoKXtmb3IodmFyIHQ9MCxlPXRoaXMucyZ0aGlzLkRNLHI9MDtyPHRoaXMudDsrK3IpdCs9SCh0aGlzW3JdXmUpO3JldHVybiB0fSx3LnByb3RvdHlwZS50ZXN0Qml0PWZ1bmN0aW9uIGhlKHQpe3ZhciBlPU1hdGguZmxvb3IodC90aGlzLkRCKTtyZXR1cm4gZT49dGhpcy50PzAhPXRoaXMuczowIT0odGhpc1tlXSYxPDx0JXRoaXMuREIpfSx3LnByb3RvdHlwZS5zZXRCaXQ9ZnVuY3Rpb24gbGUodCl7cmV0dXJuIHRoaXMuY2hhbmdlQml0KHQsQil9LHcucHJvdG90eXBlLmNsZWFyQml0PWZ1bmN0aW9uIGZlKHQpe3JldHVybiB0aGlzLmNoYW5nZUJpdCh0LGopfSx3LnByb3RvdHlwZS5mbGlwQml0PWZ1bmN0aW9uIGdlKHQpe3JldHVybiB0aGlzLmNoYW5nZUJpdCh0LE8pfSx3LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24gZGUodCl7dmFyIGU9RigpO3JldHVybiB0aGlzLmFkZFRvKHQsZSksZX0sdy5wcm90b3R5cGUuc3VidHJhY3Q9ZnVuY3Rpb24gcGUodCl7dmFyIGU9RigpO3JldHVybiB0aGlzLnN1YlRvKHQsZSksZX0sdy5wcm90b3R5cGUubXVsdGlwbHk9ZnVuY3Rpb24gdmUodCl7dmFyIGU9RigpO3JldHVybiB0aGlzLm11bHRpcGx5VG8odCxlKSxlfSx3LnByb3RvdHlwZS5kaXZpZGU9ZnVuY3Rpb24geWUodCl7dmFyIGU9RigpO3JldHVybiB0aGlzLmRpdlJlbVRvKHQsZSxudWxsKSxlfSx3LnByb3RvdHlwZS5yZW1haW5kZXI9ZnVuY3Rpb24gbWUodCl7dmFyIGU9RigpO3JldHVybiB0aGlzLmRpdlJlbVRvKHQsbnVsbCxlKSxlfSx3LnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXI9ZnVuY3Rpb24gX2UodCl7dmFyIGU9RigpLHI9RigpO3JldHVybiB0aGlzLmRpdlJlbVRvKHQsZSxyKSxuZXcgQXJyYXkoZSxyKX0sdy5wcm90b3R5cGUubW9kUG93PWZ1bmN0aW9uIFNlKHQsZSl7dmFyIHIsbixpPXQuYml0TGVuZ3RoKCksbz1JKDEpO2lmKGk8PTApcmV0dXJuIG87cj1pPDE4PzE6aTw0OD8zOmk8MTQ0PzQ6aTw3Njg/NTo2LG49aTw4P25ldyBMKGUpOmUuaXNFdmVuKCk/bmV3IHEoZSk6bmV3IE4oZSk7dmFyIHM9bmV3IEFycmF5LGE9Myx1PXItMSxjPSgxPDxyKS0xO2lmKHNbMV09bi5jb252ZXJ0KHRoaXMpLHI+MSl7dmFyIGg9RigpO2ZvcihuLnNxclRvKHNbMV0saCk7YTw9Yzspc1thXT1GKCksbi5tdWxUbyhoLHNbYS0yXSxzW2FdKSxhKz0yfXZhciBsLGYsZz10LnQtMSxkPSEwLHA9RigpO2ZvcihpPUQodFtnXSktMTtnPj0wOyl7Zm9yKGk+PXU/bD10W2ddPj5pLXUmYzoobD0odFtnXSYoMTw8aSsxKS0xKTw8dS1pLGc+MCYmKGx8PXRbZy0xXT4+dGhpcy5EQitpLXUpKSxhPXI7MD09KDEmbCk7KWw+Pj0xLC0tYTtpZigoaS09YSk8MCYmKGkrPXRoaXMuREIsLS1nKSxkKXNbbF0uY29weVRvKG8pLGQ9ITE7ZWxzZXtmb3IoO2E+MTspbi5zcXJUbyhvLHApLG4uc3FyVG8ocCxvKSxhLT0yO2E+MD9uLnNxclRvKG8scCk6KGY9byxvPXAscD1mKSxuLm11bFRvKHAsc1tsXSxvKX1mb3IoO2c+PTAmJjA9PSh0W2ddJjE8PGkpOyluLnNxclRvKG8scCksZj1vLG89cCxwPWYsLS1pPDAmJihpPXRoaXMuREItMSwtLWcpfXJldHVybiBuLnJldmVydChvKX0sdy5wcm90b3R5cGUubW9kSW52ZXJzZT1mdW5jdGlvbiBiZSh0KXt2YXIgZT10LmlzRXZlbigpO2lmKHRoaXMuaXNFdmVuKCkmJmV8fDA9PXQuc2lnbnVtKCkpcmV0dXJuIHcuWkVSTztmb3IodmFyIHI9dC5jbG9uZSgpLG49dGhpcy5jbG9uZSgpLGk9SSgxKSxvPUkoMCkscz1JKDApLGE9SSgxKTswIT1yLnNpZ251bSgpOyl7Zm9yKDtyLmlzRXZlbigpOylyLnJTaGlmdFRvKDEsciksZT8oaS5pc0V2ZW4oKSYmby5pc0V2ZW4oKXx8KGkuYWRkVG8odGhpcyxpKSxvLnN1YlRvKHQsbykpLGkuclNoaWZ0VG8oMSxpKSk6by5pc0V2ZW4oKXx8by5zdWJUbyh0LG8pLG8uclNoaWZ0VG8oMSxvKTtmb3IoO24uaXNFdmVuKCk7KW4uclNoaWZ0VG8oMSxuKSxlPyhzLmlzRXZlbigpJiZhLmlzRXZlbigpfHwocy5hZGRUbyh0aGlzLHMpLGEuc3ViVG8odCxhKSkscy5yU2hpZnRUbygxLHMpKTphLmlzRXZlbigpfHxhLnN1YlRvKHQsYSksYS5yU2hpZnRUbygxLGEpO3IuY29tcGFyZVRvKG4pPj0wPyhyLnN1YlRvKG4sciksZSYmaS5zdWJUbyhzLGkpLG8uc3ViVG8oYSxvKSk6KG4uc3ViVG8ocixuKSxlJiZzLnN1YlRvKGkscyksYS5zdWJUbyhvLGEpKX1yZXR1cm4gMCE9bi5jb21wYXJlVG8ody5PTkUpP3cuWkVSTzphLmNvbXBhcmVUbyh0KT49MD9hLnN1YnRyYWN0KHQpOmEuc2lnbnVtKCk8MD8oYS5hZGRUbyh0LGEpLGEuc2lnbnVtKCk8MD9hLmFkZCh0KTphKTphfSx3LnByb3RvdHlwZS5wb3c9ZnVuY3Rpb24gd2UodCl7cmV0dXJuIHRoaXMuZXhwKHQsbmV3IFYpfSx3LnByb3RvdHlwZS5nY2Q9ZnVuY3Rpb24gRmUodCl7dmFyIGU9dGhpcy5zPDA/dGhpcy5uZWdhdGUoKTp0aGlzLmNsb25lKCkscj10LnM8MD90Lm5lZ2F0ZSgpOnQuY2xvbmUoKTtpZihlLmNvbXBhcmVUbyhyKTwwKXt2YXIgbj1lO2U9cixyPW59dmFyIGk9ZS5nZXRMb3dlc3RTZXRCaXQoKSxvPXIuZ2V0TG93ZXN0U2V0Qml0KCk7aWYobzwwKXJldHVybiBlO2ZvcihpPG8mJihvPWkpLG8+MCYmKGUuclNoaWZ0VG8obyxlKSxyLnJTaGlmdFRvKG8scikpO2Uuc2lnbnVtKCk+MDspKGk9ZS5nZXRMb3dlc3RTZXRCaXQoKSk+MCYmZS5yU2hpZnRUbyhpLGUpLChpPXIuZ2V0TG93ZXN0U2V0Qml0KCkpPjAmJnIuclNoaWZ0VG8oaSxyKSxlLmNvbXBhcmVUbyhyKT49MD8oZS5zdWJUbyhyLGUpLGUuclNoaWZ0VG8oMSxlKSk6KHIuc3ViVG8oZSxyKSxyLnJTaGlmdFRvKDEscikpO3JldHVybiBvPjAmJnIubFNoaWZ0VG8obyxyKSxyfSx3LnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWU9ZnVuY3Rpb24gRWUodCl7dmFyIGUscj10aGlzLmFicygpO2lmKDE9PXIudCYmclswXTw9VHRbVHQubGVuZ3RoLTFdKXtmb3IoZT0wO2U8VHQubGVuZ3RoOysrZSlpZihyWzBdPT1UdFtlXSlyZXR1cm4hMDtyZXR1cm4hMX1pZihyLmlzRXZlbigpKXJldHVybiExO2ZvcihlPTE7ZTxUdC5sZW5ndGg7KXtmb3IodmFyIG49VHRbZV0saT1lKzE7aTxUdC5sZW5ndGgmJm48UnQ7KW4qPVR0W2krK107Zm9yKG49ci5tb2RJbnQobik7ZTxpOylpZihuJVR0W2UrK109PTApcmV0dXJuITF9cmV0dXJuIHIubWlsbGVyUmFiaW4odCl9LHcucHJvdG90eXBlLnNxdWFyZT1mdW5jdGlvbiB4ZSgpe3ZhciB0PUYoKTtyZXR1cm4gdGhpcy5zcXVhcmVUbyh0KSx0fSxJdC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbiBBZSh0KXt2YXIgZSxyLG47Zm9yKGU9MDtlPDI1NjsrK2UpdGhpcy5TW2VdPWU7Zm9yKHI9MCxlPTA7ZTwyNTY7KytlKXI9cit0aGlzLlNbZV0rdFtlJXQubGVuZ3RoXSYyNTUsbj10aGlzLlNbZV0sdGhpcy5TW2VdPXRoaXMuU1tyXSx0aGlzLlNbcl09bjt0aGlzLmk9MCx0aGlzLmo9MH0sSXQucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24ga2UoKXt2YXIgdDtyZXR1cm4gdGhpcy5pPXRoaXMuaSsxJjI1NSx0aGlzLmo9dGhpcy5qK3RoaXMuU1t0aGlzLmldJjI1NSx0PXRoaXMuU1t0aGlzLmldLHRoaXMuU1t0aGlzLmldPXRoaXMuU1t0aGlzLmpdLHRoaXMuU1t0aGlzLmpdPXQsdGhpcy5TW3QrdGhpcy5TW3RoaXMuaV0mMjU1XX07dmFyIFBlLENlLFRlO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9mdW5jdGlvbiBSZSgpeyFmdW5jdGlvbiB0KGUpe0NlW1RlKytdXj0yNTUmZSxDZVtUZSsrXV49ZT4+OCYyNTUsQ2VbVGUrK11ePWU+PjE2JjI1NSxDZVtUZSsrXV49ZT4+MjQmMjU1LFRlPj0yNTYmJihUZS09MjU2KX0oKG5ldyBEYXRlKS5nZXRUaW1lKCkpfWlmKG51bGw9PUNlKXt2YXIgSWU7aWYoQ2U9bmV3IEFycmF5LFRlPTAsdm9pZCAwIT09cCYmKHZvaWQgMCE9PXAuY3J5cHRvfHx2b2lkIDAhPT1wLm1zQ3J5cHRvKSl7dmFyIERlPXAuY3J5cHRvfHxwLm1zQ3J5cHRvO2lmKERlLmdldFJhbmRvbVZhbHVlcyl7dmFyIExlPW5ldyBVaW50OEFycmF5KDMyKTtmb3IoRGUuZ2V0UmFuZG9tVmFsdWVzKExlKSxJZT0wO0llPDMyOysrSWUpQ2VbVGUrK109TGVbSWVdfWVsc2UgaWYoXCJOZXRzY2FwZVwiPT1kLmFwcE5hbWUmJmQuYXBwVmVyc2lvbjxcIjVcIil7dmFyIE5lPXAuY3J5cHRvLnJhbmRvbSgzMik7Zm9yKEllPTA7SWU8TmUubGVuZ3RoOysrSWUpQ2VbVGUrK109MjU1Jk5lLmNoYXJDb2RlQXQoSWUpfX1mb3IoO1RlPDI1NjspSWU9TWF0aC5mbG9vcig2NTUzNipNYXRoLnJhbmRvbSgpKSxDZVtUZSsrXT1JZT4+PjgsQ2VbVGUrK109MjU1JkllO1RlPTAsUmUoKX1mdW5jdGlvbiBVZSgpe2lmKG51bGw9PVBlKXtmb3IoUmUoKSwoUGU9ZnVuY3Rpb24gdCgpe3JldHVybiBuZXcgSXR9KCkpLmluaXQoQ2UpLFRlPTA7VGU8Q2UubGVuZ3RoOysrVGUpQ2VbVGVdPTA7VGU9MH1yZXR1cm4gUGUubmV4dCgpfWZ1bmN0aW9uIEJlKCl7fVxuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIE9lKHQsZSl7cmV0dXJuIG5ldyB3KHQsZSl9ZnVuY3Rpb24gamUodCxlLHIpe2Zvcih2YXIgbj1cIlwiLGk9MDtuLmxlbmd0aDxlOyluKz1yKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHQuY29uY2F0KFsoNDI3ODE5MDA4MCZpKT4+MjQsKDE2NzExNjgwJmkpPj4xNiwoNjUyODAmaSk+PjgsMjU1JmldKSkpLGkrPTE7cmV0dXJuIG59ZnVuY3Rpb24gTWUoKXt0aGlzLm49bnVsbCx0aGlzLmU9MCx0aGlzLmQ9bnVsbCx0aGlzLnA9bnVsbCx0aGlzLnE9bnVsbCx0aGlzLmRtcDE9bnVsbCx0aGlzLmRtcTE9bnVsbCx0aGlzLmNvZWZmPW51bGx9XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xuZnVuY3Rpb24gSGUodCxlKXt0aGlzLng9ZSx0aGlzLnE9dH1mdW5jdGlvbiBWZSh0LGUscixuKXt0aGlzLmN1cnZlPXQsdGhpcy54PWUsdGhpcy55PXIsdGhpcy56PW51bGw9PW4/dy5PTkU6bix0aGlzLnppbnY9bnVsbH1mdW5jdGlvbiBLZSh0LGUscil7dGhpcy5xPXQsdGhpcy5hPXRoaXMuZnJvbUJpZ0ludGVnZXIoZSksdGhpcy5iPXRoaXMuZnJvbUJpZ0ludGVnZXIociksdGhpcy5pbmZpbml0eT1uZXcgVmUodGhpcyxudWxsLG51bGwpfUJlLnByb3RvdHlwZS5uZXh0Qnl0ZXM9ZnVuY3Rpb24gcWUodCl7dmFyIGU7Zm9yKGU9MDtlPHQubGVuZ3RoOysrZSl0W2VdPVVlKCl9LE1lLnByb3RvdHlwZS5kb1B1YmxpYz1mdW5jdGlvbiBKZSh0KXtyZXR1cm4gdC5tb2RQb3dJbnQodGhpcy5lLHRoaXMubil9LE1lLnByb3RvdHlwZS5zZXRQdWJsaWM9ZnVuY3Rpb24gV2UodCxlKXtpZih0aGlzLmlzUHVibGljPSEwLHRoaXMuaXNQcml2YXRlPSExLFwic3RyaW5nXCIhPXR5cGVvZiB0KXRoaXMubj10LHRoaXMuZT1lO2Vsc2V7aWYoIShudWxsIT10JiZudWxsIT1lJiZ0Lmxlbmd0aD4wJiZlLmxlbmd0aD4wKSl0aHJvd1wiSW52YWxpZCBSU0EgcHVibGljIGtleVwiO3RoaXMubj1PZSh0LDE2KSx0aGlzLmU9cGFyc2VJbnQoZSwxNil9fSxNZS5wcm90b3R5cGUuZW5jcnlwdD1mdW5jdGlvbiB6ZSh0KXt2YXIgZT1mdW5jdGlvbiByKHQsZSl7aWYoZTx0Lmxlbmd0aCsxMSl0aHJvd1wiTWVzc2FnZSB0b28gbG9uZyBmb3IgUlNBXCI7Zm9yKHZhciByPW5ldyBBcnJheSxuPXQubGVuZ3RoLTE7bj49MCYmZT4wOyl7dmFyIGk9dC5jaGFyQ29kZUF0KG4tLSk7aTwxMjg/clstLWVdPWk6aT4xMjcmJmk8MjA0OD8oclstLWVdPTYzJml8MTI4LHJbLS1lXT1pPj42fDE5Mik6KHJbLS1lXT02MyZpfDEyOCxyWy0tZV09aT4+NiY2M3wxMjgsclstLWVdPWk+PjEyfDIyNCl9clstLWVdPTA7Zm9yKHZhciBvPW5ldyBCZSxzPW5ldyBBcnJheTtlPjI7KXtmb3Ioc1swXT0wOzA9PXNbMF07KW8ubmV4dEJ5dGVzKHMpO3JbLS1lXT1zWzBdfXJldHVybiByWy0tZV09MixyWy0tZV09MCxuZXcgdyhyKX0odCx0aGlzLm4uYml0TGVuZ3RoKCkrNz4+Myk7aWYobnVsbD09ZSlyZXR1cm4gbnVsbDt2YXIgbj10aGlzLmRvUHVibGljKGUpO2lmKG51bGw9PW4pcmV0dXJuIG51bGw7dmFyIGk9bi50b1N0cmluZygxNik7cmV0dXJuIDA9PSgxJmkubGVuZ3RoKT9pOlwiMFwiK2l9LE1lLnByb3RvdHlwZS5lbmNyeXB0T0FFUD1mdW5jdGlvbiBZZSh0LGUscil7dmFyIG49ZnVuY3Rpb24gaSh0LGUscixuKXt2YXIgaT1Tci5jcnlwdG8uTWVzc2FnZURpZ2VzdCxvPVNyLmNyeXB0by5VdGlsLHM9bnVsbDtpZihyfHwocj1cInNoYTFcIiksXCJzdHJpbmdcIj09dHlwZW9mIHImJihzPWkuZ2V0Q2Fub25pY2FsQWxnTmFtZShyKSxuPWkuZ2V0SGFzaExlbmd0aChzKSxyPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIExyKG8uaGFzaEhleChOcihlKSxzKSl9KSx0Lmxlbmd0aCsyKm4rMj5lKXRocm93XCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIjt2YXIgYSx1PVwiXCI7Zm9yKGE9MDthPGUtdC5sZW5ndGgtMipuLTI7YSs9MSl1Kz1cIlxcMFwiO3ZhciBjPXIoXCJcIikrdStcIlx1MDAwMVwiK3QsaD1uZXcgQXJyYXkobik7KG5ldyBCZSkubmV4dEJ5dGVzKGgpO3ZhciBsPWplKGgsYy5sZW5ndGgsciksZj1bXTtmb3IoYT0wO2E8Yy5sZW5ndGg7YSs9MSlmW2FdPWMuY2hhckNvZGVBdChhKV5sLmNoYXJDb2RlQXQoYSk7dmFyIGc9amUoZixoLmxlbmd0aCxyKSxkPVswXTtmb3IoYT0wO2E8aC5sZW5ndGg7YSs9MSlkW2ErMV09aFthXV5nLmNoYXJDb2RlQXQoYSk7cmV0dXJuIG5ldyB3KGQuY29uY2F0KGYpKX0odCx0aGlzLm4uYml0TGVuZ3RoKCkrNz4+MyxlLHIpO2lmKG51bGw9PW4pcmV0dXJuIG51bGw7dmFyIG89dGhpcy5kb1B1YmxpYyhuKTtpZihudWxsPT1vKXJldHVybiBudWxsO3ZhciBzPW8udG9TdHJpbmcoMTYpO3JldHVybiAwPT0oMSZzLmxlbmd0aCk/czpcIjBcIitzfSxNZS5wcm90b3R5cGUudHlwZT1cIlJTQVwiLEhlLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24gR2UodCl7cmV0dXJuIHQ9PXRoaXN8fHRoaXMucS5lcXVhbHModC5xKSYmdGhpcy54LmVxdWFscyh0LngpfSxIZS5wcm90b3R5cGUudG9CaWdJbnRlZ2VyPWZ1bmN0aW9uIFhlKCl7cmV0dXJuIHRoaXMueH0sSGUucHJvdG90eXBlLm5lZ2F0ZT1mdW5jdGlvbiAkZSgpe3JldHVybiBuZXcgSGUodGhpcy5xLHRoaXMueC5uZWdhdGUoKS5tb2QodGhpcy5xKSl9LEhlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24gUWUodCl7cmV0dXJuIG5ldyBIZSh0aGlzLnEsdGhpcy54LmFkZCh0LnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9LEhlLnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbiBaZSh0KXtyZXR1cm4gbmV3IEhlKHRoaXMucSx0aGlzLnguc3VidHJhY3QodC50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfSxIZS5wcm90b3R5cGUubXVsdGlwbHk9ZnVuY3Rpb24gdHIodCl7cmV0dXJuIG5ldyBIZSh0aGlzLnEsdGhpcy54Lm11bHRpcGx5KHQudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX0sSGUucHJvdG90eXBlLnNxdWFyZT1mdW5jdGlvbiBlcigpe3JldHVybiBuZXcgSGUodGhpcy5xLHRoaXMueC5zcXVhcmUoKS5tb2QodGhpcy5xKSl9LEhlLnByb3RvdHlwZS5kaXZpZGU9ZnVuY3Rpb24gcnIodCl7cmV0dXJuIG5ldyBIZSh0aGlzLnEsdGhpcy54Lm11bHRpcGx5KHQudG9CaWdJbnRlZ2VyKCkubW9kSW52ZXJzZSh0aGlzLnEpKS5tb2QodGhpcy5xKSl9LFZlLnByb3RvdHlwZS5nZXRYPWZ1bmN0aW9uIG5yKCl7cmV0dXJuIG51bGw9PXRoaXMuemludiYmKHRoaXMuemludj10aGlzLnoubW9kSW52ZXJzZSh0aGlzLmN1cnZlLnEpKSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnppbnYpLm1vZCh0aGlzLmN1cnZlLnEpKX0sVmUucHJvdG90eXBlLmdldFk9ZnVuY3Rpb24gaXIoKXtyZXR1cm4gbnVsbD09dGhpcy56aW52JiYodGhpcy56aW52PXRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSkpLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludikubW9kKHRoaXMuY3VydmUucSkpfSxWZS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uIG9yKHQpe3JldHVybiB0PT10aGlzfHwodGhpcy5pc0luZmluaXR5KCk/dC5pc0luZmluaXR5KCk6dC5pc0luZmluaXR5KCk/dGhpcy5pc0luZmluaXR5KCk6ISF0LnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodC56KSkubW9kKHRoaXMuY3VydmUucSkuZXF1YWxzKHcuWkVSTykmJnQueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0LnopKS5tb2QodGhpcy5jdXJ2ZS5xKS5lcXVhbHMody5aRVJPKSl9LFZlLnByb3RvdHlwZS5pc0luZmluaXR5PWZ1bmN0aW9uIHNyKCl7cmV0dXJuIG51bGw9PXRoaXMueCYmbnVsbD09dGhpcy55fHx0aGlzLnouZXF1YWxzKHcuWkVSTykmJiF0aGlzLnkudG9CaWdJbnRlZ2VyKCkuZXF1YWxzKHcuWkVSTyl9LFZlLnByb3RvdHlwZS5uZWdhdGU9ZnVuY3Rpb24gYXIoKXtyZXR1cm4gbmV3IFZlKHRoaXMuY3VydmUsdGhpcy54LHRoaXMueS5uZWdhdGUoKSx0aGlzLnopfSxWZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uIHVyKHQpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiB0O2lmKHQuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO3ZhciBlPXQueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0LnopKS5tb2QodGhpcy5jdXJ2ZS5xKSxyPXQueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0LnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZih3LlpFUk8uZXF1YWxzKHIpKXJldHVybiB3LlpFUk8uZXF1YWxzKGUpP3RoaXMudHdpY2UoKTp0aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIG49bmV3IHcoXCIzXCIpLGk9dGhpcy54LnRvQmlnSW50ZWdlcigpLG89dGhpcy55LnRvQmlnSW50ZWdlcigpLHM9KHQueC50b0JpZ0ludGVnZXIoKSx0LnkudG9CaWdJbnRlZ2VyKCksci5zcXVhcmUoKSksYT1zLm11bHRpcGx5KHIpLHU9aS5tdWx0aXBseShzKSxjPWUuc3F1YXJlKCkubXVsdGlwbHkodGhpcy56KSxoPWMuc3VidHJhY3QodS5zaGlmdExlZnQoMSkpLm11bHRpcGx5KHQueikuc3VidHJhY3QoYSkubXVsdGlwbHkocikubW9kKHRoaXMuY3VydmUucSksbD11Lm11bHRpcGx5KG4pLm11bHRpcGx5KGUpLnN1YnRyYWN0KG8ubXVsdGlwbHkoYSkpLnN1YnRyYWN0KGMubXVsdGlwbHkoZSkpLm11bHRpcGx5KHQueikuYWRkKGUubXVsdGlwbHkoYSkpLm1vZCh0aGlzLmN1cnZlLnEpLGY9YS5tdWx0aXBseSh0aGlzLnopLm11bHRpcGx5KHQueikubW9kKHRoaXMuY3VydmUucSk7cmV0dXJuIG5ldyBWZSh0aGlzLmN1cnZlLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoaCksdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihsKSxmKX0sVmUucHJvdG90eXBlLnR3aWNlPWZ1bmN0aW9uIGNyKCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7aWYoMD09dGhpcy55LnRvQmlnSW50ZWdlcigpLnNpZ251bSgpKXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIHQ9bmV3IHcoXCIzXCIpLGU9dGhpcy54LnRvQmlnSW50ZWdlcigpLHI9dGhpcy55LnRvQmlnSW50ZWdlcigpLG49ci5tdWx0aXBseSh0aGlzLnopLGk9bi5tdWx0aXBseShyKS5tb2QodGhpcy5jdXJ2ZS5xKSxvPXRoaXMuY3VydmUuYS50b0JpZ0ludGVnZXIoKSxzPWUuc3F1YXJlKCkubXVsdGlwbHkodCk7dy5aRVJPLmVxdWFscyhvKXx8KHM9cy5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KG8pKSk7dmFyIGE9KHM9cy5tb2QodGhpcy5jdXJ2ZS5xKSkuc3F1YXJlKCkuc3VidHJhY3QoZS5zaGlmdExlZnQoMykubXVsdGlwbHkoaSkpLnNoaWZ0TGVmdCgxKS5tdWx0aXBseShuKS5tb2QodGhpcy5jdXJ2ZS5xKSx1PXMubXVsdGlwbHkodCkubXVsdGlwbHkoZSkuc3VidHJhY3QoaS5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseShpKS5zdWJ0cmFjdChzLnNxdWFyZSgpLm11bHRpcGx5KHMpKS5tb2QodGhpcy5jdXJ2ZS5xKSxjPW4uc3F1YXJlKCkubXVsdGlwbHkobikuc2hpZnRMZWZ0KDMpLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBuZXcgVmUodGhpcy5jdXJ2ZSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGEpLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodSksYyl9LFZlLnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbiBocih0KXtpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpcztpZigwPT10LnNpZ251bSgpKXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIGUscj10LG49ci5tdWx0aXBseShuZXcgdyhcIjNcIikpLGk9dGhpcy5uZWdhdGUoKSxvPXRoaXMscz10aGlzLmN1cnZlLnEuc3VidHJhY3QodCksYT1zLm11bHRpcGx5KG5ldyB3KFwiM1wiKSksdT1uZXcgVmUodGhpcy5jdXJ2ZSx0aGlzLngsdGhpcy55KSxjPXUubmVnYXRlKCk7Zm9yKGU9bi5iaXRMZW5ndGgoKS0yO2U+MDstLWUpe289by50d2ljZSgpO3ZhciBoPW4udGVzdEJpdChlKTtoIT1yLnRlc3RCaXQoZSkmJihvPW8uYWRkKGg/dGhpczppKSl9Zm9yKGU9YS5iaXRMZW5ndGgoKS0yO2U+MDstLWUpe3U9dS50d2ljZSgpO3ZhciBsPWEudGVzdEJpdChlKTtsIT1zLnRlc3RCaXQoZSkmJih1PXUuYWRkKGw/dTpjKSl9cmV0dXJuIG99LFZlLnByb3RvdHlwZS5tdWx0aXBseVR3bz1mdW5jdGlvbiBscih0LGUscil7dmFyIG47bj10LmJpdExlbmd0aCgpPnIuYml0TGVuZ3RoKCk/dC5iaXRMZW5ndGgoKS0xOnIuYml0TGVuZ3RoKCktMTtmb3IodmFyIGk9dGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpLG89dGhpcy5hZGQoZSk7bj49MDspaT1pLnR3aWNlKCksdC50ZXN0Qml0KG4pP2k9ci50ZXN0Qml0KG4pP2kuYWRkKG8pOmkuYWRkKHRoaXMpOnIudGVzdEJpdChuKSYmKGk9aS5hZGQoZSkpLC0tbjtyZXR1cm4gaX0sS2UucHJvdG90eXBlLmdldFE9ZnVuY3Rpb24gZnIoKXtyZXR1cm4gdGhpcy5xfSxLZS5wcm90b3R5cGUuZ2V0QT1mdW5jdGlvbiBncigpe3JldHVybiB0aGlzLmF9LEtlLnByb3RvdHlwZS5nZXRCPWZ1bmN0aW9uIGRyKCl7cmV0dXJuIHRoaXMuYn0sS2UucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbiBwcih0KXtyZXR1cm4gdD09dGhpc3x8dGhpcy5xLmVxdWFscyh0LnEpJiZ0aGlzLmEuZXF1YWxzKHQuYSkmJnRoaXMuYi5lcXVhbHModC5iKX0sS2UucHJvdG90eXBlLmdldEluZmluaXR5PWZ1bmN0aW9uIHZyKCl7cmV0dXJuIHRoaXMuaW5maW5pdHl9LEtlLnByb3RvdHlwZS5mcm9tQmlnSW50ZWdlcj1mdW5jdGlvbiB5cih0KXtyZXR1cm4gbmV3IEhlKHRoaXMucSx0KX0sS2UucHJvdG90eXBlLmRlY29kZVBvaW50SGV4PWZ1bmN0aW9uIG1yKHQpe3N3aXRjaChwYXJzZUludCh0LnN1YnN0cigwLDIpLDE2KSl7Y2FzZSAwOnJldHVybiB0aGlzLmluZmluaXR5O2Nhc2UgMjpjYXNlIDM6cmV0dXJuIG51bGw7Y2FzZSA0OmNhc2UgNjpjYXNlIDc6dmFyIGU9KHQubGVuZ3RoLTIpLzIscj10LnN1YnN0cigyLGUpLG49dC5zdWJzdHIoZSsyLGUpO3JldHVybiBuZXcgVmUodGhpcyx0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyB3KHIsMTYpKSx0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyB3KG4sMTYpKSk7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LFxuLyohIChjKSBTdGVmYW4gVGhvbWFzIHwgaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliXG4gKi9cbkhlLnByb3RvdHlwZS5nZXRCeXRlTGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IoKHRoaXMudG9CaWdJbnRlZ2VyKCkuYml0TGVuZ3RoKCkrNykvOCl9LFZlLnByb3RvdHlwZS5nZXRFbmNvZGVkPWZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj1lLnRvQnl0ZUFycmF5VW5zaWduZWQoKTtpZihyPG4ubGVuZ3RoKW49bi5zbGljZShuLmxlbmd0aC1yKTtlbHNlIGZvcig7cj5uLmxlbmd0aDspbi51bnNoaWZ0KDApO3JldHVybiBufSxyPXRoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLG49dGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCksaT1lKHIsMzIpO3JldHVybiB0P24uaXNFdmVuKCk/aS51bnNoaWZ0KDIpOmkudW5zaGlmdCgzKTooaS51bnNoaWZ0KDQpLGk9aS5jb25jYXQoZShuLDMyKSkpLGl9LFZlLmRlY29kZUZyb209ZnVuY3Rpb24odCxlKXtlWzBdO3ZhciByPWUubGVuZ3RoLTEsbj1lLnNsaWNlKDEsMStyLzIpLGk9ZS5zbGljZSgxK3IvMiwxK3IpO24udW5zaGlmdCgwKSxpLnVuc2hpZnQoMCk7dmFyIG89bmV3IHcobikscz1uZXcgdyhpKTtyZXR1cm4gbmV3IFZlKHQsdC5mcm9tQmlnSW50ZWdlcihvKSx0LmZyb21CaWdJbnRlZ2VyKHMpKX0sVmUuZGVjb2RlRnJvbUhleD1mdW5jdGlvbih0LGUpe2Uuc3Vic3RyKDAsMik7dmFyIHI9ZS5sZW5ndGgtMixuPWUuc3Vic3RyKDIsci8yKSxpPWUuc3Vic3RyKDIrci8yLHIvMiksbz1uZXcgdyhuLDE2KSxzPW5ldyB3KGksMTYpO3JldHVybiBuZXcgVmUodCx0LmZyb21CaWdJbnRlZ2VyKG8pLHQuZnJvbUJpZ0ludGVnZXIocykpfSxWZS5wcm90b3R5cGUuYWRkMkQ9ZnVuY3Rpb24odCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHQ7aWYodC5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7aWYodGhpcy54LmVxdWFscyh0LngpKXJldHVybiB0aGlzLnkuZXF1YWxzKHQueSk/dGhpcy50d2ljZSgpOnRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTt2YXIgZT10Lnguc3VidHJhY3QodGhpcy54KSxyPXQueS5zdWJ0cmFjdCh0aGlzLnkpLmRpdmlkZShlKSxuPXIuc3F1YXJlKCkuc3VidHJhY3QodGhpcy54KS5zdWJ0cmFjdCh0LngpLGk9ci5tdWx0aXBseSh0aGlzLnguc3VidHJhY3QobikpLnN1YnRyYWN0KHRoaXMueSk7cmV0dXJuIG5ldyBWZSh0aGlzLmN1cnZlLG4saSl9LFZlLnByb3RvdHlwZS50d2ljZTJEPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7aWYoMD09dGhpcy55LnRvQmlnSW50ZWdlcigpLnNpZ251bSgpKXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIHQ9dGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih3LnZhbHVlT2YoMikpLGU9dGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih3LnZhbHVlT2YoMykpLHI9dGhpcy54LnNxdWFyZSgpLm11bHRpcGx5KGUpLmFkZCh0aGlzLmN1cnZlLmEpLmRpdmlkZSh0aGlzLnkubXVsdGlwbHkodCkpLG49ci5zcXVhcmUoKS5zdWJ0cmFjdCh0aGlzLngubXVsdGlwbHkodCkpLGk9ci5tdWx0aXBseSh0aGlzLnguc3VidHJhY3QobikpLnN1YnRyYWN0KHRoaXMueSk7cmV0dXJuIG5ldyBWZSh0aGlzLmN1cnZlLG4saSl9LFZlLnByb3RvdHlwZS5tdWx0aXBseTJEPWZ1bmN0aW9uKHQpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO2lmKDA9PXQuc2lnbnVtKCkpcmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTt2YXIgZSxyPXQsbj1yLm11bHRpcGx5KG5ldyB3KFwiM1wiKSksaT10aGlzLm5lZ2F0ZSgpLG89dGhpcztmb3IoZT1uLmJpdExlbmd0aCgpLTI7ZT4wOy0tZSl7bz1vLnR3aWNlKCk7dmFyIHM9bi50ZXN0Qml0KGUpO3MhPXIudGVzdEJpdChlKSYmKG89by5hZGQyRChzP3RoaXM6aSkpfXJldHVybiBvfSxWZS5wcm90b3R5cGUuaXNPbkN1cnZlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCksZT10aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKSxyPXRoaXMuY3VydmUuZ2V0QSgpLnRvQmlnSW50ZWdlcigpLG49dGhpcy5jdXJ2ZS5nZXRCKCkudG9CaWdJbnRlZ2VyKCksaT10aGlzLmN1cnZlLmdldFEoKSxvPWUubXVsdGlwbHkoZSkubW9kKGkpLHM9dC5tdWx0aXBseSh0KS5tdWx0aXBseSh0KS5hZGQoci5tdWx0aXBseSh0KSkuYWRkKG4pLm1vZChpKTtyZXR1cm4gby5lcXVhbHMocyl9LFZlLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiKFwiK3RoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLnRvU3RyaW5nKCkrXCIsXCIrdGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoKStcIilcIn0sVmUucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jdXJ2ZS5nZXRRKCk7aWYodGhpcy5pc0luZmluaXR5KCkpdGhyb3cgbmV3IEVycm9yKFwiUG9pbnQgaXMgYXQgaW5maW5pdHkuXCIpO3ZhciBlPXRoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLHI9dGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCk7aWYoZS5jb21wYXJlVG8ody5PTkUpPDB8fGUuY29tcGFyZVRvKHQuc3VidHJhY3Qody5PTkUpKT4wKXRocm93IG5ldyBFcnJvcihcInggY29vcmRpbmF0ZSBvdXQgb2YgYm91bmRzXCIpO2lmKHIuY29tcGFyZVRvKHcuT05FKTwwfHxyLmNvbXBhcmVUbyh0LnN1YnRyYWN0KHcuT05FKSk+MCl0aHJvdyBuZXcgRXJyb3IoXCJ5IGNvb3JkaW5hdGUgb3V0IG9mIGJvdW5kc1wiKTtpZighdGhpcy5pc09uQ3VydmUoKSl0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBub3Qgb24gdGhlIGN1cnZlLlwiKTtpZih0aGlzLm11bHRpcGx5KHQpLmlzSW5maW5pdHkoKSl0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBub3QgYSBzY2FsYXIgbXVsdGlwbGUgb2YgRy5cIik7cmV0dXJuITB9O1xuLyohIE1pa2UgU2FtdWVsIChjKSAyMDA5IHwgY29kZS5nb29nbGUuY29tL3AvanNvbi1zYW5zLWV2YWxcbiAqL1xudmFyIF9yPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFJlZ0V4cCgnKD86ZmFsc2V8dHJ1ZXxudWxsfFtcXFxce1xcXFx9XFxcXFtcXFxcXV18KD86LT9cXFxcYig/OjB8WzEtOV1bMC05XSopKD86XFxcXC5bMC05XSspPyg/OltlRV1bKy1dP1swLTldKyk/XFxcXGIpfCg/OlwiKD86W15cXFxcMC1cXFxceDA4XFxcXHgwYS1cXFxceDFmXCJcXFxcXFxcXF18XFxcXFxcXFwoPzpbXCIvXFxcXFxcXFxiZm5ydF18dVswLTlBLUZhLWZdezR9KSkqXCIpKScsXCJnXCIpLGU9bmV3IFJlZ0V4cChcIlxcXFxcXFxcKD86KFtedV0pfHUoLns0fSkpXCIsXCJnXCIpLHI9eydcIic6J1wiJyxcIi9cIjpcIi9cIixcIlxcXFxcIjpcIlxcXFxcIixiOlwiXFxiXCIsZjpcIlxcZlwiLG46XCJcXG5cIixyOlwiXFxyXCIsdDpcIlxcdFwifTtmdW5jdGlvbiBuKHQsZSxuKXtyZXR1cm4gZT9yW2VdOlN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobiwxNikpfXZhciBpPW5ldyBTdHJpbmcoXCJcIiksbz1PYmplY3QuaGFzT3duUHJvcGVydHk7cmV0dXJuIGZ1bmN0aW9uKHIscyl7dmFyIGEsdSxjPXIubWF0Y2godCksaD1jWzBdLGw9ITE7XCJ7XCI9PT1oP2E9e306XCJbXCI9PT1oP2E9W106KGE9W10sbD0hMCk7Zm9yKHZhciBmPVthXSxkPTEtbCxwPWMubGVuZ3RoO2Q8cDsrK2Qpe3ZhciB2O3N3aXRjaCgoaD1jW2RdKS5jaGFyQ29kZUF0KDApKXtkZWZhdWx0Oih2PWZbMF0pW3V8fHYubGVuZ3RoXT0raCx1PXZvaWQgMDticmVhaztjYXNlIDM0OmlmKC0xIT09KGg9aC5zdWJzdHJpbmcoMSxoLmxlbmd0aC0xKSkuaW5kZXhPZihcIlxcXFxcIikmJihoPWgucmVwbGFjZShlLG4pKSx2PWZbMF0sIXUpe2lmKCEodiBpbnN0YW5jZW9mIEFycmF5KSl7dT1ofHxpO2JyZWFrfXU9di5sZW5ndGh9dlt1XT1oLHU9dm9pZCAwO2JyZWFrO2Nhc2UgOTE6dj1mWzBdLGYudW5zaGlmdCh2W3V8fHYubGVuZ3RoXT1bXSksdT12b2lkIDA7YnJlYWs7Y2FzZSA5MzpmLnNoaWZ0KCk7YnJlYWs7Y2FzZSAxMDI6KHY9ZlswXSlbdXx8di5sZW5ndGhdPSExLHU9dm9pZCAwO2JyZWFrO2Nhc2UgMTEwOih2PWZbMF0pW3V8fHYubGVuZ3RoXT1udWxsLHU9dm9pZCAwO2JyZWFrO2Nhc2UgMTE2Oih2PWZbMF0pW3V8fHYubGVuZ3RoXT0hMCx1PXZvaWQgMDticmVhaztjYXNlIDEyMzp2PWZbMF0sZi51bnNoaWZ0KHZbdXx8di5sZW5ndGhdPXt9KSx1PXZvaWQgMDticmVhaztjYXNlIDEyNTpmLnNoaWZ0KCl9fWlmKGwpe2lmKDEhPT1mLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3I7YT1hWzBdfWVsc2UgaWYoZi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yO2lmKHMpe2E9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWVbcl07aWYobiYmXCJvYmplY3RcIj09PSh2b2lkIDA9PT1uP1widW5kZWZpbmVkXCI6ZyhuKSkpe3ZhciBpPW51bGw7Zm9yKHZhciBhIGluIG4paWYoby5jYWxsKG4sYSkmJm4hPT1lKXt2YXIgdT10KG4sYSk7dm9pZCAwIT09dT9uW2FdPXU6KGl8fChpPVtdKSxpLnB1c2goYSkpfWlmKGkpZm9yKHZhciBjPWkubGVuZ3RoOy0tYz49MDspZGVsZXRlIG5baVtjXV19cmV0dXJuIHMuY2FsbChlLHIsbil9KHtcIlwiOmF9LFwiXCIpfXJldHVybiBhfX0oKTt2b2lkIDAhPT1TciYmU3J8fChlLktKVVI9U3I9e30pLHZvaWQgMCE9PVNyLmFzbjEmJlNyLmFzbjF8fChTci5hc24xPXt9KSxTci5hc24xLkFTTjFVdGlsPW5ldyBmdW5jdGlvbigpe3RoaXMuaW50ZWdlclRvQnl0ZUhleD1mdW5jdGlvbih0KXt2YXIgZT10LnRvU3RyaW5nKDE2KTtyZXR1cm4gZS5sZW5ndGglMj09MSYmKGU9XCIwXCIrZSksZX0sdGhpcy5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleD1mdW5jdGlvbih0KXt2YXIgZT10LnRvU3RyaW5nKDE2KTtpZihcIi1cIiE9ZS5zdWJzdHIoMCwxKSllLmxlbmd0aCUyPT0xP2U9XCIwXCIrZTplLm1hdGNoKC9eWzAtN10vKXx8KGU9XCIwMFwiK2UpO2Vsc2V7dmFyIHI9ZS5zdWJzdHIoMSkubGVuZ3RoO3IlMj09MT9yKz0xOmUubWF0Y2goL15bMC03XS8pfHwocis9Mik7Zm9yKHZhciBuPVwiXCIsaT0wO2k8cjtpKyspbis9XCJmXCI7ZT1uZXcgdyhuLDE2KS54b3IodCkuYWRkKHcuT05FKS50b1N0cmluZygxNikucmVwbGFjZSgvXi0vLFwiXCIpfXJldHVybiBlfSx0aGlzLmdldFBFTVN0cmluZ0Zyb21IZXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4ganIodCxlKX0sdGhpcy5uZXdPYmplY3Q9ZnVuY3Rpb24odCl7dmFyIGU9U3IuYXNuMSxyPWUuQVNOMU9iamVjdCxuPWUuREVSQm9vbGVhbixpPWUuREVSSW50ZWdlcixvPWUuREVSQml0U3RyaW5nLHM9ZS5ERVJPY3RldFN0cmluZyxhPWUuREVSTnVsbCx1PWUuREVST2JqZWN0SWRlbnRpZmllcixjPWUuREVSRW51bWVyYXRlZCxoPWUuREVSVVRGOFN0cmluZyxsPWUuREVSTnVtZXJpY1N0cmluZyxmPWUuREVSUHJpbnRhYmxlU3RyaW5nLGc9ZS5ERVJUZWxldGV4U3RyaW5nLGQ9ZS5ERVJJQTVTdHJpbmcscD1lLkRFUlVUQ1RpbWUsdj1lLkRFUkdlbmVyYWxpemVkVGltZSx5PWUuREVSVmlzaWJsZVN0cmluZyxtPWUuREVSQk1QU3RyaW5nLF89ZS5ERVJTZXF1ZW5jZSxTPWUuREVSU2V0LGI9ZS5ERVJUYWdnZWRPYmplY3Qsdz1lLkFTTjFVdGlsLm5ld09iamVjdDtpZih0IGluc3RhbmNlb2YgZS5BU04xT2JqZWN0KXJldHVybiB0O3ZhciBGPU9iamVjdC5rZXlzKHQpO2lmKDEhPUYubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIik7dmFyIEU9RlswXTtpZigtMT09XCI6YXNuMTpib29sOmludDpiaXRzdHI6b2N0c3RyOm51bGw6b2lkOmVudW06dXRmOHN0cjpudW1zdHI6cHJuc3RyOnRlbHN0cjppYTVzdHI6dXRjdGltZTpnZW50aW1lOnZpc3N0cjpibXBzdHI6c2VxOnNldDp0YWc6XCIuaW5kZXhPZihcIjpcIitFK1wiOlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJ1bmRlZmluZWQga2V5OiBcIitFKTtpZihcImJvb2xcIj09RSlyZXR1cm4gbmV3IG4odFtFXSk7aWYoXCJpbnRcIj09RSlyZXR1cm4gbmV3IGkodFtFXSk7aWYoXCJiaXRzdHJcIj09RSlyZXR1cm4gbmV3IG8odFtFXSk7aWYoXCJvY3RzdHJcIj09RSlyZXR1cm4gbmV3IHModFtFXSk7aWYoXCJudWxsXCI9PUUpcmV0dXJuIG5ldyBhKHRbRV0pO2lmKFwib2lkXCI9PUUpcmV0dXJuIG5ldyB1KHRbRV0pO2lmKFwiZW51bVwiPT1FKXJldHVybiBuZXcgYyh0W0VdKTtpZihcInV0ZjhzdHJcIj09RSlyZXR1cm4gbmV3IGgodFtFXSk7aWYoXCJudW1zdHJcIj09RSlyZXR1cm4gbmV3IGwodFtFXSk7aWYoXCJwcm5zdHJcIj09RSlyZXR1cm4gbmV3IGYodFtFXSk7aWYoXCJ0ZWxzdHJcIj09RSlyZXR1cm4gbmV3IGcodFtFXSk7aWYoXCJpYTVzdHJcIj09RSlyZXR1cm4gbmV3IGQodFtFXSk7aWYoXCJ1dGN0aW1lXCI9PUUpcmV0dXJuIG5ldyBwKHRbRV0pO2lmKFwiZ2VudGltZVwiPT1FKXJldHVybiBuZXcgdih0W0VdKTtpZihcInZpc3N0clwiPT1FKXJldHVybiBuZXcgeSh0W0VdKTtpZihcImJtcHN0clwiPT1FKXJldHVybiBuZXcgbSh0W0VdKTtpZihcImFzbjFcIj09RSlyZXR1cm4gbmV3IHIodFtFXSk7aWYoXCJzZXFcIj09RSl7Zm9yKHZhciB4PXRbRV0sQT1bXSxrPTA7azx4Lmxlbmd0aDtrKyspe3ZhciBQPXcoeFtrXSk7QS5wdXNoKFApfXJldHVybiBuZXcgXyh7YXJyYXk6QX0pfWlmKFwic2V0XCI9PUUpe2Zvcih4PXRbRV0sQT1bXSxrPTA7azx4Lmxlbmd0aDtrKyspe1A9dyh4W2tdKTtBLnB1c2goUCl9cmV0dXJuIG5ldyBTKHthcnJheTpBfSl9aWYoXCJ0YWdcIj09RSl7dmFyIEM9dFtFXTtpZihcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQykmJjM9PUMubGVuZ3RoKXt2YXIgVD13KENbMl0pO3JldHVybiBuZXcgYih7dGFnOkNbMF0sZXhwbGljaXQ6Q1sxXSxvYmo6VH0pfXJldHVybiBuZXcgYihDKX19LHRoaXMuanNvblRvQVNOMUhFWD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5uZXdPYmplY3QodCkuZ2V0RW5jb2RlZEhleCgpfX0sU3IuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludD1mdW5jdGlvbih0KXtmb3IodmFyIGU9XCJcIixyPXBhcnNlSW50KHQuc3Vic3RyKDAsMiksMTYpLG49KGU9TWF0aC5mbG9vcihyLzQwKStcIi5cIityJTQwLFwiXCIpLGk9MjtpPHQubGVuZ3RoO2krPTIpe3ZhciBvPShcIjAwMDAwMDAwXCIrcGFyc2VJbnQodC5zdWJzdHIoaSwyKSwxNikudG9TdHJpbmcoMikpLnNsaWNlKC04KTtpZihuKz1vLnN1YnN0cigxLDcpLFwiMFwiPT1vLnN1YnN0cigwLDEpKWU9ZStcIi5cIituZXcgdyhuLDIpLnRvU3RyaW5nKDEwKSxuPVwiXCJ9cmV0dXJuIGV9LFNyLmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXg9ZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24gdChlKXt2YXIgcj1lLnRvU3RyaW5nKDE2KTtyZXR1cm4gMT09ci5sZW5ndGgmJihyPVwiMFwiK3IpLHJ9LHI9ZnVuY3Rpb24gdChyKXt2YXIgbj1cIlwiLGk9bmV3IHcociwxMCkudG9TdHJpbmcoMiksbz03LWkubGVuZ3RoJTc7Nz09byYmKG89MCk7Zm9yKHZhciBzPVwiXCIsYT0wO2E8bzthKyspcys9XCIwXCI7aT1zK2k7Zm9yKGE9MDthPGkubGVuZ3RoLTE7YSs9Nyl7dmFyIHU9aS5zdWJzdHIoYSw3KTthIT1pLmxlbmd0aC03JiYodT1cIjFcIit1KSxuKz1lKHBhcnNlSW50KHUsMikpfXJldHVybiBufTtpZighdC5tYXRjaCgvXlswLTkuXSskLykpdGhyb3dcIm1hbGZvcm1lZCBvaWQgc3RyaW5nOiBcIit0O3ZhciBuPVwiXCIsaT10LnNwbGl0KFwiLlwiKSxvPTQwKnBhcnNlSW50KGlbMF0pK3BhcnNlSW50KGlbMV0pO24rPWUobyksaS5zcGxpY2UoMCwyKTtmb3IodmFyIHM9MDtzPGkubGVuZ3RoO3MrKyluKz1yKGlbc10pO3JldHVybiBufSxTci5hc24xLkFTTjFPYmplY3Q9ZnVuY3Rpb24odCl7dGhpcy5wYXJhbXM9bnVsbCx0aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZT1mdW5jdGlvbigpe2lmKHZvaWQgMD09PXRoaXMuaFZ8fG51bGw9PXRoaXMuaFYpdGhyb3cgbmV3IEVycm9yKFwidGhpcy5oViBpcyBudWxsIG9yIHVuZGVmaW5lZFwiKTtpZih0aGlzLmhWLmxlbmd0aCUyPT0xKXRocm93IG5ldyBFcnJvcihcInZhbHVlIGhleCBtdXN0IGJlIGV2ZW4gbGVuZ3RoOiBuPVwiK1wiXCIubGVuZ3RoK1wiLHY9XCIrdGhpcy5oVik7dmFyIHQ9dGhpcy5oVi5sZW5ndGgvMixlPXQudG9TdHJpbmcoMTYpO2lmKGUubGVuZ3RoJTI9PTEmJihlPVwiMFwiK2UpLHQ8MTI4KXJldHVybiBlO3ZhciByPWUubGVuZ3RoLzI7aWYocj4xNSl0aHJvd1wiQVNOLjEgbGVuZ3RoIHRvbyBsb25nIHRvIHJlcHJlc2VudCBieSA4eDogbiA9IFwiK3QudG9TdHJpbmcoMTYpO3JldHVybigxMjgrcikudG9TdHJpbmcoMTYpK2V9LHRoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3JldHVybihudWxsPT10aGlzLmhUTFZ8fHRoaXMuaXNNb2RpZmllZCkmJih0aGlzLmhWPXRoaXMuZ2V0RnJlc2hWYWx1ZUhleCgpLHRoaXMuaEw9dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKSx0aGlzLmhUTFY9dGhpcy5oVCt0aGlzLmhMK3RoaXMuaFYsdGhpcy5pc01vZGlmaWVkPSExKSx0aGlzLmhUTFZ9LHRoaXMuZ2V0VmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRFbmNvZGVkSGV4KCksdGhpcy5oVn0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sdGhpcy5zZXRCeVBhcmFtPWZ1bmN0aW9uKHQpe3RoaXMucGFyYW1zPXR9LG51bGwhPXQmJm51bGwhPXQudGx2JiYodGhpcy5oVExWPXQudGx2LHRoaXMuaXNNb2RpZmllZD0hMSl9LFNyLmFzbjEuREVSQWJzdHJhY3RTdHJpbmc9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5nZXRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zfSx0aGlzLnNldFN0cmluZz1mdW5jdGlvbih0KXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5zPXQsdGhpcy5oVj1Jcih0aGlzLnMpLnRvTG93ZXJDYXNlKCl9LHRoaXMuc2V0U3RyaW5nSGV4PWZ1bmN0aW9uKHQpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLnM9bnVsbCx0aGlzLmhWPXR9LHRoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfSx2b2lkIDAhPT10JiYoXCJzdHJpbmdcIj09dHlwZW9mIHQ/dGhpcy5zZXRTdHJpbmcodCk6dm9pZCAwIT09dC5zdHI/dGhpcy5zZXRTdHJpbmcodC5zdHIpOnZvaWQgMCE9PXQuaGV4JiZ0aGlzLnNldFN0cmluZ0hleCh0LmhleCkpfSxacihTci5hc24xLkRFUkFic3RyYWN0U3RyaW5nLFNyLmFzbjEuQVNOMU9iamVjdCksU3IuYXNuMS5ERVJBYnN0cmFjdFRpbWU9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJBYnN0cmFjdFRpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMubG9jYWxEYXRlVG9VVEM9ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRUaW1lKCkrNmU0KnQuZ2V0VGltZXpvbmVPZmZzZXQoKTtyZXR1cm4gbmV3IERhdGUoZSl9LHRoaXMuZm9ybWF0RGF0ZT1mdW5jdGlvbih0LGUscil7dmFyIG49dGhpcy56ZXJvUGFkZGluZyxpPXRoaXMubG9jYWxEYXRlVG9VVEModCksbz1TdHJpbmcoaS5nZXRGdWxsWWVhcigpKTtcInV0Y1wiPT1lJiYobz1vLnN1YnN0cigyLDIpKTt2YXIgcz1vK24oU3RyaW5nKGkuZ2V0TW9udGgoKSsxKSwyKStuKFN0cmluZyhpLmdldERhdGUoKSksMikrbihTdHJpbmcoaS5nZXRIb3VycygpKSwyKStuKFN0cmluZyhpLmdldE1pbnV0ZXMoKSksMikrbihTdHJpbmcoaS5nZXRTZWNvbmRzKCkpLDIpO2lmKCEwPT09cil7dmFyIGE9aS5nZXRNaWxsaXNlY29uZHMoKTtpZigwIT1hKXt2YXIgdT1uKFN0cmluZyhhKSwzKTtzPXMrXCIuXCIrKHU9dS5yZXBsYWNlKC9bMF0rJC8sXCJcIikpfX1yZXR1cm4gcytcIlpcIn0sdGhpcy56ZXJvUGFkZGluZz1mdW5jdGlvbih0LGUpe3JldHVybiB0Lmxlbmd0aD49ZT90Om5ldyBBcnJheShlLXQubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK3R9LHRoaXMuZ2V0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc30sdGhpcy5zZXRTdHJpbmc9ZnVuY3Rpb24odCl7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMucz10LHRoaXMuaFY9a3IodCl9LHRoaXMuc2V0QnlEYXRlVmFsdWU9ZnVuY3Rpb24odCxlLHIsbixpLG8pe3ZhciBzPW5ldyBEYXRlKERhdGUuVVRDKHQsZS0xLHIsbixpLG8sMCkpO3RoaXMuc2V0QnlEYXRlKHMpfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn19LFpyKFNyLmFzbjEuREVSQWJzdHJhY3RUaW1lLFNyLmFzbjEuQVNOMU9iamVjdCksU3IuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQ9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5zZXRCeUFTTjFPYmplY3RBcnJheT1mdW5jdGlvbih0KXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5hc24xQXJyYXk9dH0sdGhpcy5hcHBlbmRBU04xT2JqZWN0PWZ1bmN0aW9uKHQpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLmFzbjFBcnJheS5wdXNoKHQpfSx0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXksdm9pZCAwIT09dCYmdm9pZCAwIT09dC5hcnJheSYmKHRoaXMuYXNuMUFycmF5PXQuYXJyYXkpfSxacihTci5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCxTci5hc24xLkFTTjFPYmplY3QpLFNyLmFzbjEuREVSQm9vbGVhbj1mdW5jdGlvbih0KXtTci5hc24xLkRFUkJvb2xlYW4uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLHRoaXMuaFQ9XCIwMVwiLHRoaXMuaFRMVj0wPT10P1wiMDEwMTAwXCI6XCIwMTAxZmZcIn0sWnIoU3IuYXNuMS5ERVJCb29sZWFuLFNyLmFzbjEuQVNOMU9iamVjdCksU3IuYXNuMS5ERVJJbnRlZ2VyPWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVSSW50ZWdlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cIjAyXCIsdGhpcy5zZXRCeUJpZ0ludGVnZXI9ZnVuY3Rpb24odCl7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuaFY9U3IuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleCh0KX0sdGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHcoU3RyaW5nKHQpLDEwKTt0aGlzLnNldEJ5QmlnSW50ZWdlcihlKX0sdGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbih0KXt0aGlzLmhWPXR9LHRoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfSx2b2lkIDAhPT10JiYodm9pZCAwIT09dC5iaWdpbnQ/dGhpcy5zZXRCeUJpZ0ludGVnZXIodC5iaWdpbnQpOnZvaWQgMCE9PXQuaW50P3RoaXMuc2V0QnlJbnRlZ2VyKHQuaW50KTpcIm51bWJlclwiPT10eXBlb2YgdD90aGlzLnNldEJ5SW50ZWdlcih0KTp2b2lkIDAhPT10LmhleCYmdGhpcy5zZXRWYWx1ZUhleCh0LmhleCkpfSxacihTci5hc24xLkRFUkludGVnZXIsU3IuYXNuMS5BU04xT2JqZWN0KSxTci5hc24xLkRFUkJpdFN0cmluZz1mdW5jdGlvbih0KXtpZih2b2lkIDAhPT10JiZ2b2lkIDAhPT10Lm9iail7dmFyIGU9U3IuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QodC5vYmopO3QuaGV4PVwiMDBcIitlLmdldEVuY29kZWRIZXgoKX1Tci5hc24xLkRFUkJpdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cIjAzXCIsdGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHM9ZnVuY3Rpb24odCl7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuaFY9dH0sdGhpcy5zZXRVbnVzZWRCaXRzQW5kSGV4VmFsdWU9ZnVuY3Rpb24odCxlKXtpZih0PDB8fDc8dCl0aHJvd1widW51c2VkIGJpdHMgc2hhbGwgYmUgZnJvbSAwIHRvIDc6IHUgPSBcIit0O3ZhciByPVwiMFwiK3Q7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuaFY9citlfSx0aGlzLnNldEJ5QmluYXJ5U3RyaW5nPWZ1bmN0aW9uKHQpe3ZhciBlPTgtKHQ9dC5yZXBsYWNlKC8wKyQvLFwiXCIpKS5sZW5ndGglODs4PT1lJiYoZT0wKTtmb3IodmFyIHI9MDtyPD1lO3IrKyl0Kz1cIjBcIjt2YXIgbj1cIlwiO2ZvcihyPTA7cjx0Lmxlbmd0aC0xO3IrPTgpe3ZhciBpPXQuc3Vic3RyKHIsOCksbz1wYXJzZUludChpLDIpLnRvU3RyaW5nKDE2KTsxPT1vLmxlbmd0aCYmKG89XCIwXCIrbyksbis9b310aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5oVj1cIjBcIitlK259LHRoaXMuc2V0QnlCb29sZWFuQXJyYXk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVwiXCIscj0wO3I8dC5sZW5ndGg7cisrKTE9PXRbcl0/ZSs9XCIxXCI6ZSs9XCIwXCI7dGhpcy5zZXRCeUJpbmFyeVN0cmluZyhlKX0sdGhpcy5uZXdGYWxzZUFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspZVtyXT0hMTtyZXR1cm4gZX0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9LHZvaWQgMCE9PXQmJihcInN0cmluZ1wiPT10eXBlb2YgdCYmdC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eWzAtOWEtZl0rJC8pP3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKHQpOnZvaWQgMCE9PXQuaGV4P3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKHQuaGV4KTp2b2lkIDAhPT10LmJpbj90aGlzLnNldEJ5QmluYXJ5U3RyaW5nKHQuYmluKTp2b2lkIDAhPT10LmFycmF5JiZ0aGlzLnNldEJ5Qm9vbGVhbkFycmF5KHQuYXJyYXkpKX0sWnIoU3IuYXNuMS5ERVJCaXRTdHJpbmcsU3IuYXNuMS5BU04xT2JqZWN0KSxTci5hc24xLkRFUk9jdGV0U3RyaW5nPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXQmJnZvaWQgMCE9PXQub2JqKXt2YXIgZT1Tci5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh0Lm9iaik7dC5oZXg9ZS5nZXRFbmNvZGVkSGV4KCl9U3IuYXNuMS5ERVJPY3RldFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMDRcIn0sWnIoU3IuYXNuMS5ERVJPY3RldFN0cmluZyxTci5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxTci5hc24xLkRFUk51bGw9ZnVuY3Rpb24oKXtTci5hc24xLkRFUk51bGwuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLHRoaXMuaFQ9XCIwNVwiLHRoaXMuaFRMVj1cIjA1MDBcIn0sWnIoU3IuYXNuMS5ERVJOdWxsLFNyLmFzbjEuQVNOMU9iamVjdCksU3IuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyPWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVST2JqZWN0SWRlbnRpZmllci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cIjA2XCIsdGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbih0KXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5zPW51bGwsdGhpcy5oVj10fSx0aGlzLnNldFZhbHVlT2lkU3RyaW5nPWZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uIHIodCl7dmFyIGU9ZnVuY3Rpb24gdChlKXt2YXIgcj1lLnRvU3RyaW5nKDE2KTtyZXR1cm4gMT09ci5sZW5ndGgmJihyPVwiMFwiK3IpLHJ9LHI9ZnVuY3Rpb24gdChyKXt2YXIgbj1cIlwiLGk9cGFyc2VJbnQociwxMCkudG9TdHJpbmcoMiksbz03LWkubGVuZ3RoJTc7Nz09byYmKG89MCk7Zm9yKHZhciBzPVwiXCIsYT0wO2E8bzthKyspcys9XCIwXCI7aT1zK2k7Zm9yKGE9MDthPGkubGVuZ3RoLTE7YSs9Nyl7dmFyIHU9aS5zdWJzdHIoYSw3KTthIT1pLmxlbmd0aC03JiYodT1cIjFcIit1KSxuKz1lKHBhcnNlSW50KHUsMikpfXJldHVybiBufTt0cnl7aWYoIXQubWF0Y2goL15bMC05Ll0rJC8pKXJldHVybiBudWxsO3ZhciBuPVwiXCIsaT10LnNwbGl0KFwiLlwiKSxvPTQwKnBhcnNlSW50KGlbMF0sMTApK3BhcnNlSW50KGlbMV0sMTApO24rPWUobyksaS5zcGxpY2UoMCwyKTtmb3IodmFyIHM9MDtzPGkubGVuZ3RoO3MrKyluKz1yKGlbc10pO3JldHVybiBufWNhdGNoKHQpe3JldHVybiBudWxsfX0odCk7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgb2lkIHN0cmluZzogXCIrdCk7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMucz1udWxsLHRoaXMuaFY9ZX0sdGhpcy5zZXRWYWx1ZU5hbWU9ZnVuY3Rpb24odCl7dmFyIGU9U3IuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZCh0KTtpZihcIlwiPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJERVJPYmplY3RJZGVudGlmaWVyIG9pZE5hbWUgdW5kZWZpbmVkOiBcIit0KTt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGUpfSx0aGlzLnNldFZhbHVlTmFtZU9yT2lkPWZ1bmN0aW9uKHQpe3QubWF0Y2goL15bMC0yXS5bMC05Ll0rJC8pP3RoaXMuc2V0VmFsdWVPaWRTdHJpbmcodCk6dGhpcy5zZXRWYWx1ZU5hbWUodCl9LHRoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfSx0aGlzLnNldEJ5UGFyYW09ZnVuY3Rpb24odCl7XCJzdHJpbmdcIj09dHlwZW9mIHQ/dGhpcy5zZXRWYWx1ZU5hbWVPck9pZCh0KTp2b2lkIDAhPT10Lm9pZD90aGlzLnNldFZhbHVlTmFtZU9yT2lkKHQub2lkKTp2b2lkIDAhPT10Lm5hbWU/dGhpcy5zZXRWYWx1ZU5hbWVPck9pZCh0Lm5hbWUpOnZvaWQgMCE9PXQuaGV4JiZ0aGlzLnNldFZhbHVlSGV4KHQuaGV4KX0sdm9pZCAwIT09dCYmdGhpcy5zZXRCeVBhcmFtKHQpfSxacihTci5hc24xLkRFUk9iamVjdElkZW50aWZpZXIsU3IuYXNuMS5BU04xT2JqZWN0KSxTci5hc24xLkRFUkVudW1lcmF0ZWQ9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJFbnVtZXJhdGVkLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSx0aGlzLmhUPVwiMGFcIix0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbih0KXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5oVj1Tci5hc24xLkFTTjFVdGlsLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4KHQpfSx0aGlzLnNldEJ5SW50ZWdlcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgdyhTdHJpbmcodCksMTApO3RoaXMuc2V0QnlCaWdJbnRlZ2VyKGUpfSx0aGlzLnNldFZhbHVlSGV4PWZ1bmN0aW9uKHQpe3RoaXMuaFY9dH0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9LHZvaWQgMCE9PXQmJih2b2lkIDAhPT10LmludD90aGlzLnNldEJ5SW50ZWdlcih0LmludCk6XCJudW1iZXJcIj09dHlwZW9mIHQ/dGhpcy5zZXRCeUludGVnZXIodCk6dm9pZCAwIT09dC5oZXgmJnRoaXMuc2V0VmFsdWVIZXgodC5oZXgpKX0sWnIoU3IuYXNuMS5ERVJFbnVtZXJhdGVkLFNyLmFzbjEuQVNOMU9iamVjdCksU3IuYXNuMS5ERVJVVEY4U3RyaW5nPWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVSVVRGOFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMGNcIn0sWnIoU3IuYXNuMS5ERVJVVEY4U3RyaW5nLFNyLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpLFNyLmFzbjEuREVSTnVtZXJpY1N0cmluZz1mdW5jdGlvbih0KXtTci5hc24xLkRFUk51bWVyaWNTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsdCksdGhpcy5oVD1cIjEyXCJ9LFpyKFNyLmFzbjEuREVSTnVtZXJpY1N0cmluZyxTci5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxTci5hc24xLkRFUlByaW50YWJsZVN0cmluZz1mdW5jdGlvbih0KXtTci5hc24xLkRFUlByaW50YWJsZVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMTNcIn0sWnIoU3IuYXNuMS5ERVJQcmludGFibGVTdHJpbmcsU3IuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyksU3IuYXNuMS5ERVJUZWxldGV4U3RyaW5nPWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVSVGVsZXRleFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMTRcIn0sWnIoU3IuYXNuMS5ERVJUZWxldGV4U3RyaW5nLFNyLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpLFNyLmFzbjEuREVSSUE1U3RyaW5nPWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVSSUE1U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLHQpLHRoaXMuaFQ9XCIxNlwifSxacihTci5hc24xLkRFUklBNVN0cmluZyxTci5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxTci5hc24xLkRFUlZpc2libGVTdHJpbmc9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJJQTVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsdCksdGhpcy5oVD1cIjFhXCJ9LFpyKFNyLmFzbjEuREVSVmlzaWJsZVN0cmluZyxTci5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxTci5hc24xLkRFUkJNUFN0cmluZz1mdW5jdGlvbih0KXtTci5hc24xLkRFUkJNUFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMWVcIn0sWnIoU3IuYXNuMS5ERVJCTVBTdHJpbmcsU3IuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyksU3IuYXNuMS5ERVJVVENUaW1lPWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVSVVRDVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMTdcIix0aGlzLnNldEJ5RGF0ZT1mdW5jdGlvbih0KXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5kYXRlPXQsdGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJ1dGNcIiksdGhpcy5oVj1rcih0aGlzLnMpfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5kYXRlJiZ2b2lkIDA9PT10aGlzLnMmJih0aGlzLmRhdGU9bmV3IERhdGUsdGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJ1dGNcIiksdGhpcy5oVj1rcih0aGlzLnMpKSx0aGlzLmhWfSx2b2lkIDAhPT10JiYodm9pZCAwIT09dC5zdHI/dGhpcy5zZXRTdHJpbmcodC5zdHIpOlwic3RyaW5nXCI9PXR5cGVvZiB0JiZ0Lm1hdGNoKC9eWzAtOV17MTJ9WiQvKT90aGlzLnNldFN0cmluZyh0KTp2b2lkIDAhPT10LmhleD90aGlzLnNldFN0cmluZ0hleCh0LmhleCk6dm9pZCAwIT09dC5kYXRlJiZ0aGlzLnNldEJ5RGF0ZSh0LmRhdGUpKX0sWnIoU3IuYXNuMS5ERVJVVENUaW1lLFNyLmFzbjEuREVSQWJzdHJhY3RUaW1lKSxTci5hc24xLkRFUkdlbmVyYWxpemVkVGltZT1mdW5jdGlvbih0KXtTci5hc24xLkRFUkdlbmVyYWxpemVkVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMThcIix0aGlzLndpdGhNaWxsaXM9ITEsdGhpcy5zZXRCeURhdGU9ZnVuY3Rpb24odCl7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuZGF0ZT10LHRoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwiZ2VuXCIsdGhpcy53aXRoTWlsbGlzKSx0aGlzLmhWPWtyKHRoaXMucyl9LHRoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLmRhdGUmJnZvaWQgMD09PXRoaXMucyYmKHRoaXMuZGF0ZT1uZXcgRGF0ZSx0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcImdlblwiLHRoaXMud2l0aE1pbGxpcyksdGhpcy5oVj1rcih0aGlzLnMpKSx0aGlzLmhWfSx2b2lkIDAhPT10JiYodm9pZCAwIT09dC5zdHI/dGhpcy5zZXRTdHJpbmcodC5zdHIpOlwic3RyaW5nXCI9PXR5cGVvZiB0JiZ0Lm1hdGNoKC9eWzAtOV17MTR9WiQvKT90aGlzLnNldFN0cmluZyh0KTp2b2lkIDAhPT10LmhleD90aGlzLnNldFN0cmluZ0hleCh0LmhleCk6dm9pZCAwIT09dC5kYXRlJiZ0aGlzLnNldEJ5RGF0ZSh0LmRhdGUpLCEwPT09dC5taWxsaXMmJih0aGlzLndpdGhNaWxsaXM9ITApKX0sWnIoU3IuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUsU3IuYXNuMS5ERVJBYnN0cmFjdFRpbWUpLFNyLmFzbjEuREVSU2VxdWVuY2U9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJTZXF1ZW5jZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyx0KSx0aGlzLmhUPVwiMzBcIix0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9XCJcIixlPTA7ZTx0aGlzLmFzbjFBcnJheS5sZW5ndGg7ZSsrKXt0Kz10aGlzLmFzbjFBcnJheVtlXS5nZXRFbmNvZGVkSGV4KCl9cmV0dXJuIHRoaXMuaFY9dCx0aGlzLmhWfX0sWnIoU3IuYXNuMS5ERVJTZXF1ZW5jZSxTci5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCksU3IuYXNuMS5ERVJTZXQ9ZnVuY3Rpb24odCl7U3IuYXNuMS5ERVJTZXQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsdCksdGhpcy5oVD1cIjMxXCIsdGhpcy5zb3J0RmxhZz0hMCx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEFycmF5LGU9MDtlPHRoaXMuYXNuMUFycmF5Lmxlbmd0aDtlKyspe3ZhciByPXRoaXMuYXNuMUFycmF5W2VdO3QucHVzaChyLmdldEVuY29kZWRIZXgoKSl9cmV0dXJuIDE9PXRoaXMuc29ydEZsYWcmJnQuc29ydCgpLHRoaXMuaFY9dC5qb2luKFwiXCIpLHRoaXMuaFZ9LHZvaWQgMCE9PXQmJnZvaWQgMCE9PXQuc29ydGZsYWcmJjA9PXQuc29ydGZsYWcmJih0aGlzLnNvcnRGbGFnPSExKX0sWnIoU3IuYXNuMS5ERVJTZXQsU3IuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQpLFNyLmFzbjEuREVSVGFnZ2VkT2JqZWN0PWZ1bmN0aW9uKHQpe1NyLmFzbjEuREVSVGFnZ2VkT2JqZWN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZT1Tci5hc24xO3RoaXMuaFQ9XCJhMFwiLHRoaXMuaFY9XCJcIix0aGlzLmlzRXhwbGljaXQ9ITAsdGhpcy5hc24xT2JqZWN0PW51bGwsdGhpcy5zZXRBU04xT2JqZWN0PWZ1bmN0aW9uKHQsZSxyKXt0aGlzLmhUPWUsdGhpcy5pc0V4cGxpY2l0PXQsdGhpcy5hc24xT2JqZWN0PXIsdGhpcy5pc0V4cGxpY2l0Pyh0aGlzLmhWPXRoaXMuYXNuMU9iamVjdC5nZXRFbmNvZGVkSGV4KCksdGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwKToodGhpcy5oVj1udWxsLHRoaXMuaFRMVj1yLmdldEVuY29kZWRIZXgoKSx0aGlzLmhUTFY9dGhpcy5oVExWLnJlcGxhY2UoL14uLi8sZSksdGhpcy5pc01vZGlmaWVkPSExKX0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9LHRoaXMuc2V0QnlQYXJhbT1mdW5jdGlvbih0KXtudWxsIT10LnRhZyYmKHRoaXMuaFQ9dC50YWcpLG51bGwhPXQuZXhwbGljaXQmJih0aGlzLmlzRXhwbGljaXQ9dC5leHBsaWNpdCksbnVsbCE9dC50YWdlJiYodGhpcy5oVD10LnRhZ2UsdGhpcy5pc0V4cGxpY2l0PSEwKSxudWxsIT10LnRhZ2kmJih0aGlzLmhUPXQudGFnaSx0aGlzLmlzRXhwbGljaXQ9ITEpLG51bGwhPXQub2JqJiYodC5vYmogaW5zdGFuY2VvZiBlLkFTTjFPYmplY3Q/KHRoaXMuYXNuMU9iamVjdD10Lm9iaix0aGlzLnNldEFTTjFPYmplY3QodGhpcy5pc0V4cGxpY2l0LHRoaXMuaFQsdGhpcy5hc24xT2JqZWN0KSk6XCJvYmplY3RcIj09Zyh0Lm9iaikmJih0aGlzLmFzbjFPYmplY3Q9ZS5BU04xVXRpbC5uZXdPYmplY3QodC5vYmopLHRoaXMuc2V0QVNOMU9iamVjdCh0aGlzLmlzRXhwbGljaXQsdGhpcy5oVCx0aGlzLmFzbjFPYmplY3QpKSl9LG51bGwhPXQmJnRoaXMuc2V0QnlQYXJhbSh0KX0sWnIoU3IuYXNuMS5ERVJUYWdnZWRPYmplY3QsU3IuYXNuMS5BU04xT2JqZWN0KTt2YXIgU3IsYnIsd3IsRnI9bmV3IGZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBFcih0KXtmb3IodmFyIGU9bmV3IEFycmF5LHI9MDtyPHQubGVuZ3RoO3IrKyllW3JdPXQuY2hhckNvZGVBdChyKTtyZXR1cm4gZX1mdW5jdGlvbiB4cih0KXtmb3IodmFyIGU9XCJcIixyPTA7cjx0Lmxlbmd0aDtyKyspZSs9U3RyaW5nLmZyb21DaGFyQ29kZSh0W3JdKTtyZXR1cm4gZX1mdW5jdGlvbiBBcih0KXtmb3IodmFyIGU9XCJcIixyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl0udG9TdHJpbmcoMTYpOzE9PW4ubGVuZ3RoJiYobj1cIjBcIituKSxlKz1ufXJldHVybiBlfWZ1bmN0aW9uIGtyKHQpe3JldHVybiBBcihFcih0KSl9ZnVuY3Rpb24gUHIodCl7cmV0dXJuIHQ9KHQ9KHQ9dC5yZXBsYWNlKC9cXD0vZyxcIlwiKSkucmVwbGFjZSgvXFwrL2csXCItXCIpKS5yZXBsYWNlKC9cXC8vZyxcIl9cIil9ZnVuY3Rpb24gQ3IodCl7cmV0dXJuIHQubGVuZ3RoJTQ9PTI/dCs9XCI9PVwiOnQubGVuZ3RoJTQ9PTMmJih0Kz1cIj1cIiksdD0odD10LnJlcGxhY2UoLy0vZyxcIitcIikpLnJlcGxhY2UoL18vZyxcIi9cIil9ZnVuY3Rpb24gVHIodCl7cmV0dXJuIHQubGVuZ3RoJTI9PTEmJih0PVwiMFwiK3QpLFByKF8odCkpfWZ1bmN0aW9uIFJyKHQpe3JldHVybiBTKENyKHQpKX1mdW5jdGlvbiBJcih0KXtyZXR1cm4gS3IoR3IodCkpfWZ1bmN0aW9uIERyKHQpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQocXIodCkpfWZ1bmN0aW9uIExyKHQpe2Zvcih2YXIgZT1cIlwiLHI9MDtyPHQubGVuZ3RoLTE7cis9MillKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHQuc3Vic3RyKHIsMiksMTYpKTtyZXR1cm4gZX1mdW5jdGlvbiBOcih0KXtmb3IodmFyIGU9XCJcIixyPTA7cjx0Lmxlbmd0aDtyKyspZSs9KFwiMFwiK3QuY2hhckNvZGVBdChyKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gZX1mdW5jdGlvbiBVcih0KXtyZXR1cm4gXyh0KX1mdW5jdGlvbiBCcih0KXt2YXIgZT1Vcih0KS5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTtyZXR1cm4gZT1lLnJlcGxhY2UoL1xcclxcbiQvLFwiXCIpfWZ1bmN0aW9uIE9yKHQpe3JldHVybiBTKHQucmVwbGFjZSgvW14wLTlBLVphLXpcXC8rPV0qL2csXCJcIikpfWZ1bmN0aW9uIGpyKHQsZSl7cmV0dXJuXCItLS0tLUJFR0lOIFwiK2UrXCItLS0tLVxcclxcblwiK0JyKHQpK1wiXFxyXFxuLS0tLS1FTkQgXCIrZStcIi0tLS0tXFxyXFxuXCJ9ZnVuY3Rpb24gTXIodCxlKXtpZigtMT09dC5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikpdGhyb3dcImNhbid0IGZpbmQgUEVNIGhlYWRlcjogXCIrZTtyZXR1cm4gT3IodD12b2lkIDAhPT1lPyh0PXQucmVwbGFjZShuZXcgUmVnRXhwKFwiXlteXSotLS0tLUJFR0lOIFwiK2UrXCItLS0tLVwiKSxcIlwiKSkucmVwbGFjZShuZXcgUmVnRXhwKFwiLS0tLS1FTkQgXCIrZStcIi0tLS0tW15dKiRcIiksXCJcIik6KHQ9dC5yZXBsYWNlKC9eW15dKi0tLS0tQkVHSU4gW14tXSstLS0tLS8sXCJcIikpLnJlcGxhY2UoLy0tLS0tRU5EIFteLV0rLS0tLS1bXl0qJC8sXCJcIikpfWZ1bmN0aW9uIEhyKHQpe3ZhciBlLHIsbixpLG8scyxhLHUsYyxoLGw7aWYobD10Lm1hdGNoKC9eKFxcZHsyfXxcXGR7NH0pKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKSh8XFwuXFxkKylaJC8pKXJldHVybiB1PWxbMV0sZT1wYXJzZUludCh1KSwyPT09dS5sZW5ndGgmJig1MDw9ZSYmZTwxMDA/ZT0xOTAwK2U6MDw9ZSYmZTw1MCYmKGU9MmUzK2UpKSxyPXBhcnNlSW50KGxbMl0pLTEsbj1wYXJzZUludChsWzNdKSxpPXBhcnNlSW50KGxbNF0pLG89cGFyc2VJbnQobFs1XSkscz1wYXJzZUludChsWzZdKSxhPTAsXCJcIiE9PShjPWxbN10pJiYoaD0oYy5zdWJzdHIoMSkrXCIwMFwiKS5zdWJzdHIoMCwzKSxhPXBhcnNlSW50KGgpKSxEYXRlLlVUQyhlLHIsbixpLG8scyxhKTt0aHJvd1widW5zdXBwb3J0ZWQgenVsdSBmb3JtYXQ6IFwiK3R9ZnVuY3Rpb24gVnIodCl7cmV0dXJufn4oSHIodCkvMWUzKX1mdW5jdGlvbiBLcih0KXtyZXR1cm4gdC5yZXBsYWNlKC8lL2csXCJcIil9ZnVuY3Rpb24gcXIodCl7cmV0dXJuIHQucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpfWZ1bmN0aW9uIEpyKHQpe3ZhciBlPVwibWFsZm9ybWVkIElQdjYgYWRkcmVzc1wiO2lmKCF0Lm1hdGNoKC9eWzAtOUEtRmEtZjpdKyQvKSl0aHJvdyBlO3ZhciByPSh0PXQudG9Mb3dlckNhc2UoKSkuc3BsaXQoXCI6XCIpLmxlbmd0aC0xO2lmKHI8Mil0aHJvdyBlO3ZhciBuPVwiOlwiLnJlcGVhdCg3LXIrMiksaT0odD10LnJlcGxhY2UoXCI6OlwiLG4pKS5zcGxpdChcIjpcIik7aWYoOCE9aS5sZW5ndGgpdGhyb3cgZTtmb3IodmFyIG89MDtvPDg7bysrKWlbb109KFwiMDAwMFwiK2lbb10pLnNsaWNlKC00KTtyZXR1cm4gaS5qb2luKFwiXCIpfWZ1bmN0aW9uIFdyKHQpe2lmKCF0Lm1hdGNoKC9eWzAtOUEtRmEtZl17MzJ9JC8pKXRocm93XCJtYWxmb3JtZWQgSVB2NiBhZGRyZXNzIG9jdGV0XCI7Zm9yKHZhciBlPSh0PXQudG9Mb3dlckNhc2UoKSkubWF0Y2goLy57MSw0fS9nKSxyPTA7cjw4O3IrKyllW3JdPWVbcl0ucmVwbGFjZSgvXjArLyxcIlwiKSxcIlwiPT1lW3JdJiYoZVtyXT1cIjBcIik7dmFyIG49KHQ9XCI6XCIrZS5qb2luKFwiOlwiKStcIjpcIikubWF0Y2goLzooMDopezIsfS9nKTtpZihudWxsPT09bilyZXR1cm4gdC5zbGljZSgxLC0xKTt2YXIgaT1cIlwiO2ZvcihyPTA7cjxuLmxlbmd0aDtyKyspbltyXS5sZW5ndGg+aS5sZW5ndGgmJihpPW5bcl0pO3JldHVybih0PXQucmVwbGFjZShpLFwiOjpcIikpLnNsaWNlKDEsLTEpfWZ1bmN0aW9uIHpyKHQpe3ZhciBlPVwibWFsZm9ybWVkIGhleCB2YWx1ZVwiO2lmKCF0Lm1hdGNoKC9eKFswLTlBLUZhLWZdWzAtOUEtRmEtZl0pezEsfSQvKSl0aHJvdyBlO2lmKDghPXQubGVuZ3RoKXJldHVybiAzMj09dC5sZW5ndGg/V3IodCk6dDt0cnl7cmV0dXJuIHBhcnNlSW50KHQuc3Vic3RyKDAsMiksMTYpK1wiLlwiK3BhcnNlSW50KHQuc3Vic3RyKDIsMiksMTYpK1wiLlwiK3BhcnNlSW50KHQuc3Vic3RyKDQsMiksMTYpK1wiLlwiK3BhcnNlSW50KHQuc3Vic3RyKDYsMiksMTYpfWNhdGNoKHQpe3Rocm93IGV9fWZ1bmN0aW9uIFlyKHQpe3JldHVybiB0Lm1hdGNoKC8uezR9L2cpLm1hcCgoZnVuY3Rpb24gZSh0KXt2YXIgZT1wYXJzZUludCh0LnN1YnN0cigwLDIpLDE2KSxyPXBhcnNlSW50KHQuc3Vic3RyKDIpLDE2KTtpZigwPT1lJnI8MTI4KXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHIpO2lmKGU8OCl7dmFyIG49MTI4fDYzJnI7cmV0dXJuIERyKCgxOTJ8KDcmZSk8PDN8KDE5MiZyKT4+NikudG9TdHJpbmcoMTYpK24udG9TdHJpbmcoMTYpKX1uPTEyOHwoMTUmZSk8PDJ8KDE5MiZyKT4+Njt2YXIgaT0xMjh8NjMmcjtyZXR1cm4gRHIoKDIyNHwoMjQwJmUpPj40KS50b1N0cmluZygxNikrbi50b1N0cmluZygxNikraS50b1N0cmluZygxNikpfSkpLmpvaW4oXCJcIil9ZnVuY3Rpb24gR3IodCl7Zm9yKHZhciBlPWVuY29kZVVSSUNvbXBvbmVudCh0KSxyPVwiXCIsbj0wO248ZS5sZW5ndGg7bisrKVwiJVwiPT1lW25dPyhyKz1lLnN1YnN0cihuLDMpLG4rPTIpOnI9citcIiVcIitrcihlW25dKTtyZXR1cm4gcn1mdW5jdGlvbiBYcih0KXtyZXR1cm4hKHQubGVuZ3RoJTIhPTB8fCF0Lm1hdGNoKC9eWzAtOWEtZl0rJC8pJiYhdC5tYXRjaCgvXlswLTlBLUZdKyQvKSl9ZnVuY3Rpb24gJHIodCl7cmV0dXJuIHQubGVuZ3RoJTI9PTE/XCIwXCIrdDp0LnN1YnN0cigwLDEpPlwiN1wiP1wiMDBcIit0OnR9RnIuZ2V0TGJsZW49ZnVuY3Rpb24odCxlKXtpZihcIjhcIiE9dC5zdWJzdHIoZSsyLDEpKXJldHVybiAxO3ZhciByPXBhcnNlSW50KHQuc3Vic3RyKGUrMywxKSk7cmV0dXJuIDA9PXI/LTE6MDxyJiZyPDEwP3IrMTotMn0sRnIuZ2V0TD1mdW5jdGlvbih0LGUpe3ZhciByPUZyLmdldExibGVuKHQsZSk7cmV0dXJuIHI8MT9cIlwiOnQuc3Vic3RyKGUrMiwyKnIpfSxGci5nZXRWYmxlbj1mdW5jdGlvbih0LGUpe3ZhciByO3JldHVyblwiXCI9PShyPUZyLmdldEwodCxlKSk/LTE6KFwiOFwiPT09ci5zdWJzdHIoMCwxKT9uZXcgdyhyLnN1YnN0cigyKSwxNik6bmV3IHcociwxNikpLmludFZhbHVlKCl9LEZyLmdldFZpZHg9ZnVuY3Rpb24odCxlKXt2YXIgcj1Gci5nZXRMYmxlbih0LGUpO3JldHVybiByPDA/cjplKzIqKHIrMSl9LEZyLmdldFY9ZnVuY3Rpb24odCxlKXt2YXIgcj1Gci5nZXRWaWR4KHQsZSksbj1Gci5nZXRWYmxlbih0LGUpO3JldHVybiB0LnN1YnN0cihyLDIqbil9LEZyLmdldFRMVj1mdW5jdGlvbih0LGUpe3JldHVybiB0LnN1YnN0cihlLDIpK0ZyLmdldEwodCxlKStGci5nZXRWKHQsZSl9LEZyLmdldFRMVmJsZW49ZnVuY3Rpb24odCxlKXtyZXR1cm4gMisyKkZyLmdldExibGVuKHQsZSkrMipGci5nZXRWYmxlbih0LGUpfSxGci5nZXROZXh0U2libGluZ0lkeD1mdW5jdGlvbih0LGUpe3JldHVybiBGci5nZXRWaWR4KHQsZSkrMipGci5nZXRWYmxlbih0LGUpfSxGci5nZXRDaGlsZElkeD1mdW5jdGlvbih0LGUpe3ZhciByLG4saSxvPUZyLHM9W107cj1vLmdldFZpZHgodCxlKSxuPTIqby5nZXRWYmxlbih0LGUpLFwiMDNcIj09dC5zdWJzdHIoZSwyKSYmKHIrPTIsbi09MiksaT0wO2Zvcih2YXIgYT1yO2k8PW47KXt2YXIgdT1vLmdldFRMVmJsZW4odCxhKTtpZigoaSs9dSk8PW4mJnMucHVzaChhKSxhKz11LGk+PW4pYnJlYWt9cmV0dXJuIHN9LEZyLmdldE50aENoaWxkSWR4PWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gRnIuZ2V0Q2hpbGRJZHgodCxlKVtyXX0sRnIuZ2V0SWR4YnlMaXN0PWZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBpLG8scz1GcjtyZXR1cm4gMD09ci5sZW5ndGg/dm9pZCAwIT09biYmdC5zdWJzdHIoZSwyKSE9PW4/LTE6ZTooaT1yLnNoaWZ0KCkpPj0obz1zLmdldENoaWxkSWR4KHQsZSkpLmxlbmd0aD8tMTpzLmdldElkeGJ5TGlzdCh0LG9baV0scixuKX0sRnIuZ2V0SWR4YnlMaXN0RXg9ZnVuY3Rpb24odCxlLHIsbil7dmFyIGksbyxzPUZyO2lmKDA9PXIubGVuZ3RoKXJldHVybiB2b2lkIDAhPT1uJiZ0LnN1YnN0cihlLDIpIT09bj8tMTplO2k9ci5zaGlmdCgpLG89cy5nZXRDaGlsZElkeCh0LGUpO2Zvcih2YXIgYT0wLHU9MDt1PG8ubGVuZ3RoO3UrKyl7dmFyIGM9dC5zdWJzdHIob1t1XSwyKTtpZihcIm51bWJlclwiPT10eXBlb2YgaSYmIXMuaXNDb250ZXh0VGFnKGMpJiZhPT1pfHxcInN0cmluZ1wiPT10eXBlb2YgaSYmcy5pc0NvbnRleHRUYWcoYyxpKSlyZXR1cm4gcy5nZXRJZHhieUxpc3RFeCh0LG9bdV0scixuKTtzLmlzQ29udGV4dFRhZyhjKXx8YSsrfXJldHVybi0xfSxGci5nZXRUTFZieUxpc3Q9ZnVuY3Rpb24odCxlLHIsbil7dmFyIGk9RnIsbz1pLmdldElkeGJ5TGlzdCh0LGUscixuKTtyZXR1cm4tMT09b3x8bz49dC5sZW5ndGg/bnVsbDppLmdldFRMVih0LG8pfSxGci5nZXRUTFZieUxpc3RFeD1mdW5jdGlvbih0LGUscixuKXt2YXIgaT1GcixvPWkuZ2V0SWR4YnlMaXN0RXgodCxlLHIsbik7cmV0dXJuLTE9PW8/bnVsbDppLmdldFRMVih0LG8pfSxGci5nZXRWYnlMaXN0PWZ1bmN0aW9uKHQsZSxyLG4saSl7dmFyIG8scyxhPUZyO3JldHVybi0xPT0obz1hLmdldElkeGJ5TGlzdCh0LGUscixuKSl8fG8+PXQubGVuZ3RoP251bGw6KHM9YS5nZXRWKHQsbyksITA9PT1pJiYocz1zLnN1YnN0cigyKSkscyl9LEZyLmdldFZieUxpc3RFeD1mdW5jdGlvbih0LGUscixuLGkpe3ZhciBvLHMsYT1GcjtyZXR1cm4tMT09KG89YS5nZXRJZHhieUxpc3RFeCh0LGUscixuKSk/bnVsbDoocz1hLmdldFYodCxvKSxcIjAzXCI9PXQuc3Vic3RyKG8sMikmJiExIT09aSYmKHM9cy5zdWJzdHIoMikpLHMpfSxGci5nZXRJbnQ9ZnVuY3Rpb24odCxlLHIpe251bGw9PXImJihyPS0xKTt0cnl7dmFyIG49dC5zdWJzdHIoZSwyKTtpZihcIjAyXCIhPW4mJlwiMDNcIiE9bilyZXR1cm4gcjt2YXIgaT1Gci5nZXRWKHQsZSk7cmV0dXJuXCIwMlwiPT1uP3BhcnNlSW50KGksMTYpOmZ1bmN0aW9uIG8odCl7dHJ5e3ZhciBlPXQuc3Vic3RyKDAsMik7aWYoXCIwMFwiPT1lKXJldHVybiBwYXJzZUludCh0LnN1YnN0cigyKSwxNik7dmFyIHI9cGFyc2VJbnQoZSwxNiksbj10LnN1YnN0cigyKSxpPXBhcnNlSW50KG4sMTYpLnRvU3RyaW5nKDIpO3JldHVyblwiMFwiPT1pJiYoaT1cIjAwMDAwMDAwXCIpLGk9aS5zbGljZSgwLDAtcikscGFyc2VJbnQoaSwyKX1jYXRjaCh0KXtyZXR1cm4tMX19KGkpfWNhdGNoKHQpe3JldHVybiByfX0sRnIuZ2V0T0lEPWZ1bmN0aW9uKHQsZSxyKXtudWxsPT1yJiYocj1udWxsKTt0cnl7cmV0dXJuXCIwNlwiIT10LnN1YnN0cihlLDIpP3I6ZnVuY3Rpb24gbih0KXtpZighWHIodCkpcmV0dXJuIG51bGw7dHJ5e3ZhciBlPVtdLHI9dC5zdWJzdHIoMCwyKSxuPXBhcnNlSW50KHIsMTYpO2VbMF09bmV3IFN0cmluZyhNYXRoLmZsb29yKG4vNDApKSxlWzFdPW5ldyBTdHJpbmcobiU0MCk7Zm9yKHZhciBpPXQuc3Vic3RyKDIpLG89W10scz0wO3M8aS5sZW5ndGgvMjtzKyspby5wdXNoKHBhcnNlSW50KGkuc3Vic3RyKDIqcywyKSwxNikpO3ZhciBhPVtdLHU9XCJcIjtmb3Iocz0wO3M8by5sZW5ndGg7cysrKTEyOCZvW3NdP3UrPVFyKCgxMjcmb1tzXSkudG9TdHJpbmcoMiksNyk6KHUrPVFyKCgxMjcmb1tzXSkudG9TdHJpbmcoMiksNyksYS5wdXNoKG5ldyBTdHJpbmcocGFyc2VJbnQodSwyKSkpLHU9XCJcIik7dmFyIGM9ZS5qb2luKFwiLlwiKTtyZXR1cm4gYS5sZW5ndGg+MCYmKGM9YytcIi5cIithLmpvaW4oXCIuXCIpKSxjfWNhdGNoKHQpe3JldHVybiBudWxsfX0oRnIuZ2V0Vih0LGUpKX1jYXRjaCh0KXtyZXR1cm4gcn19LEZyLmdldE9JRE5hbWU9ZnVuY3Rpb24odCxlLHIpe251bGw9PXImJihyPW51bGwpO3RyeXt2YXIgbj1Gci5nZXRPSUQodCxlLHIpO2lmKG49PXIpcmV0dXJuIHI7dmFyIGk9U3IuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShuKTtyZXR1cm5cIlwiPT1pP246aX1jYXRjaCh0KXtyZXR1cm4gcn19LEZyLmdldFN0cmluZz1mdW5jdGlvbih0LGUscil7bnVsbD09ciYmKHI9bnVsbCk7dHJ5e3JldHVybiBMcihGci5nZXRWKHQsZSkpfWNhdGNoKHQpe3JldHVybiByfX0sRnIuaGV4dG9vaWRzdHI9ZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24gdChlLHIpe3JldHVybiBlLmxlbmd0aD49cj9lOm5ldyBBcnJheShyLWUubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2V9LHI9W10sbj10LnN1YnN0cigwLDIpLGk9cGFyc2VJbnQobiwxNik7clswXT1uZXcgU3RyaW5nKE1hdGguZmxvb3IoaS80MCkpLHJbMV09bmV3IFN0cmluZyhpJTQwKTtmb3IodmFyIG89dC5zdWJzdHIoMikscz1bXSxhPTA7YTxvLmxlbmd0aC8yO2ErKylzLnB1c2gocGFyc2VJbnQoby5zdWJzdHIoMiphLDIpLDE2KSk7dmFyIHU9W10sYz1cIlwiO2ZvcihhPTA7YTxzLmxlbmd0aDthKyspMTI4JnNbYV0/Yys9ZSgoMTI3JnNbYV0pLnRvU3RyaW5nKDIpLDcpOihjKz1lKCgxMjcmc1thXSkudG9TdHJpbmcoMiksNyksdS5wdXNoKG5ldyBTdHJpbmcocGFyc2VJbnQoYywyKSkpLGM9XCJcIik7dmFyIGg9ci5qb2luKFwiLlwiKTtyZXR1cm4gdS5sZW5ndGg+MCYmKGg9aCtcIi5cIit1LmpvaW4oXCIuXCIpKSxofSxGci5kdW1wPWZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBpPUZyLG89aS5nZXRWLHM9aS5kdW1wLGE9aS5nZXRDaGlsZElkeCx1PXQ7dCBpbnN0YW5jZW9mIFNyLmFzbjEuQVNOMU9iamVjdCYmKHU9dC5nZXRFbmNvZGVkSGV4KCkpO3ZhciBjPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gZS5sZW5ndGg8PTIqcj9lOmUuc3Vic3RyKDAscikrXCIuLih0b3RhbCBcIitlLmxlbmd0aC8yK1wiYnl0ZXMpLi5cIitlLnN1YnN0cihlLmxlbmd0aC1yLHIpfTt2b2lkIDA9PT1lJiYoZT17b21taXRfbG9uZ19vY3RldDozMn0pLHZvaWQgMD09PXImJihyPTApLHZvaWQgMD09PW4mJihuPVwiXCIpO3ZhciBoLGw9ZS5vbW1pdF9sb25nX29jdGV0O2lmKFwiMDFcIj09KGg9dS5zdWJzdHIociwyKSkpcmV0dXJuXCIwMFwiPT0oZj1vKHUscikpP24rXCJCT09MRUFOIEZBTFNFXFxuXCI6bitcIkJPT0xFQU4gVFJVRVxcblwiO2lmKFwiMDJcIj09aClyZXR1cm4gbitcIklOVEVHRVIgXCIrYyhmPW8odSxyKSxsKStcIlxcblwiO2lmKFwiMDNcIj09aCl7dmFyIGY9byh1LHIpO2lmKGkuaXNBU04xSEVYKGYuc3Vic3RyKDIpKSl7dmFyIGc9bitcIkJJVFNUUklORywgZW5jYXBzdWxhdGVzXFxuXCI7cmV0dXJuIGcrPXMoZi5zdWJzdHIoMiksZSwwLG4rXCIgIFwiKX1yZXR1cm4gbitcIkJJVFNUUklORyBcIitjKGYsbCkrXCJcXG5cIn1pZihcIjA0XCI9PWgpe2Y9byh1LHIpO2lmKGkuaXNBU04xSEVYKGYpKXtnPW4rXCJPQ1RFVFNUUklORywgZW5jYXBzdWxhdGVzXFxuXCI7cmV0dXJuIGcrPXMoZixlLDAsbitcIiAgXCIpfXJldHVybiBuK1wiT0NURVRTVFJJTkcgXCIrYyhmLGwpK1wiXFxuXCJ9aWYoXCIwNVwiPT1oKXJldHVybiBuK1wiTlVMTFxcblwiO2lmKFwiMDZcIj09aCl7dmFyIGQ9byh1LHIpLHA9U3IuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChkKSx2PVNyLmFzbjEueDUwOS5PSUQub2lkMm5hbWUocCkseT1wLnJlcGxhY2UoL1xcLi9nLFwiIFwiKTtyZXR1cm5cIlwiIT12P24rXCJPYmplY3RJZGVudGlmaWVyIFwiK3YrXCIgKFwiK3krXCIpXFxuXCI6bitcIk9iamVjdElkZW50aWZpZXIgKFwiK3krXCIpXFxuXCJ9aWYoXCIwYVwiPT1oKXJldHVybiBuK1wiRU5VTUVSQVRFRCBcIitwYXJzZUludChvKHUscikpK1wiXFxuXCI7aWYoXCIwY1wiPT1oKXJldHVybiBuK1wiVVRGOFN0cmluZyAnXCIrRHIobyh1LHIpKStcIidcXG5cIjtpZihcIjEzXCI9PWgpcmV0dXJuIG4rXCJQcmludGFibGVTdHJpbmcgJ1wiK0RyKG8odSxyKSkrXCInXFxuXCI7aWYoXCIxNFwiPT1oKXJldHVybiBuK1wiVGVsZXRleFN0cmluZyAnXCIrRHIobyh1LHIpKStcIidcXG5cIjtpZihcIjE2XCI9PWgpcmV0dXJuIG4rXCJJQTVTdHJpbmcgJ1wiK0RyKG8odSxyKSkrXCInXFxuXCI7aWYoXCIxN1wiPT1oKXJldHVybiBuK1wiVVRDVGltZSBcIitEcihvKHUscikpK1wiXFxuXCI7aWYoXCIxOFwiPT1oKXJldHVybiBuK1wiR2VuZXJhbGl6ZWRUaW1lIFwiK0RyKG8odSxyKSkrXCJcXG5cIjtpZihcIjFhXCI9PWgpcmV0dXJuIG4rXCJWaXN1YWxTdHJpbmcgJ1wiK0RyKG8odSxyKSkrXCInXFxuXCI7aWYoXCIxZVwiPT1oKXJldHVybiBuK1wiQk1QU3RyaW5nICdcIitZcihvKHUscikpK1wiJ1xcblwiO2lmKFwiMzBcIj09aCl7aWYoXCIzMDAwXCI9PXUuc3Vic3RyKHIsNCkpcmV0dXJuIG4rXCJTRVFVRU5DRSB7fVxcblwiO2c9bitcIlNFUVVFTkNFXFxuXCI7dmFyIG09ZTtpZigoMj09KGI9YSh1LHIpKS5sZW5ndGh8fDM9PWIubGVuZ3RoKSYmXCIwNlwiPT11LnN1YnN0cihiWzBdLDIpJiZcIjA0XCI9PXUuc3Vic3RyKGJbYi5sZW5ndGgtMV0sMikpe3Y9aS5vaWRuYW1lKG8odSxiWzBdKSk7dmFyIF89SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlKSk7Xy54NTA5RXh0TmFtZT12LG09X31mb3IodmFyIFM9MDtTPGIubGVuZ3RoO1MrKylnKz1zKHUsbSxiW1NdLG4rXCIgIFwiKTtyZXR1cm4gZ31pZihcIjMxXCI9PWgpe2c9bitcIlNFVFxcblwiO3ZhciBiPWEodSxyKTtmb3IoUz0wO1M8Yi5sZW5ndGg7UysrKWcrPXModSxlLGJbU10sbitcIiAgXCIpO3JldHVybiBnfWlmKDAhPSgxMjgmKGg9cGFyc2VJbnQoaCwxNikpKSl7dmFyIHc9MzEmaDtpZigwIT0oMzImaCkpe2ZvcihnPW4rXCJbXCIrdytcIl1cXG5cIixiPWEodSxyKSxTPTA7UzxiLmxlbmd0aDtTKyspZys9cyh1LGUsYltTXSxuK1wiICBcIik7cmV0dXJuIGd9Zj1vKHUscik7aWYoRnIuaXNBU04xSEVYKGYpKXt2YXIgZz1uK1wiW1wiK3crXCJdXFxuXCI7cmV0dXJuIGcrPXMoZixlLDAsbitcIiAgXCIpfXJldHVybihcIjY4NzQ3NDcwXCI9PWYuc3Vic3RyKDAsOCl8fFwic3ViamVjdEFsdE5hbWVcIj09PWUueDUwOUV4dE5hbWUmJjI9PXcpJiYoZj1EcihmKSksZz1uK1wiW1wiK3crXCJdIFwiK2YrXCJcXG5cIn1yZXR1cm4gbitcIlVOS05PV04oXCIraCtcIikgXCIrbyh1LHIpK1wiXFxuXCJ9LEZyLmlzQ29udGV4dFRhZz1mdW5jdGlvbih0LGUpe3ZhciByLG47dD10LnRvTG93ZXJDYXNlKCk7dHJ5e3I9cGFyc2VJbnQodCwxNil9Y2F0Y2godCl7cmV0dXJuLTF9aWYodm9pZCAwPT09ZSlyZXR1cm4gMTI4PT0oMTkyJnIpO3RyeXtyZXR1cm4gbnVsbCE9ZS5tYXRjaCgvXlxcW1swLTldK1xcXSQvKSYmKCEoKG49cGFyc2VJbnQoZS5zdWJzdHIoMSxlLmxlbmd0aC0xKSwxMCkpPjMxKSYmKDEyOD09KDE5MiZyKSYmKDMxJnIpPT1uKSl9Y2F0Y2godCl7cmV0dXJuITF9fSxGci5pc0FTTjFIRVg9ZnVuY3Rpb24odCl7dmFyIGU9RnI7aWYodC5sZW5ndGglMj09MSlyZXR1cm4hMTt2YXIgcj1lLmdldFZibGVuKHQsMCksbj10LnN1YnN0cigwLDIpLGk9ZS5nZXRMKHQsMCk7cmV0dXJuIHQubGVuZ3RoLW4ubGVuZ3RoLWkubGVuZ3RoPT0yKnJ9LEZyLmNoZWNrU3RyaWN0REVSPWZ1bmN0aW9uKHQsZSxyLG4saSl7dmFyIG89RnI7aWYodm9pZCAwPT09cil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwibm90IGhleCBzdHJpbmdcIik7aWYodD10LnRvTG93ZXJDYXNlKCksIVNyLmxhbmcuU3RyaW5nLmlzSGV4KHQpKXRocm93IG5ldyBFcnJvcihcIm5vdCBoZXggc3RyaW5nXCIpO3I9dC5sZW5ndGgsaT0obj10Lmxlbmd0aC8yKTwxMjg/MTpNYXRoLmNlaWwobi50b1N0cmluZygxNikpKzF9aWYoby5nZXRMKHQsZSkubGVuZ3RoPjIqaSl0aHJvdyBuZXcgRXJyb3IoXCJMIG9mIFRMViB0b28gbG9uZzogaWR4PVwiK2UpO3ZhciBzPW8uZ2V0VmJsZW4odCxlKTtpZihzPm4pdGhyb3cgbmV3IEVycm9yKFwidmFsdWUgb2YgTCB0b28gbG9uZyB0aGFuIGhleDogaWR4PVwiK2UpO3ZhciBhPW8uZ2V0VExWKHQsZSksdT1hLmxlbmd0aC0yLW8uZ2V0TCh0LGUpLmxlbmd0aDtpZih1IT09MipzKXRocm93IG5ldyBFcnJvcihcIlYgc3RyaW5nIGxlbmd0aCBhbmQgTCdzIHZhbHVlIG5vdCB0aGUgc2FtZTpcIit1K1wiL1wiKzIqcyk7aWYoMD09PWUmJnQubGVuZ3RoIT1hLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0b3RhbCBsZW5ndGggYW5kIFRMViBsZW5ndGggdW5tYXRjaDpcIit0Lmxlbmd0aCtcIiE9XCIrYS5sZW5ndGgpO3ZhciBjPXQuc3Vic3RyKGUsMik7aWYoXCIwMlwiPT09Yyl7dmFyIGg9by5nZXRWaWR4KHQsZSk7aWYoXCIwMFwiPT10LnN1YnN0cihoLDIpJiZ0LmNoYXJDb2RlQXQoaCsyKTw1Nil0aHJvdyBuZXcgRXJyb3IoXCJub3QgbGVhc3QgemVyb3MgZm9yIERFUiBJTlRFR0VSXCIpfWlmKDMyJnBhcnNlSW50KGMsMTYpKXtmb3IodmFyIGw9by5nZXRWYmxlbih0LGUpLGY9MCxnPW8uZ2V0Q2hpbGRJZHgodCxlKSxkPTA7ZDxnLmxlbmd0aDtkKyspe2YrPW8uZ2V0VExWKHQsZ1tkXSkubGVuZ3RoLG8uY2hlY2tTdHJpY3RERVIodCxnW2RdLHIsbixpKX1pZigyKmwhPWYpdGhyb3cgbmV3IEVycm9yKFwic3VtIG9mIGNoaWxkcmVuJ3MgVExWIGxlbmd0aCBhbmQgTCB1bm1hdGNoOiBcIisyKmwrXCIhPVwiK2YpfX0sRnIub2lkbmFtZT1mdW5jdGlvbih0KXt2YXIgZT1Tci5hc24xO1NyLmxhbmcuU3RyaW5nLmlzSGV4KHQpJiYodD1lLkFTTjFVdGlsLm9pZEhleFRvSW50KHQpKTt2YXIgcj1lLng1MDkuT0lELm9pZDJuYW1lKHQpO3JldHVyblwiXCI9PT1yJiYocj10KSxyfSx2b2lkIDAhPT1TciYmU3J8fChlLktKVVI9U3I9e30pLHZvaWQgMCE9PVNyLmxhbmcmJlNyLmxhbmd8fChTci5sYW5nPXt9KSxTci5sYW5nLlN0cmluZz1mdW5jdGlvbigpe30sXCJmdW5jdGlvblwiPT10eXBlb2YgdD8oZS51dGY4dG9iNjR1PWJyPWZ1bmN0aW9uIGUocil7cmV0dXJuIFByKHQuZnJvbShyLFwidXRmOFwiKS50b1N0cmluZyhcImJhc2U2NFwiKSl9LGUuYjY0dXRvdXRmOD13cj1mdW5jdGlvbiBlKHIpe3JldHVybiB0LmZyb20oQ3IociksXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpfSk6KGUudXRmOHRvYjY0dT1icj1mdW5jdGlvbiB0KGUpe3JldHVybiBUcihLcihHcihlKSkpfSxlLmI2NHV0b3V0Zjg9d3I9ZnVuY3Rpb24gdChlKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHFyKFJyKGUpKSl9KSxTci5sYW5nLlN0cmluZy5pc0ludGVnZXI9ZnVuY3Rpb24odCl7cmV0dXJuISF0Lm1hdGNoKC9eWzAtOV0rJC8pfHwhIXQubWF0Y2goL14tWzAtOV0rJC8pfSxTci5sYW5nLlN0cmluZy5pc0hleD1mdW5jdGlvbih0KXtyZXR1cm4gWHIodCl9LFNyLmxhbmcuU3RyaW5nLmlzQmFzZTY0PWZ1bmN0aW9uKHQpe3JldHVybiEoISh0PXQucmVwbGFjZSgvXFxzKy9nLFwiXCIpKS5tYXRjaCgvXlswLTlBLVphLXorXFwvXSs9ezAsM30kLyl8fHQubGVuZ3RoJTQhPTApfSxTci5sYW5nLlN0cmluZy5pc0Jhc2U2NFVSTD1mdW5jdGlvbih0KXtyZXR1cm4hdC5tYXRjaCgvWysvPV0vKSYmKHQ9Q3IodCksU3IubGFuZy5TdHJpbmcuaXNCYXNlNjQodCkpfSxTci5sYW5nLlN0cmluZy5pc0ludGVnZXJBcnJheT1mdW5jdGlvbih0KXtyZXR1cm4hISh0PXQucmVwbGFjZSgvXFxzKy9nLFwiXCIpKS5tYXRjaCgvXlxcW1swLTksXStcXF0kLyl9LFNyLmxhbmcuU3RyaW5nLmlzUHJpbnRhYmxlPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dC5tYXRjaCgvXlswLTlBLVphLXogJygpKywtLi86PT9dKiQvKX0sU3IubGFuZy5TdHJpbmcuaXNJQTU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPT10Lm1hdGNoKC9eW1xceDIwLVxceDIxXFx4MjMtXFx4N2ZdKiQvKX0sU3IubGFuZy5TdHJpbmcuaXNNYWlsPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dC5tYXRjaCgvXltBLVphLXowLTldezF9W0EtWmEtejAtOV8uLV0qQHsxfVtBLVphLXowLTlfLi1dezEsfVxcLltBLVphLXowLTldezEsfSQvKX07dmFyIFFyPWZ1bmN0aW9uIHQoZSxyLG4pe3JldHVybiBudWxsPT1uJiYobj1cIjBcIiksZS5sZW5ndGg+PXI/ZTpuZXcgQXJyYXkoci1lLmxlbmd0aCsxKS5qb2luKG4pK2V9O2Z1bmN0aW9uIFpyKHQsZSl7dmFyIHI9ZnVuY3Rpb24gdCgpe307ci5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdC5wcm90b3R5cGU9bmV3IHIsdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dCx0LnN1cGVyY2xhc3M9ZS5wcm90b3R5cGUsZS5wcm90b3R5cGUuY29uc3RydWN0b3I9PU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3ImJihlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lKX12b2lkIDAhPT1TciYmU3J8fChlLktKVVI9U3I9e30pLHZvaWQgMCE9PVNyLmNyeXB0byYmU3IuY3J5cHRvfHwoU3IuY3J5cHRvPXt9KSxTci5jcnlwdG8uVXRpbD1uZXcgZnVuY3Rpb24oKXt0aGlzLkRJR0VTVElORk9IRUFEPXtzaGExOlwiMzAyMTMwMDkwNjA1MmIwZTAzMDIxYTA1MDAwNDE0XCIsc2hhMjI0OlwiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWNcIixzaGEyNTY6XCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiLHNoYTM4NDpcIjMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwXCIsc2hhNTEyOlwiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDBcIixtZDI6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjAyMDUwMDA0MTBcIixtZDU6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTBcIixyaXBlbWQxNjA6XCIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTRcIn0sdGhpcy5ERUZBVUxUUFJPVklERVI9e21kNTpcImNyeXB0b2pzXCIsc2hhMTpcImNyeXB0b2pzXCIsc2hhMjI0OlwiY3J5cHRvanNcIixzaGEyNTY6XCJjcnlwdG9qc1wiLHNoYTM4NDpcImNyeXB0b2pzXCIsc2hhNTEyOlwiY3J5cHRvanNcIixyaXBlbWQxNjA6XCJjcnlwdG9qc1wiLGhtYWNtZDU6XCJjcnlwdG9qc1wiLGhtYWNzaGExOlwiY3J5cHRvanNcIixobWFjc2hhMjI0OlwiY3J5cHRvanNcIixobWFjc2hhMjU2OlwiY3J5cHRvanNcIixobWFjc2hhMzg0OlwiY3J5cHRvanNcIixobWFjc2hhNTEyOlwiY3J5cHRvanNcIixobWFjcmlwZW1kMTYwOlwiY3J5cHRvanNcIixNRDV3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEExd2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMzg0d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsTUQ1d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEExd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMzg0d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLE1ENXdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEF3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwifSx0aGlzLkNSWVBUT0pTTUVTU0FHRURJR0VTVE5BTUU9e21kNTp2LmFsZ28uTUQ1LHNoYTE6di5hbGdvLlNIQTEsc2hhMjI0OnYuYWxnby5TSEEyMjQsc2hhMjU2OnYuYWxnby5TSEEyNTYsc2hhMzg0OnYuYWxnby5TSEEzODQsc2hhNTEyOnYuYWxnby5TSEE1MTIscmlwZW1kMTYwOnYuYWxnby5SSVBFTUQxNjB9LHRoaXMuZ2V0RGlnZXN0SW5mb0hleD1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXRoaXMuRElHRVNUSU5GT0hFQURbZV0pdGhyb3dcImFsZyBub3Qgc3VwcG9ydGVkIGluIFV0aWwuRElHRVNUSU5GT0hFQUQ6IFwiK2U7cmV0dXJuIHRoaXMuRElHRVNUSU5GT0hFQURbZV0rdH0sdGhpcy5nZXRQYWRkZWREaWdlc3RJbmZvSGV4PWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10aGlzLmdldERpZ2VzdEluZm9IZXgodCxlKSxpPXIvNDtpZihuLmxlbmd0aCsyMj5pKXRocm93XCJrZXkgaXMgdG9vIHNob3J0IGZvciBTaWdBbGc6IGtleWxlbj1cIityK1wiLFwiK2U7Zm9yKHZhciBvPVwiMDAwMVwiLHM9XCIwMFwiK24sYT1cIlwiLHU9aS1vLmxlbmd0aC1zLmxlbmd0aCxjPTA7Yzx1O2MrPTIpYSs9XCJmZlwiO3JldHVybiBvK2Erc30sdGhpcy5oYXNoU3RyaW5nPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBTci5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOmV9KS5kaWdlc3RTdHJpbmcodCl9LHRoaXMuaGFzaEhleD1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgU3IuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzplfSkuZGlnZXN0SGV4KHQpfSx0aGlzLnNoYTE9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaGFzaFN0cmluZyh0LFwic2hhMVwiKX0sdGhpcy5zaGEyNTY9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaGFzaFN0cmluZyh0LFwic2hhMjU2XCIpfSx0aGlzLnNoYTI1NkhleD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5oYXNoSGV4KHQsXCJzaGEyNTZcIil9LHRoaXMuc2hhNTEyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmhhc2hTdHJpbmcodCxcInNoYTUxMlwiKX0sdGhpcy5zaGE1MTJIZXg9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaGFzaEhleCh0LFwic2hhNTEyXCIpfSx0aGlzLmlzS2V5PWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgTWV8fHQgaW5zdGFuY2VvZiBTci5jcnlwdG8uRFNBfHx0IGluc3RhbmNlb2YgU3IuY3J5cHRvLkVDRFNBfX0sU3IuY3J5cHRvLlV0aWwubWQ1PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgU3IuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcIm1kNVwiLHByb3Y6XCJjcnlwdG9qc1wifSkuZGlnZXN0U3RyaW5nKHQpfSxTci5jcnlwdG8uVXRpbC5yaXBlbWQxNjA9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBTci5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwicmlwZW1kMTYwXCIscHJvdjpcImNyeXB0b2pzXCJ9KS5kaWdlc3RTdHJpbmcodCl9LFNyLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTj1uZXcgQmUsU3IuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tSGV4T2ZOYnl0ZXM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KHQpO3JldHVybiBTci5jcnlwdG8uVXRpbC5TRUNVUkVSQU5ET01HRU4ubmV4dEJ5dGVzKGUpLEFyKGUpfSxTci5jcnlwdG8uVXRpbC5nZXRSYW5kb21CaWdJbnRlZ2VyT2ZOYnl0ZXM9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB3KFNyLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJ5dGVzKHQpLDE2KX0sU3IuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tSGV4T2ZOYml0cz1mdW5jdGlvbih0KXt2YXIgZT10JTgscj1uZXcgQXJyYXkoKHQtZSkvOCsxKTtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuU0VDVVJFUkFORE9NR0VOLm5leHRCeXRlcyhyKSxyWzBdPSgyNTU8PGUmMjU1XjI1NSkmclswXSxBcihyKX0sU3IuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJpdHM9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB3KFNyLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJpdHModCksMTYpfSxTci5jcnlwdG8uVXRpbC5nZXRSYW5kb21CaWdJbnRlZ2VyWmVyb1RvTWF4PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10LmJpdExlbmd0aCgpOzspe3ZhciByPVNyLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzKGUpO2lmKC0xIT10LmNvbXBhcmVUbyhyKSlyZXR1cm4gcn19LFNyLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJNaW5Ub01heD1mdW5jdGlvbih0LGUpe3ZhciByPXQuY29tcGFyZVRvKGUpO2lmKDE9PXIpdGhyb3dcImJpTWluIGlzIGdyZWF0ZXIgdGhhbiBiaU1heFwiO2lmKDA9PXIpcmV0dXJuIHQ7dmFyIG49ZS5zdWJ0cmFjdCh0KTtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heChuKS5hZGQodCl9LFNyLmNyeXB0by5NZXNzYWdlRGlnZXN0PWZ1bmN0aW9uKHQpe3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24odCxlKXtpZihudWxsIT09KHQ9U3IuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0Q2Fub25pY2FsQWxnTmFtZSh0KSkmJnZvaWQgMD09PWUmJihlPVNyLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0XSksLTEhPVwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZih0KSYmXCJjcnlwdG9qc1wiPT1lKXt0cnl7dGhpcy5tZD1Tci5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW3RdLmNyZWF0ZSgpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrdCtcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHQpe3RoaXMubWQudXBkYXRlKHQpfSx0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbih0KXt2YXIgZT12LmVuYy5IZXgucGFyc2UodCk7dGhpcy5tZC51cGRhdGUoZSl9LHRoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWQuZmluYWxpemUoKS50b1N0cmluZyh2LmVuYy5IZXgpfSx0aGlzLmRpZ2VzdFN0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy51cGRhdGVTdHJpbmcodCksdGhpcy5kaWdlc3QoKX0sdGhpcy5kaWdlc3RIZXg9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudXBkYXRlSGV4KHQpLHRoaXMuZGlnZXN0KCl9fWlmKC0xIT1cIjpzaGEyNTY6XCIuaW5kZXhPZih0KSYmXCJzamNsXCI9PWUpe3RyeXt0aGlzLm1kPW5ldyBzamNsLmhhc2guc2hhMjU2fWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrdCtcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHQpe3RoaXMubWQudXBkYXRlKHQpfSx0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbih0KXt2YXIgZT1zamNsLmNvZGVjLmhleC50b0JpdHModCk7dGhpcy5tZC51cGRhdGUoZSl9LHRoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5tZC5maW5hbGl6ZSgpO3JldHVybiBzamNsLmNvZGVjLmhleC5mcm9tQml0cyh0KX0sdGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudXBkYXRlU3RyaW5nKHQpLHRoaXMuZGlnZXN0KCl9LHRoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZUhleCh0KSx0aGlzLmRpZ2VzdCgpfX19LHRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHQpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX0sdGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24odCl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfSx0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX0sdGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24odCl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfSx0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbih0KXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9LHZvaWQgMCE9PXQmJnZvaWQgMCE9PXQuYWxnJiYodGhpcy5hbGdOYW1lPXQuYWxnLHZvaWQgMD09PXQucHJvdiYmKHRoaXMucHJvdk5hbWU9U3IuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV0pLHRoaXMuc2V0QWxnQW5kUHJvdmlkZXIodGhpcy5hbGdOYW1lLHRoaXMucHJvdk5hbWUpKX0sU3IuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0Q2Fub25pY2FsQWxnTmFtZT1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9KHQ9dC50b0xvd2VyQ2FzZSgpKS5yZXBsYWNlKC8tLyxcIlwiKSksdH0sU3IuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0SGFzaExlbmd0aD1mdW5jdGlvbih0KXt2YXIgZT1Tci5jcnlwdG8uTWVzc2FnZURpZ2VzdCxyPWUuZ2V0Q2Fub25pY2FsQWxnTmFtZSh0KTtpZih2b2lkIDA9PT1lLkhBU0hMRU5HVEhbcl0pdGhyb3dcIm5vdCBzdXBwb3J0ZWQgYWxnb3JpdGhtOiBcIit0O3JldHVybiBlLkhBU0hMRU5HVEhbcl19LFNyLmNyeXB0by5NZXNzYWdlRGlnZXN0LkhBU0hMRU5HVEg9e21kNToxNixzaGExOjIwLHNoYTIyNDoyOCxzaGEyNTY6MzIsc2hhMzg0OjQ4LHNoYTUxMjo2NCxyaXBlbWQxNjA6MjB9LFNyLmNyeXB0by5NYWM9ZnVuY3Rpb24odCl7dGhpcy5zZXRBbGdBbmRQcm92aWRlcj1mdW5jdGlvbih0LGUpe2lmKG51bGw9PSh0PXQudG9Mb3dlckNhc2UoKSkmJih0PVwiaG1hY3NoYTFcIiksXCJobWFjXCIhPSh0PXQudG9Mb3dlckNhc2UoKSkuc3Vic3RyKDAsNCkpdGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIHVuc3VwcG9ydGVkIEhNQUMgYWxnOiBcIit0O3ZvaWQgMD09PWUmJihlPVNyLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0XSksdGhpcy5hbGdQcm92PXQrXCIvXCIrZTt2YXIgcj10LnN1YnN0cig0KTtpZigtMSE9XCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKHIpJiZcImNyeXB0b2pzXCI9PWUpe3RyeXt2YXIgbj1Tci5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW3JdO3RoaXMubWFjPXYuYWxnby5ITUFDLmNyZWF0ZShuLHRoaXMucGFzcyl9Y2F0Y2godCl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGhhc2hBbGc9XCIrcitcIi9cIit0fXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHQpe3RoaXMubWFjLnVwZGF0ZSh0KX0sdGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24odCl7dmFyIGU9di5lbmMuSGV4LnBhcnNlKHQpO3RoaXMubWFjLnVwZGF0ZShlKX0sdGhpcy5kb0ZpbmFsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFjLmZpbmFsaXplKCkudG9TdHJpbmcodi5lbmMuSGV4KX0sdGhpcy5kb0ZpbmFsU3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZVN0cmluZyh0KSx0aGlzLmRvRmluYWwoKX0sdGhpcy5kb0ZpbmFsSGV4PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZUhleCh0KSx0aGlzLmRvRmluYWwoKX19fSx0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbih0KXt0aHJvd1widXBkYXRlU3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fSx0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbih0KXt0aHJvd1widXBkYXRlSGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fSx0aGlzLmRvRmluYWw9ZnVuY3Rpb24oKXt0aHJvd1wiZGlnZXN0KCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fSx0aGlzLmRvRmluYWxTdHJpbmc9ZnVuY3Rpb24odCl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn0sdGhpcy5kb0ZpbmFsSGV4PWZ1bmN0aW9uKHQpe3Rocm93XCJkaWdlc3RIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9LHRoaXMuc2V0UGFzc3dvcmQ9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe3ZhciBlPXQ7cmV0dXJuIHQubGVuZ3RoJTIhPTEmJnQubWF0Y2goL15bMC05QS1GYS1mXSskLyl8fChlPU5yKHQpKSx2b2lkKHRoaXMucGFzcz12LmVuYy5IZXgucGFyc2UoZSkpfWlmKFwib2JqZWN0XCIhPSh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6Zyh0KSkpdGhyb3dcIktKVVIuY3J5cHRvLk1hYyB1bnN1cHBvcnRlZCBwYXNzd29yZCB0eXBlOiBcIit0O2U9bnVsbDtpZih2b2lkIDAhPT10LmhleCl7aWYodC5oZXgubGVuZ3RoJTIhPTB8fCF0LmhleC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl0aHJvd1wiTWFjOiB3cm9uZyBoZXggcGFzc3dvcmQ6IFwiK3QuaGV4O2U9dC5oZXh9aWYodm9pZCAwIT09dC51dGY4JiYoZT1Jcih0LnV0ZjgpKSx2b2lkIDAhPT10LnJzdHImJihlPU5yKHQucnN0cikpLHZvaWQgMCE9PXQuYjY0JiYoZT1TKHQuYjY0KSksdm9pZCAwIT09dC5iNjR1JiYoZT1Scih0LmI2NHUpKSxudWxsPT1lKXRocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIrdDt0aGlzLnBhc3M9di5lbmMuSGV4LnBhcnNlKGUpfSx2b2lkIDAhPT10JiYodm9pZCAwIT09dC5wYXNzJiZ0aGlzLnNldFBhc3N3b3JkKHQucGFzcyksdm9pZCAwIT09dC5hbGcmJih0aGlzLmFsZ05hbWU9dC5hbGcsdm9pZCAwPT09dC5wcm92JiYodGhpcy5wcm92TmFtZT1Tci5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXSksdGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSkpKX0sU3IuY3J5cHRvLlNpZ25hdHVyZT1mdW5jdGlvbih0KXt2YXIgZT1udWxsO2lmKHRoaXMuX3NldEFsZ05hbWVzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5hbGdOYW1lLm1hdGNoKC9eKC4rKXdpdGgoLispJC8pO3QmJih0aGlzLm1kQWxnTmFtZT10WzFdLnRvTG93ZXJDYXNlKCksdGhpcy5wdWJrZXlBbGdOYW1lPXRbMl0udG9Mb3dlckNhc2UoKSxcInJzYWFuZG1nZjFcIj09dGhpcy5wdWJrZXlBbGdOYW1lJiZcInNoYVwiPT10aGlzLm1kQWxnTmFtZSYmKHRoaXMubWRBbGdOYW1lPVwic2hhMVwiKSl9LHRoaXMuX3plcm9QYWRkaW5nT2ZTaWduYXR1cmU9ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI9XCJcIixuPWUvNC10Lmxlbmd0aCxpPTA7aTxuO2krKylyKz1cIjBcIjtyZXR1cm4gcit0fSx0aGlzLnNldEFsZ0FuZFByb3ZpZGVyPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fc2V0QWxnTmFtZXMoKSxcImNyeXB0b2pzL2pzcnNhXCIhPWUpdGhyb3cgbmV3IEVycm9yKFwicHJvdmlkZXIgbm90IHN1cHBvcnRlZDogXCIrZSk7aWYoLTEhPVwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZih0aGlzLm1kQWxnTmFtZSkpe3RyeXt0aGlzLm1kPW5ldyBTci5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOnRoaXMubWRBbGdOYW1lfSl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwic2V0QWxnQW5kUHJvdmlkZXIgaGFzaCBhbGcgc2V0IGZhaWwgYWxnPVwiK3RoaXMubWRBbGdOYW1lK1wiL1wiK3QpfXRoaXMuaW5pdD1mdW5jdGlvbih0LGUpe3ZhciByPW51bGw7dHJ5e3I9dm9pZCAwPT09ZT90bi5nZXRLZXkodCk6dG4uZ2V0S2V5KHQsZSl9Y2F0Y2godCl7dGhyb3dcImluaXQgZmFpbGVkOlwiK3R9aWYoITA9PT1yLmlzUHJpdmF0ZSl0aGlzLnBydktleT1yLHRoaXMuc3RhdGU9XCJTSUdOXCI7ZWxzZXtpZighMCE9PXIuaXNQdWJsaWMpdGhyb3dcImluaXQgZmFpbGVkLjpcIityO3RoaXMucHViS2V5PXIsdGhpcy5zdGF0ZT1cIlZFUklGWVwifX0sdGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24odCl7dGhpcy5tZC51cGRhdGVTdHJpbmcodCl9LHRoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHQpe3RoaXMubWQudXBkYXRlSGV4KHQpfSx0aGlzLnNpZ249ZnVuY3Rpb24oKXtpZih0aGlzLnNIYXNoSGV4PXRoaXMubWQuZGlnZXN0KCksdm9pZCAwPT09dGhpcy5wcnZLZXkmJnZvaWQgMCE9PXRoaXMuZWNwcnZoZXgmJnZvaWQgMCE9PXRoaXMuZWNjdXJ2ZW5hbWUmJnZvaWQgMCE9PVNyLmNyeXB0by5FQ0RTQSYmKHRoaXMucHJ2S2V5PW5ldyBTci5jcnlwdG8uRUNEU0Eoe2N1cnZlOnRoaXMuZWNjdXJ2ZW5hbWUscHJ2OnRoaXMuZWNwcnZoZXh9KSksdGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBNZSYmXCJyc2FhbmRtZ2YxXCI9PT10aGlzLnB1YmtleUFsZ05hbWUpdGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoUFNTKHRoaXMuc0hhc2hIZXgsdGhpcy5tZEFsZ05hbWUsdGhpcy5wc3NTYWx0TGVuKTtlbHNlIGlmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgTWUmJlwicnNhXCI9PT10aGlzLnB1YmtleUFsZ05hbWUpdGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdGhpcy5tZEFsZ05hbWUpO2Vsc2UgaWYodGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBTci5jcnlwdG8uRUNEU0EpdGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgpO2Vsc2V7aWYoISh0aGlzLnBydktleSBpbnN0YW5jZW9mIFNyLmNyeXB0by5EU0EpKXRocm93XCJTaWduYXR1cmU6IHVuc3VwcG9ydGVkIHByaXZhdGUga2V5IGFsZzogXCIrdGhpcy5wdWJrZXlBbGdOYW1lO3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4KX1yZXR1cm4gdGhpcy5oU2lnbn0sdGhpcy5zaWduU3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZVN0cmluZyh0KSx0aGlzLnNpZ24oKX0sdGhpcy5zaWduSGV4PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZUhleCh0KSx0aGlzLnNpZ24oKX0sdGhpcy52ZXJpZnk9ZnVuY3Rpb24odCl7aWYodGhpcy5zSGFzaEhleD10aGlzLm1kLmRpZ2VzdCgpLHZvaWQgMD09PXRoaXMucHViS2V5JiZ2b2lkIDAhPT10aGlzLmVjcHViaGV4JiZ2b2lkIDAhPT10aGlzLmVjY3VydmVuYW1lJiZ2b2lkIDAhPT1Tci5jcnlwdG8uRUNEU0EmJih0aGlzLnB1YktleT1uZXcgU3IuY3J5cHRvLkVDRFNBKHtjdXJ2ZTp0aGlzLmVjY3VydmVuYW1lLHB1Yjp0aGlzLmVjcHViaGV4fSkpLHRoaXMucHViS2V5IGluc3RhbmNlb2YgTWUmJlwicnNhYW5kbWdmMVwiPT09dGhpcy5wdWJrZXlBbGdOYW1lKXJldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1ModGhpcy5zSGFzaEhleCx0LHRoaXMubWRBbGdOYW1lLHRoaXMucHNzU2FsdExlbik7aWYodGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBNZSYmXCJyc2FcIj09PXRoaXMucHVia2V5QWxnTmFtZSlyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdCk7aWYodm9pZCAwIT09U3IuY3J5cHRvLkVDRFNBJiZ0aGlzLnB1YktleSBpbnN0YW5jZW9mIFNyLmNyeXB0by5FQ0RTQSlyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdCk7aWYodm9pZCAwIT09U3IuY3J5cHRvLkRTQSYmdGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBTci5jcnlwdG8uRFNBKXJldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx0KTt0aHJvd1wiU2lnbmF0dXJlOiB1bnN1cHBvcnRlZCBwdWJsaWMga2V5IGFsZzogXCIrdGhpcy5wdWJrZXlBbGdOYW1lfX19LHRoaXMuaW5pdD1mdW5jdGlvbih0LGUpe3Rocm93XCJpbml0KGtleSwgcGFzcykgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfSx0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbih0KXt0aHJvd1widXBkYXRlU3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfSx0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbih0KXt0aHJvd1widXBkYXRlSGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfSx0aGlzLnNpZ249ZnVuY3Rpb24oKXt0aHJvd1wic2lnbigpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX0sdGhpcy5zaWduU3RyaW5nPWZ1bmN0aW9uKHQpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9LHRoaXMuc2lnbkhleD1mdW5jdGlvbih0KXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfSx0aGlzLnZlcmlmeT1mdW5jdGlvbih0KXt0aHJvd1widmVyaWZ5KGhTaWdWYWwpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX0sdGhpcy5pbml0UGFyYW1zPXQsdm9pZCAwIT09dCYmKHZvaWQgMCE9PXQuYWxnJiYodGhpcy5hbGdOYW1lPXQuYWxnLHZvaWQgMD09PXQucHJvdj90aGlzLnByb3ZOYW1lPVNyLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0aGlzLmFsZ05hbWVdOnRoaXMucHJvdk5hbWU9dC5wcm92LHRoaXMuYWxnUHJvdk5hbWU9dGhpcy5hbGdOYW1lK1wiOlwiK3RoaXMucHJvdk5hbWUsdGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSksdGhpcy5fc2V0QWxnTmFtZXMoKSksdm9pZCAwIT09dC5wc3NzYWx0bGVuJiYodGhpcy5wc3NTYWx0TGVuPXQucHNzc2FsdGxlbiksdm9pZCAwIT09dC5wcnZrZXlwZW0pKXtpZih2b2lkIDAhPT10LnBydmtleXBhcyl0aHJvd1wiYm90aCBwcnZrZXlwZW0gYW5kIHBydmtleXBhcyBwYXJhbWV0ZXJzIG5vdCBzdXBwb3J0ZWRcIjt0cnl7ZT10bi5nZXRLZXkodC5wcnZrZXlwZW0pO3RoaXMuaW5pdChlKX1jYXRjaCh0KXt0aHJvd1wiZmF0YWwgZXJyb3IgdG8gbG9hZCBwZW0gcHJpdmF0ZSBrZXk6IFwiK3R9fX0sU3IuY3J5cHRvLkNpcGhlcj1mdW5jdGlvbih0KXt9LFNyLmNyeXB0by5DaXBoZXIuZW5jcnlwdD1mdW5jdGlvbih0LGUscil7aWYoZSBpbnN0YW5jZW9mIE1lJiZlLmlzUHVibGljKXt2YXIgbj1Tci5jcnlwdG8uQ2lwaGVyLmdldEFsZ0J5S2V5QW5kTmFtZShlLHIpO2lmKFwiUlNBXCI9PT1uKXJldHVybiBlLmVuY3J5cHQodCk7aWYoXCJSU0FPQUVQXCI9PT1uKXJldHVybiBlLmVuY3J5cHRPQUVQKHQsXCJzaGExXCIpO3ZhciBpPW4ubWF0Y2goL15SU0FPQUVQKFxcZCspJC8pO2lmKG51bGwhPT1pKXJldHVybiBlLmVuY3J5cHRPQUVQKHQsXCJzaGFcIitpWzFdKTt0aHJvd1wiQ2lwaGVyLmVuY3J5cHQ6IHVuc3VwcG9ydGVkIGFsZ29yaXRobSBmb3IgUlNBS2V5OiBcIityfXRocm93XCJDaXBoZXIuZW5jcnlwdDogdW5zdXBwb3J0ZWQga2V5IG9yIGFsZ29yaXRobVwifSxTci5jcnlwdG8uQ2lwaGVyLmRlY3J5cHQ9ZnVuY3Rpb24odCxlLHIpe2lmKGUgaW5zdGFuY2VvZiBNZSYmZS5pc1ByaXZhdGUpe3ZhciBuPVNyLmNyeXB0by5DaXBoZXIuZ2V0QWxnQnlLZXlBbmROYW1lKGUscik7aWYoXCJSU0FcIj09PW4pcmV0dXJuIGUuZGVjcnlwdCh0KTtpZihcIlJTQU9BRVBcIj09PW4pcmV0dXJuIGUuZGVjcnlwdE9BRVAodCxcInNoYTFcIik7dmFyIGk9bi5tYXRjaCgvXlJTQU9BRVAoXFxkKykkLyk7aWYobnVsbCE9PWkpcmV0dXJuIGUuZGVjcnlwdE9BRVAodCxcInNoYVwiK2lbMV0pO3Rocm93XCJDaXBoZXIuZGVjcnlwdDogdW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBSU0FLZXk6IFwiK3J9dGhyb3dcIkNpcGhlci5kZWNyeXB0OiB1bnN1cHBvcnRlZCBrZXkgb3IgYWxnb3JpdGhtXCJ9LFNyLmNyeXB0by5DaXBoZXIuZ2V0QWxnQnlLZXlBbmROYW1lPWZ1bmN0aW9uKHQsZSl7aWYodCBpbnN0YW5jZW9mIE1lKXtpZigtMSE9XCI6UlNBOlJTQU9BRVA6UlNBT0FFUDIyNDpSU0FPQUVQMjU2OlJTQU9BRVAzODQ6UlNBT0FFUDUxMjpcIi5pbmRleE9mKGUpKXJldHVybiBlO2lmKG51bGw9PWUpcmV0dXJuXCJSU0FcIjt0aHJvd1wiZ2V0QWxnQnlLZXlBbmROYW1lOiBub3Qgc3VwcG9ydGVkIGFsZ29yaXRobSBuYW1lIGZvciBSU0FLZXk6IFwiK2V9dGhyb3dcImdldEFsZ0J5S2V5QW5kTmFtZTogbm90IHN1cHBvcnRlZCBhbGdvcml0aG0gbmFtZTogXCIrZX0sU3IuY3J5cHRvLk9JRD1uZXcgZnVuY3Rpb24oKXt0aGlzLm9pZGhleDJuYW1lPXtcIjJhODY0ODg2ZjcwZDAxMDEwMVwiOlwicnNhRW5jcnlwdGlvblwiLFwiMmE4NjQ4Y2UzZDAyMDFcIjpcImVjUHVibGljS2V5XCIsXCIyYTg2NDhjZTM4MDQwMVwiOlwiZHNhXCIsXCIyYTg2NDhjZTNkMDMwMTA3XCI6XCJzZWNwMjU2cjFcIixcIjJiODEwNDAwMWZcIjpcInNlY3AxOTJrMVwiLFwiMmI4MTA0MDAyMVwiOlwic2VjcDIyNHIxXCIsXCIyYjgxMDQwMDBhXCI6XCJzZWNwMjU2azFcIixcIjJiODEwNDAwMjNcIjpcInNlY3A1MjFyMVwiLFwiMmI4MTA0MDAyMlwiOlwic2VjcDM4NHIxXCIsXCIyYTg2NDhjZTM4MDQwM1wiOlwiU0hBMXdpdGhEU0FcIixcIjYwODY0ODAxNjUwMzA0MDMwMVwiOlwiU0hBMjI0d2l0aERTQVwiLFwiNjA4NjQ4MDE2NTAzMDQwMzAyXCI6XCJTSEEyNTZ3aXRoRFNBXCJ9fSx2b2lkIDAhPT1TciYmU3J8fChlLktKVVI9U3I9e30pLHZvaWQgMCE9PVNyLmNyeXB0byYmU3IuY3J5cHRvfHwoU3IuY3J5cHRvPXt9KSxTci5jcnlwdG8uRUNEU0E9ZnVuY3Rpb24odCl7dmFyIGU9RXJyb3Iscj13LG49VmUsaT1Tci5jcnlwdG8uRUNEU0Esbz1Tci5jcnlwdG8uRUNQYXJhbWV0ZXJEQixzPWkuZ2V0TmFtZSxhPUZyLHU9YS5nZXRWYnlMaXN0RXgsYz1hLmlzQVNOMUhFWCxoPW5ldyBCZTt0aGlzLnR5cGU9XCJFQ1wiLHRoaXMuaXNQcml2YXRlPSExLHRoaXMuaXNQdWJsaWM9ITEsdGhpcy5nZXRCaWdSYW5kb209ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyByKHQuYml0TGVuZ3RoKCksaCkubW9kKHQuc3VidHJhY3Qoci5PTkUpKS5hZGQoci5PTkUpfSx0aGlzLnNldE5hbWVkQ3VydmU9ZnVuY3Rpb24odCl7dGhpcy5lY3BhcmFtcz1vLmdldEJ5TmFtZSh0KSx0aGlzLnBydktleUhleD1udWxsLHRoaXMucHViS2V5SGV4PW51bGwsdGhpcy5jdXJ2ZU5hbWU9dH0sdGhpcy5zZXRQcml2YXRlS2V5SGV4PWZ1bmN0aW9uKHQpe3RoaXMuaXNQcml2YXRlPSEwLHRoaXMucHJ2S2V5SGV4PXR9LHRoaXMuc2V0UHVibGljS2V5SGV4PWZ1bmN0aW9uKHQpe3RoaXMuaXNQdWJsaWM9ITAsdGhpcy5wdWJLZXlIZXg9dH0sdGhpcy5nZXRQdWJsaWNLZXlYWUhleD1mdW5jdGlvbigpe3ZhciB0PXRoaXMucHViS2V5SGV4O2lmKFwiMDRcIiE9PXQuc3Vic3RyKDAsMikpdGhyb3dcInRoaXMgbWV0aG9kIHN1cHBvcnRzIHVuY29tcHJlc3NlZCBmb3JtYXQoMDQpIG9ubHlcIjt2YXIgZT10aGlzLmVjcGFyYW1zLmtleWxlbi80O2lmKHQubGVuZ3RoIT09MisyKmUpdGhyb3dcIm1hbGZvcm1lZCBwdWJsaWMga2V5IGhleCBsZW5ndGhcIjt2YXIgcj17fTtyZXR1cm4gci54PXQuc3Vic3RyKDIsZSksci55PXQuc3Vic3RyKDIrZSkscn0sdGhpcy5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jdXJ2ZU5hbWU7cmV0dXJuXCJzZWNwMjU2cjFcIj09PXR8fFwiTklTVCBQLTI1NlwiPT09dHx8XCJQLTI1NlwiPT09dHx8XCJwcmltZTI1NnYxXCI9PT10P1wiUC0yNTZcIjpcInNlY3AzODRyMVwiPT09dHx8XCJOSVNUIFAtMzg0XCI9PT10fHxcIlAtMzg0XCI9PT10P1wiUC0zODRcIjpudWxsfSx0aGlzLmdlbmVyYXRlS2V5UGFpckhleD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWNwYXJhbXMubixlPXRoaXMuZ2V0QmlnUmFuZG9tKHQpLHI9dGhpcy5lY3BhcmFtcy5HLm11bHRpcGx5KGUpLG49ci5nZXRYKCkudG9CaWdJbnRlZ2VyKCksaT1yLmdldFkoKS50b0JpZ0ludGVnZXIoKSxvPXRoaXMuZWNwYXJhbXMua2V5bGVuLzQscz0oXCIwMDAwMDAwMDAwXCIrZS50b1N0cmluZygxNikpLnNsaWNlKC1vKSxhPVwiMDRcIisoXCIwMDAwMDAwMDAwXCIrbi50b1N0cmluZygxNikpLnNsaWNlKC1vKSsoXCIwMDAwMDAwMDAwXCIraS50b1N0cmluZygxNikpLnNsaWNlKC1vKTtyZXR1cm4gdGhpcy5zZXRQcml2YXRlS2V5SGV4KHMpLHRoaXMuc2V0UHVibGljS2V5SGV4KGEpLHtlY3BydmhleDpzLGVjcHViaGV4OmF9fSx0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc2lnbkhleCh0LHRoaXMucHJ2S2V5SGV4KX0sdGhpcy5zaWduSGV4PWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IHIoZSwxNiksbz10aGlzLmVjcGFyYW1zLm4scz1uZXcgcih0LnN1YnN0cmluZygwLHRoaXMuZWNwYXJhbXMua2V5bGVuLzQpLDE2KTtkb3t2YXIgYT10aGlzLmdldEJpZ1JhbmRvbShvKSx1PXRoaXMuZWNwYXJhbXMuRy5tdWx0aXBseShhKS5nZXRYKCkudG9CaWdJbnRlZ2VyKCkubW9kKG8pfXdoaWxlKHUuY29tcGFyZVRvKHIuWkVSTyk8PTApO3ZhciBjPWEubW9kSW52ZXJzZShvKS5tdWx0aXBseShzLmFkZChuLm11bHRpcGx5KHUpKSkubW9kKG8pO3JldHVybiBpLmJpUlNTaWdUb0FTTjFTaWcodSxjKX0sdGhpcy5zaWduPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZSxpPXRoaXMuZWNwYXJhbXMubixvPXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKHQpO2Rve3ZhciBzPXRoaXMuZ2V0QmlnUmFuZG9tKGkpLGE9dGhpcy5lY3BhcmFtcy5HLm11bHRpcGx5KHMpLmdldFgoKS50b0JpZ0ludGVnZXIoKS5tb2QoaSl9d2hpbGUoYS5jb21wYXJlVG8ody5aRVJPKTw9MCk7dmFyIHU9cy5tb2RJbnZlcnNlKGkpLm11bHRpcGx5KG8uYWRkKG4ubXVsdGlwbHkoYSkpKS5tb2QoaSk7cmV0dXJuIHRoaXMuc2VyaWFsaXplU2lnKGEsdSl9LHRoaXMudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudmVyaWZ5SGV4KHQsZSx0aGlzLnB1YktleUhleCl9LHRoaXMudmVyaWZ5SGV4PWZ1bmN0aW9uKHQsZSxvKXt0cnl7dmFyIHMsYSx1PWkucGFyc2VTaWdIZXgoZSk7cz11LnIsYT11LnM7dmFyIGM9bi5kZWNvZGVGcm9tSGV4KHRoaXMuZWNwYXJhbXMuY3VydmUsbyksaD1uZXcgcih0LnN1YnN0cmluZygwLHRoaXMuZWNwYXJhbXMua2V5bGVuLzQpLDE2KTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcoaCxzLGEsYyl9Y2F0Y2godCl7cmV0dXJuITF9fSx0aGlzLnZlcmlmeT1mdW5jdGlvbih0LGUsaSl7dmFyIG8scyxhO2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KGUpKXt2YXIgdT10aGlzLnBhcnNlU2lnKGUpO289dS5yLHM9dS5zfWVsc2V7aWYoXCJvYmplY3RcIiE9PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6ZyhlKSl8fCFlLnJ8fCFlLnMpdGhyb3dcIkludmFsaWQgdmFsdWUgZm9yIHNpZ25hdHVyZVwiO289ZS5yLHM9ZS5zfWlmKGkgaW5zdGFuY2VvZiBWZSlhPWk7ZWxzZXtpZighQml0Y29pbi5VdGlsLmlzQXJyYXkoaSkpdGhyb3dcIkludmFsaWQgZm9ybWF0IGZvciBwdWJrZXkgdmFsdWUsIG11c3QgYmUgYnl0ZSBhcnJheSBvciBFQ1BvaW50RnBcIjthPW4uZGVjb2RlRnJvbSh0aGlzLmVjcGFyYW1zLmN1cnZlLGkpfXZhciBjPXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKHQpO3JldHVybiB0aGlzLnZlcmlmeVJhdyhjLG8scyxhKX0sdGhpcy52ZXJpZnlSYXc9ZnVuY3Rpb24odCxlLG4saSl7dmFyIG89dGhpcy5lY3BhcmFtcy5uLHM9dGhpcy5lY3BhcmFtcy5HO2lmKGUuY29tcGFyZVRvKHIuT05FKTwwfHxlLmNvbXBhcmVUbyhvKT49MClyZXR1cm4hMTtpZihuLmNvbXBhcmVUbyhyLk9ORSk8MHx8bi5jb21wYXJlVG8obyk+PTApcmV0dXJuITE7dmFyIGE9bi5tb2RJbnZlcnNlKG8pLHU9dC5tdWx0aXBseShhKS5tb2QobyksYz1lLm11bHRpcGx5KGEpLm1vZChvKTtyZXR1cm4gcy5tdWx0aXBseSh1KS5hZGQoaS5tdWx0aXBseShjKSkuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChvKS5lcXVhbHMoZSl9LHRoaXMuc2VyaWFsaXplU2lnPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dC50b0J5dGVBcnJheVNpZ25lZCgpLG49ZS50b0J5dGVBcnJheVNpZ25lZCgpLGk9W107cmV0dXJuIGkucHVzaCgyKSxpLnB1c2goci5sZW5ndGgpLChpPWkuY29uY2F0KHIpKS5wdXNoKDIpLGkucHVzaChuLmxlbmd0aCksKGk9aS5jb25jYXQobikpLnVuc2hpZnQoaS5sZW5ndGgpLGkudW5zaGlmdCg0OCksaX0sdGhpcy5wYXJzZVNpZz1mdW5jdGlvbih0KXt2YXIgZTtpZig0OCE9dFswXSl0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbm90IGEgdmFsaWQgREVSU2VxdWVuY2VcIik7aWYoMiE9dFtlPTJdKXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGVsZW1lbnQgaW4gc2lnbmF0dXJlIG11c3QgYmUgYSBERVJJbnRlZ2VyXCIpO3ZhciBuPXQuc2xpY2UoZSsyLGUrMit0W2UrMV0pO2lmKDIhPXRbZSs9Mit0W2UrMV1dKXRocm93IG5ldyBFcnJvcihcIlNlY29uZCBlbGVtZW50IGluIHNpZ25hdHVyZSBtdXN0IGJlIGEgREVSSW50ZWdlclwiKTt2YXIgaT10LnNsaWNlKGUrMixlKzIrdFtlKzFdKTtyZXR1cm4gZSs9Mit0W2UrMV0se3I6ci5mcm9tQnl0ZUFycmF5VW5zaWduZWQobiksczpyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChpKX19LHRoaXMucGFyc2VTaWdDb21wYWN0PWZ1bmN0aW9uKHQpe2lmKDY1IT09dC5sZW5ndGgpdGhyb3dcIlNpZ25hdHVyZSBoYXMgdGhlIHdyb25nIGxlbmd0aFwiO3ZhciBlPXRbMF0tMjc7aWYoZTwwfHxlPjcpdGhyb3dcIkludmFsaWQgc2lnbmF0dXJlIHR5cGVcIjt2YXIgbj10aGlzLmVjcGFyYW1zLm47cmV0dXJue3I6ci5mcm9tQnl0ZUFycmF5VW5zaWduZWQodC5zbGljZSgxLDMzKSkubW9kKG4pLHM6ci5mcm9tQnl0ZUFycmF5VW5zaWduZWQodC5zbGljZSgzMyw2NSkpLm1vZChuKSxpOmV9fSx0aGlzLnJlYWRQS0NTNVBydktleUhleD1mdW5jdGlvbih0KXtpZighMT09PWModCkpdGhyb3cgbmV3IEVycm9yKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIik7dmFyIGUscixuO3RyeXtlPXUodCwwLFtcIlswXVwiLDBdLFwiMDZcIikscj11KHQsMCxbMV0sXCIwNFwiKTt0cnl7bj11KHQsMCxbXCJbMV1cIiwwXSxcIjAzXCIpfWNhdGNoKHQpe319Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFBLQ1MjMS81IHBsYWluIEVDQyBwcml2YXRlIGtleVwiKX1pZih0aGlzLmN1cnZlTmFtZT1zKGUpLHZvaWQgMD09PXRoaXMuY3VydmVOYW1lKXRocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCI7dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKSx0aGlzLnNldFB1YmxpY0tleUhleChuKSx0aGlzLnNldFByaXZhdGVLZXlIZXgociksdGhpcy5pc1B1YmxpYz0hMX0sdGhpcy5yZWFkUEtDUzhQcnZLZXlIZXg9ZnVuY3Rpb24odCl7aWYoITE9PT1jKHQpKXRocm93IG5ldyBlKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIik7dmFyIHIsbixpO3RyeXt1KHQsMCxbMSwwXSxcIjA2XCIpLHI9dSh0LDAsWzEsMV0sXCIwNlwiKSxuPXUodCwwLFsyLDAsMV0sXCIwNFwiKTt0cnl7aT11KHQsMCxbMiwwLFwiWzFdXCIsMF0sXCIwM1wiKX1jYXRjaCh0KXt9fWNhdGNoKHQpe3Rocm93IG5ldyBlKFwibWFsZm9ybWVkIFBLQ1MjOCBwbGFpbiBFQ0MgcHJpdmF0ZSBrZXlcIil9aWYodGhpcy5jdXJ2ZU5hbWU9cyhyKSx2b2lkIDA9PT10aGlzLmN1cnZlTmFtZSl0aHJvdyBuZXcgZShcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIik7dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKSx0aGlzLnNldFB1YmxpY0tleUhleChpKSx0aGlzLnNldFByaXZhdGVLZXlIZXgobiksdGhpcy5pc1B1YmxpYz0hMX0sdGhpcy5yZWFkUEtDUzhQdWJLZXlIZXg9ZnVuY3Rpb24odCl7aWYoITE9PT1jKHQpKXRocm93IG5ldyBlKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIik7dmFyIHIsbjt0cnl7dSh0LDAsWzAsMF0sXCIwNlwiKSxyPXUodCwwLFswLDFdLFwiMDZcIiksbj11KHQsMCxbMV0sXCIwM1wiKX1jYXRjaCh0KXt0aHJvdyBuZXcgZShcIm1hbGZvcm1lZCBQS0NTIzggRUNDIHB1YmxpYyBrZXlcIil9aWYodGhpcy5jdXJ2ZU5hbWU9cyhyKSxudWxsPT09dGhpcy5jdXJ2ZU5hbWUpdGhyb3cgbmV3IGUoXCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCIpO3RoaXMuc2V0TmFtZWRDdXJ2ZSh0aGlzLmN1cnZlTmFtZSksdGhpcy5zZXRQdWJsaWNLZXlIZXgobil9LHRoaXMucmVhZENlcnRQdWJLZXlIZXg9ZnVuY3Rpb24odCxyKXtpZighMT09PWModCkpdGhyb3cgbmV3IGUoXCJub3QgQVNOLjEgaGV4IHN0cmluZ1wiKTt2YXIgbixpO3RyeXtuPXUodCwwLFswLDUsMCwxXSxcIjA2XCIpLGk9dSh0LDAsWzAsNSwxXSxcIjAzXCIpfWNhdGNoKHQpe3Rocm93IG5ldyBlKFwibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIEVDQyBwdWJsaWMga2V5XCIpfWlmKHRoaXMuY3VydmVOYW1lPXMobiksbnVsbD09PXRoaXMuY3VydmVOYW1lKXRocm93IG5ldyBlKFwidW5zdXBwb3J0ZWQgY3VydmUgbmFtZVwiKTt0aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpLHRoaXMuc2V0UHVibGljS2V5SGV4KGkpfSx2b2lkIDAhPT10JiZ2b2lkIDAhPT10LmN1cnZlJiYodGhpcy5jdXJ2ZU5hbWU9dC5jdXJ2ZSksdm9pZCAwPT09dGhpcy5jdXJ2ZU5hbWUmJih0aGlzLmN1cnZlTmFtZT1cInNlY3AyNTZyMVwiKSx0aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpLHZvaWQgMCE9PXQmJih2b2lkIDAhPT10LnBydiYmdGhpcy5zZXRQcml2YXRlS2V5SGV4KHQucHJ2KSx2b2lkIDAhPT10LnB1YiYmdGhpcy5zZXRQdWJsaWNLZXlIZXgodC5wdWIpKX0sU3IuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4PWZ1bmN0aW9uKHQpe3ZhciBlPVNyLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleEluSGV4UlModCk7cmV0dXJue3I6bmV3IHcoZS5yLDE2KSxzOm5ldyB3KGUucywxNil9fSxTci5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTPWZ1bmN0aW9uKHQpe3ZhciBlPUZyLHI9ZS5nZXRDaGlsZElkeCxuPWUuZ2V0VjtpZihlLmNoZWNrU3RyaWN0REVSKHQsMCksXCIzMFwiIT10LnN1YnN0cigwLDIpKXRocm93IG5ldyBFcnJvcihcInNpZ25hdHVyZSBpcyBub3QgYSBBU04uMSBzZXF1ZW5jZVwiKTt2YXIgaT1yKHQsMCk7aWYoMiE9aS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwic2lnbmF0dXJlIHNoYWxsIGhhdmUgdHdvIGVsZW1lbnRzXCIpO3ZhciBvPWlbMF0scz1pWzFdO2lmKFwiMDJcIiE9dC5zdWJzdHIobywyKSl0aHJvdyBuZXcgRXJyb3IoXCIxc3QgaXRlbSBub3QgQVNOLjEgaW50ZWdlclwiKTtpZihcIjAyXCIhPXQuc3Vic3RyKHMsMikpdGhyb3cgbmV3IEVycm9yKFwiMm5kIGl0ZW0gbm90IEFTTi4xIGludGVnZXJcIik7cmV0dXJue3I6bih0LG8pLHM6bih0LHMpfX0sU3IuY3J5cHRvLkVDRFNBLmFzbjFTaWdUb0NvbmNhdFNpZz1mdW5jdGlvbih0KXt2YXIgZT1Tci5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKHQpLHI9ZS5yLG49ZS5zO2lmKFwiMDBcIj09ci5zdWJzdHIoMCwyKSYmci5sZW5ndGglMzI9PTImJihyPXIuc3Vic3RyKDIpKSxcIjAwXCI9PW4uc3Vic3RyKDAsMikmJm4ubGVuZ3RoJTMyPT0yJiYobj1uLnN1YnN0cigyKSksci5sZW5ndGglMzI9PTMwJiYocj1cIjAwXCIrciksbi5sZW5ndGglMzI9PTMwJiYobj1cIjAwXCIrbiksci5sZW5ndGglMzIhPTApdGhyb3dcInVua25vd24gRUNEU0Egc2lnIHIgbGVuZ3RoIGVycm9yXCI7aWYobi5sZW5ndGglMzIhPTApdGhyb3dcInVua25vd24gRUNEU0Egc2lnIHMgbGVuZ3RoIGVycm9yXCI7cmV0dXJuIHIrbn0sU3IuY3J5cHRvLkVDRFNBLmNvbmNhdFNpZ1RvQVNOMVNpZz1mdW5jdGlvbih0KXtpZih0Lmxlbmd0aC8yKjglMTI4IT0wKXRocm93XCJ1bmtub3duIEVDRFNBIGNvbmNhdGluYXRlZCByLXMgc2lnICBsZW5ndGggZXJyb3JcIjt2YXIgZT10LnN1YnN0cigwLHQubGVuZ3RoLzIpLHI9dC5zdWJzdHIodC5sZW5ndGgvMik7cmV0dXJuIFNyLmNyeXB0by5FQ0RTQS5oZXhSU1NpZ1RvQVNOMVNpZyhlLHIpfSxTci5jcnlwdG8uRUNEU0EuaGV4UlNTaWdUb0FTTjFTaWc9ZnVuY3Rpb24odCxlKXt2YXIgcj1uZXcgdyh0LDE2KSxuPW5ldyB3KGUsMTYpO3JldHVybiBTci5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZyhyLG4pfSxTci5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZz1mdW5jdGlvbih0LGUpe3ZhciByPVNyLmFzbjEsbj1uZXcgci5ERVJJbnRlZ2VyKHtiaWdpbnQ6dH0pLGk9bmV3IHIuREVSSW50ZWdlcih7YmlnaW50OmV9KTtyZXR1cm4gbmV3IHIuREVSU2VxdWVuY2Uoe2FycmF5OltuLGldfSkuZ2V0RW5jb2RlZEhleCgpfSxTci5jcnlwdG8uRUNEU0EuZ2V0TmFtZT1mdW5jdGlvbih0KXtyZXR1cm5cIjJiODEwNDAwMWZcIj09PXQ/XCJzZWNwMTkyazFcIjpcIjJhODY0OGNlM2QwMzAxMDdcIj09PXQ/XCJzZWNwMjU2cjFcIjpcIjJiODEwNDAwMGFcIj09PXQ/XCJzZWNwMjU2azFcIjpcIjJiODEwNDAwMjFcIj09PXQ/XCJzZWNwMjI0cjFcIjpcIjJiODEwNDAwMjJcIj09PXQ/XCJzZWNwMzg0cjFcIjotMSE9PVwifHNlY3AyNTZyMXxOSVNUIFAtMjU2fFAtMjU2fHByaW1lMjU2djF8XCIuaW5kZXhPZih0KT9cInNlY3AyNTZyMVwiOi0xIT09XCJ8c2VjcDI1NmsxfFwiLmluZGV4T2YodCk/XCJzZWNwMjU2azFcIjotMSE9PVwifHNlY3AyMjRyMXxOSVNUIFAtMjI0fFAtMjI0fFwiLmluZGV4T2YodCk/XCJzZWNwMjI0cjFcIjotMSE9PVwifHNlY3AzODRyMXxOSVNUIFAtMzg0fFAtMzg0fFwiLmluZGV4T2YodCk/XCJzZWNwMzg0cjFcIjpudWxsfSx2b2lkIDAhPT1TciYmU3J8fChlLktKVVI9U3I9e30pLHZvaWQgMCE9PVNyLmNyeXB0byYmU3IuY3J5cHRvfHwoU3IuY3J5cHRvPXt9KSxTci5jcnlwdG8uRUNQYXJhbWV0ZXJEQj1uZXcgZnVuY3Rpb24oKXt2YXIgdD17fSxlPXt9O2Z1bmN0aW9uIHIodCl7cmV0dXJuIG5ldyB3KHQsMTYpfXRoaXMuZ2V0QnlOYW1lPWZ1bmN0aW9uKHIpe3ZhciBuPXI7aWYodm9pZCAwIT09ZVtuXSYmKG49ZVtyXSksdm9pZCAwIT09dFtuXSlyZXR1cm4gdFtuXTt0aHJvd1widW5yZWdpc3RlcmVkIEVDIGN1cnZlIG5hbWU6IFwiK259LHRoaXMucmVnaXN0PWZ1bmN0aW9uKG4saSxvLHMsYSx1LGMsaCxsLGYsZyxkKXt0W25dPXt9O3ZhciBwPXIobyksdj1yKHMpLHk9cihhKSxtPXIodSksXz1yKGMpLFM9bmV3IEtlKHAsdix5KSxiPVMuZGVjb2RlUG9pbnRIZXgoXCIwNFwiK2grbCk7dFtuXS5uYW1lPW4sdFtuXS5rZXlsZW49aSx0W25dLmN1cnZlPVMsdFtuXS5HPWIsdFtuXS5uPW0sdFtuXS5oPV8sdFtuXS5vaWQ9Zyx0W25dLmluZm89ZDtmb3IodmFyIHc9MDt3PGYubGVuZ3RoO3crKyllW2Zbd11dPW59fSxTci5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTI4cjFcIiwxMjgsXCJGRkZGRkZGREZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkRGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIkU4NzU3OUMxMTA3OUY0M0REODI0OTkzQzJDRUU1RUQzXCIsXCJGRkZGRkZGRTAwMDAwMDAwNzVBMzBEMUI5MDM4QTExNVwiLFwiMVwiLFwiMTYxRkY3NTI4Qjg5OUIyRDBDMjg2MDdDQTUyQzVCODZcIixcIkNGNUFDODM5NUJBRkVCMTNDMDJEQTI5MkRERUQ3QTgzXCIsW10sXCJcIixcInNlY3AxMjhyMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDEyOCBiaXQgcHJpbWUgZmllbGRcIiksU3IuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MGsxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGQUM3M1wiLFwiMFwiLFwiN1wiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIsXCIxXCIsXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCIsXCI5MzhDRjkzNTMxOEZEQ0VENkJDMjgyODY1MzE3MzNDM0YwM0M0RkVFXCIsW10sXCJcIixcInNlY3AxNjBrMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIiksU3IuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MHIxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY3RkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY3RkZGRkZGQ1wiLFwiMUM5N0JFRkM1NEJEN0E4QjY1QUNGODlGODFENEQ0QURDNTY1RkE0NVwiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUY0QzhGOTI3QUVEM0NBNzUyMjU3XCIsXCIxXCIsXCI0QTk2QjU2ODhFRjU3MzI4NDY2NDY5ODk2OEMzOEJCOTEzQ0JGQzgyXCIsXCIyM0E2Mjg1NTMxNjg5NDdENTlEQ0M5MTIwNDIzNTEzNzdBQzVGQjMyXCIsW10sXCJcIixcInNlY3AxNjByMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIiksU3IuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE5MmsxXCIsMTkyLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZFRTM3XCIsXCIwXCIsXCIzXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkUyNkYyRkMxNzBGNjk0NjZBNzRERUZEOERcIixcIjFcIixcIkRCNEZGMTBFQzA1N0U5QUUyNkIwN0QwMjgwQjdGNDM0MURBNUQxQjFFQUUwNkM3RFwiLFwiOUIyRjJGNkQ5QzU2MjhBNzg0NDE2M0QwMTVCRTg2MzQ0MDgyQUE4OEQ5NUUyRjlEXCIsW10pLFNyLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJyMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZDXCIsXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiLFwiMVwiLFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCIsXCIwNzE5MkI5NUZGQzhEQTc4NjMxMDExRUQ2QjI0Q0RENTczRjk3N0ExMUU3OTQ4MTFcIixbXSksU3IuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDIyNHIxXCIsMjI0LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFXCIsXCJCNDA1MEE4NTBDMDRCM0FCRjU0MTMyNTY1MDQ0QjBCN0Q3QkZEOEJBMjcwQjM5NDMyMzU1RkZCNFwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjE2QTJFMEI4RjAzRTEzREQyOTQ1NUM1QzJBM0RcIixcIjFcIixcIkI3MEUwQ0JENkJCNEJGN0YzMjEzOTBCOTRBMDNDMUQzNTZDMjExMjIzNDMyODBENjExNUMxRDIxXCIsXCJCRDM3NjM4OEI1RjcyM0ZCNEMyMkRGRTZDRDQzNzVBMDVBMDc0NzY0NDRENTgxOTk4NTAwN0UzNFwiLFtdKSxTci5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjU2azFcIiwyNTYsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGQzJGXCIsXCIwXCIsXCI3XCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUJBQUVEQ0U2QUY0OEEwM0JCRkQyNUU4Q0QwMzY0MTQxXCIsXCIxXCIsXCI3OUJFNjY3RUY5RENCQkFDNTVBMDYyOTVDRTg3MEIwNzAyOUJGQ0RCMkRDRTI4RDk1OUYyODE1QjE2RjgxNzk4XCIsXCI0ODNBREE3NzI2QTNDNDY1NURBNEZCRkMwRTExMDhBOEZEMTdCNDQ4QTY4NTU0MTk5QzQ3RDA4RkZCMTBENEI4XCIsW10pLFNyLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyNTZyMVwiLDI1NixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjVBQzYzNUQ4QUEzQTkzRTdCM0VCQkQ1NTc2OTg4NkJDNjUxRDA2QjBDQzUzQjBGNjNCQ0UzQzNFMjdEMjYwNEJcIixcIkZGRkZGRkZGMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGQkNFNkZBQURBNzE3OUU4NEYzQjlDQUMyRkM2MzI1NTFcIixcIjFcIixcIjZCMTdEMUYyRTEyQzQyNDdGOEJDRTZFNTYzQTQ0MEYyNzcwMzdEODEyREVCMzNBMEY0QTEzOTQ1RDg5OEMyOTZcIixcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIixbXCJOSVNUIFAtMjU2XCIsXCJQLTI1NlwiLFwicHJpbWUyNTZ2MVwiXSksU3IuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDM4NHIxXCIsMzg0LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGMDAwMDAwMDAwMDAwMDAwMEZGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkNcIixcIkIzMzEyRkE3RTIzRUU3RTQ5ODhFMDU2QkUzRjgyRDE5MTgxRDlDNkVGRTgxNDExMjAzMTQwODhGNTAxMzg3NUFDNjU2Mzk4RDhBMkVEMTlEMkE4NUM4RUREM0VDMkFFRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQzc2MzREODFGNDM3MkRERjU4MUEwREIyNDhCMEE3N0FFQ0VDMTk2QUNDQzUyOTczXCIsXCIxXCIsXCJBQTg3Q0EyMkJFOEIwNTM3OEVCMUM3MUVGMzIwQUQ3NDZFMUQzQjYyOEJBNzlCOTg1OUY3NDFFMDgyNTQyQTM4NTUwMkYyNURCRjU1Mjk2QzNBNTQ1RTM4NzI3NjBBQjdcIixcIjM2MTdkZTRhOTYyNjJjNmY1ZDllOThiZjkyOTJkYzI5ZjhmNDFkYmQyODlhMTQ3Y2U5ZGEzMTEzYjVmMGI4YzAwYTYwYjFjZTFkN2U4MTlkN2E0MzFkN2M5MGVhMGU1ZlwiLFtcIk5JU1QgUC0zODRcIixcIlAtMzg0XCJdKSxTci5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwNTIxcjFcIiw1MjEsXCIxRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRlwiLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjA1MTk1M0VCOTYxOEUxQzlBMUY5MjlBMjFBMEI2ODU0MEVFQTJEQTcyNUI5OUIzMTVGM0I4QjQ4OTkxOEVGMTA5RTE1NjE5Mzk1MUVDN0U5MzdCMTY1MkMwQkQzQkIxQkYwNzM1NzNERjg4M0QyQzM0RjFFRjQ1MUZENDZCNTAzRjAwXCIsXCIxRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZBNTE4Njg3ODNCRjJGOTY2QjdGQ0MwMTQ4RjcwOUE1RDAzQkI1QzlCODg5OUM0N0FFQkI2RkI3MUU5MTM4NjQwOVwiLFwiMVwiLFwiQzY4NThFMDZCNzA0MDRFOUNEOUUzRUNCNjYyMzk1QjQ0MjlDNjQ4MTM5MDUzRkI1MjFGODI4QUY2MDZCNEQzREJBQTE0QjVFNzdFRkU3NTkyOEZFMURDMTI3QTJGRkE4REUzMzQ4QjNDMTg1NkE0MjlCRjk3RTdFMzFDMkU1QkQ2NlwiLFwiMDExODM5Mjk2YTc4OWEzYmMwMDQ1YzhhNWZiNDJjN2QxYmQ5OThmNTQ0NDk1NzliNDQ2ODE3YWZiZDE3MjczZTY2MmM5N2VlNzI5OTVlZjQyNjQwYzU1MGI5MDEzZmFkMDc2MTM1M2M3MDg2YTI3MmMyNDA4OGJlOTQ3NjlmZDE2NjUwXCIsW1wiTklTVCBQLTUyMVwiLFwiUC01MjFcIl0pO3ZhciB0bj1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uIHQocixuLGkpe3JldHVybiBlKHYuQUVTLHIsbixpKX0sZT1mdW5jdGlvbiB0KGUscixuLGkpe3ZhciBvPXYuZW5jLkhleC5wYXJzZShyKSxzPXYuZW5jLkhleC5wYXJzZShuKSxhPXYuZW5jLkhleC5wYXJzZShpKSx1PXt9O3Uua2V5PXMsdS5pdj1hLHUuY2lwaGVydGV4dD1vO3ZhciBjPWUuZGVjcnlwdCh1LHMse2l2OmF9KTtyZXR1cm4gdi5lbmMuSGV4LnN0cmluZ2lmeShjKX0scj1mdW5jdGlvbiB0KGUscixpKXtyZXR1cm4gbih2LkFFUyxlLHIsaSl9LG49ZnVuY3Rpb24gdChlLHIsbixpKXt2YXIgbz12LmVuYy5IZXgucGFyc2Uocikscz12LmVuYy5IZXgucGFyc2UobiksYT12LmVuYy5IZXgucGFyc2UoaSksdT1lLmVuY3J5cHQobyxzLHtpdjphfSksYz12LmVuYy5IZXgucGFyc2UodS50b1N0cmluZygpKTtyZXR1cm4gdi5lbmMuQmFzZTY0LnN0cmluZ2lmeShjKX0saT17XCJBRVMtMjU2LUNCQ1wiOntwcm9jOnQsZXByb2M6cixrZXlsZW46MzIsaXZsZW46MTZ9LFwiQUVTLTE5Mi1DQkNcIjp7cHJvYzp0LGVwcm9jOnIsa2V5bGVuOjI0LGl2bGVuOjE2fSxcIkFFUy0xMjgtQ0JDXCI6e3Byb2M6dCxlcHJvYzpyLGtleWxlbjoxNixpdmxlbjoxNn0sXCJERVMtRURFMy1DQkNcIjp7cHJvYzpmdW5jdGlvbiB0KHIsbixpKXtyZXR1cm4gZSh2LlRyaXBsZURFUyxyLG4saSl9LGVwcm9jOmZ1bmN0aW9uIHQoZSxyLGkpe3JldHVybiBuKHYuVHJpcGxlREVTLGUscixpKX0sa2V5bGVuOjI0LGl2bGVuOjh9LFwiREVTLUNCQ1wiOntwcm9jOmZ1bmN0aW9uIHQocixuLGkpe3JldHVybiBlKHYuREVTLHIsbixpKX0sZXByb2M6ZnVuY3Rpb24gdChlLHIsaSl7cmV0dXJuIG4odi5ERVMsZSxyLGkpfSxrZXlsZW46OCxpdmxlbjo4fX0sbz1mdW5jdGlvbiB0KGUpe3ZhciByPXt9LG49ZS5tYXRjaChuZXcgUmVnRXhwKFwiREVLLUluZm86IChbXixdKyksKFswLTlBLUZhLWZdKylcIixcIm1cIikpO24mJihyLmNpcGhlcj1uWzFdLHIuaXZzYWx0PW5bMl0pO3ZhciBpPWUubWF0Y2gobmV3IFJlZ0V4cChcIi0tLS0tQkVHSU4gKFtBLVpdKykgUFJJVkFURSBLRVktLS0tLVwiKSk7aSYmKHIudHlwZT1pWzFdKTt2YXIgbz0tMSxzPTA7LTEhPWUuaW5kZXhPZihcIlxcclxcblxcclxcblwiKSYmKG89ZS5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpLHM9MiksLTEhPWUuaW5kZXhPZihcIlxcblxcblwiKSYmKG89ZS5pbmRleE9mKFwiXFxuXFxuXCIpLHM9MSk7dmFyIGE9ZS5pbmRleE9mKFwiLS0tLS1FTkRcIik7aWYoLTEhPW8mJi0xIT1hKXt2YXIgdT1lLnN1YnN0cmluZyhvKzIqcyxhLXMpO3U9dS5yZXBsYWNlKC9cXHMrL2csXCJcIiksci5kYXRhPXV9cmV0dXJuIHJ9LHM9ZnVuY3Rpb24gdChlLHIsbil7Zm9yKHZhciBvPW4uc3Vic3RyaW5nKDAsMTYpLHM9di5lbmMuSGV4LnBhcnNlKG8pLGE9di5lbmMuVXRmOC5wYXJzZShyKSx1PWlbZV0ua2V5bGVuK2lbZV0uaXZsZW4sYz1cIlwiLGg9bnVsbDs7KXt2YXIgbD12LmFsZ28uTUQ1LmNyZWF0ZSgpO2lmKG51bGwhPWgmJmwudXBkYXRlKGgpLGwudXBkYXRlKGEpLGwudXBkYXRlKHMpLGg9bC5maW5hbGl6ZSgpLChjKz12LmVuYy5IZXguc3RyaW5naWZ5KGgpKS5sZW5ndGg+PTIqdSlicmVha312YXIgZj17fTtyZXR1cm4gZi5rZXloZXg9Yy5zdWJzdHIoMCwyKmlbZV0ua2V5bGVuKSxmLml2aGV4PWMuc3Vic3RyKDIqaVtlXS5rZXlsZW4sMippW2VdLml2bGVuKSxmfSxhPWZ1bmN0aW9uIHQoZSxyLG4sbyl7dmFyIHM9di5lbmMuQmFzZTY0LnBhcnNlKGUpLGE9di5lbmMuSGV4LnN0cmluZ2lmeShzKTtyZXR1cm4oMCxpW3JdLnByb2MpKGEsbixvKX07cmV0dXJue3ZlcnNpb246XCIxLjAuMFwiLHBhcnNlUEtDUzVQRU06ZnVuY3Rpb24gdChlKXtyZXR1cm4gbyhlKX0sZ2V0S2V5QW5kVW51c2VkSXZCeVBhc3Njb2RlQW5kSXZzYWx0OmZ1bmN0aW9uIHQoZSxyLG4pe3JldHVybiBzKGUscixuKX0sZGVjcnlwdEtleUI2NDpmdW5jdGlvbiB0KGUscixuLGkpe3JldHVybiBhKGUscixuLGkpfSxnZXREZWNyeXB0ZWRLZXlIZXg6ZnVuY3Rpb24gdChlLHIpe3ZhciBuPW8oZSksaT0obi50eXBlLG4uY2lwaGVyKSx1PW4uaXZzYWx0LGM9bi5kYXRhLGg9cyhpLHIsdSkua2V5aGV4O3JldHVybiBhKGMsaSxoLHUpfSxnZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXg6ZnVuY3Rpb24gdChlLHIsbixvLGEpe3ZhciB1PVwiXCI7aWYodm9pZCAwIT09byYmbnVsbCE9b3x8KG89XCJBRVMtMjU2LUNCQ1wiKSx2b2lkIDA9PT1pW29dKXRocm93IG5ldyBFcnJvcihcIktFWVVUSUwgdW5zdXBwb3J0ZWQgYWxnb3JpdGhtOiBcIitvKTt2b2lkIDAhPT1hJiZudWxsIT1hfHwoYT1mdW5jdGlvbiB0KGUpe3ZhciByPXYubGliLldvcmRBcnJheS5yYW5kb20oZSk7cmV0dXJuIHYuZW5jLkhleC5zdHJpbmdpZnkocil9KGlbb10uaXZsZW4pLnRvVXBwZXJDYXNlKCkpO3ZhciBjPWZ1bmN0aW9uIHQoZSxyLG4sbyl7cmV0dXJuKDAsaVtyXS5lcHJvYykoZSxuLG8pfShyLG8scyhvLG4sYSkua2V5aGV4LGEpO3U9XCItLS0tLUJFR0lOIFwiK2UrXCIgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO3JldHVybiB1Kz1cIlByb2MtVHlwZTogNCxFTkNSWVBURURcXHJcXG5cIix1Kz1cIkRFSy1JbmZvOiBcIitvK1wiLFwiK2ErXCJcXHJcXG5cIix1Kz1cIlxcclxcblwiLHUrPWMucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIiksdSs9XCJcXHJcXG4tLS0tLUVORCBcIitlK1wiIFBSSVZBVEUgS0VZLS0tLS1cXHJcXG5cIn0scGFyc2VIZXhPZkVuY3J5cHRlZFBLQ1M4OmZ1bmN0aW9uIHQoZSl7dmFyIHI9RnIsbj1yLmdldENoaWxkSWR4LGk9ci5nZXRWLG89e30scz1uKGUsMCk7aWYoMiE9cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMCkuaXRlbXMgIT0gMjogXCIrcy5sZW5ndGgpO28uY2lwaGVydGV4dD1pKGUsc1sxXSk7dmFyIGE9bihlLHNbMF0pO2lmKDIhPWEubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMCkuaXRlbXMgIT0gMjogXCIrYS5sZW5ndGgpO2lmKFwiMmE4NjQ4ODZmNzBkMDEwNTBkXCIhPWkoZSxhWzBdKSl0aHJvdyBuZXcgRXJyb3IoXCJ0aGlzIG9ubHkgc3VwcG9ydHMgcGtjczVQQkVTMlwiKTt2YXIgdT1uKGUsYVsxXSk7aWYoMiE9YS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEpLml0ZW1zICE9IDI6IFwiK3UubGVuZ3RoKTt2YXIgYz1uKGUsdVsxXSk7aWYoMiE9Yy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMSkuaXRlbXMgIT0gMjogXCIrYy5sZW5ndGgpO2lmKFwiMmE4NjQ4ODZmNzBkMDMwN1wiIT1pKGUsY1swXSkpdGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBUcmlwbGVERVNcIjtvLmVuY3J5cHRpb25TY2hlbWVBbGc9XCJUcmlwbGVERVNcIixvLmVuY3J5cHRpb25TY2hlbWVJVj1pKGUsY1sxXSk7dmFyIGg9bihlLHVbMF0pO2lmKDIhPWgubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjApLml0ZW1zICE9IDI6IFwiK2gubGVuZ3RoKTtpZihcIjJhODY0ODg2ZjcwZDAxMDUwY1wiIT1pKGUsaFswXSkpdGhyb3cgbmV3IEVycm9yKFwidGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJLREYyXCIpO3ZhciBsPW4oZSxoWzFdKTtpZihsLmxlbmd0aDwyKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjAuMSkuaXRlbXMgPCAyOiBcIitsLmxlbmd0aCk7by5wYmtkZjJTYWx0PWkoZSxsWzBdKTt2YXIgZj1pKGUsbFsxXSk7dHJ5e28ucGJrZGYySXRlcj1wYXJzZUludChmLDE2KX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgZm9ybWF0IHBia2RmMkl0ZXI6IFwiK2YpfXJldHVybiBvfSxnZXRQQktERjJLZXlIZXhGcm9tUGFyYW06ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXYuZW5jLkhleC5wYXJzZShlLnBia2RmMlNhbHQpLGk9ZS5wYmtkZjJJdGVyLG89di5QQktERjIocixuLHtrZXlTaXplOjYsaXRlcmF0aW9uczppfSk7cmV0dXJuIHYuZW5jLkhleC5zdHJpbmdpZnkobyl9LF9nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uIHQoZSxyKXt2YXIgbj1NcihlLFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpLGk9dGhpcy5wYXJzZUhleE9mRW5jcnlwdGVkUEtDUzgobiksbz10bi5nZXRQQktERjJLZXlIZXhGcm9tUGFyYW0oaSxyKSxzPXt9O3MuY2lwaGVydGV4dD12LmVuYy5IZXgucGFyc2UoaS5jaXBoZXJ0ZXh0KTt2YXIgYT12LmVuYy5IZXgucGFyc2UobyksdT12LmVuYy5IZXgucGFyc2UoaS5lbmNyeXB0aW9uU2NoZW1lSVYpLGM9di5UcmlwbGVERVMuZGVjcnlwdChzLGEse2l2OnV9KTtyZXR1cm4gdi5lbmMuSGV4LnN0cmluZ2lmeShjKX0sZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uIHQoZSxyKXt2YXIgbj10aGlzLl9nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNKGUscik7cmV0dXJuIHRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KG4pfSxwYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uIHQoZSl7dmFyIHI9RnIsbj1yLmdldENoaWxkSWR4LGk9ci5nZXRWLG89e2FsZ3BhcmFtOm51bGx9O2lmKFwiMzBcIiE9ZS5zdWJzdHIoMCwyKSl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgcGxhaW4gUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDEpXCIpO3ZhciBzPW4oZSwwKTtpZihzLmxlbmd0aDwzKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBwbGFpbiBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMilcIik7aWYoXCIzMFwiIT1lLnN1YnN0cihzWzFdLDIpKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMylcIik7dmFyIGE9bihlLHNbMV0pO2lmKDIhPWEubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNClcIik7aWYoXCIwNlwiIT1lLnN1YnN0cihhWzBdLDIpKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNSlcIik7aWYoby5hbGdvaWQ9aShlLGFbMF0pLFwiMDZcIj09ZS5zdWJzdHIoYVsxXSwyKSYmKG8uYWxncGFyYW09aShlLGFbMV0pKSxcIjA0XCIhPWUuc3Vic3RyKHNbMl0sMikpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA2KVwiKTtyZXR1cm4gby5rZXlpZHg9ci5nZXRWaWR4KGUsc1syXSksb30sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4UEVNOmZ1bmN0aW9uIHQoZSl7dmFyIHI9TXIoZSxcIlBSSVZBVEUgS0VZXCIpO3JldHVybiB0aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChyKX0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uIHQoZSl7dmFyIHIsbj10aGlzLnBhcnNlUGxhaW5Qcml2YXRlUEtDUzhIZXgoZSk7aWYoXCIyYTg2NDg4NmY3MGQwMTAxMDFcIj09bi5hbGdvaWQpcj1uZXcgTWU7ZWxzZSBpZihcIjJhODY0OGNlMzgwNDAxXCI9PW4uYWxnb2lkKXI9bmV3IFNyLmNyeXB0by5EU0E7ZWxzZXtpZihcIjJhODY0OGNlM2QwMjAxXCIhPW4uYWxnb2lkKXRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHByaXZhdGUga2V5IGFsZ29yaXRobVwiKTtyPW5ldyBTci5jcnlwdG8uRUNEU0F9cmV0dXJuIHIucmVhZFBLQ1M4UHJ2S2V5SGV4KGUpLHJ9LF9nZXRLZXlGcm9tUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24gdChlKXt2YXIgcixuPUZyLmdldFZieUxpc3QoZSwwLFswLDBdLFwiMDZcIik7aWYoXCIyYTg2NDg4NmY3MGQwMTAxMDFcIj09PW4pcj1uZXcgTWU7ZWxzZSBpZihcIjJhODY0OGNlMzgwNDAxXCI9PT1uKXI9bmV3IFNyLmNyeXB0by5EU0E7ZWxzZXtpZihcIjJhODY0OGNlM2QwMjAxXCIhPT1uKXRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIFBLQ1MjOCBwdWJsaWMga2V5IGhleFwiKTtyPW5ldyBTci5jcnlwdG8uRUNEU0F9cmV0dXJuIHIucmVhZFBLQ1M4UHViS2V5SGV4KGUpLHJ9LHBhcnNlUHVibGljUmF3UlNBS2V5SGV4OmZ1bmN0aW9uIHQoZSl7dmFyIHI9RnIsbj1yLmdldENoaWxkSWR4LGk9ci5nZXRWLG89e307aWYoXCIzMFwiIT1lLnN1YnN0cigwLDIpKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBSU0Ega2V5KGNvZGU6MDAxKVwiKTt2YXIgcz1uKGUsMCk7aWYoMiE9cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDIpXCIpO2lmKFwiMDJcIiE9ZS5zdWJzdHIoc1swXSwyKSl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMylcIik7aWYoby5uPWkoZSxzWzBdKSxcIjAyXCIhPWUuc3Vic3RyKHNbMV0sMikpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDQpXCIpO3JldHVybiBvLmU9aShlLHNbMV0pLG99LHBhcnNlUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24gdChlKXt2YXIgcj1GcixuPXIuZ2V0Q2hpbGRJZHgsaT1yLmdldFYsbz17YWxncGFyYW06bnVsbH0scz1uKGUsMCk7aWYoMiE9cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwib3V0ZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAyIGVsZW1lbnRzOiBcIitzLmxlbmd0aCk7dmFyIGE9c1swXTtpZihcIjMwXCIhPWUuc3Vic3RyKGEsMikpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDEpXCIpO3ZhciB1PW4oZSxhKTtpZigyIT11Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMilcIik7aWYoXCIwNlwiIT1lLnN1YnN0cih1WzBdLDIpKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAzKVwiKTtpZihvLmFsZ29pZD1pKGUsdVswXSksXCIwNlwiPT1lLnN1YnN0cih1WzFdLDIpP28uYWxncGFyYW09aShlLHVbMV0pOlwiMzBcIj09ZS5zdWJzdHIodVsxXSwyKSYmKG8uYWxncGFyYW09e30sby5hbGdwYXJhbS5wPXIuZ2V0VmJ5TGlzdChlLHVbMV0sWzBdLFwiMDJcIiksby5hbGdwYXJhbS5xPXIuZ2V0VmJ5TGlzdChlLHVbMV0sWzFdLFwiMDJcIiksby5hbGdwYXJhbS5nPXIuZ2V0VmJ5TGlzdChlLHVbMV0sWzJdLFwiMDJcIikpLFwiMDNcIiE9ZS5zdWJzdHIoc1sxXSwyKSl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwNClcIik7cmV0dXJuIG8ua2V5PWkoZSxzWzFdKS5zdWJzdHIoMiksb319fSgpO3RuLmdldEtleT1mdW5jdGlvbih0LGUscil7dmFyIG49KHY9RnIpLmdldENoaWxkSWR4LGk9KHYuZ2V0Vix2LmdldFZieUxpc3QpLG89U3IuY3J5cHRvLHM9by5FQ0RTQSxhPW8uRFNBLHU9TWUsYz1NcixoPXRuO2lmKHZvaWQgMCE9PXUmJnQgaW5zdGFuY2VvZiB1KXJldHVybiB0O2lmKHZvaWQgMCE9PXMmJnQgaW5zdGFuY2VvZiBzKXJldHVybiB0O2lmKHZvaWQgMCE9PWEmJnQgaW5zdGFuY2VvZiBhKXJldHVybiB0O2lmKHZvaWQgMCE9PXQuY3VydmUmJnZvaWQgMCE9PXQueHkmJnZvaWQgMD09PXQuZClyZXR1cm4gbmV3IHMoe3B1Yjp0Lnh5LGN1cnZlOnQuY3VydmV9KTtpZih2b2lkIDAhPT10LmN1cnZlJiZ2b2lkIDAhPT10LmQpcmV0dXJuIG5ldyBzKHtwcnY6dC5kLGN1cnZlOnQuY3VydmV9KTtpZih2b2lkIDA9PT10Lmt0eSYmdm9pZCAwIT09dC5uJiZ2b2lkIDAhPT10LmUmJnZvaWQgMD09PXQuZClyZXR1cm4oUD1uZXcgdSkuc2V0UHVibGljKHQubix0LmUpLFA7aWYodm9pZCAwPT09dC5rdHkmJnZvaWQgMCE9PXQubiYmdm9pZCAwIT09dC5lJiZ2b2lkIDAhPT10LmQmJnZvaWQgMCE9PXQucCYmdm9pZCAwIT09dC5xJiZ2b2lkIDAhPT10LmRwJiZ2b2lkIDAhPT10LmRxJiZ2b2lkIDAhPT10LmNvJiZ2b2lkIDA9PT10LnFpKXJldHVybihQPW5ldyB1KS5zZXRQcml2YXRlRXgodC5uLHQuZSx0LmQsdC5wLHQucSx0LmRwLHQuZHEsdC5jbyksUDtpZih2b2lkIDA9PT10Lmt0eSYmdm9pZCAwIT09dC5uJiZ2b2lkIDAhPT10LmUmJnZvaWQgMCE9PXQuZCYmdm9pZCAwPT09dC5wKXJldHVybihQPW5ldyB1KS5zZXRQcml2YXRlKHQubix0LmUsdC5kKSxQO2lmKHZvaWQgMCE9PXQucCYmdm9pZCAwIT09dC5xJiZ2b2lkIDAhPT10LmcmJnZvaWQgMCE9PXQueSYmdm9pZCAwPT09dC54KXJldHVybihQPW5ldyBhKS5zZXRQdWJsaWModC5wLHQucSx0LmcsdC55KSxQO2lmKHZvaWQgMCE9PXQucCYmdm9pZCAwIT09dC5xJiZ2b2lkIDAhPT10LmcmJnZvaWQgMCE9PXQueSYmdm9pZCAwIT09dC54KXJldHVybihQPW5ldyBhKS5zZXRQcml2YXRlKHQucCx0LnEsdC5nLHQueSx0LngpLFA7aWYoXCJSU0FcIj09PXQua3R5JiZ2b2lkIDAhPT10Lm4mJnZvaWQgMCE9PXQuZSYmdm9pZCAwPT09dC5kKXJldHVybihQPW5ldyB1KS5zZXRQdWJsaWMoUnIodC5uKSxScih0LmUpKSxQO2lmKFwiUlNBXCI9PT10Lmt0eSYmdm9pZCAwIT09dC5uJiZ2b2lkIDAhPT10LmUmJnZvaWQgMCE9PXQuZCYmdm9pZCAwIT09dC5wJiZ2b2lkIDAhPT10LnEmJnZvaWQgMCE9PXQuZHAmJnZvaWQgMCE9PXQuZHEmJnZvaWQgMCE9PXQucWkpcmV0dXJuKFA9bmV3IHUpLnNldFByaXZhdGVFeChScih0Lm4pLFJyKHQuZSksUnIodC5kKSxScih0LnApLFJyKHQucSksUnIodC5kcCksUnIodC5kcSksUnIodC5xaSkpLFA7aWYoXCJSU0FcIj09PXQua3R5JiZ2b2lkIDAhPT10Lm4mJnZvaWQgMCE9PXQuZSYmdm9pZCAwIT09dC5kKXJldHVybihQPW5ldyB1KS5zZXRQcml2YXRlKFJyKHQubiksUnIodC5lKSxScih0LmQpKSxQO2lmKFwiRUNcIj09PXQua3R5JiZ2b2lkIDAhPT10LmNydiYmdm9pZCAwIT09dC54JiZ2b2lkIDAhPT10LnkmJnZvaWQgMD09PXQuZCl7dmFyIGw9KGs9bmV3IHMoe2N1cnZlOnQuY3J2fSkpLmVjcGFyYW1zLmtleWxlbi80LGY9XCIwNFwiKyhcIjAwMDAwMDAwMDBcIitScih0LngpKS5zbGljZSgtbCkrKFwiMDAwMDAwMDAwMFwiK1JyKHQueSkpLnNsaWNlKC1sKTtyZXR1cm4gay5zZXRQdWJsaWNLZXlIZXgoZiksa31pZihcIkVDXCI9PT10Lmt0eSYmdm9pZCAwIT09dC5jcnYmJnZvaWQgMCE9PXQueCYmdm9pZCAwIT09dC55JiZ2b2lkIDAhPT10LmQpe2w9KGs9bmV3IHMoe2N1cnZlOnQuY3J2fSkpLmVjcGFyYW1zLmtleWxlbi80LGY9XCIwNFwiKyhcIjAwMDAwMDAwMDBcIitScih0LngpKS5zbGljZSgtbCkrKFwiMDAwMDAwMDAwMFwiK1JyKHQueSkpLnNsaWNlKC1sKTt2YXIgZz0oXCIwMDAwMDAwMDAwXCIrUnIodC5kKSkuc2xpY2UoLWwpO3JldHVybiBrLnNldFB1YmxpY0tleUhleChmKSxrLnNldFByaXZhdGVLZXlIZXgoZyksa31pZihcInBrY3M1cHJ2XCI9PT1yKXt2YXIgZCxwPXQsdj1GcjtpZig5PT09KGQ9bihwLDApKS5sZW5ndGgpKFA9bmV3IHUpLnJlYWRQS0NTNVBydktleUhleChwKTtlbHNlIGlmKDY9PT1kLmxlbmd0aCkoUD1uZXcgYSkucmVhZFBLQ1M1UHJ2S2V5SGV4KHApO2Vsc2V7aWYoIShkLmxlbmd0aD4yJiZcIjA0XCI9PT1wLnN1YnN0cihkWzFdLDIpKSl0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBQS0NTIzEvNSBoZXhhZGVjaW1hbCBrZXlcIik7KFA9bmV3IHMpLnJlYWRQS0NTNVBydktleUhleChwKX1yZXR1cm4gUH1pZihcInBrY3M4cHJ2XCI9PT1yKXJldHVybiBQPWguZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHQpO2lmKFwicGtjczhwdWJcIj09PXIpcmV0dXJuIGguX2dldEtleUZyb21QdWJsaWNQS0NTOEhleCh0KTtpZihcIng1MDlwdWJcIj09PXIpcmV0dXJuIG9uLmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KHQpO2lmKC0xIT10LmluZGV4T2YoXCItRU5EIENFUlRJRklDQVRFLVwiLDApfHwtMSE9dC5pbmRleE9mKFwiLUVORCBYNTA5IENFUlRJRklDQVRFLVwiLDApfHwtMSE9dC5pbmRleE9mKFwiLUVORCBUUlVTVEVEIENFUlRJRklDQVRFLVwiLDApKXJldHVybiBvbi5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTSh0KTtpZigtMSE9dC5pbmRleE9mKFwiLUVORCBQVUJMSUMgS0VZLVwiKSl7dmFyIHk9TXIodCxcIlBVQkxJQyBLRVlcIik7cmV0dXJuIGguX2dldEtleUZyb21QdWJsaWNQS0NTOEhleCh5KX1pZigtMSE9dC5pbmRleE9mKFwiLUVORCBSU0EgUFJJVkFURSBLRVktXCIpJiYtMT09dC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikpe3ZhciBtPWModCxcIlJTQSBQUklWQVRFIEtFWVwiKTtyZXR1cm4gaC5nZXRLZXkobSxudWxsLFwicGtjczVwcnZcIil9aWYoLTEhPXQuaW5kZXhPZihcIi1FTkQgRFNBIFBSSVZBVEUgS0VZLVwiKSYmLTE9PXQuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpKXt2YXIgXz1pKFI9Yyh0LFwiRFNBIFBSSVZBVEUgS0VZXCIpLDAsWzFdLFwiMDJcIiksUz1pKFIsMCxbMl0sXCIwMlwiKSxiPWkoUiwwLFszXSxcIjAyXCIpLEY9aShSLDAsWzRdLFwiMDJcIiksRT1pKFIsMCxbNV0sXCIwMlwiKTtyZXR1cm4oUD1uZXcgYSkuc2V0UHJpdmF0ZShuZXcgdyhfLDE2KSxuZXcgdyhTLDE2KSxuZXcgdyhiLDE2KSxuZXcgdyhGLDE2KSxuZXcgdyhFLDE2KSksUH1pZigtMSE9dC5pbmRleE9mKFwiLUVORCBFQyBQUklWQVRFIEtFWS1cIikmJi0xPT10LmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSl7bT1jKHQsXCJFQyBQUklWQVRFIEtFWVwiKTtyZXR1cm4gaC5nZXRLZXkobSxudWxsLFwicGtjczVwcnZcIil9aWYoLTEhPXQuaW5kZXhPZihcIi1FTkQgUFJJVkFURSBLRVktXCIpKXJldHVybiBoLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTSh0KTtpZigtMSE9dC5pbmRleE9mKFwiLUVORCBSU0EgUFJJVkFURSBLRVktXCIpJiYtMSE9dC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikpe3ZhciB4PWguZ2V0RGVjcnlwdGVkS2V5SGV4KHQsZSksQT1uZXcgTWU7cmV0dXJuIEEucmVhZFBLQ1M1UHJ2S2V5SGV4KHgpLEF9aWYoLTEhPXQuaW5kZXhPZihcIi1FTkQgRUMgUFJJVkFURSBLRVktXCIpJiYtMSE9dC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikpe3ZhciBrLFA9aShSPWguZ2V0RGVjcnlwdGVkS2V5SGV4KHQsZSksMCxbMV0sXCIwNFwiKSxDPWkoUiwwLFsyLDBdLFwiMDZcIiksVD1pKFIsMCxbMywwXSxcIjAzXCIpLnN1YnN0cigyKTtpZih2b2lkIDA9PT1Tci5jcnlwdG8uT0lELm9pZGhleDJuYW1lW0NdKXRocm93IG5ldyBFcnJvcihcInVuZGVmaW5lZCBPSUQoaGV4KSBpbiBLSlVSLmNyeXB0by5PSUQ6IFwiK0MpO3JldHVybihrPW5ldyBzKHtjdXJ2ZTpTci5jcnlwdG8uT0lELm9pZGhleDJuYW1lW0NdfSkpLnNldFB1YmxpY0tleUhleChUKSxrLnNldFByaXZhdGVLZXlIZXgoUCksay5pc1B1YmxpYz0hMSxrfWlmKC0xIT10LmluZGV4T2YoXCItRU5EIERTQSBQUklWQVRFIEtFWS1cIikmJi0xIT10LmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSl7dmFyIFI7Xz1pKFI9aC5nZXREZWNyeXB0ZWRLZXlIZXgodCxlKSwwLFsxXSxcIjAyXCIpLFM9aShSLDAsWzJdLFwiMDJcIiksYj1pKFIsMCxbM10sXCIwMlwiKSxGPWkoUiwwLFs0XSxcIjAyXCIpLEU9aShSLDAsWzVdLFwiMDJcIik7cmV0dXJuKFA9bmV3IGEpLnNldFByaXZhdGUobmV3IHcoXywxNiksbmV3IHcoUywxNiksbmV3IHcoYiwxNiksbmV3IHcoRiwxNiksbmV3IHcoRSwxNikpLFB9aWYoLTEhPXQuaW5kZXhPZihcIi1FTkQgRU5DUllQVEVEIFBSSVZBVEUgS0VZLVwiKSlyZXR1cm4gaC5nZXRLZXlGcm9tRW5jcnlwdGVkUEtDUzhQRU0odCxlKTt0aHJvdyBuZXcgRXJyb3IoXCJub3Qgc3VwcG9ydGVkIGFyZ3VtZW50XCIpfSx0bi5nZW5lcmF0ZUtleXBhaXI9ZnVuY3Rpb24odCxlKXtpZihcIlJTQVwiPT10KXt2YXIgcj1lOyhzPW5ldyBNZSkuZ2VuZXJhdGUocixcIjEwMDAxXCIpLHMuaXNQcml2YXRlPSEwLHMuaXNQdWJsaWM9ITA7dmFyIG49bmV3IE1lLGk9cy5uLnRvU3RyaW5nKDE2KSxvPXMuZS50b1N0cmluZygxNik7cmV0dXJuIG4uc2V0UHVibGljKGksbyksbi5pc1ByaXZhdGU9ITEsbi5pc1B1YmxpYz0hMCwoYT17fSkucHJ2S2V5T2JqPXMsYS5wdWJLZXlPYmo9bixhfWlmKFwiRUNcIj09dCl7dmFyIHMsYSx1PWUsYz1uZXcgU3IuY3J5cHRvLkVDRFNBKHtjdXJ2ZTp1fSkuZ2VuZXJhdGVLZXlQYWlySGV4KCk7cmV0dXJuKHM9bmV3IFNyLmNyeXB0by5FQ0RTQSh7Y3VydmU6dX0pKS5zZXRQdWJsaWNLZXlIZXgoYy5lY3B1YmhleCkscy5zZXRQcml2YXRlS2V5SGV4KGMuZWNwcnZoZXgpLHMuaXNQcml2YXRlPSEwLHMuaXNQdWJsaWM9ITEsKG49bmV3IFNyLmNyeXB0by5FQ0RTQSh7Y3VydmU6dX0pKS5zZXRQdWJsaWNLZXlIZXgoYy5lY3B1YmhleCksbi5pc1ByaXZhdGU9ITEsbi5pc1B1YmxpYz0hMCwoYT17fSkucHJ2S2V5T2JqPXMsYS5wdWJLZXlPYmo9bixhfXRocm93IG5ldyBFcnJvcihcInVua25vd24gYWxnb3JpdGhtOiBcIit0KX0sdG4uZ2V0UEVNPWZ1bmN0aW9uKHQsZSxyLG4saSxvKXt2YXIgcz1TcixhPXMuYXNuMSx1PWEuREVST2JqZWN0SWRlbnRpZmllcixjPWEuREVSSW50ZWdlcixoPWEuQVNOMVV0aWwubmV3T2JqZWN0LGw9YS54NTA5LlN1YmplY3RQdWJsaWNLZXlJbmZvLGY9cy5jcnlwdG8sZz1mLkRTQSxkPWYuRUNEU0EscD1NZTtmdW5jdGlvbiB5KHQpe3JldHVybiBoKHtzZXE6W3tpbnQ6MH0se2ludDp7YmlnaW50OnQubn19LHtpbnQ6dC5lfSx7aW50OntiaWdpbnQ6dC5kfX0se2ludDp7YmlnaW50OnQucH19LHtpbnQ6e2JpZ2ludDp0LnF9fSx7aW50OntiaWdpbnQ6dC5kbXAxfX0se2ludDp7YmlnaW50OnQuZG1xMX19LHtpbnQ6e2JpZ2ludDp0LmNvZWZmfX1dfSl9ZnVuY3Rpb24gbSh0KXtyZXR1cm4gaCh7c2VxOlt7aW50OjF9LHtvY3RzdHI6e2hleDp0LnBydktleUhleH19LHt0YWc6W1wiYTBcIiwhMCx7b2lkOntuYW1lOnQuY3VydmVOYW1lfX1dfSx7dGFnOltcImExXCIsITAse2JpdHN0cjp7aGV4OlwiMDBcIit0LnB1YktleUhleH19XX1dfSl9ZnVuY3Rpb24gXyh0KXtyZXR1cm4gaCh7c2VxOlt7aW50OjB9LHtpbnQ6e2JpZ2ludDp0LnB9fSx7aW50OntiaWdpbnQ6dC5xfX0se2ludDp7YmlnaW50OnQuZ319LHtpbnQ6e2JpZ2ludDp0Lnl9fSx7aW50OntiaWdpbnQ6dC54fX1dfSl9aWYoKHZvaWQgMCE9PXAmJnQgaW5zdGFuY2VvZiBwfHx2b2lkIDAhPT1nJiZ0IGluc3RhbmNlb2YgZ3x8dm9pZCAwIT09ZCYmdCBpbnN0YW5jZW9mIGQpJiYxPT10LmlzUHVibGljJiYodm9pZCAwPT09ZXx8XCJQS0NTOFBVQlwiPT1lKSlyZXR1cm4ganIoRj1uZXcgbCh0KS5nZXRFbmNvZGVkSGV4KCksXCJQVUJMSUMgS0VZXCIpO2lmKFwiUEtDUzFQUlZcIj09ZSYmdm9pZCAwIT09cCYmdCBpbnN0YW5jZW9mIHAmJih2b2lkIDA9PT1yfHxudWxsPT1yKSYmMT09dC5pc1ByaXZhdGUpcmV0dXJuIGpyKEY9eSh0KS5nZXRFbmNvZGVkSGV4KCksXCJSU0EgUFJJVkFURSBLRVlcIik7aWYoXCJQS0NTMVBSVlwiPT1lJiZ2b2lkIDAhPT1kJiZ0IGluc3RhbmNlb2YgZCYmKHZvaWQgMD09PXJ8fG51bGw9PXIpJiYxPT10LmlzUHJpdmF0ZSl7dmFyIFM9bmV3IHUoe25hbWU6dC5jdXJ2ZU5hbWV9KS5nZXRFbmNvZGVkSGV4KCksYj1tKHQpLmdldEVuY29kZWRIZXgoKSx3PVwiXCI7cmV0dXJuIHcrPWpyKFMsXCJFQyBQQVJBTUVURVJTXCIpLHcrPWpyKGIsXCJFQyBQUklWQVRFIEtFWVwiKX1pZihcIlBLQ1MxUFJWXCI9PWUmJnZvaWQgMCE9PWcmJnQgaW5zdGFuY2VvZiBnJiYodm9pZCAwPT09cnx8bnVsbD09cikmJjE9PXQuaXNQcml2YXRlKXJldHVybiBqcihGPV8odCkuZ2V0RW5jb2RlZEhleCgpLFwiRFNBIFBSSVZBVEUgS0VZXCIpO2lmKFwiUEtDUzVQUlZcIj09ZSYmdm9pZCAwIT09cCYmdCBpbnN0YW5jZW9mIHAmJnZvaWQgMCE9PXImJm51bGwhPXImJjE9PXQuaXNQcml2YXRlKXt2YXIgRj15KHQpLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdm9pZCAwPT09biYmKG49XCJERVMtRURFMy1DQkNcIiksdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJSU0FcIixGLHIsbixvKX1pZihcIlBLQ1M1UFJWXCI9PWUmJnZvaWQgMCE9PWQmJnQgaW5zdGFuY2VvZiBkJiZ2b2lkIDAhPT1yJiZudWxsIT1yJiYxPT10LmlzUHJpdmF0ZSl7Rj1tKHQpLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdm9pZCAwPT09biYmKG49XCJERVMtRURFMy1DQkNcIiksdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJFQ1wiLEYscixuLG8pfWlmKFwiUEtDUzVQUlZcIj09ZSYmdm9pZCAwIT09ZyYmdCBpbnN0YW5jZW9mIGcmJnZvaWQgMCE9PXImJm51bGwhPXImJjE9PXQuaXNQcml2YXRlKXtGPV8odCkuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB2b2lkIDA9PT1uJiYobj1cIkRFUy1FREUzLUNCQ1wiKSx0aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleChcIkRTQVwiLEYscixuLG8pfXZhciBFPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj14KGUscik7cmV0dXJuIG5ldyBoKHtzZXE6W3tzZXE6W3tvaWQ6e25hbWU6XCJwa2NzNVBCRVMyXCJ9fSx7c2VxOlt7c2VxOlt7b2lkOntuYW1lOlwicGtjczVQQktERjJcIn19LHtzZXE6W3tvY3RzdHI6e2hleDpuLnBia2RmMlNhbHR9fSx7aW50Om4ucGJrZGYySXRlcn1dfV19LHtzZXE6W3tvaWQ6e25hbWU6XCJkZXMtRURFMy1DQkNcIn19LHtvY3RzdHI6e2hleDpuLmVuY3J5cHRpb25TY2hlbWVJVn19XX1dfV19LHtvY3RzdHI6e2hleDpuLmNpcGhlcnRleHR9fV19KS5nZXRFbmNvZGVkSGV4KCl9LHg9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXYubGliLldvcmRBcnJheS5yYW5kb20oOCksaT12LmxpYi5Xb3JkQXJyYXkucmFuZG9tKDgpLG89di5QQktERjIocixuLHtrZXlTaXplOjYsaXRlcmF0aW9uczoxMDB9KSxzPXYuZW5jLkhleC5wYXJzZShlKSxhPXYuVHJpcGxlREVTLmVuY3J5cHQocyxvLHtpdjppfSkrXCJcIix1PXt9O3JldHVybiB1LmNpcGhlcnRleHQ9YSx1LnBia2RmMlNhbHQ9di5lbmMuSGV4LnN0cmluZ2lmeShuKSx1LnBia2RmMkl0ZXI9MTAwLHUuZW5jcnlwdGlvblNjaGVtZUFsZz1cIkRFUy1FREUzLUNCQ1wiLHUuZW5jcnlwdGlvblNjaGVtZUlWPXYuZW5jLkhleC5zdHJpbmdpZnkoaSksdX07aWYoXCJQS0NTOFBSVlwiPT1lJiZudWxsIT1wJiZ0IGluc3RhbmNlb2YgcCYmMT09dC5pc1ByaXZhdGUpe3ZhciBBPXkodCkuZ2V0RW5jb2RlZEhleCgpO0Y9aCh7c2VxOlt7aW50OjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJyc2FFbmNyeXB0aW9uXCJ9fSx7bnVsbDohMH1dfSx7b2N0c3RyOntoZXg6QX19XX0pLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdm9pZCAwPT09cnx8bnVsbD09cj9qcihGLFwiUFJJVkFURSBLRVlcIik6anIoYj1FKEYsciksXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9aWYoXCJQS0NTOFBSVlwiPT1lJiZ2b2lkIDAhPT1kJiZ0IGluc3RhbmNlb2YgZCYmMT09dC5pc1ByaXZhdGUpe0E9bmV3IGgoe3NlcTpbe2ludDoxfSx7b2N0c3RyOntoZXg6dC5wcnZLZXlIZXh9fSx7dGFnOltcImExXCIsITAse2JpdHN0cjp7aGV4OlwiMDBcIit0LnB1YktleUhleH19XX1dfSkuZ2V0RW5jb2RlZEhleCgpLEY9aCh7c2VxOlt7aW50OjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJlY1B1YmxpY0tleVwifX0se29pZDp7bmFtZTp0LmN1cnZlTmFtZX19XX0se29jdHN0cjp7aGV4OkF9fV19KS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHZvaWQgMD09PXJ8fG51bGw9PXI/anIoRixcIlBSSVZBVEUgS0VZXCIpOmpyKGI9RShGLHIpLFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpfWlmKFwiUEtDUzhQUlZcIj09ZSYmdm9pZCAwIT09ZyYmdCBpbnN0YW5jZW9mIGcmJjE9PXQuaXNQcml2YXRlKXtBPW5ldyBjKHtiaWdpbnQ6dC54fSkuZ2V0RW5jb2RlZEhleCgpLEY9aCh7c2VxOlt7aW50OjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJkc2FcIn19LHtzZXE6W3tpbnQ6e2JpZ2ludDp0LnB9fSx7aW50OntiaWdpbnQ6dC5xfX0se2ludDp7YmlnaW50OnQuZ319XX1dfSx7b2N0c3RyOntoZXg6QX19XX0pLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdm9pZCAwPT09cnx8bnVsbD09cj9qcihGLFwiUFJJVkFURSBLRVlcIik6anIoYj1FKEYsciksXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgb2JqZWN0IG5vciBmb3JtYXRcIil9LHRuLmdldEtleUZyb21DU1JQRU09ZnVuY3Rpb24odCl7dmFyIGU9TXIodCxcIkNFUlRJRklDQVRFIFJFUVVFU1RcIik7cmV0dXJuIHRuLmdldEtleUZyb21DU1JIZXgoZSl9LHRuLmdldEtleUZyb21DU1JIZXg9ZnVuY3Rpb24odCl7dmFyIGU9dG4ucGFyc2VDU1JIZXgodCk7cmV0dXJuIHRuLmdldEtleShlLnA4cHVia2V5aGV4LG51bGwsXCJwa2NzOHB1YlwiKX0sdG4ucGFyc2VDU1JIZXg9ZnVuY3Rpb24odCl7dmFyIGU9RnIscj1lLmdldENoaWxkSWR4LG49ZS5nZXRUTFYsaT17fSxvPXQ7aWYoXCIzMFwiIT1vLnN1YnN0cigwLDIpKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBDU1IoY29kZTowMDEpXCIpO3ZhciBzPXIobywwKTtpZihzLmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBDU1IoY29kZTowMDIpXCIpO2lmKFwiMzBcIiE9by5zdWJzdHIoc1swXSwyKSl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAzKVwiKTt2YXIgYT1yKG8sc1swXSk7aWYoYS5sZW5ndGg8Myl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDA0KVwiKTtyZXR1cm4gaS5wOHB1YmtleWhleD1uKG8sYVsyXSksaX0sdG4uZ2V0S2V5SUQ9ZnVuY3Rpb24odCl7dmFyIGU9dG4scj1GcjtcInN0cmluZ1wiPT10eXBlb2YgdCYmLTEhPXQuaW5kZXhPZihcIkJFR0lOIFwiKSYmKHQ9ZS5nZXRLZXkodCkpO3ZhciBuPU1yKGUuZ2V0UEVNKHQpKSxpPXIuZ2V0SWR4YnlMaXN0KG4sMCxbMV0pLG89ci5nZXRWKG4saSkuc3Vic3RyaW5nKDIpO3JldHVybiBTci5jcnlwdG8uVXRpbC5oYXNoSGV4KG8sXCJzaGExXCIpfSx0bi5nZXRKV0tGcm9tS2V5PWZ1bmN0aW9uKHQpe3ZhciBlPXt9O2lmKHQgaW5zdGFuY2VvZiBNZSYmdC5pc1ByaXZhdGUpcmV0dXJuIGUua3R5PVwiUlNBXCIsZS5uPVRyKHQubi50b1N0cmluZygxNikpLGUuZT1Ucih0LmUudG9TdHJpbmcoMTYpKSxlLmQ9VHIodC5kLnRvU3RyaW5nKDE2KSksZS5wPVRyKHQucC50b1N0cmluZygxNikpLGUucT1Ucih0LnEudG9TdHJpbmcoMTYpKSxlLmRwPVRyKHQuZG1wMS50b1N0cmluZygxNikpLGUuZHE9VHIodC5kbXExLnRvU3RyaW5nKDE2KSksZS5xaT1Ucih0LmNvZWZmLnRvU3RyaW5nKDE2KSksZTtpZih0IGluc3RhbmNlb2YgTWUmJnQuaXNQdWJsaWMpcmV0dXJuIGUua3R5PVwiUlNBXCIsZS5uPVRyKHQubi50b1N0cmluZygxNikpLGUuZT1Ucih0LmUudG9TdHJpbmcoMTYpKSxlO2lmKHQgaW5zdGFuY2VvZiBTci5jcnlwdG8uRUNEU0EmJnQuaXNQcml2YXRlKXtpZihcIlAtMjU2XCIhPT0obj10LmdldFNob3J0TklTVFBDdXJ2ZU5hbWUoKSkmJlwiUC0zODRcIiE9PW4pdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgY3VydmUgbmFtZSBmb3IgSldUOiBcIituKTt2YXIgcj10LmdldFB1YmxpY0tleVhZSGV4KCk7cmV0dXJuIGUua3R5PVwiRUNcIixlLmNydj1uLGUueD1UcihyLngpLGUueT1UcihyLnkpLGUuZD1Ucih0LnBydktleUhleCksZX1pZih0IGluc3RhbmNlb2YgU3IuY3J5cHRvLkVDRFNBJiZ0LmlzUHVibGljKXt2YXIgbjtpZihcIlAtMjU2XCIhPT0obj10LmdldFNob3J0TklTVFBDdXJ2ZU5hbWUoKSkmJlwiUC0zODRcIiE9PW4pdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgY3VydmUgbmFtZSBmb3IgSldUOiBcIituKTtyPXQuZ2V0UHVibGljS2V5WFlIZXgoKTtyZXR1cm4gZS5rdHk9XCJFQ1wiLGUuY3J2PW4sZS54PVRyKHIueCksZS55PVRyKHIueSksZX10aHJvdyBuZXcgRXJyb3IoXCJub3Qgc3VwcG9ydGVkIGtleSBvYmplY3RcIil9LE1lLmdldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXg9ZnVuY3Rpb24odCl7cmV0dXJuIEZyLmdldENoaWxkSWR4KHQsMCl9LE1lLmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleD1mdW5jdGlvbih0KXt2YXIgZSxyPUZyLmdldFYsbj1yKHQsKGU9TWUuZ2V0UG9zQXJyYXlPZkNoaWxkcmVuRnJvbUhleCh0KSlbMF0pLGk9cih0LGVbMV0pLG89cih0LGVbMl0pLHM9cih0LGVbM10pLGE9cih0LGVbNF0pLHU9cih0LGVbNV0pLGM9cih0LGVbNl0pLGg9cih0LGVbN10pLGw9cih0LGVbOF0pO3JldHVybihlPW5ldyBBcnJheSkucHVzaChuLGksbyxzLGEsdSxjLGgsbCksZX0sTWUucHJvdG90eXBlLnJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZz1mdW5jdGlvbih0KXt2YXIgZT1Ncih0KSxyPU1lLmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleChlKTt0aGlzLnNldFByaXZhdGVFeChyWzFdLHJbMl0sclszXSxyWzRdLHJbNV0scls2XSxyWzddLHJbOF0pfSxNZS5wcm90b3R5cGUucmVhZFBLQ1M1UHJ2S2V5SGV4PWZ1bmN0aW9uKHQpe3ZhciBlPU1lLmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleCh0KTt0aGlzLnNldFByaXZhdGVFeChlWzFdLGVbMl0sZVszXSxlWzRdLGVbNV0sZVs2XSxlWzddLGVbOF0pfSxNZS5wcm90b3R5cGUucmVhZFBLQ1M4UHJ2S2V5SGV4PWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpLG8scyxhLHUsYz1GcixoPWMuZ2V0VmJ5TGlzdEV4O2lmKCExPT09Yy5pc0FTTjFIRVgodCkpdGhyb3cgbmV3IEVycm9yKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIik7dHJ5e2U9aCh0LDAsWzIsMCwxXSxcIjAyXCIpLHI9aCh0LDAsWzIsMCwyXSxcIjAyXCIpLG49aCh0LDAsWzIsMCwzXSxcIjAyXCIpLGk9aCh0LDAsWzIsMCw0XSxcIjAyXCIpLG89aCh0LDAsWzIsMCw1XSxcIjAyXCIpLHM9aCh0LDAsWzIsMCw2XSxcIjAyXCIpLGE9aCh0LDAsWzIsMCw3XSxcIjAyXCIpLHU9aCh0LDAsWzIsMCw4XSxcIjAyXCIpfWNhdGNoKHQpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTIzggcGxhaW4gUlNBIHByaXZhdGUga2V5XCIpfXRoaXMuc2V0UHJpdmF0ZUV4KGUscixuLGksbyxzLGEsdSl9LE1lLnByb3RvdHlwZS5yZWFkUEtDUzVQdWJLZXlIZXg9ZnVuY3Rpb24odCl7dmFyIGU9RnIscj1lLmdldFY7aWYoITE9PT1lLmlzQVNOMUhFWCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJrZXlIZXggaXMgbm90IEFTTi4xIGhleCBzdHJpbmdcIik7dmFyIG49ZS5nZXRDaGlsZElkeCh0LDApO2lmKDIhPT1uLmxlbmd0aHx8XCIwMlwiIT09dC5zdWJzdHIoblswXSwyKXx8XCIwMlwiIT09dC5zdWJzdHIoblsxXSwyKSl0aHJvdyBuZXcgRXJyb3IoXCJ3cm9uZyBoZXggZm9yIFBLQ1MjNSBwdWJsaWMga2V5XCIpO3ZhciBpPXIodCxuWzBdKSxvPXIodCxuWzFdKTt0aGlzLnNldFB1YmxpYyhpLG8pfSxNZS5wcm90b3R5cGUucmVhZFBLQ1M4UHViS2V5SGV4PWZ1bmN0aW9uKHQpe3ZhciBlPUZyO2lmKCExPT09ZS5pc0FTTjFIRVgodCkpdGhyb3cgbmV3IEVycm9yKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIik7aWYoXCIwNjA5MmE4NjQ4ODZmNzBkMDEwMTAxXCIhPT1lLmdldFRMVmJ5TGlzdEV4KHQsMCxbMCwwXSkpdGhyb3cgbmV3IEVycm9yKFwibm90IFBLQ1M4IFJTQSBwdWJsaWMga2V5XCIpO3ZhciByPWUuZ2V0VExWYnlMaXN0RXgodCwwLFsxLDBdKTt0aGlzLnJlYWRQS0NTNVB1YktleUhleChyKX0sTWUucHJvdG90eXBlLnJlYWRDZXJ0UHViS2V5SGV4PWZ1bmN0aW9uKHQsZSl7dmFyIHIsbjsocj1uZXcgb24pLnJlYWRDZXJ0SGV4KHQpLG49ci5nZXRQdWJsaWNLZXlIZXgoKSx0aGlzLnJlYWRQS0NTOFB1YktleUhleChuKX07bmV3IFJlZ0V4cChcIlteMC05YS1mXVwiLFwiZ2lcIik7ZnVuY3Rpb24gZW4odCxlKXtmb3IodmFyIHI9XCJcIixuPWUvNC10Lmxlbmd0aCxpPTA7aTxuO2krKylyKz1cIjBcIjtyZXR1cm4gcit0fWZ1bmN0aW9uIHJuKHQsZSxyKXtmb3IodmFyIG49XCJcIixpPTA7bi5sZW5ndGg8ZTspbis9THIocihOcih0K1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLFsoNDI3ODE5MDA4MCZpKT4+MjQsKDE2NzExNjgwJmkpPj4xNiwoNjUyODAmaSk+PjgsMjU1JmldKSkpKSxpKz0xO3JldHVybiBufWZ1bmN0aW9uIG5uKHQpe2Zvcih2YXIgZSBpbiBTci5jcnlwdG8uVXRpbC5ESUdFU1RJTkZPSEVBRCl7dmFyIHI9U3IuY3J5cHRvLlV0aWwuRElHRVNUSU5GT0hFQURbZV0sbj1yLmxlbmd0aDtpZih0LnN1YnN0cmluZygwLG4pPT1yKXJldHVybltlLHQuc3Vic3RyaW5nKG4pXX1yZXR1cm5bXX1mdW5jdGlvbiBvbih0KXt2YXIgZSxyPUZyLG49ci5nZXRDaGlsZElkeCxpPXIuZ2V0VixvPXIuZ2V0VExWLHM9ci5nZXRWYnlMaXN0LGE9ci5nZXRWYnlMaXN0RXgsdT1yLmdldFRMVmJ5TGlzdCxjPXIuZ2V0VExWYnlMaXN0RXgsaD1yLmdldElkeGJ5TGlzdCxsPXIuZ2V0SWR4YnlMaXN0RXgsZj1yLmdldFZpZHgsZz1yLmdldEludCxkPXIub2lkbmFtZSxwPXIuaGV4dG9vaWRzdHIsdj1Ncjt0cnl7ZT1Tci5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllci5QU1NOQU1FMkFTTjFUTFZ9Y2F0Y2godCl7fXRoaXMuSEVYMlNUQUc9e1wiMGNcIjpcInV0ZjhcIiwxMzpcInByblwiLDE2OlwiaWE1XCIsXCIxYVwiOlwidmlzXCIsXCIxZVwiOlwiYm1wXCJ9LHRoaXMuaGV4PW51bGwsdGhpcy52ZXJzaW9uPTAsdGhpcy5mb2Zmc2V0PTAsdGhpcy5hRXh0SW5mbz1udWxsLHRoaXMuZ2V0VmVyc2lvbj1mdW5jdGlvbigpe2lmKG51bGw9PT10aGlzLmhleHx8MCE9PXRoaXMudmVyc2lvbilyZXR1cm4gdGhpcy52ZXJzaW9uO3ZhciB0PXUodGhpcy5oZXgsMCxbMCwwXSk7aWYoXCJhMFwiPT10LnN1YnN0cigwLDIpKXt2YXIgZT11KHQsMCxbMF0pLHI9ZyhlLDApO2lmKHI8MHx8MjxyKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCB2ZXJzaW9uIGZpZWxkXCIpO3JldHVybiB0aGlzLnZlcnNpb249cisxLHRoaXMudmVyc2lvbn1yZXR1cm4gdGhpcy52ZXJzaW9uPTEsdGhpcy5mb2Zmc2V0PS0xLDF9LHRoaXMuZ2V0U2VyaWFsTnVtYmVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIGEodGhpcy5oZXgsMCxbMCwwXSxcIjAyXCIpfSx0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobUZpZWxkPWZ1bmN0aW9uKCl7dmFyIHQ9Yyh0aGlzLmhleCwwLFswLDFdKTtyZXR1cm4gdGhpcy5nZXRBbGdvcml0aG1JZGVudGlmaWVyTmFtZSh0KX0sdGhpcy5nZXRBbGdvcml0aG1JZGVudGlmaWVyTmFtZT1mdW5jdGlvbih0KXtmb3IodmFyIHIgaW4gZSlpZih0PT09ZVtyXSlyZXR1cm4gcjtyZXR1cm4gZChhKHQsMCxbMF0sXCIwNlwiKSl9LHRoaXMuZ2V0SXNzdWVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0WDUwME5hbWUodGhpcy5nZXRJc3N1ZXJIZXgoKSl9LHRoaXMuZ2V0SXNzdWVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHUodGhpcy5oZXgsMCxbMCwzK3RoaXMuZm9mZnNldF0sXCIzMFwiKX0sdGhpcy5nZXRJc3N1ZXJTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRJc3N1ZXIoKS5zdHJ9LHRoaXMuZ2V0U3ViamVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFg1MDBOYW1lKHRoaXMuZ2V0U3ViamVjdEhleCgpKX0sdGhpcy5nZXRTdWJqZWN0SGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHUodGhpcy5oZXgsMCxbMCw1K3RoaXMuZm9mZnNldF0sXCIzMFwiKX0sdGhpcy5nZXRTdWJqZWN0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0U3ViamVjdCgpLnN0cn0sdGhpcy5nZXROb3RCZWZvcmU9ZnVuY3Rpb24oKXt2YXIgdD1zKHRoaXMuaGV4LDAsWzAsNCt0aGlzLmZvZmZzZXQsMF0pO3JldHVybiB0PXQucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpLHQ9ZGVjb2RlVVJJQ29tcG9uZW50KHQpfSx0aGlzLmdldE5vdEFmdGVyPWZ1bmN0aW9uKCl7dmFyIHQ9cyh0aGlzLmhleCwwLFswLDQrdGhpcy5mb2Zmc2V0LDFdKTtyZXR1cm4gdD10LnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKSx0PWRlY29kZVVSSUNvbXBvbmVudCh0KX0sdGhpcy5nZXRQdWJsaWNLZXlIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gci5nZXRUTFZieUxpc3QodGhpcy5oZXgsMCxbMCw2K3RoaXMuZm9mZnNldF0sXCIzMFwiKX0sdGhpcy5nZXRQdWJsaWNLZXlJZHg9ZnVuY3Rpb24oKXtyZXR1cm4gaCh0aGlzLmhleCwwLFswLDYrdGhpcy5mb2Zmc2V0XSxcIjMwXCIpfSx0aGlzLmdldFB1YmxpY0tleUNvbnRlbnRJZHg9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFB1YmxpY0tleUlkeCgpO3JldHVybiBoKHRoaXMuaGV4LHQsWzEsMF0sXCIzMFwiKX0sdGhpcy5nZXRQdWJsaWNLZXk9ZnVuY3Rpb24oKXtyZXR1cm4gdG4uZ2V0S2V5KHRoaXMuZ2V0UHVibGljS2V5SGV4KCksbnVsbCxcInBrY3M4cHViXCIpfSx0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobU5hbWU9ZnVuY3Rpb24oKXt2YXIgdD11KHRoaXMuaGV4LDAsWzFdLFwiMzBcIik7cmV0dXJuIHRoaXMuZ2V0QWxnb3JpdGhtSWRlbnRpZmllck5hbWUodCl9LHRoaXMuZ2V0U2lnbmF0dXJlVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gcyh0aGlzLmhleCwwLFsyXSxcIjAzXCIsITApfSx0aGlzLnZlcmlmeVNpZ25hdHVyZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobUZpZWxkKCkscj10aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4KCksbj11KHRoaXMuaGV4LDAsWzBdLFwiMzBcIiksaT1uZXcgU3IuY3J5cHRvLlNpZ25hdHVyZSh7YWxnOmV9KTtyZXR1cm4gaS5pbml0KHQpLGkudXBkYXRlSGV4KG4pLGkudmVyaWZ5KHIpfSx0aGlzLnBhcnNlRXh0PWZ1bmN0aW9uKHQpe3ZhciBlLG8sYTtpZih2b2lkIDA9PT10KXtpZihhPXRoaXMuaGV4LDMhPT10aGlzLnZlcnNpb24pcmV0dXJuLTE7ZT1oKGEsMCxbMCw3LDBdLFwiMzBcIiksbz1uKGEsZSl9ZWxzZXthPU1yKHQpO3ZhciB1PWgoYSwwLFswLDMsMCwwXSxcIjA2XCIpO2lmKFwiMmE4NjQ4ODZmNzBkMDEwOTBlXCIhPWkoYSx1KSlyZXR1cm4gdm9pZCh0aGlzLmFFeHRJbmZvPW5ldyBBcnJheSk7ZT1oKGEsMCxbMCwzLDAsMSwwXSxcIjMwXCIpLG89bihhLGUpLHRoaXMuaGV4PWF9dGhpcy5hRXh0SW5mbz1uZXcgQXJyYXk7Zm9yKHZhciBjPTA7YzxvLmxlbmd0aDtjKyspe3ZhciBsPXtjcml0aWNhbDohMX0sZz0wOzM9PT1uKGEsb1tjXSkubGVuZ3RoJiYobC5jcml0aWNhbD0hMCxnPTEpLGwub2lkPXIuaGV4dG9vaWRzdHIocyhhLG9bY10sWzBdLFwiMDZcIikpO3ZhciBkPWgoYSxvW2NdLFsxK2ddKTtsLnZpZHg9ZihhLGQpLHRoaXMuYUV4dEluZm8ucHVzaChsKX19LHRoaXMuZ2V0RXh0SW5mbz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmFFeHRJbmZvLHI9dDtpZih0Lm1hdGNoKC9eWzAtOS5dKyQvKXx8KHI9U3IuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZCh0KSksXCJcIiE9PXIpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspaWYoZVtuXS5vaWQ9PT1yKXJldHVybiBlW25dfSx0aGlzLmdldEV4dEJhc2ljQ29uc3RyYWludHM9ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT10JiZ2b2lkIDA9PT1lKXt2YXIgcj10aGlzLmdldEV4dEluZm8oXCJiYXNpY0NvbnN0cmFpbnRzXCIpO2lmKHZvaWQgMD09PXIpcmV0dXJuO3Q9byh0aGlzLmhleCxyLnZpZHgpLGU9ci5jcml0aWNhbH12YXIgbj17ZXh0bmFtZTpcImJhc2ljQ29uc3RyYWludHNcIn07aWYoZSYmKG4uY3JpdGljYWw9ITApLFwiMzAwMFwiPT09dClyZXR1cm4gbjtpZihcIjMwMDMwMTAxZmZcIj09PXQpcmV0dXJuIG4uY0E9ITAsbjtpZihcIjMwMDYwMTAxZmYwMlwiPT09dC5zdWJzdHIoMCwxMikpe3ZhciBzPWkodCwxMCksYT1wYXJzZUludChzLDE2KTtyZXR1cm4gbi5jQT0hMCxuLnBhdGhMZW49YSxufXRocm93IG5ldyBFcnJvcihcImhFeHRWIHBhcnNlIGVycm9yOiBcIit0KX0sdGhpcy5nZXRFeHRLZXlVc2FnZT1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXQmJnZvaWQgMD09PWUpe3ZhciByPXRoaXMuZ2V0RXh0SW5mbyhcImtleVVzYWdlXCIpO2lmKHZvaWQgMD09PXIpcmV0dXJuO3Q9byh0aGlzLmhleCxyLnZpZHgpLGU9ci5jcml0aWNhbH12YXIgbj17ZXh0bmFtZTpcImtleVVzYWdlXCJ9O3JldHVybiBlJiYobi5jcml0aWNhbD0hMCksbi5uYW1lcz10aGlzLmdldEV4dEtleVVzYWdlU3RyaW5nKHQpLnNwbGl0KFwiLFwiKSxufSx0aGlzLmdldEV4dEtleVVzYWdlQmluPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpe3ZhciBlPXRoaXMuZ2V0RXh0SW5mbyhcImtleVVzYWdlXCIpO2lmKHZvaWQgMD09PWUpcmV0dXJuXCJcIjt0PW8odGhpcy5oZXgsZS52aWR4KX1pZig4IT10Lmxlbmd0aCYmMTAhPXQubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBrZXkgdXNhZ2UgdmFsdWU6IFwiK3QpO3ZhciByPVwiMDAwMDAwMDAwMDAwMDAwXCIrcGFyc2VJbnQodC5zdWJzdHIoNiksMTYpLnRvU3RyaW5nKDIpO3JldHVybiA4PT10Lmxlbmd0aCYmKHI9ci5zbGljZSgtOCkpLDEwPT10Lmxlbmd0aCYmKHI9ci5zbGljZSgtMTYpKSxcIlwiPT0ocj1yLnJlcGxhY2UoLzArJC8sXCJcIikpJiYocj1cIjBcIikscn0sdGhpcy5nZXRFeHRLZXlVc2FnZVN0cmluZz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5nZXRFeHRLZXlVc2FnZUJpbih0KSxyPW5ldyBBcnJheSxuPTA7bjxlLmxlbmd0aDtuKyspXCIxXCI9PWUuc3Vic3RyKG4sMSkmJnIucHVzaChvbi5LRVlVU0FHRV9OQU1FW25dKTtyZXR1cm4gci5qb2luKFwiLFwiKX0sdGhpcy5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcj1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXQmJnZvaWQgMD09PWUpe3ZhciByPXRoaXMuZ2V0RXh0SW5mbyhcInN1YmplY3RLZXlJZGVudGlmaWVyXCIpO2lmKHZvaWQgMD09PXIpcmV0dXJuO3Q9byh0aGlzLmhleCxyLnZpZHgpLGU9ci5jcml0aWNhbH12YXIgbj17ZXh0bmFtZTpcInN1YmplY3RLZXlJZGVudGlmaWVyXCJ9O2UmJihuLmNyaXRpY2FsPSEwKTt2YXIgcz1pKHQsMCk7cmV0dXJuIG4ua2lkPXtoZXg6c30sbn0sdGhpcy5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dCYmdm9pZCAwPT09ZSl7dmFyIHI9dGhpcy5nZXRFeHRJbmZvKFwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwiKTtpZih2b2lkIDA9PT1yKXJldHVybjt0PW8odGhpcy5oZXgsci52aWR4KSxlPXIuY3JpdGljYWx9dmFyIHM9e2V4dG5hbWU6XCJhdXRob3JpdHlLZXlJZGVudGlmaWVyXCJ9O2UmJihzLmNyaXRpY2FsPSEwKTtmb3IodmFyIGE9bih0LDApLHU9MDt1PGEubGVuZ3RoO3UrKyl7dmFyIGM9dC5zdWJzdHIoYVt1XSwyKTtpZihcIjgwXCI9PT1jJiYocy5raWQ9e2hleDppKHQsYVt1XSl9KSxcImExXCI9PT1jKXt2YXIgaD1vKHQsYVt1XSksbD10aGlzLmdldEdlbmVyYWxOYW1lcyhoKTtzLmlzc3Vlcj1sWzBdLmRufVwiODJcIj09PWMmJihzLnNuPXtoZXg6aSh0LGFbdV0pfSl9cmV0dXJuIHN9LHRoaXMuZ2V0RXh0RXh0S2V5VXNhZ2U9ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT10JiZ2b2lkIDA9PT1lKXt2YXIgcj10aGlzLmdldEV4dEluZm8oXCJleHRLZXlVc2FnZVwiKTtpZih2b2lkIDA9PT1yKXJldHVybjt0PW8odGhpcy5oZXgsci52aWR4KSxlPXIuY3JpdGljYWx9dmFyIHM9e2V4dG5hbWU6XCJleHRLZXlVc2FnZVwiLGFycmF5OltdfTtlJiYocy5jcml0aWNhbD0hMCk7Zm9yKHZhciBhPW4odCwwKSx1PTA7dTxhLmxlbmd0aDt1Kyspcy5hcnJheS5wdXNoKGQoaSh0LGFbdV0pKSk7cmV0dXJuIHN9LHRoaXMuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRFeHRJbmZvKFwiZXh0S2V5VXNhZ2VcIik7aWYodm9pZCAwPT09dClyZXR1cm4gdDt2YXIgZT1uZXcgQXJyYXkscj1vKHRoaXMuaGV4LHQudmlkeCk7aWYoXCJcIj09PXIpcmV0dXJuIGU7Zm9yKHZhciBzPW4ociwwKSxhPTA7YTxzLmxlbmd0aDthKyspZS5wdXNoKGQoaShyLHNbYV0pKSk7cmV0dXJuIGV9LHRoaXMuZ2V0RXh0U3ViamVjdEFsdE5hbWU9ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT10JiZ2b2lkIDA9PT1lKXt2YXIgcj10aGlzLmdldEV4dEluZm8oXCJzdWJqZWN0QWx0TmFtZVwiKTtpZih2b2lkIDA9PT1yKXJldHVybjt0PW8odGhpcy5oZXgsci52aWR4KSxlPXIuY3JpdGljYWx9dmFyIG49e2V4dG5hbWU6XCJzdWJqZWN0QWx0TmFtZVwiLGFycmF5OltdfTtyZXR1cm4gZSYmKG4uY3JpdGljYWw9ITApLG4uYXJyYXk9dGhpcy5nZXRHZW5lcmFsTmFtZXModCksbn0sdGhpcy5nZXRFeHRJc3N1ZXJBbHROYW1lPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dCYmdm9pZCAwPT09ZSl7dmFyIHI9dGhpcy5nZXRFeHRJbmZvKFwiaXNzdWVyQWx0TmFtZVwiKTtpZih2b2lkIDA9PT1yKXJldHVybjt0PW8odGhpcy5oZXgsci52aWR4KSxlPXIuY3JpdGljYWx9dmFyIG49e2V4dG5hbWU6XCJpc3N1ZXJBbHROYW1lXCIsYXJyYXk6W119O3JldHVybiBlJiYobi5jcml0aWNhbD0hMCksbi5hcnJheT10aGlzLmdldEdlbmVyYWxOYW1lcyh0KSxufSx0aGlzLmdldEdlbmVyYWxOYW1lcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bih0LDApLHI9W10saT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgcz10aGlzLmdldEdlbmVyYWxOYW1lKG8odCxlW2ldKSk7dm9pZCAwIT09cyYmci5wdXNoKHMpfXJldHVybiByfSx0aGlzLmdldEdlbmVyYWxOYW1lPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc3Vic3RyKDAsMikscj1pKHQsMCksbj1McihyKTtyZXR1cm5cIjgxXCI9PWU/e3JmYzgyMjpufTpcIjgyXCI9PWU/e2RuczpufTpcIjg2XCI9PWU/e3VyaTpufTpcIjg3XCI9PWU/e2lwOnpyKHIpfTpcImE0XCI9PWU/e2RuOnRoaXMuZ2V0WDUwME5hbWUocil9OnZvaWQgMH0sdGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZTI9ZnVuY3Rpb24oKXt2YXIgdCxlLHIscz10aGlzLmdldEV4dEluZm8oXCJzdWJqZWN0QWx0TmFtZVwiKTtpZih2b2lkIDA9PT1zKXJldHVybiBzO2Zvcih2YXIgYT1uZXcgQXJyYXksdT1vKHRoaXMuaGV4LHMudmlkeCksYz1uKHUsMCksaD0wO2g8Yy5sZW5ndGg7aCsrKXI9dS5zdWJzdHIoY1toXSwyKSx0PWkodSxjW2hdKSxcIjgxXCI9PT1yJiYoZT1Ecih0KSxhLnB1c2goW1wiTUFJTFwiLGVdKSksXCI4MlwiPT09ciYmKGU9RHIodCksYS5wdXNoKFtcIkROU1wiLGVdKSksXCI4NFwiPT09ciYmKGU9b24uaGV4MmRuKHQsMCksYS5wdXNoKFtcIkROXCIsZV0pKSxcIjg2XCI9PT1yJiYoZT1Ecih0KSxhLnB1c2goW1wiVVJJXCIsZV0pKSxcIjg3XCI9PT1yJiYoZT16cih0KSxhLnB1c2goW1wiSVBcIixlXSkpO3JldHVybiBhfSx0aGlzLmdldEV4dENSTERpc3RyaWJ1dGlvblBvaW50cz1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXQmJnZvaWQgMD09PWUpe3ZhciByPXRoaXMuZ2V0RXh0SW5mbyhcImNSTERpc3RyaWJ1dGlvblBvaW50c1wiKTtpZih2b2lkIDA9PT1yKXJldHVybjt0PW8odGhpcy5oZXgsci52aWR4KSxlPXIuY3JpdGljYWx9dmFyIGk9e2V4dG5hbWU6XCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIixhcnJheTpbXX07ZSYmKGkuY3JpdGljYWw9ITApO2Zvcih2YXIgcz1uKHQsMCksYT0wO2E8cy5sZW5ndGg7YSsrKXt2YXIgdT1vKHQsc1thXSk7aS5hcnJheS5wdXNoKHRoaXMuZ2V0RGlzdHJpYnV0aW9uUG9pbnQodSkpfXJldHVybiBpfSx0aGlzLmdldERpc3RyaWJ1dGlvblBvaW50PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT17fSxyPW4odCwwKSxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBzPXQuc3Vic3RyKHJbaV0sMiksYT1vKHQscltpXSk7XCJhMFwiPT1zJiYoZS5kcG5hbWU9dGhpcy5nZXREaXN0cmlidXRpb25Qb2ludE5hbWUoYSkpfXJldHVybiBlfSx0aGlzLmdldERpc3RyaWJ1dGlvblBvaW50TmFtZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9e30scj1uKHQsMCksaT0wO2k8ci5sZW5ndGg7aSsrKXt2YXIgcz10LnN1YnN0cihyW2ldLDIpLGE9byh0LHJbaV0pO1wiYTBcIj09cyYmKGUuZnVsbD10aGlzLmdldEdlbmVyYWxOYW1lcyhhKSl9cmV0dXJuIGV9LHRoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzVVJJPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRFeHRJbmZvKFwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIpO2lmKHZvaWQgMD09PXQpcmV0dXJuIHQ7Zm9yKHZhciBlPW5ldyBBcnJheSxyPW4odGhpcy5oZXgsdC52aWR4KSxpPTA7aTxyLmxlbmd0aDtpKyspdHJ5e3ZhciBvPURyKHModGhpcy5oZXgscltpXSxbMCwwLDBdLFwiODZcIikpO2UucHVzaChvKX1jYXRjaCh0KXt9cmV0dXJuIGV9LHRoaXMuZ2V0RXh0QUlBSW5mbz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0RXh0SW5mbyhcImF1dGhvcml0eUluZm9BY2Nlc3NcIik7aWYodm9pZCAwPT09dClyZXR1cm4gdDtmb3IodmFyIGU9e29jc3A6W10sY2Fpc3N1ZXI6W119LHI9bih0aGlzLmhleCx0LnZpZHgpLGk9MDtpPHIubGVuZ3RoO2krKyl7dmFyIG89cyh0aGlzLmhleCxyW2ldLFswXSxcIjA2XCIpLGE9cyh0aGlzLmhleCxyW2ldLFsxXSxcIjg2XCIpO1wiMmIwNjAxMDUwNTA3MzAwMVwiPT09byYmZS5vY3NwLnB1c2goRHIoYSkpLFwiMmIwNjAxMDUwNTA3MzAwMlwiPT09byYmZS5jYWlzc3Vlci5wdXNoKERyKGEpKX1yZXR1cm4gZX0sdGhpcy5nZXRFeHRBdXRob3JpdHlJbmZvQWNjZXNzPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dCYmdm9pZCAwPT09ZSl7dmFyIHI9dGhpcy5nZXRFeHRJbmZvKFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZih2b2lkIDA9PT1yKXJldHVybjt0PW8odGhpcy5oZXgsci52aWR4KSxlPXIuY3JpdGljYWx9dmFyIGk9e2V4dG5hbWU6XCJhdXRob3JpdHlJbmZvQWNjZXNzXCIsYXJyYXk6W119O2UmJihpLmNyaXRpY2FsPSEwKTtmb3IodmFyIHU9bih0LDApLGM9MDtjPHUubGVuZ3RoO2MrKyl7dmFyIGg9YSh0LHVbY10sWzBdLFwiMDZcIiksbD1EcihzKHQsdVtjXSxbMV0sXCI4NlwiKSk7aWYoXCIyYjA2MDEwNTA1MDczMDAxXCI9PWgpaS5hcnJheS5wdXNoKHtvY3NwOmx9KTtlbHNle2lmKFwiMmIwNjAxMDUwNTA3MzAwMlwiIT1oKXRocm93IG5ldyBFcnJvcihcInVua25vd24gbWV0aG9kOiBcIitoKTtpLmFycmF5LnB1c2goe2NhaXNzdWVyOmx9KX19cmV0dXJuIGl9LHRoaXMuZ2V0RXh0Q2VydGlmaWNhdGVQb2xpY2llcz1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXQmJnZvaWQgMD09PWUpe3ZhciByPXRoaXMuZ2V0RXh0SW5mbyhcImNlcnRpZmljYXRlUG9saWNpZXNcIik7aWYodm9pZCAwPT09cilyZXR1cm47dD1vKHRoaXMuaGV4LHIudmlkeCksZT1yLmNyaXRpY2FsfXZhciBpPXtleHRuYW1lOlwiY2VydGlmaWNhdGVQb2xpY2llc1wiLGFycmF5OltdfTtlJiYoaS5jcml0aWNhbD0hMCk7Zm9yKHZhciBzPW4odCwwKSxhPTA7YTxzLmxlbmd0aDthKyspe3ZhciB1PW8odCxzW2FdKSxjPXRoaXMuZ2V0UG9saWN5SW5mb3JtYXRpb24odSk7aS5hcnJheS5wdXNoKGMpfXJldHVybiBpfSx0aGlzLmdldFBvbGljeUluZm9ybWF0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPXt9LHI9cyh0LDAsWzBdLFwiMDZcIik7ZS5wb2xpY3lvaWQ9ZChyKTt2YXIgaT1sKHQsMCxbMV0sXCIzMFwiKTtpZigtMSE9aSl7ZS5hcnJheT1bXTtmb3IodmFyIGE9bih0LGkpLHU9MDt1PGEubGVuZ3RoO3UrKyl7dmFyIGM9byh0LGFbdV0pLGg9dGhpcy5nZXRQb2xpY3lRdWFsaWZpZXJJbmZvKGMpO2UuYXJyYXkucHVzaChoKX19cmV0dXJuIGV9LHRoaXMuZ2V0UG9saWN5UXVhbGlmaWVySW5mbz1mdW5jdGlvbih0KXt2YXIgZT17fSxyPXModCwwLFswXSxcIjA2XCIpO2lmKFwiMmIwNjAxMDUwNTA3MDIwMVwiPT09cil7dmFyIG49YSh0LDAsWzFdLFwiMTZcIik7ZS5jcHM9THIobil9ZWxzZSBpZihcIjJiMDYwMTA1MDUwNzAyMDJcIj09PXIpe3ZhciBpPXUodCwwLFsxXSxcIjMwXCIpO2UudW5vdGljZT10aGlzLmdldFVzZXJOb3RpY2UoaSl9cmV0dXJuIGV9LHRoaXMuZ2V0VXNlck5vdGljZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9e30scj1uKHQsMCksaT0wO2k8ci5sZW5ndGg7aSsrKXt2YXIgcz1vKHQscltpXSk7XCIzMFwiIT1zLnN1YnN0cigwLDIpJiYoZS5leHB0ZXh0PXRoaXMuZ2V0RGlzcGxheVRleHQocykpfXJldHVybiBlfSx0aGlzLmdldERpc3BsYXlUZXh0PWZ1bmN0aW9uKHQpe3ZhciBlPXt9O3JldHVybiBlLnR5cGU9e1wiMGNcIjpcInV0ZjhcIiwxNjpcImlhNVwiLFwiMWFcIjpcInZpc1wiLFwiMWVcIjpcImJtcFwifVt0LnN1YnN0cigwLDIpXSxlLnN0cj1McihpKHQsMCkpLGV9LHRoaXMuZ2V0RXh0Q1JMTnVtYmVyPWZ1bmN0aW9uKHQsZSl7dmFyIHI9e2V4dG5hbWU6XCJjUkxOdW1iZXJcIn07aWYoZSYmKHIuY3JpdGljYWw9ITApLFwiMDJcIj09dC5zdWJzdHIoMCwyKSlyZXR1cm4gci5udW09e2hleDppKHQsMCl9LHI7dGhyb3cgbmV3IEVycm9yKFwiaEV4dFYgcGFyc2UgZXJyb3I6IFwiK3QpfSx0aGlzLmdldEV4dENSTFJlYXNvbj1mdW5jdGlvbih0LGUpe3ZhciByPXtleHRuYW1lOlwiY1JMUmVhc29uXCJ9O2lmKGUmJihyLmNyaXRpY2FsPSEwKSxcIjBhXCI9PXQuc3Vic3RyKDAsMikpcmV0dXJuIHIuY29kZT1wYXJzZUludChpKHQsMCksMTYpLHI7dGhyb3cgbmV3IEVycm9yKFwiaEV4dFYgcGFyc2UgZXJyb3I6IFwiK3QpfSx0aGlzLmdldEV4dE9jc3BOb25jZT1mdW5jdGlvbih0LGUpe3ZhciByPXtleHRuYW1lOlwib2NzcE5vbmNlXCJ9O2UmJihyLmNyaXRpY2FsPSEwKTt2YXIgbj1pKHQsMCk7cmV0dXJuIHIuaGV4PW4scn0sdGhpcy5nZXRFeHRPY3NwTm9DaGVjaz1mdW5jdGlvbih0LGUpe3ZhciByPXtleHRuYW1lOlwib2NzcE5vQ2hlY2tcIn07cmV0dXJuIGUmJihyLmNyaXRpY2FsPSEwKSxyfSx0aGlzLmdldEV4dEFkb2JlVGltZVN0YW1wPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dCYmdm9pZCAwPT09ZSl7dmFyIHI9dGhpcy5nZXRFeHRJbmZvKFwiYWRvYmVUaW1lU3RhbXBcIik7aWYodm9pZCAwPT09cilyZXR1cm47dD1vKHRoaXMuaGV4LHIudmlkeCksZT1yLmNyaXRpY2FsfXZhciBpPXtleHRuYW1lOlwiYWRvYmVUaW1lU3RhbXBcIn07ZSYmKGkuY3JpdGljYWw9ITApO3ZhciBzPW4odCwwKTtpZihzLmxlbmd0aD4xKXt2YXIgYT1vKHQsc1sxXSksdT10aGlzLmdldEdlbmVyYWxOYW1lKGEpO251bGwhPXUudXJpJiYoaS51cmk9dS51cmkpfWlmKHMubGVuZ3RoPjIpe3ZhciBjPW8odCxzWzJdKTtcIjAxMDFmZlwiPT1jJiYoaS5yZXFhdXRoPSEwKSxcIjAxMDEwMFwiPT1jJiYoaS5yZXFhdXRoPSExKX1yZXR1cm4gaX0sdGhpcy5nZXRYNTAwTmFtZVJ1bGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW51bGwscj1bXSxuPTA7bjx0Lmxlbmd0aDtuKyspZm9yKHZhciBpPXRbbl0sbz0wO288aS5sZW5ndGg7bysrKXIucHVzaChpW29dKTtmb3Iobj0wO248ci5sZW5ndGg7bisrKXt2YXIgcz1yW25dLGE9cy5kcyx1PXMudmFsdWUsYz1zLnR5cGU7aWYoXCI6XCIrYSxcInByblwiIT1hJiZcInV0ZjhcIiE9YSYmXCJpYTVcIiE9YSlyZXR1cm5cIm1peGVkXCI7aWYoXCJpYTVcIj09YSl7aWYoXCJDTlwiIT1jKXJldHVyblwibWl4ZWRcIjtpZihTci5sYW5nLlN0cmluZy5pc01haWwodSkpY29udGludWU7cmV0dXJuXCJtaXhlZFwifWlmKFwiQ1wiPT1jKXtpZihcInByblwiPT1hKWNvbnRpbnVlO3JldHVyblwibWl4ZWRcIn1pZihcIjpcIithLG51bGw9PWUpZT1hO2Vsc2UgaWYoZSE9PWEpcmV0dXJuXCJtaXhlZFwifXJldHVybiBudWxsPT1lP1wicHJuXCI6ZX0sdGhpcy5nZXRYNTAwTmFtZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldFg1MDBOYW1lQXJyYXkodCk7cmV0dXJue2FycmF5OmUsc3RyOnRoaXMuZG5hcnJheXRvc3RyKGUpfX0sdGhpcy5nZXRYNTAwTmFtZUFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxyPW4odCwwKSxpPTA7aTxyLmxlbmd0aDtpKyspZS5wdXNoKHRoaXMuZ2V0UkROKG8odCxyW2ldKSkpO3JldHVybiBlfSx0aGlzLmdldFJETj1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10scj1uKHQsMCksaT0wO2k8ci5sZW5ndGg7aSsrKWUucHVzaCh0aGlzLmdldEF0dHJUeXBlQW5kVmFsdWUobyh0LHJbaV0pKSk7cmV0dXJuIGV9LHRoaXMuZ2V0QXR0clR5cGVBbmRWYWx1ZT1mdW5jdGlvbih0KXt2YXIgZT17dHlwZTpudWxsLHZhbHVlOm51bGwsZHM6bnVsbH0scj1uKHQsMCksaT1zKHQsclswXSxbXSxcIjA2XCIpLG89cyh0LHJbMV0sW10pLGE9U3IuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChpKTtyZXR1cm4gZS50eXBlPVNyLmFzbjEueDUwOS5PSUQub2lkMmF0eXBlKGEpLGUuZHM9dGhpcy5IRVgyU1RBR1t0LnN1YnN0cihyWzFdLDIpXSxcImJtcFwiIT1lLmRzP2UudmFsdWU9RHIobyk6ZS52YWx1ZT1ZcihvKSxlfSx0aGlzLnJlYWRDZXJ0UEVNPWZ1bmN0aW9uKHQpe3RoaXMucmVhZENlcnRIZXgodih0KSl9LHRoaXMucmVhZENlcnRIZXg9ZnVuY3Rpb24odCl7dGhpcy5oZXg9dCx0aGlzLmdldFZlcnNpb24oKTt0cnl7aCh0aGlzLmhleCwwLFswLDddLFwiYTNcIiksdGhpcy5wYXJzZUV4dCgpfWNhdGNoKHQpe319LHRoaXMuZ2V0UGFyYW09ZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gdC52ZXJzaW9uPXRoaXMuZ2V0VmVyc2lvbigpLHQuc2VyaWFsPXtoZXg6dGhpcy5nZXRTZXJpYWxOdW1iZXJIZXgoKX0sdC5zaWdhbGc9dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCgpLHQuaXNzdWVyPXRoaXMuZ2V0SXNzdWVyKCksdC5ub3RiZWZvcmU9dGhpcy5nZXROb3RCZWZvcmUoKSx0Lm5vdGFmdGVyPXRoaXMuZ2V0Tm90QWZ0ZXIoKSx0LnN1YmplY3Q9dGhpcy5nZXRTdWJqZWN0KCksdC5zYmpwdWJrZXk9anIodGhpcy5nZXRQdWJsaWNLZXlIZXgoKSxcIlBVQkxJQyBLRVlcIiksdGhpcy5hRXh0SW5mby5sZW5ndGg+MCYmKHQuZXh0PXRoaXMuZ2V0RXh0UGFyYW1BcnJheSgpKSx0LnNpZ2hleD10aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4KCksdH0sdGhpcy5nZXRFeHRQYXJhbUFycmF5PWZ1bmN0aW9uKHQpe251bGw9PXQmJigtMSE9bCh0aGlzLmhleCwwLFswLFwiWzNdXCJdKSYmKHQ9Yyh0aGlzLmhleCwwLFswLFwiWzNdXCIsMF0sXCIzMFwiKSkpO2Zvcih2YXIgZT1bXSxyPW4odCwwKSxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBzPW8odCxyW2ldKSxhPXRoaXMuZ2V0RXh0UGFyYW0ocyk7bnVsbCE9YSYmZS5wdXNoKGEpfXJldHVybiBlfSx0aGlzLmdldEV4dFBhcmFtPWZ1bmN0aW9uKHQpe3ZhciBlPW4odCwwKS5sZW5ndGg7aWYoMiE9ZSYmMyE9ZSl0aHJvdyBuZXcgRXJyb3IoXCJ3cm9uZyBudW1iZXIgZWxlbWVudHMgaW4gRXh0ZW5zaW9uOiBcIitlK1wiIFwiK3QpO3ZhciByPXAocyh0LDAsWzBdLFwiMDZcIikpLGk9ITE7Mz09ZSYmXCIwMTAxZmZcIj09dSh0LDAsWzFdKSYmKGk9ITApO3ZhciBvPXUodCwwLFtlLTEsMF0pLGE9dm9pZCAwO2lmKFwiMi41LjI5LjE0XCI9PXI/YT10aGlzLmdldEV4dFN1YmplY3RLZXlJZGVudGlmaWVyKG8saSk6XCIyLjUuMjkuMTVcIj09cj9hPXRoaXMuZ2V0RXh0S2V5VXNhZ2UobyxpKTpcIjIuNS4yOS4xN1wiPT1yP2E9dGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZShvLGkpOlwiMi41LjI5LjE4XCI9PXI/YT10aGlzLmdldEV4dElzc3VlckFsdE5hbWUobyxpKTpcIjIuNS4yOS4xOVwiPT1yP2E9dGhpcy5nZXRFeHRCYXNpY0NvbnN0cmFpbnRzKG8saSk6XCIyLjUuMjkuMzFcIj09cj9hPXRoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzKG8saSk6XCIyLjUuMjkuMzJcIj09cj9hPXRoaXMuZ2V0RXh0Q2VydGlmaWNhdGVQb2xpY2llcyhvLGkpOlwiMi41LjI5LjM1XCI9PXI/YT10aGlzLmdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXIobyxpKTpcIjIuNS4yOS4zN1wiPT1yP2E9dGhpcy5nZXRFeHRFeHRLZXlVc2FnZShvLGkpOlwiMS4zLjYuMS41LjUuNy4xLjFcIj09cj9hPXRoaXMuZ2V0RXh0QXV0aG9yaXR5SW5mb0FjY2VzcyhvLGkpOlwiMi41LjI5LjIwXCI9PXI/YT10aGlzLmdldEV4dENSTE51bWJlcihvLGkpOlwiMi41LjI5LjIxXCI9PXI/YT10aGlzLmdldEV4dENSTFJlYXNvbihvLGkpOlwiMS4zLjYuMS41LjUuNy40OC4xLjJcIj09cj9hPXRoaXMuZ2V0RXh0T2NzcE5vbmNlKG8saSk6XCIxLjMuNi4xLjUuNS43LjQ4LjEuNVwiPT1yP2E9dGhpcy5nZXRFeHRPY3NwTm9DaGVjayhvLGkpOlwiMS4yLjg0MC4xMTM1ODMuMS4xLjkuMVwiPT1yJiYoYT10aGlzLmdldEV4dEFkb2JlVGltZVN0YW1wKG8saSkpLG51bGwhPWEpcmV0dXJuIGE7dmFyIGM9e2V4dG5hbWU6cixleHRuOm99O3JldHVybiBpJiYoYy5jcml0aWNhbD0hMCksY30sdGhpcy5maW5kRXh0PWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspaWYodFtyXS5leHRuYW1lPT1lKXJldHVybiB0W3JdO3JldHVybiBudWxsfSx0aGlzLnVwZGF0ZUV4dENEUEZ1bGxVUkk9ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzLmZpbmRFeHQodCxcImNSTERpc3RyaWJ1dGlvblBvaW50c1wiKTtpZihudWxsIT1yJiZudWxsIT1yLmFycmF5KWZvcih2YXIgbj1yLmFycmF5LGk9MDtpPG4ubGVuZ3RoO2krKylpZihudWxsIT1uW2ldLmRwbmFtZSYmbnVsbCE9bltpXS5kcG5hbWUuZnVsbClmb3IodmFyIG89bltpXS5kcG5hbWUuZnVsbCxzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBhPW9baV07bnVsbCE9YS51cmkmJihhLnVyaT1lKX19LHRoaXMudXBkYXRlRXh0QUlBT0NTUD1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMuZmluZEV4dCh0LFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZihudWxsIT1yJiZudWxsIT1yLmFycmF5KWZvcih2YXIgbj1yLmFycmF5LGk9MDtpPG4ubGVuZ3RoO2krKyludWxsIT1uW2ldLm9jc3AmJihuW2ldLm9jc3A9ZSl9LHRoaXMudXBkYXRlRXh0QUlBQ0FJc3N1ZXI9ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzLmZpbmRFeHQodCxcImF1dGhvcml0eUluZm9BY2Nlc3NcIik7aWYobnVsbCE9ciYmbnVsbCE9ci5hcnJheSlmb3IodmFyIG49ci5hcnJheSxpPTA7aTxuLmxlbmd0aDtpKyspbnVsbCE9bltpXS5jYWlzc3VlciYmKG5baV0uY2Fpc3N1ZXI9ZSl9LHRoaXMuZG5hcnJheXRvc3RyPWZ1bmN0aW9uKHQpe3JldHVyblwiL1wiK3QubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gZSh0KXtyZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbiBlKHQpe3JldHVybiB0LnR5cGUrXCI9XCIrdC52YWx1ZX0odCkucmVwbGFjZSgvXFwrLyxcIlxcXFwrXCIpfSkpLmpvaW4oXCIrXCIpfSh0KS5yZXBsYWNlKC9cXC8vLFwiXFxcXC9cIil9KSkuam9pbihcIi9cIil9LHRoaXMuZ2V0SW5mbz1mdW5jdGlvbigpe3ZhciB0LGUscixuPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUuYXJyYXkpLnJlcGxhY2UoL1tcXFtcXF1cXHtcXH1cXFwiXS9nLFwiXCIpfSxpPWZ1bmN0aW9uIHQoZSl7Zm9yKHZhciByPVwiXCIsbj1lLmFycmF5LGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIG89bltpXTtpZihyKz1cIiAgICBwb2xpY3kgb2lkOiBcIitvLnBvbGljeW9pZCtcIlxcblwiLHZvaWQgMCE9PW8uYXJyYXkpZm9yKHZhciBzPTA7czxvLmFycmF5Lmxlbmd0aDtzKyspe3ZhciBhPW8uYXJyYXlbc107dm9pZCAwIT09YS5jcHMmJihyKz1cIiAgICBjcHM6IFwiK2EuY3BzK1wiXFxuXCIpfX1yZXR1cm4gcn0sbz1mdW5jdGlvbiB0KGUpe2Zvcih2YXIgcj1cIlwiLG49ZS5hcnJheSxpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciBvPW5baV07dHJ5e3ZvaWQgMCE9PW8uZHBuYW1lLmZ1bGxbMF0udXJpJiYocis9XCIgICAgXCIrby5kcG5hbWUuZnVsbFswXS51cmkrXCJcXG5cIil9Y2F0Y2godCl7fXRyeXt2b2lkIDAhPT1vLmRuYW1lLmZ1bGxbMF0uZG4uaGV4JiYocis9XCIgICAgXCIrb24uaGV4MmRuKG8uZHBuYW1lLmZ1bGxbMF0uZG4uaGV4KStcIlxcblwiKX1jYXRjaCh0KXt9fXJldHVybiByfSxzPWZ1bmN0aW9uIHQoZSl7Zm9yKHZhciByPVwiXCIsbj1lLmFycmF5LGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIG89bltpXTt2b2lkIDAhPT1vLmNhaXNzdWVyJiYocis9XCIgICAgY2Fpc3N1ZXI6IFwiK28uY2Fpc3N1ZXIrXCJcXG5cIiksdm9pZCAwIT09by5vY3NwJiYocis9XCIgICAgb2NzcDogXCIrby5vY3NwK1wiXFxuXCIpfXJldHVybiByfTtpZih0PVwiQmFzaWMgRmllbGRzXFxuXCIsdCs9XCIgIHNlcmlhbCBudW1iZXI6IFwiK3RoaXMuZ2V0U2VyaWFsTnVtYmVySGV4KCkrXCJcXG5cIix0Kz1cIiAgc2lnbmF0dXJlIGFsZ29yaXRobTogXCIrdGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCgpK1wiXFxuXCIsdCs9XCIgIGlzc3VlcjogXCIrdGhpcy5nZXRJc3N1ZXJTdHJpbmcoKStcIlxcblwiLHQrPVwiICBub3RCZWZvcmU6IFwiK3RoaXMuZ2V0Tm90QmVmb3JlKCkrXCJcXG5cIix0Kz1cIiAgbm90QWZ0ZXI6IFwiK3RoaXMuZ2V0Tm90QWZ0ZXIoKStcIlxcblwiLHQrPVwiICBzdWJqZWN0OiBcIit0aGlzLmdldFN1YmplY3RTdHJpbmcoKStcIlxcblwiLHQrPVwiICBzdWJqZWN0IHB1YmxpYyBrZXkgaW5mbzogXFxuXCIsdCs9XCIgICAga2V5IGFsZ29yaXRobTogXCIrKGU9dGhpcy5nZXRQdWJsaWNLZXkoKSkudHlwZStcIlxcblwiLFwiUlNBXCI9PT1lLnR5cGUmJih0Kz1cIiAgICBuPVwiKyRyKGUubi50b1N0cmluZygxNikpLnN1YnN0cigwLDE2KStcIi4uLlxcblwiLHQrPVwiICAgIGU9XCIrJHIoZS5lLnRvU3RyaW5nKDE2KSkrXCJcXG5cIiksbnVsbCE9KHI9dGhpcy5hRXh0SW5mbykpe3QrPVwiWDUwOXYzIEV4dGVuc2lvbnM6XFxuXCI7Zm9yKHZhciBhPTA7YTxyLmxlbmd0aDthKyspe3ZhciB1PXJbYV0sYz1Tci5hc24xLng1MDkuT0lELm9pZDJuYW1lKHUub2lkKTtcIlwiPT09YyYmKGM9dS5vaWQpO3ZhciBoPVwiXCI7aWYoITA9PT11LmNyaXRpY2FsJiYoaD1cIkNSSVRJQ0FMXCIpLHQrPVwiICBcIitjK1wiIFwiK2grXCI6XFxuXCIsXCJiYXNpY0NvbnN0cmFpbnRzXCI9PT1jKXt2YXIgbD10aGlzLmdldEV4dEJhc2ljQ29uc3RyYWludHMoKTt2b2lkIDA9PT1sLmNBP3QrPVwiICAgIHt9XFxuXCI6KHQrPVwiICAgIGNBPXRydWVcIix2b2lkIDAhPT1sLnBhdGhMZW4mJih0Kz1cIiwgcGF0aExlbj1cIitsLnBhdGhMZW4pLHQrPVwiXFxuXCIpfWVsc2UgaWYoXCJrZXlVc2FnZVwiPT09Yyl0Kz1cIiAgICBcIit0aGlzLmdldEV4dEtleVVzYWdlU3RyaW5nKCkrXCJcXG5cIjtlbHNlIGlmKFwic3ViamVjdEtleUlkZW50aWZpZXJcIj09PWMpdCs9XCIgICAgXCIrdGhpcy5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcigpLmtpZC5oZXgrXCJcXG5cIjtlbHNlIGlmKFwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwiPT09Yyl7dmFyIGY9dGhpcy5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyKCk7dm9pZCAwIT09Zi5raWQmJih0Kz1cIiAgICBraWQ9XCIrZi5raWQuaGV4K1wiXFxuXCIpfWVsc2V7aWYoXCJleHRLZXlVc2FnZVwiPT09Yyl0Kz1cIiAgICBcIit0aGlzLmdldEV4dEV4dEtleVVzYWdlKCkuYXJyYXkuam9pbihcIiwgXCIpK1wiXFxuXCI7ZWxzZSBpZihcInN1YmplY3RBbHROYW1lXCI9PT1jKXQrPVwiICAgIFwiK24odGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZSgpKStcIlxcblwiO2Vsc2UgaWYoXCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIj09PWMpdCs9byh0aGlzLmdldEV4dENSTERpc3RyaWJ1dGlvblBvaW50cygpKTtlbHNlIGlmKFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiPT09Yyl0Kz1zKHRoaXMuZ2V0RXh0QXV0aG9yaXR5SW5mb0FjY2VzcygpKTtlbHNlXCJjZXJ0aWZpY2F0ZVBvbGljaWVzXCI9PT1jJiYodCs9aSh0aGlzLmdldEV4dENlcnRpZmljYXRlUG9saWNpZXMoKSkpfX19cmV0dXJuIHQrPVwic2lnbmF0dXJlIGFsZ29yaXRobTogXCIrdGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lKCkrXCJcXG5cIix0Kz1cInNpZ25hdHVyZTogXCIrdGhpcy5nZXRTaWduYXR1cmVWYWx1ZUhleCgpLnN1YnN0cigwLDE2KStcIi4uLlxcblwifSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKC0xIT10LmluZGV4T2YoXCItLS0tLUJFR0lOXCIpP3RoaXMucmVhZENlcnRQRU0odCk6U3IubGFuZy5TdHJpbmcuaXNIZXgodCkmJnRoaXMucmVhZENlcnRIZXgodCkpfU1lLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQsZSl7dmFyIHI9ZnVuY3Rpb24gdChyKXtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhyLGUpfSh0KTtyZXR1cm4gdGhpcy5zaWduV2l0aE1lc3NhZ2VIYXNoKHIsZSl9LE1lLnByb3RvdHlwZS5zaWduV2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKHQsZSl7dmFyIHI9T2UoU3IuY3J5cHRvLlV0aWwuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleCh0LGUsdGhpcy5uLmJpdExlbmd0aCgpKSwxNik7cmV0dXJuIGVuKHRoaXMuZG9Qcml2YXRlKHIpLnRvU3RyaW5nKDE2KSx0aGlzLm4uYml0TGVuZ3RoKCkpfSxNZS5wcm90b3R5cGUuc2lnblBTUz1mdW5jdGlvbih0LGUscil7dmFyIG49ZnVuY3Rpb24gdChyKXtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuaGFzaEhleChyLGUpfShOcih0KSk7cmV0dXJuIHZvaWQgMD09PXImJihyPS0xKSx0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2hQU1MobixlLHIpfSxNZS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaFBTUz1mdW5jdGlvbih0LGUscil7dmFyIG4saT1Mcih0KSxvPWkubGVuZ3RoLHM9dGhpcy5uLmJpdExlbmd0aCgpLTEsYT1NYXRoLmNlaWwocy84KSx1PWZ1bmN0aW9uIHQocil7cmV0dXJuIFNyLmNyeXB0by5VdGlsLmhhc2hIZXgocixlKX07aWYoLTE9PT1yfHx2b2lkIDA9PT1yKXI9bztlbHNlIGlmKC0yPT09cilyPWEtby0yO2Vsc2UgaWYocjwtMil0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNhbHQgbGVuZ3RoXCIpO2lmKGE8bytyKzIpdGhyb3cgbmV3IEVycm9yKFwiZGF0YSB0b28gbG9uZ1wiKTt2YXIgYz1cIlwiO3I+MCYmKGM9bmV3IEFycmF5KHIpLChuZXcgQmUpLm5leHRCeXRlcyhjKSxjPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGMpKTt2YXIgaD1Mcih1KE5yKFwiXFwwXFwwXFwwXFwwXFwwXFwwXFwwXFwwXCIraStjKSkpLGw9W107Zm9yKG49MDtuPGEtci1vLTI7bis9MSlsW25dPTA7dmFyIGY9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsbCkrXCJcdTAwMDFcIitjLGc9cm4oaCxmLmxlbmd0aCx1KSxkPVtdO2ZvcihuPTA7bjxmLmxlbmd0aDtuKz0xKWRbbl09Zi5jaGFyQ29kZUF0KG4pXmcuY2hhckNvZGVBdChuKTt2YXIgcD02NTI4MD4+OCphLXMmMjU1O2ZvcihkWzBdJj1+cCxuPTA7bjxvO24rKylkLnB1c2goaC5jaGFyQ29kZUF0KG4pKTtyZXR1cm4gZC5wdXNoKDE4OCksZW4odGhpcy5kb1ByaXZhdGUobmV3IHcoZCkpLnRvU3RyaW5nKDE2KSx0aGlzLm4uYml0TGVuZ3RoKCkpfSxNZS5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09KGU9ZS50b0xvd2VyQ2FzZSgpKS5tYXRjaCgvXlswLTlhLWZdKyQvKSlyZXR1cm4hMTt2YXIgcj1PZShlLDE2KSxuPXRoaXMubi5iaXRMZW5ndGgoKTtpZihyLmJpdExlbmd0aCgpPm4pcmV0dXJuITE7dmFyIGk9dGhpcy5kb1B1YmxpYyhyKS50b1N0cmluZygxNik7aWYoaS5sZW5ndGgrMyE9bi80KXJldHVybiExO3ZhciBvPW5uKGkucmVwbGFjZSgvXjFmKzAwLyxcIlwiKSk7aWYoMD09by5sZW5ndGgpcmV0dXJuITE7dmFyIHM9b1swXTtyZXR1cm4gb1sxXT09ZnVuY3Rpb24gdChlKXtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhlLHMpfSh0KX0sTWUucHJvdG90eXBlLnZlcmlmeVdpdGhNZXNzYWdlSGFzaD1mdW5jdGlvbih0LGUpe2lmKGUubGVuZ3RoIT1NYXRoLmNlaWwodGhpcy5uLmJpdExlbmd0aCgpLzQpKXJldHVybiExO3ZhciByPU9lKGUsMTYpO2lmKHIuYml0TGVuZ3RoKCk+dGhpcy5uLmJpdExlbmd0aCgpKXJldHVybiAwO3ZhciBuPW5uKHRoaXMuZG9QdWJsaWMocikudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sXCJcIikpO2lmKDA9PW4ubGVuZ3RoKXJldHVybiExO25bMF07cmV0dXJuIG5bMV09PXR9LE1lLnByb3RvdHlwZS52ZXJpZnlQU1M9ZnVuY3Rpb24odCxlLHIsbil7dmFyIGk9ZnVuY3Rpb24gdChlKXtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuaGFzaEhleChlLHIpfShOcih0KSk7cmV0dXJuIHZvaWQgMD09PW4mJihuPS0xKSx0aGlzLnZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyhpLGUscixuKX0sTWUucHJvdG90eXBlLnZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUz1mdW5jdGlvbih0LGUscixuKXtpZihlLmxlbmd0aCE9TWF0aC5jZWlsKHRoaXMubi5iaXRMZW5ndGgoKS80KSlyZXR1cm4hMTt2YXIgaSxvPW5ldyB3KGUsMTYpLHM9ZnVuY3Rpb24gdChlKXtyZXR1cm4gU3IuY3J5cHRvLlV0aWwuaGFzaEhleChlLHIpfSxhPUxyKHQpLHU9YS5sZW5ndGgsYz10aGlzLm4uYml0TGVuZ3RoKCktMSxoPU1hdGguY2VpbChjLzgpO2lmKC0xPT09bnx8dm9pZCAwPT09biluPXU7ZWxzZSBpZigtMj09PW4pbj1oLXUtMjtlbHNlIGlmKG48LTIpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzYWx0IGxlbmd0aFwiKTtpZihoPHUrbisyKXRocm93IG5ldyBFcnJvcihcImRhdGEgdG9vIGxvbmdcIik7dmFyIGw9dGhpcy5kb1B1YmxpYyhvKS50b0J5dGVBcnJheSgpO2ZvcihpPTA7aTxsLmxlbmd0aDtpKz0xKWxbaV0mPTI1NTtmb3IoO2wubGVuZ3RoPGg7KWwudW5zaGlmdCgwKTtpZigxODghPT1sW2gtMV0pdGhyb3cgbmV3IEVycm9yKFwiZW5jb2RlZCBtZXNzYWdlIGRvZXMgbm90IGVuZCBpbiAweGJjXCIpO3ZhciBmPShsPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGwpKS5zdWJzdHIoMCxoLXUtMSksZz1sLnN1YnN0cihmLmxlbmd0aCx1KSxkPTY1MjgwPj44KmgtYyYyNTU7aWYoMCE9KGYuY2hhckNvZGVBdCgwKSZkKSl0aHJvdyBuZXcgRXJyb3IoXCJiaXRzIGJleW9uZCBrZXlzaXplIG5vdCB6ZXJvXCIpO3ZhciBwPXJuKGcsZi5sZW5ndGgscyksdj1bXTtmb3IoaT0wO2k8Zi5sZW5ndGg7aSs9MSl2W2ldPWYuY2hhckNvZGVBdChpKV5wLmNoYXJDb2RlQXQoaSk7dlswXSY9fmQ7dmFyIHk9aC11LW4tMjtmb3IoaT0wO2k8eTtpKz0xKWlmKDAhPT12W2ldKXRocm93IG5ldyBFcnJvcihcImxlZnRtb3N0IG9jdGV0cyBub3QgemVyb1wiKTtpZigxIT09dlt5XSl0aHJvdyBuZXcgRXJyb3IoXCIweDAxIG1hcmtlciBub3QgZm91bmRcIik7cmV0dXJuIGc9PT1McihzKE5yKFwiXFwwXFwwXFwwXFwwXFwwXFwwXFwwXFwwXCIrYStTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyx2LnNsaWNlKC1uKSkpKSl9LE1lLlNBTFRfTEVOX0hMRU49LTEsTWUuU0FMVF9MRU5fTUFYPS0yLE1lLlNBTFRfTEVOX1JFQ09WRVI9LTIsb24uaGV4MmRuPWZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIHI9bmV3IG9uO0ZyLmdldFRMVih0LGUpO3JldHVybiByLmdldFg1MDBOYW1lKHQpLnN0cn0sb24uaGV4MnJkbj1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PWUmJihlPTApLFwiMzFcIiE9PXQuc3Vic3RyKGUsMikpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJETlwiKTtmb3IodmFyIHI9bmV3IEFycmF5LG49RnIuZ2V0Q2hpbGRJZHgodCxlKSxpPTA7aTxuLmxlbmd0aDtpKyspci5wdXNoKG9uLmhleDJhdHRyVHlwZVZhbHVlKHQsbltpXSkpO3JldHVybihyPXIubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKFwiK1wiLFwiXFxcXCtcIil9KSkpLmpvaW4oXCIrXCIpfSxvbi5oZXgyYXR0clR5cGVWYWx1ZT1mdW5jdGlvbih0LGUpe3ZhciByPUZyLG49ci5nZXRWO2lmKHZvaWQgMD09PWUmJihlPTApLFwiMzBcIiE9PXQuc3Vic3RyKGUsMikpdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGF0dHJpYnV0ZSB0eXBlIGFuZCB2YWx1ZVwiKTt2YXIgaT1yLmdldENoaWxkSWR4KHQsZSk7MiE9PWkubGVuZ3RofHx0LnN1YnN0cihpWzBdLDIpO3ZhciBvPW4odCxpWzBdKSxzPVNyLmFzbjEuQVNOMVV0aWwub2lkSGV4VG9JbnQobyk7cmV0dXJuIFNyLmFzbjEueDUwOS5PSUQub2lkMmF0eXBlKHMpK1wiPVwiK0xyKG4odCxpWzFdKSl9LG9uLmdldFB1YmxpY0tleUZyb21DZXJ0SGV4PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBvbjtyZXR1cm4gZS5yZWFkQ2VydEhleCh0KSxlLmdldFB1YmxpY0tleSgpfSxvbi5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgb247cmV0dXJuIGUucmVhZENlcnRQRU0odCksZS5nZXRQdWJsaWNLZXkoKX0sb24uZ2V0UHVibGljS2V5SW5mb1Byb3BPZkNlcnRQRU09ZnVuY3Rpb24odCl7dmFyIGUscixuPUZyLmdldFZieUxpc3QsaT17fTtyZXR1cm4gaS5hbGdwYXJhbT1udWxsLChlPW5ldyBvbikucmVhZENlcnRQRU0odCkscj1lLmdldFB1YmxpY0tleUhleCgpLGkua2V5aGV4PW4ociwwLFsxXSxcIjAzXCIpLnN1YnN0cigyKSxpLmFsZ29pZD1uKHIsMCxbMCwwXSxcIjA2XCIpLFwiMmE4NjQ4Y2UzZDAyMDFcIj09PWkuYWxnb2lkJiYoaS5hbGdwYXJhbT1uKHIsMCxbMCwxXSxcIjA2XCIpKSxpfSxvbi5LRVlVU0FHRV9OQU1FPVtcImRpZ2l0YWxTaWduYXR1cmVcIixcIm5vblJlcHVkaWF0aW9uXCIsXCJrZXlFbmNpcGhlcm1lbnRcIixcImRhdGFFbmNpcGhlcm1lbnRcIixcImtleUFncmVlbWVudFwiLFwia2V5Q2VydFNpZ25cIixcImNSTFNpZ25cIixcImVuY2lwaGVyT25seVwiLFwiZGVjaXBoZXJPbmx5XCJdLHZvaWQgMCE9PVNyJiZTcnx8KGUuS0pVUj1Tcj17fSksdm9pZCAwIT09U3IuandzJiZTci5qd3N8fChTci5qd3M9e30pLFNyLmp3cy5KV1M9ZnVuY3Rpb24oKXt2YXIgdD1Tci5qd3MuSldTLmlzU2FmZUpTT05TdHJpbmc7dGhpcy5wYXJzZUpXUz1mdW5jdGlvbihlLHIpe2lmKHZvaWQgMD09PXRoaXMucGFyc2VkSldTfHwhciYmdm9pZCAwPT09dGhpcy5wYXJzZWRKV1Muc2lndmFsSCl7dmFyIG49ZS5tYXRjaCgvXihbXi5dKylcXC4oW14uXSspXFwuKFteLl0rKSQvKTtpZihudWxsPT1uKXRocm93XCJKV1Mgc2lnbmF0dXJlIGlzIG5vdCBhIGZvcm0gb2YgJ0hlYWQuUGF5bG9hZC5TaWdWYWx1ZScuXCI7dmFyIGk9blsxXSxvPW5bMl0scz1uWzNdLGE9aStcIi5cIitvO2lmKHRoaXMucGFyc2VkSldTPXt9LHRoaXMucGFyc2VkSldTLmhlYWRCNjRVPWksdGhpcy5wYXJzZWRKV1MucGF5bG9hZEI2NFU9byx0aGlzLnBhcnNlZEpXUy5zaWd2YWxCNjRVPXMsdGhpcy5wYXJzZWRKV1Muc2k9YSwhcil7dmFyIHU9UnIocyksYz1PZSh1LDE2KTt0aGlzLnBhcnNlZEpXUy5zaWd2YWxIPXUsdGhpcy5wYXJzZWRKV1Muc2lndmFsQkk9Y312YXIgaD13cihpKSxsPXdyKG8pO2lmKHRoaXMucGFyc2VkSldTLmhlYWRTPWgsdGhpcy5wYXJzZWRKV1MucGF5bG9hZFM9bCwhdChoLHRoaXMucGFyc2VkSldTLFwiaGVhZFBcIikpdGhyb3dcIm1hbGZvcm1lZCBKU09OIHN0cmluZyBmb3IgSldTIEhlYWQ6IFwiK2h9fX0sU3IuandzLkpXUy5zaWduPWZ1bmN0aW9uKHQsZSxyLG4saSl7dmFyIG8scyxhLHU9U3IsYz11Lmp3cy5KV1MsaD1jLnJlYWRTYWZlSlNPTlN0cmluZyxsPWMuaXNTYWZlSlNPTlN0cmluZyxmPXUuY3J5cHRvLGQ9KGYuRUNEU0EsZi5NYWMpLHA9Zi5TaWduYXR1cmUsdj1KU09OO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlJiZcIm9iamVjdFwiIT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmcoZSkpKXRocm93XCJzcEhlYWRlciBtdXN0IGJlIEpTT04gc3RyaW5nIG9yIG9iamVjdDogXCIrZTtpZihcIm9iamVjdFwiPT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmcoZSkpJiYocz1lLG89di5zdHJpbmdpZnkocykpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighbChvPWUpKXRocm93XCJKV1MgSGVhZCBpcyBub3Qgc2FmZSBKU09OIHN0cmluZzogXCIrbztzPWgobyl9aWYoYT1yLFwib2JqZWN0XCI9PSh2b2lkIDA9PT1yP1widW5kZWZpbmVkXCI6ZyhyKSkmJihhPXYuc3RyaW5naWZ5KHIpKSxcIlwiIT10JiZudWxsIT10fHx2b2lkIDA9PT1zLmFsZ3x8KHQ9cy5hbGcpLFwiXCIhPXQmJm51bGwhPXQmJnZvaWQgMD09PXMuYWxnJiYocy5hbGc9dCxvPXYuc3RyaW5naWZ5KHMpKSx0IT09cy5hbGcpdGhyb3dcImFsZyBhbmQgc0hlYWRlci5hbGcgZG9lc24ndCBtYXRjaDogXCIrdCtcIiE9XCIrcy5hbGc7dmFyIHk9bnVsbDtpZih2b2lkIDA9PT1jLmp3c2FsZzJzaWdhbGdbdF0pdGhyb3dcInVuc3VwcG9ydGVkIGFsZyBuYW1lOiBcIit0O3k9Yy5qd3NhbGcyc2lnYWxnW3RdO3ZhciBtPWJyKG8pK1wiLlwiK2JyKGEpLF89XCJcIjtpZihcIkhtYWNcIj09eS5zdWJzdHIoMCw0KSl7aWYodm9pZCAwPT09bil0aHJvd1wibWFjIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhTKiBhbGdcIjt2YXIgUz1uZXcgZCh7YWxnOnkscHJvdjpcImNyeXB0b2pzXCIscGFzczpufSk7Uy51cGRhdGVTdHJpbmcobSksXz1TLmRvRmluYWwoKX1lbHNlIGlmKC0xIT15LmluZGV4T2YoXCJ3aXRoRUNEU0FcIikpeyh3PW5ldyBwKHthbGc6eX0pKS5pbml0KG4saSksdy51cGRhdGVTdHJpbmcobSk7dmFyIGI9dy5zaWduKCk7Xz1Tci5jcnlwdG8uRUNEU0EuYXNuMVNpZ1RvQ29uY2F0U2lnKGIpfWVsc2V7dmFyIHc7aWYoXCJub25lXCIhPXkpKHc9bmV3IHAoe2FsZzp5fSkpLmluaXQobixpKSx3LnVwZGF0ZVN0cmluZyhtKSxfPXcuc2lnbigpfXJldHVybiBtK1wiLlwiK1RyKF8pfSxTci5qd3MuSldTLnZlcmlmeT1mdW5jdGlvbih0LGUscil7dmFyIG4saT1TcixvPWkuandzLkpXUyxzPW8ucmVhZFNhZmVKU09OU3RyaW5nLGE9aS5jcnlwdG8sdT1hLkVDRFNBLGM9YS5NYWMsaD1hLlNpZ25hdHVyZTt2b2lkIDAhPT1nKE1lKSYmKG49TWUpO3ZhciBsPXQuc3BsaXQoXCIuXCIpO2lmKDMhPT1sLmxlbmd0aClyZXR1cm4hMTt2YXIgZj1sWzBdK1wiLlwiK2xbMV0sZD1ScihsWzJdKSxwPXMod3IobFswXSkpLHY9bnVsbCx5PW51bGw7aWYodm9pZCAwPT09cC5hbGcpdGhyb3dcImFsZ29yaXRobSBub3Qgc3BlY2lmaWVkIGluIGhlYWRlclwiO2lmKCh5PSh2PXAuYWxnKS5zdWJzdHIoMCwyKSxudWxsIT1yJiZcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocikmJnIubGVuZ3RoPjApJiYtMT09KFwiOlwiK3Iuam9pbihcIjpcIikrXCI6XCIpLmluZGV4T2YoXCI6XCIrditcIjpcIikpdGhyb3dcImFsZ29yaXRobSAnXCIrditcIicgbm90IGFjY2VwdGVkIGluIHRoZSBsaXN0XCI7aWYoXCJub25lXCIhPXYmJm51bGw9PT1lKXRocm93XCJrZXkgc2hhbGwgYmUgc3BlY2lmaWVkIHRvIHZlcmlmeS5cIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPWUuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpJiYoZT10bi5nZXRLZXkoZSkpLCEoXCJSU1wiIT15JiZcIlBTXCIhPXl8fGUgaW5zdGFuY2VvZiBuKSl0aHJvd1wia2V5IHNoYWxsIGJlIGEgUlNBS2V5IG9iaiBmb3IgUlMqIGFuZCBQUyogYWxnc1wiO2lmKFwiRVNcIj09eSYmIShlIGluc3RhbmNlb2YgdSkpdGhyb3dcImtleSBzaGFsbCBiZSBhIEVDRFNBIG9iaiBmb3IgRVMqIGFsZ3NcIjt2YXIgbT1udWxsO2lmKHZvaWQgMD09PW8uandzYWxnMnNpZ2FsZ1twLmFsZ10pdGhyb3dcInVuc3VwcG9ydGVkIGFsZyBuYW1lOiBcIit2O2lmKFwibm9uZVwiPT0obT1vLmp3c2FsZzJzaWdhbGdbdl0pKXRocm93XCJub3Qgc3VwcG9ydGVkXCI7aWYoXCJIbWFjXCI9PW0uc3Vic3RyKDAsNCkpe2lmKHZvaWQgMD09PWUpdGhyb3dcImhleGFkZWNpbWFsIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhNQUNcIjt2YXIgXz1uZXcgYyh7YWxnOm0scGFzczplfSk7cmV0dXJuIF8udXBkYXRlU3RyaW5nKGYpLGQ9PV8uZG9GaW5hbCgpfWlmKC0xIT1tLmluZGV4T2YoXCJ3aXRoRUNEU0FcIikpe3ZhciBTLGI9bnVsbDt0cnl7Yj11LmNvbmNhdFNpZ1RvQVNOMVNpZyhkKX1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4oUz1uZXcgaCh7YWxnOm19KSkuaW5pdChlKSxTLnVwZGF0ZVN0cmluZyhmKSxTLnZlcmlmeShiKX1yZXR1cm4oUz1uZXcgaCh7YWxnOm19KSkuaW5pdChlKSxTLnVwZGF0ZVN0cmluZyhmKSxTLnZlcmlmeShkKX0sU3IuandzLkpXUy5wYXJzZT1mdW5jdGlvbih0KXt2YXIgZSxyLG4saT10LnNwbGl0KFwiLlwiKSxvPXt9O2lmKDIhPWkubGVuZ3RoJiYzIT1pLmxlbmd0aCl0aHJvd1wibWFsZm9ybWVkIHNKV1M6IHdyb25nIG51bWJlciBvZiAnLicgc3BsaXR0ZWQgZWxlbWVudHNcIjtyZXR1cm4gZT1pWzBdLHI9aVsxXSwzPT1pLmxlbmd0aCYmKG49aVsyXSksby5oZWFkZXJPYmo9U3IuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmcod3IoZSkpLG8ucGF5bG9hZE9iaj1Tci5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZyh3cihyKSksby5oZWFkZXJQUD1KU09OLnN0cmluZ2lmeShvLmhlYWRlck9iaixudWxsLFwiICBcIiksbnVsbD09by5wYXlsb2FkT2JqP28ucGF5bG9hZFBQPXdyKHIpOm8ucGF5bG9hZFBQPUpTT04uc3RyaW5naWZ5KG8ucGF5bG9hZE9iaixudWxsLFwiICBcIiksdm9pZCAwIT09biYmKG8uc2lnSGV4PVJyKG4pKSxvfSxTci5qd3MuSldTLnZlcmlmeUpXVD1mdW5jdGlvbih0LGUscil7dmFyIG49U3IuandzLGk9bi5KV1Msbz1pLnJlYWRTYWZlSlNPTlN0cmluZyxzPWkuaW5BcnJheSxhPWkuaW5jbHVkZWRBcnJheSx1PXQuc3BsaXQoXCIuXCIpLGM9dVswXSxoPXVbMV0sbD0oUnIodVsyXSksbyh3cihjKSkpLGY9byh3cihoKSk7aWYodm9pZCAwPT09bC5hbGcpcmV0dXJuITE7aWYodm9pZCAwPT09ci5hbGcpdGhyb3dcImFjY2VwdEZpZWxkLmFsZyBzaGFsbCBiZSBzcGVjaWZpZWRcIjtpZighcyhsLmFsZyxyLmFsZykpcmV0dXJuITE7aWYodm9pZCAwIT09Zi5pc3MmJlwib2JqZWN0XCI9PT1nKHIuaXNzKSYmIXMoZi5pc3Msci5pc3MpKXJldHVybiExO2lmKHZvaWQgMCE9PWYuc3ViJiZcIm9iamVjdFwiPT09ZyhyLnN1YikmJiFzKGYuc3ViLHIuc3ViKSlyZXR1cm4hMTtpZih2b2lkIDAhPT1mLmF1ZCYmXCJvYmplY3RcIj09PWcoci5hdWQpKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBmLmF1ZCl7aWYoIXMoZi5hdWQsci5hdWQpKXJldHVybiExfWVsc2UgaWYoXCJvYmplY3RcIj09ZyhmLmF1ZCkmJiFhKGYuYXVkLHIuYXVkKSlyZXR1cm4hMTt2YXIgZD1uLkludERhdGUuZ2V0Tm93KCk7cmV0dXJuIHZvaWQgMCE9PXIudmVyaWZ5QXQmJlwibnVtYmVyXCI9PXR5cGVvZiByLnZlcmlmeUF0JiYoZD1yLnZlcmlmeUF0KSx2b2lkIDAhPT1yLmdyYWNlUGVyaW9kJiZcIm51bWJlclwiPT10eXBlb2Ygci5ncmFjZVBlcmlvZHx8KHIuZ3JhY2VQZXJpb2Q9MCksISh2b2lkIDAhPT1mLmV4cCYmXCJudW1iZXJcIj09dHlwZW9mIGYuZXhwJiZmLmV4cCtyLmdyYWNlUGVyaW9kPGQpJiYoISh2b2lkIDAhPT1mLm5iZiYmXCJudW1iZXJcIj09dHlwZW9mIGYubmJmJiZkPGYubmJmLXIuZ3JhY2VQZXJpb2QpJiYoISh2b2lkIDAhPT1mLmlhdCYmXCJudW1iZXJcIj09dHlwZW9mIGYuaWF0JiZkPGYuaWF0LXIuZ3JhY2VQZXJpb2QpJiYoKHZvaWQgMD09PWYuanRpfHx2b2lkIDA9PT1yLmp0aXx8Zi5qdGk9PT1yLmp0aSkmJiEhaS52ZXJpZnkodCxlLHIuYWxnKSkpKX0sU3IuandzLkpXUy5pbmNsdWRlZEFycmF5PWZ1bmN0aW9uKHQsZSl7dmFyIHI9U3IuandzLkpXUy5pbkFycmF5O2lmKG51bGw9PT10KXJldHVybiExO2lmKFwib2JqZWN0XCIhPT0odm9pZCAwPT09dD9cInVuZGVmaW5lZFwiOmcodCkpKXJldHVybiExO2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0Lmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKylpZighcih0W25dLGUpKXJldHVybiExO3JldHVybiEwfSxTci5qd3MuSldTLmluQXJyYXk9ZnVuY3Rpb24odCxlKXtpZihudWxsPT09ZSlyZXR1cm4hMTtpZihcIm9iamVjdFwiIT09KHZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjpnKGUpKSlyZXR1cm4hMTtpZihcIm51bWJlclwiIT10eXBlb2YgZS5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspaWYoZVtyXT09dClyZXR1cm4hMDtyZXR1cm4hMX0sU3IuandzLkpXUy5qd3NhbGcyc2lnYWxnPXtIUzI1NjpcIkhtYWNTSEEyNTZcIixIUzM4NDpcIkhtYWNTSEEzODRcIixIUzUxMjpcIkhtYWNTSEE1MTJcIixSUzI1NjpcIlNIQTI1NndpdGhSU0FcIixSUzM4NDpcIlNIQTM4NHdpdGhSU0FcIixSUzUxMjpcIlNIQTUxMndpdGhSU0FcIixFUzI1NjpcIlNIQTI1NndpdGhFQ0RTQVwiLEVTMzg0OlwiU0hBMzg0d2l0aEVDRFNBXCIsUFMyNTY6XCJTSEEyNTZ3aXRoUlNBYW5kTUdGMVwiLFBTMzg0OlwiU0hBMzg0d2l0aFJTQWFuZE1HRjFcIixQUzUxMjpcIlNIQTUxMndpdGhSU0FhbmRNR0YxXCIsbm9uZTpcIm5vbmVcIn0sU3IuandzLkpXUy5pc1NhZmVKU09OU3RyaW5nPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1udWxsO3RyeXtyZXR1cm5cIm9iamVjdFwiIT0odm9pZCAwPT09KG49X3IodCkpP1widW5kZWZpbmVkXCI6ZyhuKSl8fG4uY29uc3RydWN0b3I9PT1BcnJheT8wOihlJiYoZVtyXT1uKSwxKX1jYXRjaCh0KXtyZXR1cm4gMH19LFNyLmp3cy5KV1MucmVhZFNhZmVKU09OU3RyaW5nPWZ1bmN0aW9uKHQpe3ZhciBlPW51bGw7dHJ5e3JldHVyblwib2JqZWN0XCIhPSh2b2lkIDA9PT0oZT1fcih0KSk/XCJ1bmRlZmluZWRcIjpnKGUpKXx8ZS5jb25zdHJ1Y3Rvcj09PUFycmF5P251bGw6ZX1jYXRjaCh0KXtyZXR1cm4gbnVsbH19LFNyLmp3cy5KV1MuZ2V0RW5jb2RlZFNpZ25hdHVyZVZhbHVlRnJvbUpXUz1mdW5jdGlvbih0KXt2YXIgZT10Lm1hdGNoKC9eW14uXStcXC5bXi5dK1xcLihbXi5dKykkLyk7aWYobnVsbD09ZSl0aHJvd1wiSldTIHNpZ25hdHVyZSBpcyBub3QgYSBmb3JtIG9mICdIZWFkLlBheWxvYWQuU2lnVmFsdWUnLlwiO3JldHVybiBlWzFdfSxTci5qd3MuSldTLmdldEpXS3RodW1icHJpbnQ9ZnVuY3Rpb24odCl7aWYoXCJSU0FcIiE9PXQua3R5JiZcIkVDXCIhPT10Lmt0eSYmXCJvY3RcIiE9PXQua3R5KXRocm93XCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIEpXSyBUaHVtcHJpbnRcIjt2YXIgZT1cIntcIjtpZihcIlJTQVwiPT09dC5rdHkpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0Lm58fFwic3RyaW5nXCIhPXR5cGVvZiB0LmUpdGhyb3dcIndyb25nIG4gYW5kIGUgdmFsdWUgZm9yIFJTQSBrZXlcIjtlKz0nXCJlXCI6XCInK3QuZSsnXCIsJyxlKz0nXCJrdHlcIjpcIicrdC5rdHkrJ1wiLCcsZSs9J1wiblwiOlwiJyt0Lm4rJ1wifSd9ZWxzZSBpZihcIkVDXCI9PT10Lmt0eSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQuY3J2fHxcInN0cmluZ1wiIT10eXBlb2YgdC54fHxcInN0cmluZ1wiIT10eXBlb2YgdC55KXRocm93XCJ3cm9uZyBjcnYsIHggYW5kIHkgdmFsdWUgZm9yIEVDIGtleVwiO2UrPSdcImNydlwiOlwiJyt0LmNydisnXCIsJyxlKz0nXCJrdHlcIjpcIicrdC5rdHkrJ1wiLCcsZSs9J1wieFwiOlwiJyt0LngrJ1wiLCcsZSs9J1wieVwiOlwiJyt0LnkrJ1wifSd9ZWxzZSBpZihcIm9jdFwiPT09dC5rdHkpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0LmspdGhyb3dcIndyb25nIGsgdmFsdWUgZm9yIG9jdChzeW1tZXRyaWMpIGtleVwiO2UrPSdcImt0eVwiOlwiJyt0Lmt0eSsnXCIsJyxlKz0nXCJrXCI6XCInK3QuaysnXCJ9J312YXIgcj1OcihlKTtyZXR1cm4gVHIoU3IuY3J5cHRvLlV0aWwuaGFzaEhleChyLFwic2hhMjU2XCIpKX0sU3IuandzLkludERhdGU9e30sU3IuandzLkludERhdGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciBlPVNyLmp3cy5JbnREYXRlLHI9ZS5nZXROb3csbj1lLmdldFp1bHU7aWYoXCJub3dcIj09dClyZXR1cm4gcigpO2lmKFwibm93ICsgMWhvdXJcIj09dClyZXR1cm4gcigpKzM2MDA7aWYoXCJub3cgKyAxZGF5XCI9PXQpcmV0dXJuIHIoKSs4NjQwMDtpZihcIm5vdyArIDFtb250aFwiPT10KXJldHVybiByKCkrMjU5MmUzO2lmKFwibm93ICsgMXllYXJcIj09dClyZXR1cm4gcigpKzMxNTM2ZTM7aWYodC5tYXRjaCgvWiQvKSlyZXR1cm4gbih0KTtpZih0Lm1hdGNoKC9eWzAtOV0rJC8pKXJldHVybiBwYXJzZUludCh0KTt0aHJvd1widW5zdXBwb3J0ZWQgZm9ybWF0OiBcIit0fSxTci5qd3MuSW50RGF0ZS5nZXRadWx1PWZ1bmN0aW9uKHQpe3JldHVybiBWcih0KX0sU3IuandzLkludERhdGUuZ2V0Tm93PWZ1bmN0aW9uKCl7cmV0dXJufn4obmV3IERhdGUvMWUzKX0sU3IuandzLkludERhdGUuaW50RGF0ZTJVVENTdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBEYXRlKDFlMyp0KS50b1VUQ1N0cmluZygpfSxTci5qd3MuSW50RGF0ZS5pbnREYXRlMlp1bHU9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IERhdGUoMWUzKnQpO3JldHVybihcIjAwMDBcIitlLmdldFVUQ0Z1bGxZZWFyKCkpLnNsaWNlKC00KSsoXCIwMFwiKyhlLmdldFVUQ01vbnRoKCkrMSkpLnNsaWNlKC0yKSsoXCIwMFwiK2UuZ2V0VVRDRGF0ZSgpKS5zbGljZSgtMikrKFwiMDBcIitlLmdldFVUQ0hvdXJzKCkpLnNsaWNlKC0yKSsoXCIwMFwiK2UuZ2V0VVRDTWludXRlcygpKS5zbGljZSgtMikrKFwiMDBcIitlLmdldFVUQ1NlY29uZHMoKSkuc2xpY2UoLTIpK1wiWlwifSxlLlNlY3VyZVJhbmRvbT1CZSxlLnJuZ19zZWVkX3RpbWU9UmUsZS5CaWdJbnRlZ2VyPXcsZS5SU0FLZXk9TWU7dmFyIHNuPVNyLmNyeXB0by5FRFNBO2UuRURTQT1zbjt2YXIgYW49U3IuY3J5cHRvLkRTQTtlLkRTQT1hbjt2YXIgdW49U3IuY3J5cHRvLlNpZ25hdHVyZTtlLlNpZ25hdHVyZT11bjt2YXIgY249U3IuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q7ZS5NZXNzYWdlRGlnZXN0PWNuO3ZhciBobj1Tci5jcnlwdG8uTWFjO2UuTWFjPWhuO3ZhciBsbj1Tci5jcnlwdG8uQ2lwaGVyO2UuQ2lwaGVyPWxuLGUuS0VZVVRJTD10bixlLkFTTjFIRVg9RnIsZS5YNTA5PW9uLGUuQ3J5cHRvSlM9dixlLmI2NHRvaGV4PVMsZS5iNjR0b0JBPWIsZS5zdG9CQT1FcixlLkJBdG9zPXhyLGUuQkF0b2hleD1BcixlLnN0b2hleD1rcixlLnN0b2I2ND1mdW5jdGlvbiBmbih0KXtyZXR1cm4gXyhrcih0KSl9LGUuc3RvYjY0dT1mdW5jdGlvbiBnbih0KXtyZXR1cm4gUHIoXyhrcih0KSkpfSxlLmI2NHV0b3M9ZnVuY3Rpb24gZG4odCl7cmV0dXJuIHhyKGIoQ3IodCkpKX0sZS5iNjR0b2I2NHU9UHIsZS5iNjR1dG9iNjQ9Q3IsZS5oZXgyYjY0PV8sZS5oZXh0b2I2NHU9VHIsZS5iNjR1dG9oZXg9UnIsZS51dGY4dG9iNjR1PWJyLGUuYjY0dXRvdXRmOD13cixlLnV0Zjh0b2I2ND1mdW5jdGlvbiBwbih0KXtyZXR1cm4gXyhLcihHcih0KSkpfSxlLmI2NHRvdXRmOD1mdW5jdGlvbiB2bih0KXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHFyKFModCkpKX0sZS51dGY4dG9oZXg9SXIsZS5oZXh0b3V0Zjg9RHIsZS5oZXh0b3JzdHI9THIsZS5yc3RydG9oZXg9TnIsZS5oZXh0b2I2ND1VcixlLmhleHRvYjY0bmw9QnIsZS5iNjRubHRvaGV4PU9yLGUuaGV4dG9wZW09anIsZS5wZW10b2hleD1NcixlLmhleHRvQXJyYXlCdWZmZXI9ZnVuY3Rpb24geW4odCl7aWYodC5sZW5ndGglMiE9MCl0aHJvd1wiaW5wdXQgaXMgbm90IGV2ZW4gbGVuZ3RoXCI7aWYobnVsbD09dC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl0aHJvd1wiaW5wdXQgaXMgbm90IGhleGFkZWNpbWFsXCI7Zm9yKHZhciBlPW5ldyBBcnJheUJ1ZmZlcih0Lmxlbmd0aC8yKSxyPW5ldyBEYXRhVmlldyhlKSxuPTA7bjx0Lmxlbmd0aC8yO24rKylyLnNldFVpbnQ4KG4scGFyc2VJbnQodC5zdWJzdHIoMipuLDIpLDE2KSk7cmV0dXJuIGV9LGUuQXJyYXlCdWZmZXJ0b2hleD1mdW5jdGlvbiBtbih0KXtmb3IodmFyIGU9XCJcIixyPW5ldyBEYXRhVmlldyh0KSxuPTA7bjx0LmJ5dGVMZW5ndGg7bisrKWUrPShcIjAwXCIrci5nZXRVaW50OChuKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gZX0sZS56dWx1dG9tc2VjPUhyLGUuenVsdXRvc2VjPVZyLGUuenVsdXRvZGF0ZT1mdW5jdGlvbiBfbih0KXtyZXR1cm4gbmV3IERhdGUoSHIodCkpfSxlLmRhdGV0b3p1bHU9ZnVuY3Rpb24gU24odCxlLHIpe3ZhciBuLGk9dC5nZXRVVENGdWxsWWVhcigpO2lmKGUpe2lmKGk8MTk1MHx8MjA0OTxpKXRocm93XCJub3QgcHJvcGVyIHllYXIgZm9yIFVUQ1RpbWU6IFwiK2k7bj0oXCJcIitpKS5zbGljZSgtMil9ZWxzZSBuPShcIjAwMFwiK2kpLnNsaWNlKC00KTtpZihuKz0oXCIwXCIrKHQuZ2V0VVRDTW9udGgoKSsxKSkuc2xpY2UoLTIpLG4rPShcIjBcIit0LmdldFVUQ0RhdGUoKSkuc2xpY2UoLTIpLG4rPShcIjBcIit0LmdldFVUQ0hvdXJzKCkpLnNsaWNlKC0yKSxuKz0oXCIwXCIrdC5nZXRVVENNaW51dGVzKCkpLnNsaWNlKC0yKSxuKz0oXCIwXCIrdC5nZXRVVENTZWNvbmRzKCkpLnNsaWNlKC0yKSxyKXt2YXIgbz10LmdldFVUQ01pbGxpc2Vjb25kcygpOzAhPT1vJiYobis9XCIuXCIrKG89KG89KFwiMDBcIitvKS5zbGljZSgtMykpLnJlcGxhY2UoLzArJC9nLFwiXCIpKSl9cmV0dXJuIG4rPVwiWlwifSxlLnVyaWNtcHRvaGV4PUtyLGUuaGV4dG91cmljbXA9cXIsZS5pcHY2dG9oZXg9SnIsZS5oZXh0b2lwdjY9V3IsZS5oZXh0b2lwPXpyLGUuaXB0b2hleD1mdW5jdGlvbiBibih0KXt2YXIgZT1cIm1hbGZvcm1lZCBJUCBhZGRyZXNzXCI7aWYoISh0PXQudG9Mb3dlckNhc2UodCkpLm1hdGNoKC9eWzAtOS5dKyQvKSl7aWYodC5tYXRjaCgvXlswLTlhLWY6XSskLykmJi0xIT09dC5pbmRleE9mKFwiOlwiKSlyZXR1cm4gSnIodCk7dGhyb3cgZX12YXIgcj10LnNwbGl0KFwiLlwiKTtpZig0IT09ci5sZW5ndGgpdGhyb3cgZTt2YXIgbj1cIlwiO3RyeXtmb3IodmFyIGk9MDtpPDQ7aSsrKXtuKz0oXCIwXCIrcGFyc2VJbnQocltpXSkudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9cmV0dXJuIG59Y2F0Y2godCl7dGhyb3cgZX19LGUuZW5jb2RlVVJJQ29tcG9uZW50QWxsPUdyLGUubmV3bGluZV90b1VuaXg9ZnVuY3Rpb24gd24odCl7cmV0dXJuIHQ9dC5yZXBsYWNlKC9cXHJcXG4vZ20sXCJcXG5cIil9LGUubmV3bGluZV90b0Rvcz1mdW5jdGlvbiBGbih0KXtyZXR1cm4gdD0odD10LnJlcGxhY2UoL1xcclxcbi9nbSxcIlxcblwiKSkucmVwbGFjZSgvXFxuL2dtLFwiXFxyXFxuXCIpfSxlLmhleHRvcG9zaGV4PSRyLGUuaW50YXJ5c3RydG9oZXg9ZnVuY3Rpb24gRW4odCl7dD0odD0odD10LnJlcGxhY2UoL15cXHMqXFxbXFxzKi8sXCJcIikpLnJlcGxhY2UoL1xccypcXF1cXHMqJC8sXCJcIikpLnJlcGxhY2UoL1xccyovZyxcIlwiKTt0cnl7cmV0dXJuIHQuc3BsaXQoLywvKS5tYXAoKGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1wYXJzZUludCh0KTtpZihuPDB8fDI1NTxuKXRocm93XCJpbnRlZ2VyIG5vdCBpbiByYW5nZSAwLTI1NVwiO3JldHVybihcIjAwXCIrbi50b1N0cmluZygxNikpLnNsaWNlKC0yKX0pKS5qb2luKFwiXCIpfWNhdGNoKHQpe3Rocm93XCJtYWxmb3JtZWQgaW50ZWdlciBhcnJheSBzdHJpbmc6IFwiK3R9fSxlLnN0cmRpZmZpZHg9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWUubGVuZ3RoO2UubGVuZ3RoPnIubGVuZ3RoJiYobj1yLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxuO2krKylpZihlLmNoYXJDb2RlQXQoaSkhPXIuY2hhckNvZGVBdChpKSlyZXR1cm4gaTtyZXR1cm4gZS5sZW5ndGghPXIubGVuZ3RoP246LTF9LGUuS0pVUj1Tcjt2YXIgeG49U3IuY3J5cHRvO2UuY3J5cHRvPXhuO3ZhciBBbj1Tci5hc24xO2UuYXNuMT1Bbjt2YXIga249U3IuandzO2UuandzPWtuO3ZhciBQbj1Tci5sYW5nO2UubGFuZz1Qbn0pLmNhbGwodGhpcyxyKDI4KS5CdWZmZXIpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKHQpe1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbnZhciBuPXIoMzApLGk9cigzMSksbz1yKDMyKTtmdW5jdGlvbiBzKCl7cmV0dXJuIHUuVFlQRURfQVJSQVlfU1VQUE9SVD8yMTQ3NDgzNjQ3OjEwNzM3NDE4MjN9ZnVuY3Rpb24gYSh0LGUpe2lmKHMoKTxlKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGhcIik7cmV0dXJuIHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odD1uZXcgVWludDhBcnJheShlKSkuX19wcm90b19fPXUucHJvdG90eXBlOihudWxsPT09dCYmKHQ9bmV3IHUoZSkpLHQubGVuZ3RoPWUpLHR9ZnVuY3Rpb24gdSh0LGUscil7aWYoISh1LlRZUEVEX0FSUkFZX1NVUFBPUlR8fHRoaXMgaW5zdGFuY2VvZiB1KSlyZXR1cm4gbmV3IHUodCxlLHIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtyZXR1cm4gbCh0aGlzLHQpfXJldHVybiBjKHRoaXMsdCxlLHIpfWZ1bmN0aW9uIGModCxlLHIsbil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZnVuY3Rpb24gaSh0LGUscixuKXtpZihlLmJ5dGVMZW5ndGgscjwwfHxlLmJ5dGVMZW5ndGg8cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidvZmZzZXQnIGlzIG91dCBvZiBib3VuZHNcIik7aWYoZS5ieXRlTGVuZ3RoPHIrKG58fDApKXRocm93IG5ldyBSYW5nZUVycm9yKFwiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kc1wiKTtlPXZvaWQgMD09PXImJnZvaWQgMD09PW4/bmV3IFVpbnQ4QXJyYXkoZSk6dm9pZCAwPT09bj9uZXcgVWludDhBcnJheShlLHIpOm5ldyBVaW50OEFycmF5KGUscixuKTt1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHQ9ZSkuX19wcm90b19fPXUucHJvdG90eXBlOnQ9Zih0LGUpO3JldHVybiB0fSh0LGUscixuKTpcInN0cmluZ1wiPT10eXBlb2YgZT9mdW5jdGlvbiBzKHQsZSxyKXtcInN0cmluZ1wiPT10eXBlb2YgciYmXCJcIiE9PXJ8fChyPVwidXRmOFwiKTtpZighdS5pc0VuY29kaW5nKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJyk7dmFyIG49MHxkKGUsciksaT0odD1hKHQsbikpLndyaXRlKGUscik7aSE9PW4mJih0PXQuc2xpY2UoMCxpKSk7cmV0dXJuIHR9KHQsZSxyKTpmdW5jdGlvbiBjKHQsZSl7aWYodS5pc0J1ZmZlcihlKSl7dmFyIHI9MHxnKGUubGVuZ3RoKTtyZXR1cm4gMD09PSh0PWEodCxyKSkubGVuZ3RofHxlLmNvcHkodCwwLDAsciksdH1pZihlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJmUuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fFwibGVuZ3RoXCJpbiBlKXJldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlLmxlbmd0aHx8ZnVuY3Rpb24gbih0KXtyZXR1cm4gdCE9dH0oZS5sZW5ndGgpP2EodCwwKTpmKHQsZSk7aWYoXCJCdWZmZXJcIj09PWUudHlwZSYmbyhlLmRhdGEpKXJldHVybiBmKHQsZS5kYXRhKX10aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LlwiKX0odCxlKX1mdW5jdGlvbiBoKHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKTtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJyl9ZnVuY3Rpb24gbCh0LGUpe2lmKGgoZSksdD1hKHQsZTwwPzA6MHxnKGUpKSwhdS5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcih2YXIgcj0wO3I8ZTsrK3IpdFtyXT0wO3JldHVybiB0fWZ1bmN0aW9uIGYodCxlKXt2YXIgcj1lLmxlbmd0aDwwPzA6MHxnKGUubGVuZ3RoKTt0PWEodCxyKTtmb3IodmFyIG49MDtuPHI7bis9MSl0W25dPTI1NSZlW25dO3JldHVybiB0fWZ1bmN0aW9uIGcodCl7aWYodD49cygpKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSBzaXplOiAweFwiK3MoKS50b1N0cmluZygxNikrXCIgYnl0ZXNcIik7cmV0dXJuIDB8dH1mdW5jdGlvbiBkKHQsZSl7aWYodS5pc0J1ZmZlcih0KSlyZXR1cm4gdC5sZW5ndGg7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcmJihBcnJheUJ1ZmZlci5pc1ZpZXcodCl8fHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpcmV0dXJuIHQuYnl0ZUxlbmd0aDtcInN0cmluZ1wiIT10eXBlb2YgdCYmKHQ9XCJcIit0KTt2YXIgcj10Lmxlbmd0aDtpZigwPT09cilyZXR1cm4gMDtmb3IodmFyIG49ITE7Oylzd2l0Y2goZSl7Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gcjtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlIHZvaWQgMDpyZXR1cm4gSyh0KS5sZW5ndGg7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIDIqcjtjYXNlXCJoZXhcIjpyZXR1cm4gcj4+PjE7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIHEodCkubGVuZ3RoO2RlZmF1bHQ6aWYobilyZXR1cm4gSyh0KS5sZW5ndGg7ZT0oXCJcIitlKS50b0xvd2VyQ2FzZSgpLG49ITB9fWZ1bmN0aW9uIHAodCxlLHIpe3ZhciBuPSExO2lmKCh2b2lkIDA9PT1lfHxlPDApJiYoZT0wKSxlPnRoaXMubGVuZ3RoKXJldHVyblwiXCI7aWYoKHZvaWQgMD09PXJ8fHI+dGhpcy5sZW5ndGgpJiYocj10aGlzLmxlbmd0aCkscjw9MClyZXR1cm5cIlwiO2lmKChyPj4+PTApPD0oZT4+Pj0wKSlyZXR1cm5cIlwiO2Zvcih0fHwodD1cInV0ZjhcIik7Oylzd2l0Y2godCl7Y2FzZVwiaGV4XCI6cmV0dXJuIEkodGhpcyxlLHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBBKHRoaXMsZSxyKTtjYXNlXCJhc2NpaVwiOnJldHVybiBUKHRoaXMsZSxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gUih0aGlzLGUscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIHgodGhpcyxlLHIpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBEKHRoaXMsZSxyKTtkZWZhdWx0OmlmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3QpO3Q9KHQrXCJcIikudG9Mb3dlckNhc2UoKSxuPSEwfX1mdW5jdGlvbiB2KHQsZSxyKXt2YXIgbj10W2VdO3RbZV09dFtyXSx0W3JdPW59ZnVuY3Rpb24geSh0LGUscixuLGkpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4tMTtpZihcInN0cmluZ1wiPT10eXBlb2Ygcj8obj1yLHI9MCk6cj4yMTQ3NDgzNjQ3P3I9MjE0NzQ4MzY0NzpyPC0yMTQ3NDgzNjQ4JiYocj0tMjE0NzQ4MzY0OCkscj0rcixpc05hTihyKSYmKHI9aT8wOnQubGVuZ3RoLTEpLHI8MCYmKHI9dC5sZW5ndGgrcikscj49dC5sZW5ndGgpe2lmKGkpcmV0dXJuLTE7cj10Lmxlbmd0aC0xfWVsc2UgaWYocjwwKXtpZighaSlyZXR1cm4tMTtyPTB9aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXUuZnJvbShlLG4pKSx1LmlzQnVmZmVyKGUpKXJldHVybiAwPT09ZS5sZW5ndGg/LTE6bSh0LGUscixuLGkpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBlJj0yNTUsdS5UWVBFRF9BUlJBWV9TVVBQT1JUJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mP2k/VWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHQsZSxyKTpVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKHQsZSxyKTptKHQsW2VdLHIsbixpKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyXCIpfWZ1bmN0aW9uIG0odCxlLHIsbixpKXt2YXIgbyxzPTEsYT10Lmxlbmd0aCx1PWUubGVuZ3RoO2lmKHZvaWQgMCE9PW4mJihcInVjczJcIj09PShuPVN0cmluZyhuKS50b0xvd2VyQ2FzZSgpKXx8XCJ1Y3MtMlwiPT09bnx8XCJ1dGYxNmxlXCI9PT1ufHxcInV0Zi0xNmxlXCI9PT1uKSl7aWYodC5sZW5ndGg8Mnx8ZS5sZW5ndGg8MilyZXR1cm4tMTtzPTIsYS89Mix1Lz0yLHIvPTJ9ZnVuY3Rpb24gYyh0LGUpe3JldHVybiAxPT09cz90W2VdOnQucmVhZFVJbnQxNkJFKGUqcyl9aWYoaSl7dmFyIGg9LTE7Zm9yKG89cjtvPGE7bysrKWlmKGModCxvKT09PWMoZSwtMT09PWg/MDpvLWgpKXtpZigtMT09PWgmJihoPW8pLG8taCsxPT09dSlyZXR1cm4gaCpzfWVsc2UtMSE9PWgmJihvLT1vLWgpLGg9LTF9ZWxzZSBmb3Iocit1PmEmJihyPWEtdSksbz1yO28+PTA7by0tKXtmb3IodmFyIGw9ITAsZj0wO2Y8dTtmKyspaWYoYyh0LG8rZikhPT1jKGUsZikpe2w9ITE7YnJlYWt9aWYobClyZXR1cm4gb31yZXR1cm4tMX1mdW5jdGlvbiBfKHQsZSxyLG4pe3I9TnVtYmVyKHIpfHwwO3ZhciBpPXQubGVuZ3RoLXI7bj8obj1OdW1iZXIobikpPmkmJihuPWkpOm49aTt2YXIgbz1lLmxlbmd0aDtpZihvJTIhPTApdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgaGV4IHN0cmluZ1wiKTtuPm8vMiYmKG49by8yKTtmb3IodmFyIHM9MDtzPG47KytzKXt2YXIgYT1wYXJzZUludChlLnN1YnN0cigyKnMsMiksMTYpO2lmKGlzTmFOKGEpKXJldHVybiBzO3RbcitzXT1hfXJldHVybiBzfWZ1bmN0aW9uIFModCxlLHIsbil7cmV0dXJuIEooSyhlLHQubGVuZ3RoLXIpLHQscixuKX1mdW5jdGlvbiBiKHQsZSxyLG4pe3JldHVybiBKKGZ1bmN0aW9uIGkodCl7Zm9yKHZhciBlPVtdLHI9MDtyPHQubGVuZ3RoOysrcillLnB1c2goMjU1JnQuY2hhckNvZGVBdChyKSk7cmV0dXJuIGV9KGUpLHQscixuKX1mdW5jdGlvbiB3KHQsZSxyLG4pe3JldHVybiBiKHQsZSxyLG4pfWZ1bmN0aW9uIEYodCxlLHIsbil7cmV0dXJuIEoocShlKSx0LHIsbil9ZnVuY3Rpb24gRSh0LGUscixuKXtyZXR1cm4gSihmdW5jdGlvbiBpKHQsZSl7Zm9yKHZhciByLG4saSxvPVtdLHM9MDtzPHQubGVuZ3RoJiYhKChlLT0yKTwwKTsrK3Mpbj0ocj10LmNoYXJDb2RlQXQocykpPj44LGk9ciUyNTYsby5wdXNoKGkpLG8ucHVzaChuKTtyZXR1cm4gb30oZSx0Lmxlbmd0aC1yKSx0LHIsbil9ZnVuY3Rpb24geCh0LGUscil7cmV0dXJuIDA9PT1lJiZyPT09dC5sZW5ndGg/bi5mcm9tQnl0ZUFycmF5KHQpOm4uZnJvbUJ5dGVBcnJheSh0LnNsaWNlKGUscikpfWZ1bmN0aW9uIEEodCxlLHIpe3I9TWF0aC5taW4odC5sZW5ndGgscik7Zm9yKHZhciBuPVtdLGk9ZTtpPHI7KXt2YXIgbyxzLGEsdSxjPXRbaV0saD1udWxsLGw9Yz4yMzk/NDpjPjIyMz8zOmM+MTkxPzI6MTtpZihpK2w8PXIpc3dpdGNoKGwpe2Nhc2UgMTpjPDEyOCYmKGg9Yyk7YnJlYWs7Y2FzZSAyOjEyOD09KDE5MiYobz10W2krMV0pKSYmKHU9KDMxJmMpPDw2fDYzJm8pPjEyNyYmKGg9dSk7YnJlYWs7Y2FzZSAzOm89dFtpKzFdLHM9dFtpKzJdLDEyOD09KDE5MiZvKSYmMTI4PT0oMTkyJnMpJiYodT0oMTUmYyk8PDEyfCg2MyZvKTw8Nnw2MyZzKT4yMDQ3JiYodTw1NTI5Nnx8dT41NzM0MykmJihoPXUpO2JyZWFrO2Nhc2UgNDpvPXRbaSsxXSxzPXRbaSsyXSxhPXRbaSszXSwxMjg9PSgxOTImbykmJjEyOD09KDE5MiZzKSYmMTI4PT0oMTkyJmEpJiYodT0oMTUmYyk8PDE4fCg2MyZvKTw8MTJ8KDYzJnMpPDw2fDYzJmEpPjY1NTM1JiZ1PDExMTQxMTImJihoPXUpfW51bGw9PT1oPyhoPTY1NTMzLGw9MSk6aD42NTUzNSYmKGgtPTY1NTM2LG4ucHVzaChoPj4+MTAmMTAyM3w1NTI5NiksaD01NjMyMHwxMDIzJmgpLG4ucHVzaChoKSxpKz1sfXJldHVybiBmdW5jdGlvbiBmKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU8PUMpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHQpO3ZhciByPVwiXCIsbj0wO2Zvcig7bjxlOylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyx0LnNsaWNlKG4sbis9QykpO3JldHVybiByfShuKX1lLkJ1ZmZlcj11LGUuU2xvd0J1ZmZlcj1mdW5jdGlvbiBrKHQpeyt0IT10JiYodD0wKTtyZXR1cm4gdS5hbGxvYygrdCl9LGUuSU5TUEVDVF9NQVhfQllURVM9NTAsdS5UWVBFRF9BUlJBWV9TVVBQT1JUPXZvaWQgMCE9PXQuVFlQRURfQVJSQVlfU1VQUE9SVD90LlRZUEVEX0FSUkFZX1NVUFBPUlQ6ZnVuY3Rpb24gUCgpe3RyeXt2YXIgdD1uZXcgVWludDhBcnJheSgxKTtyZXR1cm4gdC5fX3Byb3RvX189e19fcHJvdG9fXzpVaW50OEFycmF5LnByb3RvdHlwZSxmb286ZnVuY3Rpb24oKXtyZXR1cm4gNDJ9fSw0Mj09PXQuZm9vKCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuc3ViYXJyYXkmJjA9PT10LnN1YmFycmF5KDEsMSkuYnl0ZUxlbmd0aH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZS5rTWF4TGVuZ3RoPXMoKSx1LnBvb2xTaXplPTgxOTIsdS5fYXVnbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX189dS5wcm90b3R5cGUsdH0sdS5mcm9tPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gYyhudWxsLHQsZSxyKX0sdS5UWVBFRF9BUlJBWV9TVVBQT1JUJiYodS5wcm90b3R5cGUuX19wcm90b19fPVVpbnQ4QXJyYXkucHJvdG90eXBlLHUuX19wcm90b19fPVVpbnQ4QXJyYXksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnNwZWNpZXMmJnVbU3ltYm9sLnNwZWNpZXNdPT09dSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHUsU3ltYm9sLnNwZWNpZXMse3ZhbHVlOm51bGwsY29uZmlndXJhYmxlOiEwfSkpLHUuYWxsb2M9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBmdW5jdGlvbiBuKHQsZSxyLGkpe3JldHVybiBoKGUpLGU8PTA/YSh0LGUpOnZvaWQgMCE9PXI/XCJzdHJpbmdcIj09dHlwZW9mIGk/YSh0LGUpLmZpbGwocixpKTphKHQsZSkuZmlsbChyKTphKHQsZSl9KG51bGwsdCxlLHIpfSx1LmFsbG9jVW5zYWZlPWZ1bmN0aW9uKHQpe3JldHVybiBsKG51bGwsdCl9LHUuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKHQpe3JldHVybiBsKG51bGwsdCl9LHUuaXNCdWZmZXI9ZnVuY3Rpb24gdChlKXtyZXR1cm4hKG51bGw9PWV8fCFlLl9pc0J1ZmZlcil9LHUuY29tcGFyZT1mdW5jdGlvbiB0KGUscil7aWYoIXUuaXNCdWZmZXIoZSl8fCF1LmlzQnVmZmVyKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzXCIpO2lmKGU9PT1yKXJldHVybiAwO2Zvcih2YXIgbj1lLmxlbmd0aCxpPXIubGVuZ3RoLG89MCxzPU1hdGgubWluKG4saSk7bzxzOysrbylpZihlW29dIT09cltvXSl7bj1lW29dLGk9cltvXTticmVha31yZXR1cm4gbjxpPy0xOmk8bj8xOjB9LHUuaXNFbmNvZGluZz1mdW5jdGlvbiB0KGUpe3N3aXRjaChTdHJpbmcoZSkudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sdS5jb25jYXQ9ZnVuY3Rpb24gdChlLHIpe2lmKCFvKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gdS5hbGxvYygwKTt2YXIgbjtpZih2b2lkIDA9PT1yKWZvcihyPTAsbj0wO248ZS5sZW5ndGg7KytuKXIrPWVbbl0ubGVuZ3RoO3ZhciBpPXUuYWxsb2NVbnNhZmUocikscz0wO2ZvcihuPTA7bjxlLmxlbmd0aDsrK24pe3ZhciBhPWVbbl07aWYoIXUuaXNCdWZmZXIoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7YS5jb3B5KGkscykscys9YS5sZW5ndGh9cmV0dXJuIGl9LHUuYnl0ZUxlbmd0aD1kLHUucHJvdG90eXBlLl9pc0J1ZmZlcj0hMCx1LnByb3RvdHlwZS5zd2FwMTY9ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2Zvcih2YXIgcj0wO3I8ZTtyKz0yKXYodGhpcyxyLHIrMSk7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnN3YXAzMj1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSU0IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHNcIik7Zm9yKHZhciByPTA7cjxlO3IrPTQpdih0aGlzLHIsciszKSx2KHRoaXMscisxLHIrMik7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnN3YXA2ND1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSU4IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHNcIik7Zm9yKHZhciByPTA7cjxlO3IrPTgpdih0aGlzLHIscis3KSx2KHRoaXMscisxLHIrNiksdih0aGlzLHIrMixyKzUpLHYodGhpcyxyKzMscis0KTtyZXR1cm4gdGhpc30sdS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24gdCgpe3ZhciBlPTB8dGhpcy5sZW5ndGg7cmV0dXJuIDA9PT1lP1wiXCI6MD09PWFyZ3VtZW50cy5sZW5ndGg/QSh0aGlzLDAsZSk6cC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHUucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbiB0KGUpe2lmKCF1LmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO3JldHVybiB0aGlzPT09ZXx8MD09PXUuY29tcGFyZSh0aGlzLGUpfSx1LnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uIHQoKXt2YXIgcj1cIlwiLG49ZS5JTlNQRUNUX01BWF9CWVRFUztyZXR1cm4gdGhpcy5sZW5ndGg+MCYmKHI9dGhpcy50b1N0cmluZyhcImhleFwiLDAsbikubWF0Y2goLy57Mn0vZykuam9pbihcIiBcIiksdGhpcy5sZW5ndGg+biYmKHIrPVwiIC4uLiBcIikpLFwiPEJ1ZmZlciBcIityK1wiPlwifSx1LnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uIHQoZSxyLG4saSxvKXtpZighdS5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtpZih2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1uJiYobj1lP2UubGVuZ3RoOjApLHZvaWQgMD09PWkmJihpPTApLHZvaWQgMD09PW8mJihvPXRoaXMubGVuZ3RoKSxyPDB8fG4+ZS5sZW5ndGh8fGk8MHx8bz50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiByYW5nZSBpbmRleFwiKTtpZihpPj1vJiZyPj1uKXJldHVybiAwO2lmKGk+PW8pcmV0dXJuLTE7aWYocj49bilyZXR1cm4gMTtpZih0aGlzPT09ZSlyZXR1cm4gMDtmb3IodmFyIHM9KG8+Pj49MCktKGk+Pj49MCksYT0obj4+Pj0wKS0ocj4+Pj0wKSxjPU1hdGgubWluKHMsYSksaD10aGlzLnNsaWNlKGksbyksbD1lLnNsaWNlKHIsbiksZj0wO2Y8YzsrK2YpaWYoaFtmXSE9PWxbZl0pe3M9aFtmXSxhPWxbZl07YnJlYWt9cmV0dXJuIHM8YT8tMTphPHM/MTowfSx1LnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4tMSE9PXRoaXMuaW5kZXhPZihlLHIsbil9LHUucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIHkodGhpcyxlLHIsbiwhMCl9LHUucHJvdG90eXBlLmxhc3RJbmRleE9mPWZ1bmN0aW9uIHQoZSxyLG4pe3JldHVybiB5KHRoaXMsZSxyLG4sITEpfSx1LnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbiB0KGUscixuLGkpe2lmKHZvaWQgMD09PXIpaT1cInV0ZjhcIixuPXRoaXMubGVuZ3RoLHI9MDtlbHNlIGlmKHZvaWQgMD09PW4mJlwic3RyaW5nXCI9PXR5cGVvZiByKWk9cixuPXRoaXMubGVuZ3RoLHI9MDtlbHNle2lmKCFpc0Zpbml0ZShyKSl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKTtyfD0wLGlzRmluaXRlKG4pPyhufD0wLHZvaWQgMD09PWkmJihpPVwidXRmOFwiKSk6KGk9bixuPXZvaWQgMCl9dmFyIG89dGhpcy5sZW5ndGgtcjtpZigodm9pZCAwPT09bnx8bj5vKSYmKG49byksZS5sZW5ndGg+MCYmKG48MHx8cjwwKXx8cj50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO2l8fChpPVwidXRmOFwiKTtmb3IodmFyIHM9ITE7Oylzd2l0Y2goaSl7Y2FzZVwiaGV4XCI6cmV0dXJuIF8odGhpcyxlLHIsbik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIFModGhpcyxlLHIsbik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gYih0aGlzLGUscixuKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdyh0aGlzLGUscixuKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gRih0aGlzLGUscixuKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gRSh0aGlzLGUscixuKTtkZWZhdWx0OmlmKHMpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2kpO2k9KFwiXCIraSkudG9Mb3dlckNhc2UoKSxzPSEwfX0sdS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uIHQoKXtyZXR1cm57dHlwZTpcIkJ1ZmZlclwiLGRhdGE6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyfHx0aGlzLDApfX07dmFyIEM9NDA5NjtmdW5jdGlvbiBUKHQsZSxyKXt2YXIgbj1cIlwiO3I9TWF0aC5taW4odC5sZW5ndGgscik7Zm9yKHZhciBpPWU7aTxyOysraSluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDEyNyZ0W2ldKTtyZXR1cm4gbn1mdW5jdGlvbiBSKHQsZSxyKXt2YXIgbj1cIlwiO3I9TWF0aC5taW4odC5sZW5ndGgscik7Zm9yKHZhciBpPWU7aTxyOysraSluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHRbaV0pO3JldHVybiBufWZ1bmN0aW9uIEkodCxlLHIpe3ZhciBuPXQubGVuZ3RoOyghZXx8ZTwwKSYmKGU9MCksKCFyfHxyPDB8fHI+bikmJihyPW4pO2Zvcih2YXIgaT1cIlwiLG89ZTtvPHI7KytvKWkrPVYodFtvXSk7cmV0dXJuIGl9ZnVuY3Rpb24gRCh0LGUscil7Zm9yKHZhciBuPXQuc2xpY2UoZSxyKSxpPVwiXCIsbz0wO288bi5sZW5ndGg7bys9MilpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKG5bb10rMjU2Km5bbysxXSk7cmV0dXJuIGl9ZnVuY3Rpb24gTCh0LGUscil7aWYodCUxIT0wfHx0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvZmZzZXQgaXMgbm90IHVpbnRcIik7aWYodCtlPnIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoXCIpfWZ1bmN0aW9uIE4odCxlLHIsbixpLG8pe2lmKCF1LmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpO2lmKGU+aXx8ZTxvKXRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO2lmKHIrbj50Lmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBVKHQsZSxyLG4pe2U8MCYmKGU9NjU1MzUrZSsxKTtmb3IodmFyIGk9MCxvPU1hdGgubWluKHQubGVuZ3RoLXIsMik7aTxvOysraSl0W3IraV09KGUmMjU1PDw4KihuP2k6MS1pKSk+Pj44KihuP2k6MS1pKX1mdW5jdGlvbiBCKHQsZSxyLG4pe2U8MCYmKGU9NDI5NDk2NzI5NStlKzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4odC5sZW5ndGgtciw0KTtpPG87KytpKXRbcitpXT1lPj4+OCoobj9pOjMtaSkmMjU1fWZ1bmN0aW9uIE8odCxlLHIsbixpLG8pe2lmKHIrbj50Lmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihyPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9ZnVuY3Rpb24gaih0LGUscixuLG8pe3JldHVybiBvfHxPKHQsMCxyLDQpLGkud3JpdGUodCxlLHIsbiwyMyw0KSxyKzR9ZnVuY3Rpb24gTSh0LGUscixuLG8pe3JldHVybiBvfHxPKHQsMCxyLDgpLGkud3JpdGUodCxlLHIsbiw1Miw4KSxyKzh9dS5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24gdChlLHIpe3ZhciBuLGk9dGhpcy5sZW5ndGg7aWYoKGU9fn5lKTwwPyhlKz1pKTwwJiYoZT0wKTplPmkmJihlPWkpLChyPXZvaWQgMD09PXI/aTp+fnIpPDA/KHIrPWkpPDAmJihyPTApOnI+aSYmKHI9aSkscjxlJiYocj1lKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQpKG49dGhpcy5zdWJhcnJheShlLHIpKS5fX3Byb3RvX189dS5wcm90b3R5cGU7ZWxzZXt2YXIgbz1yLWU7bj1uZXcgdShvLHZvaWQgMCk7Zm9yKHZhciBzPTA7czxvOysrcyluW3NdPXRoaXNbcytlXX1yZXR1cm4gbn0sdS5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbiB0KGUscixuKXtlfD0wLHJ8PTAsbnx8TChlLHIsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzW2VdLG89MSxzPTA7KytzPHImJihvKj0yNTYpOylpKz10aGlzW2Urc10qbztyZXR1cm4gaX0sdS5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbiB0KGUscixuKXtlfD0wLHJ8PTAsbnx8TChlLHIsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzW2UrLS1yXSxvPTE7cj4wJiYobyo9MjU2KTspaSs9dGhpc1tlKy0tcl0qbztyZXR1cm4gaX0sdS5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gcnx8TChlLDEsdGhpcy5sZW5ndGgpLHRoaXNbZV19LHUucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbiB0KGUscil7cmV0dXJuIHJ8fEwoZSwyLHRoaXMubGVuZ3RoKSx0aGlzW2VdfHRoaXNbZSsxXTw8OH0sdS5wcm90b3R5cGUucmVhZFVJbnQxNkJFPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gcnx8TChlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDh8dGhpc1tlKzFdfSx1LnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24gdChlLHIpe3JldHVybiByfHxMKGUsNCx0aGlzLmxlbmd0aCksKHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbZSszXX0sdS5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gcnx8TChlLDQsdGhpcy5sZW5ndGgpLDE2Nzc3MjE2KnRoaXNbZV0rKHRoaXNbZSsxXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXSl9LHUucHJvdG90eXBlLnJlYWRJbnRMRT1mdW5jdGlvbiB0KGUscixuKXtlfD0wLHJ8PTAsbnx8TChlLHIsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzW2VdLG89MSxzPTA7KytzPHImJihvKj0yNTYpOylpKz10aGlzW2Urc10qbztyZXR1cm4gaT49KG8qPTEyOCkmJihpLT1NYXRoLnBvdygyLDgqcikpLGl9LHUucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbiB0KGUscixuKXtlfD0wLHJ8PTAsbnx8TChlLHIsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT1yLG89MSxzPXRoaXNbZSstLWldO2k+MCYmKG8qPTI1Nik7KXMrPXRoaXNbZSstLWldKm87cmV0dXJuIHM+PShvKj0xMjgpJiYocy09TWF0aC5wb3coMiw4KnIpKSxzfSx1LnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbiB0KGUscil7cmV0dXJuIHJ8fEwoZSwxLHRoaXMubGVuZ3RoKSwxMjgmdGhpc1tlXT8tMSooMjU1LXRoaXNbZV0rMSk6dGhpc1tlXX0sdS5wcm90b3R5cGUucmVhZEludDE2TEU9ZnVuY3Rpb24gdChlLHIpe3J8fEwoZSwyLHRoaXMubGVuZ3RoKTt2YXIgbj10aGlzW2VdfHRoaXNbZSsxXTw8ODtyZXR1cm4gMzI3Njgmbj80Mjk0OTAxNzYwfG46bn0sdS5wcm90b3R5cGUucmVhZEludDE2QkU9ZnVuY3Rpb24gdChlLHIpe3J8fEwoZSwyLHRoaXMubGVuZ3RoKTt2YXIgbj10aGlzW2UrMV18dGhpc1tlXTw8ODtyZXR1cm4gMzI3Njgmbj80Mjk0OTAxNzYwfG46bn0sdS5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24gdChlLHIpe3JldHVybiByfHxMKGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNnx0aGlzW2UrM108PDI0fSx1LnByb3RvdHlwZS5yZWFkSW50MzJCRT1mdW5jdGlvbiB0KGUscil7cmV0dXJuIHJ8fEwoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdPDwyNHx0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM119LHUucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gcnx8TChlLDQsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITAsMjMsNCl9LHUucHJvdG90eXBlLnJlYWRGbG9hdEJFPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4gcnx8TChlLDQsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITEsMjMsNCl9LHUucHJvdG90eXBlLnJlYWREb3VibGVMRT1mdW5jdGlvbiB0KGUscil7cmV0dXJuIHJ8fEwoZSw4LHRoaXMubGVuZ3RoKSxpLnJlYWQodGhpcyxlLCEwLDUyLDgpfSx1LnByb3RvdHlwZS5yZWFkRG91YmxlQkU9ZnVuY3Rpb24gdChlLHIpe3JldHVybiByfHxMKGUsOCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsZSwhMSw1Miw4KX0sdS5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24gdChlLHIsbixpKXsoZT0rZSxyfD0wLG58PTAsaSl8fE4odGhpcyxlLHIsbixNYXRoLnBvdygyLDgqbiktMSwwKTt2YXIgbz0xLHM9MDtmb3IodGhpc1tyXT0yNTUmZTsrK3M8biYmKG8qPTI1Nik7KXRoaXNbcitzXT1lL28mMjU1O3JldHVybiByK259LHUucHJvdG90eXBlLndyaXRlVUludEJFPWZ1bmN0aW9uIHQoZSxyLG4saSl7KGU9K2Uscnw9MCxufD0wLGkpfHxOKHRoaXMsZSxyLG4sTWF0aC5wb3coMiw4Km4pLTEsMCk7dmFyIG89bi0xLHM9MTtmb3IodGhpc1tyK29dPTI1NSZlOy0tbz49MCYmKHMqPTI1Nik7KXRoaXNbcitvXT1lL3MmMjU1O3JldHVybiByK259LHUucHJvdG90eXBlLndyaXRlVUludDg9ZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIGU9K2Uscnw9MCxufHxOKHRoaXMsZSxyLDEsMjU1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVHx8KGU9TWF0aC5mbG9vcihlKSksdGhpc1tyXT0yNTUmZSxyKzF9LHUucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIGU9K2Uscnw9MCxufHxOKHRoaXMsZSxyLDIsNjU1MzUsMCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3JdPTI1NSZlLHRoaXNbcisxXT1lPj4+OCk6VSh0aGlzLGUsciwhMCkscisyfSx1LnByb3RvdHlwZS53cml0ZVVJbnQxNkJFPWZ1bmN0aW9uIHQoZSxyLG4pe3JldHVybiBlPStlLHJ8PTAsbnx8Tih0aGlzLGUsciwyLDY1NTM1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tyXT1lPj4+OCx0aGlzW3IrMV09MjU1JmUpOlUodGhpcyxlLHIsITEpLHIrMn0sdS5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gZT0rZSxyfD0wLG58fE4odGhpcyxlLHIsNCw0Mjk0OTY3Mjk1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tyKzNdPWU+Pj4yNCx0aGlzW3IrMl09ZT4+PjE2LHRoaXNbcisxXT1lPj4+OCx0aGlzW3JdPTI1NSZlKTpCKHRoaXMsZSxyLCEwKSxyKzR9LHUucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIGU9K2Uscnw9MCxufHxOKHRoaXMsZSxyLDQsNDI5NDk2NzI5NSwwKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbcl09ZT4+PjI0LHRoaXNbcisxXT1lPj4+MTYsdGhpc1tyKzJdPWU+Pj44LHRoaXNbciszXT0yNTUmZSk6Qih0aGlzLGUsciwhMSkscis0fSx1LnByb3RvdHlwZS53cml0ZUludExFPWZ1bmN0aW9uIHQoZSxyLG4saSl7aWYoZT0rZSxyfD0wLCFpKXt2YXIgbz1NYXRoLnBvdygyLDgqbi0xKTtOKHRoaXMsZSxyLG4sby0xLC1vKX12YXIgcz0wLGE9MSx1PTA7Zm9yKHRoaXNbcl09MjU1JmU7KytzPG4mJihhKj0yNTYpOyllPDAmJjA9PT11JiYwIT09dGhpc1tyK3MtMV0mJih1PTEpLHRoaXNbcitzXT0oZS9hPj4wKS11JjI1NTtyZXR1cm4gcitufSx1LnByb3RvdHlwZS53cml0ZUludEJFPWZ1bmN0aW9uIHQoZSxyLG4saSl7aWYoZT0rZSxyfD0wLCFpKXt2YXIgbz1NYXRoLnBvdygyLDgqbi0xKTtOKHRoaXMsZSxyLG4sby0xLC1vKX12YXIgcz1uLTEsYT0xLHU9MDtmb3IodGhpc1tyK3NdPTI1NSZlOy0tcz49MCYmKGEqPTI1Nik7KWU8MCYmMD09PXUmJjAhPT10aGlzW3IrcysxXSYmKHU9MSksdGhpc1tyK3NdPShlL2E+PjApLXUmMjU1O3JldHVybiByK259LHUucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gZT0rZSxyfD0wLG58fE4odGhpcyxlLHIsMSwxMjcsLTEyOCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUfHwoZT1NYXRoLmZsb29yKGUpKSxlPDAmJihlPTI1NStlKzEpLHRoaXNbcl09MjU1JmUscisxfSx1LnByb3RvdHlwZS53cml0ZUludDE2TEU9ZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIGU9K2Uscnw9MCxufHxOKHRoaXMsZSxyLDIsMzI3NjcsLTMyNzY4KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbcl09MjU1JmUsdGhpc1tyKzFdPWU+Pj44KTpVKHRoaXMsZSxyLCEwKSxyKzJ9LHUucHJvdG90eXBlLndyaXRlSW50MTZCRT1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gZT0rZSxyfD0wLG58fE4odGhpcyxlLHIsMiwzMjc2NywtMzI3NjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tyXT1lPj4+OCx0aGlzW3IrMV09MjU1JmUpOlUodGhpcyxlLHIsITEpLHIrMn0sdS5wcm90b3R5cGUud3JpdGVJbnQzMkxFPWZ1bmN0aW9uIHQoZSxyLG4pe3JldHVybiBlPStlLHJ8PTAsbnx8Tih0aGlzLGUsciw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tyXT0yNTUmZSx0aGlzW3IrMV09ZT4+PjgsdGhpc1tyKzJdPWU+Pj4xNix0aGlzW3IrM109ZT4+PjI0KTpCKHRoaXMsZSxyLCEwKSxyKzR9LHUucHJvdG90eXBlLndyaXRlSW50MzJCRT1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gZT0rZSxyfD0wLG58fE4odGhpcyxlLHIsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSxlPDAmJihlPTQyOTQ5NjcyOTUrZSsxKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbcl09ZT4+PjI0LHRoaXNbcisxXT1lPj4+MTYsdGhpc1tyKzJdPWU+Pj44LHRoaXNbciszXT0yNTUmZSk6Qih0aGlzLGUsciwhMSkscis0fSx1LnByb3RvdHlwZS53cml0ZUZsb2F0TEU9ZnVuY3Rpb24gdChlLHIsbil7cmV0dXJuIGoodGhpcyxlLHIsITAsbil9LHUucHJvdG90eXBlLndyaXRlRmxvYXRCRT1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gaih0aGlzLGUsciwhMSxuKX0sdS5wcm90b3R5cGUud3JpdGVEb3VibGVMRT1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gTSh0aGlzLGUsciwhMCxuKX0sdS5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1mdW5jdGlvbiB0KGUscixuKXtyZXR1cm4gTSh0aGlzLGUsciwhMSxuKX0sdS5wcm90b3R5cGUuY29weT1mdW5jdGlvbiB0KGUscixuLGkpe2lmKG58fChuPTApLGl8fDA9PT1pfHwoaT10aGlzLmxlbmd0aCkscj49ZS5sZW5ndGgmJihyPWUubGVuZ3RoKSxyfHwocj0wKSxpPjAmJmk8biYmKGk9biksaT09PW4pcmV0dXJuIDA7aWYoMD09PWUubGVuZ3RofHwwPT09dGhpcy5sZW5ndGgpcmV0dXJuIDA7aWYocjwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwidGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kc1wiKTtpZihuPDB8fG4+PXRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwic291cmNlU3RhcnQgb3V0IG9mIGJvdW5kc1wiKTtpZihpPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtpPnRoaXMubGVuZ3RoJiYoaT10aGlzLmxlbmd0aCksZS5sZW5ndGgtcjxpLW4mJihpPWUubGVuZ3RoLXIrbik7dmFyIG8scz1pLW47aWYodGhpcz09PWUmJm48ciYmcjxpKWZvcihvPXMtMTtvPj0wOy0tbyllW28rcl09dGhpc1tvK25dO2Vsc2UgaWYoczwxZTN8fCF1LlRZUEVEX0FSUkFZX1NVUFBPUlQpZm9yKG89MDtvPHM7KytvKWVbbytyXT10aGlzW28rbl07ZWxzZSBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChlLHRoaXMuc3ViYXJyYXkobixuK3MpLHIpO3JldHVybiBzfSx1LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uIHQoZSxyLG4saSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiByPyhpPXIscj0wLG49dGhpcy5sZW5ndGgpOlwic3RyaW5nXCI9PXR5cGVvZiBuJiYoaT1uLG49dGhpcy5sZW5ndGgpLDE9PT1lLmxlbmd0aCl7dmFyIG89ZS5jaGFyQ29kZUF0KDApO288MjU2JiYoZT1vKX1pZih2b2lkIDAhPT1pJiZcInN0cmluZ1wiIT10eXBlb2YgaSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmIXUuaXNFbmNvZGluZyhpKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIraSl9ZWxzZVwibnVtYmVyXCI9PXR5cGVvZiBlJiYoZSY9MjU1KTtpZihyPDB8fHRoaXMubGVuZ3RoPHJ8fHRoaXMubGVuZ3RoPG4pdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYobjw9cilyZXR1cm4gdGhpczt2YXIgcztpZihyPj4+PTAsbj12b2lkIDA9PT1uP3RoaXMubGVuZ3RoOm4+Pj4wLGV8fChlPTApLFwibnVtYmVyXCI9PXR5cGVvZiBlKWZvcihzPXI7czxuOysrcyl0aGlzW3NdPWU7ZWxzZXt2YXIgYT11LmlzQnVmZmVyKGUpP2U6SyhuZXcgdShlLGkpLnRvU3RyaW5nKCkpLGM9YS5sZW5ndGg7Zm9yKHM9MDtzPG4tcjsrK3MpdGhpc1tzK3JdPWFbcyVjXX1yZXR1cm4gdGhpc307dmFyIEg9L1teK1xcLzAtOUEtWmEtei1fXS9nO2Z1bmN0aW9uIFYodCl7cmV0dXJuIHQ8MTY/XCIwXCIrdC50b1N0cmluZygxNik6dC50b1N0cmluZygxNil9ZnVuY3Rpb24gSyh0LGUpe3ZhciByO2U9ZXx8MS8wO2Zvcih2YXIgbj10Lmxlbmd0aCxpPW51bGwsbz1bXSxzPTA7czxuOysrcyl7aWYoKHI9dC5jaGFyQ29kZUF0KHMpKT41NTI5NSYmcjw1NzM0NCl7aWYoIWkpe2lmKHI+NTYzMTkpeyhlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pZihzKzE9PT1uKXsoZS09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9aT1yO2NvbnRpbnVlfWlmKHI8NTYzMjApeyhlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KSxpPXI7Y29udGludWV9cj02NTUzNisoaS01NTI5Njw8MTB8ci01NjMyMCl9ZWxzZSBpJiYoZS09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7aWYoaT1udWxsLHI8MTI4KXtpZigoZS09MSk8MClicmVhaztvLnB1c2gocil9ZWxzZSBpZihyPDIwNDgpe2lmKChlLT0yKTwwKWJyZWFrO28ucHVzaChyPj42fDE5Miw2MyZyfDEyOCl9ZWxzZSBpZihyPDY1NTM2KXtpZigoZS09Myk8MClicmVhaztvLnB1c2gocj4+MTJ8MjI0LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KX1lbHNle2lmKCEocjwxMTE0MTEyKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIik7aWYoKGUtPTQpPDApYnJlYWs7by5wdXNoKHI+PjE4fDI0MCxyPj4xMiY2M3wxMjgscj4+NiY2M3wxMjgsNjMmcnwxMjgpfX1yZXR1cm4gb31mdW5jdGlvbiBxKHQpe3JldHVybiBuLnRvQnl0ZUFycmF5KGZ1bmN0aW9uIGUodCl7aWYoKHQ9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gdC50cmltP3QudHJpbSgpOnQucmVwbGFjZSgvXlxccyt8XFxzKyQvZyxcIlwiKX0odCkucmVwbGFjZShILFwiXCIpKS5sZW5ndGg8MilyZXR1cm5cIlwiO2Zvcig7dC5sZW5ndGglNCE9MDspdCs9XCI9XCI7cmV0dXJuIHR9KHQpKX1mdW5jdGlvbiBKKHQsZSxyLG4pe2Zvcih2YXIgaT0wO2k8biYmIShpK3I+PWUubGVuZ3RofHxpPj10Lmxlbmd0aCk7KytpKWVbaStyXT10W2ldO3JldHVybiBpfX0pLmNhbGwodGhpcyxyKDI5KSl9LGZ1bmN0aW9uKHQsZSl7dmFyIHI7cj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtyPXJ8fG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2godCl7XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmKHI9d2luZG93KX10LmV4cG9ydHM9cn0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuYnl0ZUxlbmd0aD1mdW5jdGlvbiBuKHQpe3ZhciBlPWYodCkscj1lWzBdLG49ZVsxXTtyZXR1cm4gMyoocituKS80LW59LGUudG9CeXRlQXJyYXk9ZnVuY3Rpb24gaSh0KXt2YXIgZSxyLG49Zih0KSxpPW5bMF0sbz1uWzFdLHM9bmV3IHUoZnVuY3Rpb24gYyh0LGUscil7cmV0dXJuIDMqKGUrcikvNC1yfSgwLGksbykpLGg9MCxsPW8+MD9pLTQ6aTtmb3Iocj0wO3I8bDtyKz00KWU9YVt0LmNoYXJDb2RlQXQocildPDwxOHxhW3QuY2hhckNvZGVBdChyKzEpXTw8MTJ8YVt0LmNoYXJDb2RlQXQocisyKV08PDZ8YVt0LmNoYXJDb2RlQXQociszKV0sc1toKytdPWU+PjE2JjI1NSxzW2grK109ZT4+OCYyNTUsc1toKytdPTI1NSZlOzI9PT1vJiYoZT1hW3QuY2hhckNvZGVBdChyKV08PDJ8YVt0LmNoYXJDb2RlQXQocisxKV0+PjQsc1toKytdPTI1NSZlKTsxPT09byYmKGU9YVt0LmNoYXJDb2RlQXQocildPDwxMHxhW3QuY2hhckNvZGVBdChyKzEpXTw8NHxhW3QuY2hhckNvZGVBdChyKzIpXT4+MixzW2grK109ZT4+OCYyNTUsc1toKytdPTI1NSZlKTtyZXR1cm4gc30sZS5mcm9tQnl0ZUFycmF5PWZ1bmN0aW9uIG8odCl7Zm9yKHZhciBlLHI9dC5sZW5ndGgsbj1yJTMsaT1bXSxvPTE2MzgzLGE9MCx1PXItbjthPHU7YSs9bylpLnB1c2goZyh0LGEsYStvPnU/dTphK28pKTsxPT09bj8oZT10W3ItMV0saS5wdXNoKHNbZT4+Ml0rc1tlPDw0JjYzXStcIj09XCIpKToyPT09biYmKGU9KHRbci0yXTw8OCkrdFtyLTFdLGkucHVzaChzW2U+PjEwXStzW2U+PjQmNjNdK3NbZTw8MiY2M10rXCI9XCIpKTtyZXR1cm4gaS5qb2luKFwiXCIpfTtmb3IodmFyIHM9W10sYT1bXSx1PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5P1VpbnQ4QXJyYXk6QXJyYXksYz1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIixoPTAsbD1jLmxlbmd0aDtoPGw7KytoKXNbaF09Y1toXSxhW2MuY2hhckNvZGVBdChoKV09aDtmdW5jdGlvbiBmKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGUlND4wKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDRcIik7dmFyIHI9dC5pbmRleE9mKFwiPVwiKTtyZXR1cm4tMT09PXImJihyPWUpLFtyLHI9PT1lPzA6NC1yJTRdfWZ1bmN0aW9uIGcodCxlLHIpe2Zvcih2YXIgbixpLG89W10sYT1lO2E8cjthKz0zKW49KHRbYV08PDE2JjE2NzExNjgwKSsodFthKzFdPDw4JjY1MjgwKSsoMjU1JnRbYSsyXSksby5wdXNoKHNbKGk9bik+PjE4JjYzXStzW2k+PjEyJjYzXStzW2k+PjYmNjNdK3NbNjMmaV0pO3JldHVybiBvLmpvaW4oXCJcIil9YVtcIi1cIi5jaGFyQ29kZUF0KDApXT02MixhW1wiX1wiLmNoYXJDb2RlQXQoMCldPTYzfSxmdW5jdGlvbih0LGUpe1xuLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmUucmVhZD1mdW5jdGlvbih0LGUscixuLGkpe3ZhciBvLHMsYT04Kmktbi0xLHU9KDE8PGEpLTEsYz11Pj4xLGg9LTcsbD1yP2ktMTowLGY9cj8tMToxLGc9dFtlK2xdO2ZvcihsKz1mLG89ZyYoMTw8LWgpLTEsZz4+PS1oLGgrPWE7aD4wO289MjU2Km8rdFtlK2xdLGwrPWYsaC09OCk7Zm9yKHM9byYoMTw8LWgpLTEsbz4+PS1oLGgrPW47aD4wO3M9MjU2KnMrdFtlK2xdLGwrPWYsaC09OCk7aWYoMD09PW8pbz0xLWM7ZWxzZXtpZihvPT09dSlyZXR1cm4gcz9OYU46MS8wKihnPy0xOjEpO3MrPU1hdGgucG93KDIsbiksby09Y31yZXR1cm4oZz8tMToxKSpzKk1hdGgucG93KDIsby1uKX0sZS53cml0ZT1mdW5jdGlvbih0LGUscixuLGksbyl7dmFyIHMsYSx1LGM9OCpvLWktMSxoPSgxPDxjKS0xLGw9aD4+MSxmPTIzPT09aT9NYXRoLnBvdygyLC0yNCktTWF0aC5wb3coMiwtNzcpOjAsZz1uPzA6by0xLGQ9bj8xOi0xLHA9ZTwwfHwwPT09ZSYmMS9lPDA/MTowO2ZvcihlPU1hdGguYWJzKGUpLGlzTmFOKGUpfHxlPT09MS8wPyhhPWlzTmFOKGUpPzE6MCxzPWgpOihzPU1hdGguZmxvb3IoTWF0aC5sb2coZSkvTWF0aC5MTjIpLGUqKHU9TWF0aC5wb3coMiwtcykpPDEmJihzLS0sdSo9MiksKGUrPXMrbD49MT9mL3U6ZipNYXRoLnBvdygyLDEtbCkpKnU+PTImJihzKyssdS89MikscytsPj1oPyhhPTAscz1oKTpzK2w+PTE/KGE9KGUqdS0xKSpNYXRoLnBvdygyLGkpLHMrPWwpOihhPWUqTWF0aC5wb3coMixsLTEpKk1hdGgucG93KDIsaSkscz0wKSk7aT49ODt0W3IrZ109MjU1JmEsZys9ZCxhLz0yNTYsaS09OCk7Zm9yKHM9czw8aXxhLGMrPWk7Yz4wO3RbcitnXT0yNTUmcyxnKz1kLHMvPTI1NixjLT04KTt0W3IrZy1kXXw9MTI4KnB9fSxmdW5jdGlvbih0LGUpe3ZhciByPXt9LnRvU3RyaW5nO3QuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbih0KXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PXIuY2FsbCh0KX19LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9ZnVuY3Rpb24gbih0KXt2YXIgZT10Lmp3cyxyPXQuS2V5VXRpbCxuPXQuWDUwOSxvPXQuY3J5cHRvLHM9dC5oZXh0b2I2NHUsYT10LmI2NHRvaGV4LHU9dC5BbGxvd2VkU2lnbmluZ0FsZ3M7cmV0dXJuIGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbiBlKHQscil7aWYoISh0IGluc3RhbmNlb2YgcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX1yZXR1cm4gdC5wYXJzZUp3dD1mdW5jdGlvbiB0KHIpe2kuTG9nLmRlYnVnKFwiSm9zZVV0aWwucGFyc2VKd3RcIik7dHJ5e3ZhciBuPWUuSldTLnBhcnNlKHIpO3JldHVybntoZWFkZXI6bi5oZWFkZXJPYmoscGF5bG9hZDpuLnBheWxvYWRPYmp9fWNhdGNoKHQpe2kuTG9nLmVycm9yKHQpfX0sdC52YWxpZGF0ZUp3dD1mdW5jdGlvbiBlKG8scyx1LGMsaCxsLGYpe2kuTG9nLmRlYnVnKFwiSm9zZVV0aWwudmFsaWRhdGVKd3RcIik7dHJ5e2lmKFwiUlNBXCI9PT1zLmt0eSlpZihzLmUmJnMubilzPXIuZ2V0S2V5KHMpO2Vsc2V7aWYoIXMueDVjfHwhcy54NWMubGVuZ3RoKXJldHVybiBpLkxvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBSU0Ega2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIscyksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiKSk7dmFyIGc9YShzLng1Y1swXSk7cz1uLmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGcpfWVsc2V7aWYoXCJFQ1wiIT09cy5rdHkpcmV0dXJuIGkuTG9nLmVycm9yKFwiSm9zZVV0aWwudmFsaWRhdGVKd3Q6IFVuc3VwcG9ydGVkIGtleSB0eXBlXCIscyYmcy5rdHkpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihzLmt0eSkpO2lmKCEocy5jcnYmJnMueCYmcy55KSlyZXR1cm4gaS5Mb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIscyksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtzPXIuZ2V0S2V5KHMpfXJldHVybiB0Ll92YWxpZGF0ZUp3dChvLHMsdSxjLGgsbCxmKX1jYXRjaCh0KXtyZXR1cm4gaS5Mb2cuZXJyb3IodCYmdC5tZXNzYWdlfHx0KSxQcm9taXNlLnJlamVjdChcIkpXVCB2YWxpZGF0aW9uIGZhaWxlZFwiKX19LHQudmFsaWRhdGVKd3RBdHRyaWJ1dGVzPWZ1bmN0aW9uIGUocixuLG8scyxhLHUpe3N8fChzPTApLGF8fChhPXBhcnNlSW50KERhdGUubm93KCkvMWUzKSk7dmFyIGM9dC5wYXJzZUp3dChyKS5wYXlsb2FkO2lmKCFjLmlzcylyZXR1cm4gaS5Mb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGlzc3VlciB3YXMgbm90IHByb3ZpZGVkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImlzc3VlciB3YXMgbm90IHByb3ZpZGVkXCIpKTtpZihjLmlzcyE9PW4pcmV0dXJuIGkuTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBJbnZhbGlkIGlzc3VlciBpbiB0b2tlblwiLGMuaXNzKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGlzc3VlciBpbiB0b2tlbjogXCIrYy5pc3MpKTtpZighYy5hdWQpcmV0dXJuIGkuTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBhdWQgd2FzIG5vdCBwcm92aWRlZFwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhdWQgd2FzIG5vdCBwcm92aWRlZFwiKSk7aWYoIShjLmF1ZD09PW98fEFycmF5LmlzQXJyYXkoYy5hdWQpJiZjLmF1ZC5pbmRleE9mKG8pPj0wKSlyZXR1cm4gaS5Mb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IEludmFsaWQgYXVkaWVuY2UgaW4gdG9rZW5cIixjLmF1ZCksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBhdWRpZW5jZSBpbiB0b2tlbjogXCIrYy5hdWQpKTtpZihjLmF6cCYmYy5henAhPT1vKXJldHVybiBpLkxvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBhenAgaW4gdG9rZW5cIixjLmF6cCksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBhenAgaW4gdG9rZW46IFwiK2MuYXpwKSk7aWYoIXUpe3ZhciBoPWErcyxsPWEtcztpZighYy5pYXQpcmV0dXJuIGkuTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBpYXQgd2FzIG5vdCBwcm92aWRlZFwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgd2FzIG5vdCBwcm92aWRlZFwiKSk7aWYoaDxjLmlhdClyZXR1cm4gaS5Mb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGlhdCBpcyBpbiB0aGUgZnV0dXJlXCIsYy5pYXQpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImlhdCBpcyBpbiB0aGUgZnV0dXJlOiBcIitjLmlhdCkpO2lmKGMubmJmJiZoPGMubmJmKXJldHVybiBpLkxvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogbmJmIGlzIGluIHRoZSBmdXR1cmVcIixjLm5iZiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwibmJmIGlzIGluIHRoZSBmdXR1cmU6IFwiK2MubmJmKSk7aWYoIWMuZXhwKXJldHVybiBpLkxvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogZXhwIHdhcyBub3QgcHJvdmlkZWRcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZXhwIHdhcyBub3QgcHJvdmlkZWRcIikpO2lmKGMuZXhwPGwpcmV0dXJuIGkuTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBleHAgaXMgaW4gdGhlIHBhc3RcIixjLmV4cCksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZXhwIGlzIGluIHRoZSBwYXN0OlwiK2MuZXhwKSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZShjKX0sdC5fdmFsaWRhdGVKd3Q9ZnVuY3Rpb24gcihuLG8scyxhLGMsaCxsKXtyZXR1cm4gdC52YWxpZGF0ZUp3dEF0dHJpYnV0ZXMobixzLGEsYyxoLGwpLnRoZW4oKGZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gZS5KV1MudmVyaWZ5KG4sbyx1KT90OihpLkxvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogc2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNpZ25hdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKSkpfWNhdGNoKHQpe3JldHVybiBpLkxvZy5lcnJvcih0JiZ0Lm1lc3NhZ2V8fHQpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNpZ25hdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKSl9fSkpfSx0Lmhhc2hTdHJpbmc9ZnVuY3Rpb24gdChlLHIpe3RyeXtyZXR1cm4gby5VdGlsLmhhc2hTdHJpbmcoZSxyKX1jYXRjaCh0KXtpLkxvZy5lcnJvcih0KX19LHQuaGV4VG9CYXNlNjRVcmw9ZnVuY3Rpb24gdChlKXt0cnl7cmV0dXJuIHMoZSl9Y2F0Y2godCl7aS5Mb2cuZXJyb3IodCl9fSx0fSgpfTt2YXIgaT1yKDApO3QuZXhwb3J0cz1lLmRlZmF1bHR9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlNpZ25pblJlc3BvbnNlPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigzKTtmdW5jdGlvbiBvKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1lLlNpZ25pblJlc3BvbnNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCIjXCI7byh0aGlzLHQpO3ZhciBuPWkuVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50KGUscik7dGhpcy5lcnJvcj1uLmVycm9yLHRoaXMuZXJyb3JfZGVzY3JpcHRpb249bi5lcnJvcl9kZXNjcmlwdGlvbix0aGlzLmVycm9yX3VyaT1uLmVycm9yX3VyaSx0aGlzLmNvZGU9bi5jb2RlLHRoaXMuc3RhdGU9bi5zdGF0ZSx0aGlzLmlkX3Rva2VuPW4uaWRfdG9rZW4sdGhpcy5zZXNzaW9uX3N0YXRlPW4uc2Vzc2lvbl9zdGF0ZSx0aGlzLmFjY2Vzc190b2tlbj1uLmFjY2Vzc190b2tlbix0aGlzLnRva2VuX3R5cGU9bi50b2tlbl90eXBlLHRoaXMuc2NvcGU9bi5zY29wZSx0aGlzLnByb2ZpbGU9dm9pZCAwLHRoaXMuZXhwaXJlc19pbj1uLmV4cGlyZXNfaW59cmV0dXJuIG4odCxbe2tleTpcImV4cGlyZXNfaW5cIixnZXQ6ZnVuY3Rpb24gdCgpe2lmKHRoaXMuZXhwaXJlc19hdCl7dmFyIGU9cGFyc2VJbnQoRGF0ZS5ub3coKS8xZTMpO3JldHVybiB0aGlzLmV4cGlyZXNfYXQtZX19LHNldDpmdW5jdGlvbiB0KGUpe3ZhciByPXBhcnNlSW50KGUpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiByJiZyPjApe3ZhciBuPXBhcnNlSW50KERhdGUubm93KCkvMWUzKTt0aGlzLmV4cGlyZXNfYXQ9bityfX19LHtrZXk6XCJleHBpcmVkXCIsZ2V0OmZ1bmN0aW9uIHQoKXt2YXIgZT10aGlzLmV4cGlyZXNfaW47aWYodm9pZCAwIT09ZSlyZXR1cm4gZTw9MH19LHtrZXk6XCJzY29wZXNcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybih0aGlzLnNjb3BlfHxcIlwiKS5zcGxpdChcIiBcIil9fSx7a2V5OlwiaXNPcGVuSWRDb25uZWN0XCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5zY29wZXMuaW5kZXhPZihcIm9wZW5pZFwiKT49MHx8ISF0aGlzLmlkX3Rva2VufX1dKSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5TaWdub3V0UmVxdWVzdD12b2lkIDA7dmFyIG49cigwKSxpPXIoMyksbz1yKDkpO2UuU2lnbm91dFJlcXVlc3Q9ZnVuY3Rpb24gdChlKXt2YXIgcj1lLnVybCxzPWUuaWRfdG9rZW5faGludCxhPWUucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpLHU9ZS5kYXRhLGM9ZS5leHRyYVF1ZXJ5UGFyYW1zLGg9ZS5yZXF1ZXN0X3R5cGU7aWYoZnVuY3Rpb24gbCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksIXIpdGhyb3cgbi5Mb2cuZXJyb3IoXCJTaWdub3V0UmVxdWVzdC5jdG9yOiBObyB1cmwgcGFzc2VkXCIpLG5ldyBFcnJvcihcInVybFwiKTtmb3IodmFyIGYgaW4gcyYmKHI9aS5VcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0ocixcImlkX3Rva2VuX2hpbnRcIixzKSksYSYmKHI9aS5VcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0ocixcInBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaVwiLGEpLHUmJih0aGlzLnN0YXRlPW5ldyBvLlN0YXRlKHtkYXRhOnUscmVxdWVzdF90eXBlOmh9KSxyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsXCJzdGF0ZVwiLHRoaXMuc3RhdGUuaWQpKSksYylyPWkuVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHIsZixjW2ZdKTt0aGlzLnVybD1yfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuU2lnbm91dFJlc3BvbnNlPXZvaWQgMDt2YXIgbj1yKDMpO2UuU2lnbm91dFJlc3BvbnNlPWZ1bmN0aW9uIHQoZSl7IWZ1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciBpPW4uVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50KGUsXCI/XCIpO3RoaXMuZXJyb3I9aS5lcnJvcix0aGlzLmVycm9yX2Rlc2NyaXB0aW9uPWkuZXJyb3JfZGVzY3JpcHRpb24sdGhpcy5lcnJvcl91cmk9aS5lcnJvcl91cmksdGhpcy5zdGF0ZT1pLnN0YXRlfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuSW5NZW1vcnlXZWJTdG9yYWdlPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKTtlLkluTWVtb3J5V2ViU3RvcmFnZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24gZSh0LHIpe2lmKCEodCBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5fZGF0YT17fX1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0SXRlbT1mdW5jdGlvbiB0KGUpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIkluTWVtb3J5V2ViU3RvcmFnZS5nZXRJdGVtXCIsZSksdGhpcy5fZGF0YVtlXX0sdC5wcm90b3R5cGUuc2V0SXRlbT1mdW5jdGlvbiB0KGUscil7aS5Mb2cuZGVidWcoXCJJbk1lbW9yeVdlYlN0b3JhZ2Uuc2V0SXRlbVwiLGUpLHRoaXMuX2RhdGFbZV09cn0sdC5wcm90b3R5cGUucmVtb3ZlSXRlbT1mdW5jdGlvbiB0KGUpe2kuTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnJlbW92ZUl0ZW1cIixlKSxkZWxldGUgdGhpcy5fZGF0YVtlXX0sdC5wcm90b3R5cGUua2V5PWZ1bmN0aW9uIHQoZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpW2VdfSxuKHQsW3trZXk6XCJsZW5ndGhcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9kYXRhKS5sZW5ndGh9fV0pLHR9KCl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlVzZXJNYW5hZ2VyPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKSxvPXIoMTApLHM9cigzOSksYT1yKDE1KSx1PXIoNDUpLGM9cig0NyksaD1yKDE4KSxsPXIoOCksZj1yKDIwKSxnPXIoMTEpLGQ9cig0KTtmdW5jdGlvbiBwKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiB2KHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiFlfHxcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZT90OmV9ZS5Vc2VyTWFuYWdlcj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmMuU2lsZW50UmVuZXdTZXJ2aWNlLG89YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmguU2Vzc2lvbk1vbml0b3IsYT1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Zi5Ub2tlblJldm9jYXRpb25DbGllbnQsbD1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06Zy5Ub2tlbkNsaWVudCx5PWFyZ3VtZW50cy5sZW5ndGg+NSYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTpkLkpvc2VVdGlsO3AodGhpcyxlKSxyIGluc3RhbmNlb2Ygcy5Vc2VyTWFuYWdlclNldHRpbmdzfHwocj1uZXcgcy5Vc2VyTWFuYWdlclNldHRpbmdzKHIpKTt2YXIgbT12KHRoaXMsdC5jYWxsKHRoaXMscikpO3JldHVybiBtLl9ldmVudHM9bmV3IHUuVXNlck1hbmFnZXJFdmVudHMociksbS5fc2lsZW50UmVuZXdTZXJ2aWNlPW5ldyBuKG0pLG0uc2V0dGluZ3MuYXV0b21hdGljU2lsZW50UmVuZXcmJihpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLmN0b3I6IGF1dG9tYXRpY1NpbGVudFJlbmV3IGlzIGNvbmZpZ3VyZWQsIHNldHRpbmcgdXAgc2lsZW50IHJlbmV3XCIpLG0uc3RhcnRTaWxlbnRSZW5ldygpKSxtLnNldHRpbmdzLm1vbml0b3JTZXNzaW9uJiYoaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5jdG9yOiBtb25pdG9yU2Vzc2lvbiBpcyBjb25maWd1cmVkLCBzZXR0aW5nIHVwIHNlc3Npb24gbW9uaXRvclwiKSxtLl9zZXNzaW9uTW9uaXRvcj1uZXcgbyhtKSksbS5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50PW5ldyBhKG0uX3NldHRpbmdzKSxtLl90b2tlbkNsaWVudD1uZXcgbChtLl9zZXR0aW5ncyksbS5fam9zZVV0aWw9eSxtfXJldHVybiBmdW5jdGlvbiByKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9KGUsdCksZS5wcm90b3R5cGUuZ2V0VXNlcj1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdD8oaS5Mb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLmdldFVzZXI6IHVzZXIgbG9hZGVkXCIpLGUuX2V2ZW50cy5sb2FkKHQsITEpLHQpOihpLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIuZ2V0VXNlcjogdXNlciBub3QgZm91bmQgaW4gc3RvcmFnZVwiKSxudWxsKX0pKX0sZS5wcm90b3R5cGUucmVtb3ZlVXNlcj1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5zdG9yZVVzZXIobnVsbCkudGhlbigoZnVuY3Rpb24oKXtpLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIucmVtb3ZlVXNlcjogdXNlciByZW1vdmVkIGZyb20gc3RvcmFnZVwiKSxlLl9ldmVudHMudW5sb2FkKCl9KSl9LGUucHJvdG90eXBlLnNpZ25pblJlZGlyZWN0PWZ1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307KGU9T2JqZWN0LmFzc2lnbih7fSxlKSkucmVxdWVzdF90eXBlPVwic2k6clwiO3ZhciByPXt1c2VSZXBsYWNlVG9OYXZpZ2F0ZTplLnVzZVJlcGxhY2VUb05hdmlnYXRlfTtyZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoZSx0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcixyKS50aGVuKChmdW5jdGlvbigpe2kuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5SZWRpcmVjdDogc3VjY2Vzc2Z1bFwiKX0pKX0sZS5wcm90b3R5cGUuc2lnbmluUmVkaXJlY3RDYWxsYmFjaz1mdW5jdGlvbiB0KGUpe3JldHVybiB0aGlzLl9zaWduaW5FbmQoZXx8dGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IudXJsKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5wcm9maWxlJiZ0LnByb2ZpbGUuc3ViP2kuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5SZWRpcmVjdENhbGxiYWNrOiBzdWNjZXNzZnVsLCBzaWduZWQgaW4gc3ViOiBcIix0LnByb2ZpbGUuc3ViKTppLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RDYWxsYmFjazogbm8gc3ViXCIpLHR9KSl9LGUucHJvdG90eXBlLnNpZ25pblBvcHVwPWZ1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307KGU9T2JqZWN0LmFzc2lnbih7fSxlKSkucmVxdWVzdF90eXBlPVwic2k6cFwiO3ZhciByPWUucmVkaXJlY3RfdXJpfHx0aGlzLnNldHRpbmdzLnBvcHVwX3JlZGlyZWN0X3VyaXx8dGhpcy5zZXR0aW5ncy5yZWRpcmVjdF91cmk7cmV0dXJuIHI/KGUucmVkaXJlY3RfdXJpPXIsZS5kaXNwbGF5PVwicG9wdXBcIix0aGlzLl9zaWduaW4oZSx0aGlzLl9wb3B1cE5hdmlnYXRvcix7c3RhcnRVcmw6cixwb3B1cFdpbmRvd0ZlYXR1cmVzOmUucG9wdXBXaW5kb3dGZWF0dXJlc3x8dGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLHBvcHVwV2luZG93VGFyZ2V0OmUucG9wdXBXaW5kb3dUYXJnZXR8fHRoaXMuc2V0dGluZ3MucG9wdXBXaW5kb3dUYXJnZXR9KS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdCYmKHQucHJvZmlsZSYmdC5wcm9maWxlLnN1Yj9pLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXA6IHNpZ25pblBvcHVwIHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLHQucHJvZmlsZS5zdWIpOmkuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogbm8gc3ViXCIpKSx0fSkpKTooaS5Mb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHBvcHVwX3JlZGlyZWN0X3VyaSBvciByZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSkpfSxlLnByb3RvdHlwZS5zaWduaW5Qb3B1cENhbGxiYWNrPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIHRoaXMuX3NpZ25pbkNhbGxiYWNrKGUsdGhpcy5fcG9wdXBOYXZpZ2F0b3IpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0JiYodC5wcm9maWxlJiZ0LnByb2ZpbGUuc3ViP2kuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsLCBzaWduZWQgaW4gc3ViOiBcIix0LnByb2ZpbGUuc3ViKTppLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXBDYWxsYmFjazogbm8gc3ViXCIpKSx0fSkpLmNhdGNoKChmdW5jdGlvbih0KXtpLkxvZy5lcnJvcih0Lm1lc3NhZ2UpfSkpfSxlLnByb3RvdHlwZS5zaWduaW5TaWxlbnQ9ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXMscj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307cmV0dXJuIHI9T2JqZWN0LmFzc2lnbih7fSxyKSx0aGlzLl9sb2FkVXNlcigpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0LnJlZnJlc2hfdG9rZW4/KHIucmVmcmVzaF90b2tlbj10LnJlZnJlc2hfdG9rZW4sZS5fdXNlUmVmcmVzaFRva2VuKHIpKTooci5yZXF1ZXN0X3R5cGU9XCJzaTpzXCIsci5pZF90b2tlbl9oaW50PXIuaWRfdG9rZW5faGludHx8ZS5zZXR0aW5ncy5pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcmJnQmJnQuaWRfdG9rZW4sdCYmZS5fc2V0dGluZ3MudmFsaWRhdGVTdWJPblNpbGVudFJlbmV3JiYoaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQsIHN1YmplY3QgcHJpb3IgdG8gc2lsZW50IHJlbmV3OiBcIix0LnByb2ZpbGUuc3ViKSxyLmN1cnJlbnRfc3ViPXQucHJvZmlsZS5zdWIpLGUuX3NpZ25pblNpbGVudElmcmFtZShyKSl9KSl9LGUucHJvdG90eXBlLl91c2VSZWZyZXNoVG9rZW49ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXMscj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307cmV0dXJuIHRoaXMuX3Rva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuKHIpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0P3QuYWNjZXNzX3Rva2VuP2UuX2xvYWRVc2VyKCkudGhlbigoZnVuY3Rpb24ocil7aWYocil7dmFyIG49UHJvbWlzZS5yZXNvbHZlKCk7cmV0dXJuIHQuaWRfdG9rZW4mJihuPWUuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbihyLnByb2ZpbGUsdC5pZF90b2tlbikpLG4udGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fdXNlUmVmcmVzaFRva2VuOiByZWZyZXNoIHRva2VuIHJlc3BvbnNlIHN1Y2Nlc3NcIiksci5pZF90b2tlbj10LmlkX3Rva2VufHxyLmlkX3Rva2VuLHIuYWNjZXNzX3Rva2VuPXQuYWNjZXNzX3Rva2VuLHIucmVmcmVzaF90b2tlbj10LnJlZnJlc2hfdG9rZW58fHIucmVmcmVzaF90b2tlbixyLmV4cGlyZXNfaW49dC5leHBpcmVzX2luLGUuc3RvcmVVc2VyKHIpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2V2ZW50cy5sb2FkKHIpLHJ9KSl9KSl9cmV0dXJuIG51bGx9KSk6KGkuTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3VzZVJlZnJlc2hUb2tlbjogTm8gYWNjZXNzIHRva2VuIHJldHVybmVkIGZyb20gdG9rZW4gZW5kcG9pbnRcIiksUHJvbWlzZS5yZWplY3QoXCJObyBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQgZnJvbSB0b2tlbiBlbmRwb2ludFwiKSk6KGkuTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3VzZVJlZnJlc2hUb2tlbjogTm8gcmVzcG9uc2UgcmV0dXJuZWQgZnJvbSB0b2tlbiBlbmRwb2ludFwiKSxQcm9taXNlLnJlamVjdChcIk5vIHJlc3BvbnNlIHJldHVybmVkIGZyb20gdG9rZW4gZW5kcG9pbnRcIikpfSkpfSxlLnByb3RvdHlwZS5fdmFsaWRhdGVJZFRva2VuRnJvbVRva2VuUmVmcmVzaFRva2VuPWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj10aGlzO3JldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIG4uc2V0dGluZ3MuZ2V0RXBvY2hUaW1lKCkudGhlbigoZnVuY3Rpb24obyl7cmV0dXJuIG4uX2pvc2VVdGlsLnZhbGlkYXRlSnd0QXR0cmlidXRlcyhyLHQsbi5fc2V0dGluZ3MuY2xpZW50X2lkLG4uX3NldHRpbmdzLmNsb2NrU2tldyxvKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdD90LnN1YiE9PWUuc3ViPyhpLkxvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW46IHN1YiBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBjdXJyZW50IHN1YlwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJzdWIgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggY3VycmVudCBzdWJcIikpKTp0LmF1dGhfdGltZSYmdC5hdXRoX3RpbWUhPT1lLmF1dGhfdGltZT8oaS5Mb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdmFsaWRhdGVJZFRva2VuRnJvbVRva2VuUmVmcmVzaFRva2VuOiBhdXRoX3RpbWUgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWwgYXV0aF90aW1lXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF1dGhfdGltZSBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbCBhdXRoX3RpbWVcIikpKTp0LmF6cCYmdC5henAhPT1lLmF6cD8oaS5Mb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdmFsaWRhdGVJZFRva2VuRnJvbVRva2VuUmVmcmVzaFRva2VuOiBhenAgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWwgYXpwXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF6cCBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbCBhenBcIikpKTohdC5henAmJmUuYXpwPyhpLkxvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW46IGF6cCBub3QgaW4gaWRfdG9rZW4sIGJ1dCBwcmVzZW50IGluIG9yaWdpbmFsIGlkX3Rva2VuXCIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF6cCBub3QgaW4gaWRfdG9rZW4sIGJ1dCBwcmVzZW50IGluIG9yaWdpbmFsIGlkX3Rva2VuXCIpKSk6dm9pZCAwOihpLkxvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW46IEZhaWxlZCB0byB2YWxpZGF0ZSBpZF90b2tlblwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgaWRfdG9rZW5cIikpKX0pKX0pKX0pKX0sZS5wcm90b3R5cGUuX3NpZ25pblNpbGVudElmcmFtZT1mdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9ZS5yZWRpcmVjdF91cml8fHRoaXMuc2V0dGluZ3Muc2lsZW50X3JlZGlyZWN0X3VyaXx8dGhpcy5zZXR0aW5ncy5yZWRpcmVjdF91cmk7cmV0dXJuIHI/KGUucmVkaXJlY3RfdXJpPXIsZS5wcm9tcHQ9ZS5wcm9tcHR8fFwibm9uZVwiLHRoaXMuX3NpZ25pbihlLHRoaXMuX2lmcmFtZU5hdmlnYXRvcix7c3RhcnRVcmw6cixzaWxlbnRSZXF1ZXN0VGltZW91dDplLnNpbGVudFJlcXVlc3RUaW1lb3V0fHx0aGlzLnNldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0fSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQmJih0LnByb2ZpbGUmJnQucHJvZmlsZS5zdWI/aS5Mb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudDogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsdC5wcm9maWxlLnN1Yik6aS5Mb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudDogbm8gc3ViXCIpKSx0fSkpKTooaS5Mb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQ6IE5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSxQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpKX0sZS5wcm90b3R5cGUuc2lnbmluU2lsZW50Q2FsbGJhY2s9ZnVuY3Rpb24gdChlKXtyZXR1cm4gdGhpcy5fc2lnbmluQ2FsbGJhY2soZSx0aGlzLl9pZnJhbWVOYXZpZ2F0b3IpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0JiYodC5wcm9maWxlJiZ0LnByb2ZpbGUuc3ViP2kuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnRDYWxsYmFjazogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsdC5wcm9maWxlLnN1Yik6aS5Mb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrOiBubyBzdWJcIikpLHR9KSl9LGUucHJvdG90eXBlLnNpZ25pbkNhbGxiYWNrPWZ1bmN0aW9uIHQoZSl7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5yZWFkU2lnbmluUmVzcG9uc2VTdGF0ZShlKS50aGVuKChmdW5jdGlvbih0KXt2YXIgbj10LnN0YXRlO3QucmVzcG9uc2U7cmV0dXJuXCJzaTpyXCI9PT1uLnJlcXVlc3RfdHlwZT9yLnNpZ25pblJlZGlyZWN0Q2FsbGJhY2soZSk6XCJzaTpwXCI9PT1uLnJlcXVlc3RfdHlwZT9yLnNpZ25pblBvcHVwQ2FsbGJhY2soZSk6XCJzaTpzXCI9PT1uLnJlcXVlc3RfdHlwZT9yLnNpZ25pblNpbGVudENhbGxiYWNrKGUpOlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImludmFsaWQgcmVzcG9uc2VfdHlwZSBpbiBzdGF0ZVwiKSl9KSl9LGUucHJvdG90eXBlLnNpZ25vdXRDYWxsYmFjaz1mdW5jdGlvbiB0KGUscil7dmFyIG49dGhpcztyZXR1cm4gdGhpcy5yZWFkU2lnbm91dFJlc3BvbnNlU3RhdGUoZSkudGhlbigoZnVuY3Rpb24odCl7dmFyIGk9dC5zdGF0ZSxvPXQucmVzcG9uc2U7cmV0dXJuIGk/XCJzbzpyXCI9PT1pLnJlcXVlc3RfdHlwZT9uLnNpZ25vdXRSZWRpcmVjdENhbGxiYWNrKGUpOlwic286cFwiPT09aS5yZXF1ZXN0X3R5cGU/bi5zaWdub3V0UG9wdXBDYWxsYmFjayhlLHIpOlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImludmFsaWQgcmVzcG9uc2VfdHlwZSBpbiBzdGF0ZVwiKSk6b30pKX0sZS5wcm90b3R5cGUucXVlcnlTZXNzaW9uU3RhdHVzPWZ1bmN0aW9uIHQoKXt2YXIgZT10aGlzLHI9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9OyhyPU9iamVjdC5hc3NpZ24oe30scikpLnJlcXVlc3RfdHlwZT1cInNpOnNcIjt2YXIgbj1yLnJlZGlyZWN0X3VyaXx8dGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpfHx0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtyZXR1cm4gbj8oci5yZWRpcmVjdF91cmk9bixyLnByb21wdD1cIm5vbmVcIixyLnJlc3BvbnNlX3R5cGU9ci5yZXNwb25zZV90eXBlfHx0aGlzLnNldHRpbmdzLnF1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlLHIuc2NvcGU9ci5zY29wZXx8XCJvcGVuaWRcIixyLnNraXBVc2VySW5mbz0hMCx0aGlzLl9zaWduaW5TdGFydChyLHRoaXMuX2lmcmFtZU5hdmlnYXRvcix7c3RhcnRVcmw6bixzaWxlbnRSZXF1ZXN0VGltZW91dDpyLnNpbGVudFJlcXVlc3RUaW1lb3V0fHx0aGlzLnNldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0fSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGUucHJvY2Vzc1NpZ25pblJlc3BvbnNlKHQudXJsKS50aGVuKChmdW5jdGlvbih0KXtpZihpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogZ290IHNpZ25pbiByZXNwb25zZVwiKSx0LnNlc3Npb25fc3RhdGUmJnQucHJvZmlsZS5zdWIpcmV0dXJuIGkuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXM6IHF1ZXJ5U2Vzc2lvblN0YXR1cyBzdWNjZXNzIGZvciBzdWI6IFwiLHQucHJvZmlsZS5zdWIpLHtzZXNzaW9uX3N0YXRlOnQuc2Vzc2lvbl9zdGF0ZSxzdWI6dC5wcm9maWxlLnN1YixzaWQ6dC5wcm9maWxlLnNpZH07aS5Mb2cuaW5mbyhcInF1ZXJ5U2Vzc2lvblN0YXR1cyBzdWNjZXNzZnVsLCB1c2VyIG5vdCBhdXRoZW50aWNhdGVkXCIpfSkpLmNhdGNoKChmdW5jdGlvbih0KXtpZih0LnNlc3Npb25fc3RhdGUmJmUuc2V0dGluZ3MubW9uaXRvckFub255bW91c1Nlc3Npb24mJihcImxvZ2luX3JlcXVpcmVkXCI9PXQubWVzc2FnZXx8XCJjb25zZW50X3JlcXVpcmVkXCI9PXQubWVzc2FnZXx8XCJpbnRlcmFjdGlvbl9yZXF1aXJlZFwiPT10Lm1lc3NhZ2V8fFwiYWNjb3VudF9zZWxlY3Rpb25fcmVxdWlyZWRcIj09dC5tZXNzYWdlKSlyZXR1cm4gaS5Mb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogcXVlcnlTZXNzaW9uU3RhdHVzIHN1Y2Nlc3MgZm9yIGFub255bW91cyB1c2VyXCIpLHtzZXNzaW9uX3N0YXRlOnQuc2Vzc2lvbl9zdGF0ZX07dGhyb3cgdH0pKX0pKSk6KGkuTG9nLmVycm9yKFwiVXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzOiBObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKSl9LGUucHJvdG90eXBlLl9zaWduaW49ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXRoaXMsaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307cmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGUscixpKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gbi5fc2lnbmluRW5kKHQudXJsLGUpfSkpfSxlLnByb3RvdHlwZS5fc2lnbmluU3RhcnQ9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXRoaXMsbz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307cmV0dXJuIHIucHJlcGFyZShvKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbmluU3RhcnQ6IGdvdCBuYXZpZ2F0b3Igd2luZG93IGhhbmRsZVwiKSxuLmNyZWF0ZVNpZ25pblJlcXVlc3QoZSkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBnb3Qgc2lnbmluIHJlcXVlc3RcIiksby51cmw9ZS51cmwsby5pZD1lLnN0YXRlLmlkLHQubmF2aWdhdGUobyl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3Rocm93IHQuY2xvc2UmJihpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5TdGFydDogRXJyb3IgYWZ0ZXIgcHJlcGFyaW5nIG5hdmlnYXRvciwgY2xvc2luZyBuYXZpZ2F0b3Igd2luZG93XCIpLHQuY2xvc2UoKSksZX0pKX0pKX0sZS5wcm90b3R5cGUuX3NpZ25pbkVuZD1mdW5jdGlvbiB0KGUpe3ZhciByPXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307cmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25pblJlc3BvbnNlKGUpLnRoZW4oKGZ1bmN0aW9uKHQpe2kuTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogZ290IHNpZ25pbiByZXNwb25zZVwiKTt2YXIgZT1uZXcgYS5Vc2VyKHQpO2lmKG4uY3VycmVudF9zdWIpe2lmKG4uY3VycmVudF9zdWIhPT1lLnByb2ZpbGUuc3ViKXJldHVybiBpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGN1cnJlbnQgdXNlciBkb2VzIG5vdCBtYXRjaCB1c2VyIHJldHVybmVkIGZyb20gc2lnbmluLiBzdWIgZnJvbSBzaWduaW46IFwiLGUucHJvZmlsZS5zdWIpLFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImxvZ2luX3JlcXVpcmVkXCIpKTtpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGN1cnJlbnQgdXNlciBtYXRjaGVzIHVzZXIgcmV0dXJuZWQgZnJvbSBzaWduaW5cIil9cmV0dXJuIHIuc3RvcmVVc2VyKGUpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogdXNlciBzdG9yZWRcIiksci5fZXZlbnRzLmxvYWQoZSksZX0pKX0pKX0sZS5wcm90b3R5cGUuX3NpZ25pbkNhbGxiYWNrPWZ1bmN0aW9uIHQoZSxyKXtpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5DYWxsYmFja1wiKTt2YXIgbj1cInF1ZXJ5XCI9PT10aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlfHwhdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfbW9kZSYmbC5TaWduaW5SZXF1ZXN0LmlzQ29kZSh0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV90eXBlKT9cIj9cIjpcIiNcIjtyZXR1cm4gci5jYWxsYmFjayhlLHZvaWQgMCxuKX0sZS5wcm90b3R5cGUuc2lnbm91dFJlZGlyZWN0PWZ1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307KGU9T2JqZWN0LmFzc2lnbih7fSxlKSkucmVxdWVzdF90eXBlPVwic286clwiO3ZhciByPWUucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpfHx0aGlzLnNldHRpbmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtyJiYoZS5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk9cik7dmFyIG49e3VzZVJlcGxhY2VUb05hdmlnYXRlOmUudXNlUmVwbGFjZVRvTmF2aWdhdGV9O3JldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoZSx0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcixuKS50aGVuKChmdW5jdGlvbigpe2kuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWdub3V0UmVkaXJlY3Q6IHN1Y2Nlc3NmdWxcIil9KSl9LGUucHJvdG90eXBlLnNpZ25vdXRSZWRpcmVjdENhbGxiYWNrPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIHRoaXMuX3NpZ25vdXRFbmQoZXx8dGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IudXJsKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gaS5Mb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRSZWRpcmVjdENhbGxiYWNrOiBzdWNjZXNzZnVsXCIpLHR9KSl9LGUucHJvdG90eXBlLnNpZ25vdXRQb3B1cD1mdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9OyhlPU9iamVjdC5hc3NpZ24oe30sZSkpLnJlcXVlc3RfdHlwZT1cInNvOnBcIjt2YXIgcj1lLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaXx8dGhpcy5zZXR0aW5ncy5wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cml8fHRoaXMuc2V0dGluZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO3JldHVybiBlLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaT1yLGUuZGlzcGxheT1cInBvcHVwXCIsZS5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkmJihlLnN0YXRlPWUuc3RhdGV8fHt9KSx0aGlzLl9zaWdub3V0KGUsdGhpcy5fcG9wdXBOYXZpZ2F0b3Ise3N0YXJ0VXJsOnIscG9wdXBXaW5kb3dGZWF0dXJlczplLnBvcHVwV2luZG93RmVhdHVyZXN8fHRoaXMuc2V0dGluZ3MucG9wdXBXaW5kb3dGZWF0dXJlcyxwb3B1cFdpbmRvd1RhcmdldDplLnBvcHVwV2luZG93VGFyZ2V0fHx0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93VGFyZ2V0fSkudGhlbigoZnVuY3Rpb24oKXtpLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFBvcHVwOiBzdWNjZXNzZnVsXCIpfSkpfSxlLnByb3RvdHlwZS5zaWdub3V0UG9wdXBDYWxsYmFjaz1mdW5jdGlvbiB0KGUscil7dm9pZCAwPT09ciYmXCJib29sZWFuXCI9PXR5cGVvZiBlJiYocj1lLGU9bnVsbCk7cmV0dXJuIHRoaXMuX3BvcHVwTmF2aWdhdG9yLmNhbGxiYWNrKGUscixcIj9cIikudGhlbigoZnVuY3Rpb24oKXtpLkxvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFBvcHVwQ2FsbGJhY2s6IHN1Y2Nlc3NmdWxcIil9KSl9LGUucHJvdG90eXBlLl9zaWdub3V0PWZ1bmN0aW9uIHQoZSxyKXt2YXIgbj10aGlzLGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O3JldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoZSxyLGkpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBuLl9zaWdub3V0RW5kKHQudXJsKX0pKX0sZS5wcm90b3R5cGUuX3NpZ25vdXRTdGFydD1mdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9dGhpcyxuPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtyZXR1cm4gbi5wcmVwYXJlKG8pLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IGdvdCBuYXZpZ2F0b3Igd2luZG93IGhhbmRsZVwiKSxyLl9sb2FkVXNlcigpLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiBpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IGxvYWRlZCBjdXJyZW50IHVzZXIgZnJvbSBzdG9yYWdlXCIpLChyLl9zZXR0aW5ncy5yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dD9yLl9yZXZva2VJbnRlcm5hbChuKTpQcm9taXNlLnJlc29sdmUoKSkudGhlbigoZnVuY3Rpb24oKXt2YXIgcz1lLmlkX3Rva2VuX2hpbnR8fG4mJm4uaWRfdG9rZW47cmV0dXJuIHMmJihpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IFNldHRpbmcgaWRfdG9rZW4gaW50byBzaWdub3V0IHJlcXVlc3RcIiksZS5pZF90b2tlbl9oaW50PXMpLHIucmVtb3ZlVXNlcigpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGkuTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogdXNlciByZW1vdmVkLCBjcmVhdGluZyBzaWdub3V0IHJlcXVlc3RcIiksci5jcmVhdGVTaWdub3V0UmVxdWVzdChlKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBnb3Qgc2lnbm91dCByZXF1ZXN0XCIpLG8udXJsPWUudXJsLGUuc3RhdGUmJihvLmlkPWUuc3RhdGUuaWQpLHQubmF2aWdhdGUobyl9KSl9KSl9KSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3Rocm93IHQuY2xvc2UmJihpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IEVycm9yIGFmdGVyIHByZXBhcmluZyBuYXZpZ2F0b3IsIGNsb3NpbmcgbmF2aWdhdG9yIHdpbmRvd1wiKSx0LmNsb3NlKCkpLGV9KSl9KSl9LGUucHJvdG90eXBlLl9zaWdub3V0RW5kPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25vdXRSZXNwb25zZShlKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dEVuZDogZ290IHNpZ25vdXQgcmVzcG9uc2VcIiksdH0pKX0sZS5wcm90b3R5cGUucmV2b2tlQWNjZXNzVG9rZW49ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX2xvYWRVc2VyKCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGUuX3Jldm9rZUludGVybmFsKHQsITApLnRoZW4oKGZ1bmN0aW9uKHIpe2lmKHIpcmV0dXJuIGkuTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IHJlbW92aW5nIHRva2VuIHByb3BlcnRpZXMgZnJvbSB1c2VyIGFuZCByZS1zdG9yaW5nXCIpLHQuYWNjZXNzX3Rva2VuPW51bGwsdC5yZWZyZXNoX3Rva2VuPW51bGwsdC5leHBpcmVzX2F0PW51bGwsdC50b2tlbl90eXBlPW51bGwsZS5zdG9yZVVzZXIodCkudGhlbigoZnVuY3Rpb24oKXtpLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnJldm9rZUFjY2Vzc1Rva2VuOiB1c2VyIHN0b3JlZFwiKSxlLl9ldmVudHMubG9hZCh0KX0pKX0pKX0pKS50aGVuKChmdW5jdGlvbigpe2kuTG9nLmluZm8oXCJVc2VyTWFuYWdlci5yZXZva2VBY2Nlc3NUb2tlbjogYWNjZXNzIHRva2VuIHJldm9rZWQgc3VjY2Vzc2Z1bGx5XCIpfSkpfSxlLnByb3RvdHlwZS5fcmV2b2tlSW50ZXJuYWw9ZnVuY3Rpb24gdChlLHIpe3ZhciBuPXRoaXM7aWYoZSl7dmFyIG89ZS5hY2Nlc3NfdG9rZW4scz1lLnJlZnJlc2hfdG9rZW47cmV0dXJuIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuSW50ZXJuYWwobyxyKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gbi5fcmV2b2tlUmVmcmVzaFRva2VuSW50ZXJuYWwocyxyKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gdHx8ZXx8aS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5yZXZva2VBY2Nlc3NUb2tlbjogbm8gbmVlZCB0byByZXZva2UgZHVlIHRvIG5vIHRva2VuKHMpLCBvciBKV1QgZm9ybWF0XCIpLHR8fGV9KSl9KSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZSghMSl9LGUucHJvdG90eXBlLl9yZXZva2VBY2Nlc3NUb2tlbkludGVybmFsPWZ1bmN0aW9uIHQoZSxyKXtyZXR1cm4hZXx8ZS5pbmRleE9mKFwiLlwiKT49MD9Qcm9taXNlLnJlc29sdmUoITEpOnRoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2UoZSxyKS50aGVuKChmdW5jdGlvbigpe3JldHVybiEwfSkpfSxlLnByb3RvdHlwZS5fcmV2b2tlUmVmcmVzaFRva2VuSW50ZXJuYWw9ZnVuY3Rpb24gdChlLHIpe3JldHVybiBlP3RoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2UoZSxyLFwicmVmcmVzaF90b2tlblwiKS50aGVuKChmdW5jdGlvbigpe3JldHVybiEwfSkpOlByb21pc2UucmVzb2x2ZSghMSl9LGUucHJvdG90eXBlLnN0YXJ0U2lsZW50UmVuZXc9ZnVuY3Rpb24gdCgpe3RoaXMuX3NpbGVudFJlbmV3U2VydmljZS5zdGFydCgpfSxlLnByb3RvdHlwZS5zdG9wU2lsZW50UmVuZXc9ZnVuY3Rpb24gdCgpe3RoaXMuX3NpbGVudFJlbmV3U2VydmljZS5zdG9wKCl9LGUucHJvdG90eXBlLl9sb2FkVXNlcj1mdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5nZXQodGhpcy5fdXNlclN0b3JlS2V5KS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdD8oaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fbG9hZFVzZXI6IHVzZXIgc3RvcmFnZVN0cmluZyBsb2FkZWRcIiksYS5Vc2VyLmZyb21TdG9yYWdlU3RyaW5nKHQpKTooaS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fbG9hZFVzZXI6IG5vIHVzZXIgc3RvcmFnZVN0cmluZ1wiKSxudWxsKX0pKX0sZS5wcm90b3R5cGUuc3RvcmVVc2VyPWZ1bmN0aW9uIHQoZSl7aWYoZSl7aS5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlci5zdG9yZVVzZXI6IHN0b3JpbmcgdXNlclwiKTt2YXIgcj1lLnRvU3RvcmFnZVN0cmluZygpO3JldHVybiB0aGlzLl91c2VyU3RvcmUuc2V0KHRoaXMuX3VzZXJTdG9yZUtleSxyKX1yZXR1cm4gaS5Mb2cuZGVidWcoXCJzdG9yZVVzZXIuc3RvcmVVc2VyOiByZW1vdmluZyB1c2VyXCIpLHRoaXMuX3VzZXJTdG9yZS5yZW1vdmUodGhpcy5fdXNlclN0b3JlS2V5KX0sbihlLFt7a2V5OlwiX3JlZGlyZWN0TmF2aWdhdG9yXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5zZXR0aW5ncy5yZWRpcmVjdE5hdmlnYXRvcn19LHtrZXk6XCJfcG9wdXBOYXZpZ2F0b3JcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLnNldHRpbmdzLnBvcHVwTmF2aWdhdG9yfX0se2tleTpcIl9pZnJhbWVOYXZpZ2F0b3JcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcn19LHtrZXk6XCJfdXNlclN0b3JlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5zZXR0aW5ncy51c2VyU3RvcmV9fSx7a2V5OlwiZXZlbnRzXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fZXZlbnRzfX0se2tleTpcIl91c2VyU3RvcmVLZXlcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVyblwidXNlcjpcIit0aGlzLnNldHRpbmdzLmF1dGhvcml0eStcIjpcIit0aGlzLnNldHRpbmdzLmNsaWVudF9pZH19XSksZX0oby5PaWRjQ2xpZW50KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuVXNlck1hbmFnZXJTZXR0aW5ncz12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxpPShyKDApLHIoNSkpLG89cig0MCkscz1yKDQxKSxhPXIoNDMpLHU9cig2KSxjPXIoMSksaD1yKDgpO2Z1bmN0aW9uIGwodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGYodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP3Q6ZX1lLlVzZXJNYW5hZ2VyU2V0dGluZ3M9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxuPXIucG9wdXBfcmVkaXJlY3RfdXJpLGk9ci5wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmksZz1yLnBvcHVwV2luZG93RmVhdHVyZXMsZD1yLnBvcHVwV2luZG93VGFyZ2V0LHA9ci5zaWxlbnRfcmVkaXJlY3RfdXJpLHY9ci5zaWxlbnRSZXF1ZXN0VGltZW91dCx5PXIuYXV0b21hdGljU2lsZW50UmVuZXcsbT12b2lkIDAhPT15JiZ5LF89ci52YWxpZGF0ZVN1Yk9uU2lsZW50UmVuZXcsUz12b2lkIDAhPT1fJiZfLGI9ci5pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcsdz12b2lkIDA9PT1ifHxiLEY9ci5tb25pdG9yU2Vzc2lvbixFPXZvaWQgMD09PUZ8fEYseD1yLm1vbml0b3JBbm9ueW1vdXNTZXNzaW9uLEE9dm9pZCAwIT09eCYmeCxrPXIuY2hlY2tTZXNzaW9uSW50ZXJ2YWwsUD12b2lkIDA9PT1rPzJlMzprLEM9ci5zdG9wQ2hlY2tTZXNzaW9uT25FcnJvcixUPXZvaWQgMD09PUN8fEMsUj1yLnF1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlLEk9ci5yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dCxEPXZvaWQgMCE9PUkmJkksTD1yLmFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLE49dm9pZCAwPT09TD82MDpMLFU9ci5yZWRpcmVjdE5hdmlnYXRvcixCPXZvaWQgMD09PVU/bmV3IG8uUmVkaXJlY3ROYXZpZ2F0b3I6VSxPPXIucG9wdXBOYXZpZ2F0b3Isaj12b2lkIDA9PT1PP25ldyBzLlBvcHVwTmF2aWdhdG9yOk8sTT1yLmlmcmFtZU5hdmlnYXRvcixIPXZvaWQgMD09PU0/bmV3IGEuSUZyYW1lTmF2aWdhdG9yOk0sVj1yLnVzZXJTdG9yZSxLPXZvaWQgMD09PVY/bmV3IHUuV2ViU3RvcmFnZVN0YXRlU3RvcmUoe3N0b3JlOmMuR2xvYmFsLnNlc3Npb25TdG9yYWdlfSk6VjtsKHRoaXMsZSk7dmFyIHE9Zih0aGlzLHQuY2FsbCh0aGlzLGFyZ3VtZW50c1swXSkpO3JldHVybiBxLl9wb3B1cF9yZWRpcmVjdF91cmk9bixxLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk9aSxxLl9wb3B1cFdpbmRvd0ZlYXR1cmVzPWcscS5fcG9wdXBXaW5kb3dUYXJnZXQ9ZCxxLl9zaWxlbnRfcmVkaXJlY3RfdXJpPXAscS5fc2lsZW50UmVxdWVzdFRpbWVvdXQ9dixxLl9hdXRvbWF0aWNTaWxlbnRSZW5ldz1tLHEuX3ZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldz1TLHEuX2luY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldz13LHEuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lPU4scS5fbW9uaXRvclNlc3Npb249RSxxLl9tb25pdG9yQW5vbnltb3VzU2Vzc2lvbj1BLHEuX2NoZWNrU2Vzc2lvbkludGVydmFsPVAscS5fc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I9VCxSP3EuX3F1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlPVI6YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF0ucmVzcG9uc2VfdHlwZT9xLl9xdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZT1oLlNpZ25pblJlcXVlc3QuaXNPaWRjKGFyZ3VtZW50c1swXS5yZXNwb25zZV90eXBlKT9cImlkX3Rva2VuXCI6XCJjb2RlXCI6cS5fcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGU9XCJpZF90b2tlblwiLHEuX3Jldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0PUQscS5fcmVkaXJlY3ROYXZpZ2F0b3I9QixxLl9wb3B1cE5hdmlnYXRvcj1qLHEuX2lmcmFtZU5hdmlnYXRvcj1ILHEuX3VzZXJTdG9yZT1LLHF9cmV0dXJuIGZ1bmN0aW9uIHIodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX0oZSx0KSxuKGUsW3trZXk6XCJwb3B1cF9yZWRpcmVjdF91cmlcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cml9fSx7a2V5OlwicG9wdXBfcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcG9wdXBfcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpfX0se2tleTpcInBvcHVwV2luZG93RmVhdHVyZXNcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9wb3B1cFdpbmRvd0ZlYXR1cmVzfX0se2tleTpcInBvcHVwV2luZG93VGFyZ2V0XCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXR9fSx7a2V5Olwic2lsZW50X3JlZGlyZWN0X3VyaVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3NpbGVudF9yZWRpcmVjdF91cml9fSx7a2V5Olwic2lsZW50UmVxdWVzdFRpbWVvdXRcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9zaWxlbnRSZXF1ZXN0VGltZW91dH19LHtrZXk6XCJhdXRvbWF0aWNTaWxlbnRSZW5ld1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3fX0se2tleTpcInZhbGlkYXRlU3ViT25TaWxlbnRSZW5ld1wiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3ZhbGlkYXRlU3ViT25TaWxlbnRSZW5ld319LHtrZXk6XCJpbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXdcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXd9fSx7a2V5OlwiYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWVcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZX19LHtrZXk6XCJtb25pdG9yU2Vzc2lvblwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX21vbml0b3JTZXNzaW9ufX0se2tleTpcIm1vbml0b3JBbm9ueW1vdXNTZXNzaW9uXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fbW9uaXRvckFub255bW91c1Nlc3Npb259fSx7a2V5OlwiY2hlY2tTZXNzaW9uSW50ZXJ2YWxcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9jaGVja1Nlc3Npb25JbnRlcnZhbH19LHtrZXk6XCJzdG9wQ2hlY2tTZXNzaW9uT25FcnJvclwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yfX0se2tleTpcInF1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGV9fSx7a2V5OlwicmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXRcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dH19LHtrZXk6XCJyZWRpcmVjdE5hdmlnYXRvclwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yfX0se2tleTpcInBvcHVwTmF2aWdhdG9yXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcG9wdXBOYXZpZ2F0b3J9fSx7a2V5OlwiaWZyYW1lTmF2aWdhdG9yXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5faWZyYW1lTmF2aWdhdG9yfX0se2tleTpcInVzZXJTdG9yZVwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHRoaXMuX3VzZXJTdG9yZX19XSksZX0oaS5PaWRjQ2xpZW50U2V0dGluZ3MpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5SZWRpcmVjdE5hdmlnYXRvcj12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxpPXIoMCk7ZS5SZWRpcmVjdE5hdmlnYXRvcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24gZSh0LHIpe2lmKCEodCBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCl9cmV0dXJuIHQucHJvdG90eXBlLnByZXBhcmU9ZnVuY3Rpb24gdCgpe3JldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyl9LHQucHJvdG90eXBlLm5hdmlnYXRlPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIGUmJmUudXJsPyhlLnVzZVJlcGxhY2VUb05hdmlnYXRlP3dpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGUudXJsKTp3aW5kb3cubG9jYXRpb249ZS51cmwsUHJvbWlzZS5yZXNvbHZlKCkpOihpLkxvZy5lcnJvcihcIlJlZGlyZWN0TmF2aWdhdG9yLm5hdmlnYXRlOiBObyB1cmwgcHJvdmlkZWRcIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpKSl9LG4odCxbe2tleTpcInVybFwiLGdldDpmdW5jdGlvbiB0KCl7cmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmfX1dKSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5Qb3B1cE5hdmlnYXRvcj12b2lkIDA7dmFyIG49cigwKSxpPXIoNDIpO2UuUG9wdXBOYXZpZ2F0b3I9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uIGUodCxyKXtpZighKHQgaW5zdGFuY2VvZiByKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpfXJldHVybiB0LnByb3RvdHlwZS5wcmVwYXJlPWZ1bmN0aW9uIHQoZSl7dmFyIHI9bmV3IGkuUG9wdXBXaW5kb3coZSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShyKX0sdC5wcm90b3R5cGUuY2FsbGJhY2s9ZnVuY3Rpb24gdChlLHIsbyl7bi5Mb2cuZGVidWcoXCJQb3B1cE5hdmlnYXRvci5jYWxsYmFja1wiKTt0cnl7cmV0dXJuIGkuUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyKGUscixvKSxQcm9taXNlLnJlc29sdmUoKX1jYXRjaCh0KXtyZXR1cm4gUHJvbWlzZS5yZWplY3QodCl9fSx0fSgpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5Qb3B1cFdpbmRvdz12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKSxpPXIoMCksbz1yKDMpO2UuUG9wdXBXaW5kb3c9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciByPXRoaXM7IWZ1bmN0aW9uIG4odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuX3Byb21pc2U9bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQsZSl7ci5fcmVzb2x2ZT10LHIuX3JlamVjdD1lfSkpO3ZhciBvPWUucG9wdXBXaW5kb3dUYXJnZXR8fFwiX2JsYW5rXCIscz1lLnBvcHVwV2luZG93RmVhdHVyZXN8fFwibG9jYXRpb249bm8sdG9vbGJhcj1ubyx3aWR0aD01MDAsaGVpZ2h0PTUwMCxsZWZ0PTEwMCx0b3A9MTAwO1wiO3RoaXMuX3BvcHVwPXdpbmRvdy5vcGVuKFwiXCIsbyxzKSx0aGlzLl9wb3B1cCYmKGkuTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY3RvcjogcG9wdXAgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcIiksdGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyPXdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkLmJpbmQodGhpcyksNTAwKSl9cmV0dXJuIHQucHJvdG90eXBlLm5hdmlnYXRlPWZ1bmN0aW9uIHQoZSl7cmV0dXJuIHRoaXMuX3BvcHVwP2UmJmUudXJsPyhpLkxvZy5kZWJ1ZyhcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBTZXR0aW5nIFVSTCBpbiBwb3B1cFwiKSx0aGlzLl9pZD1lLmlkLHRoaXMuX2lkJiYod2luZG93W1wicG9wdXBDYWxsYmFja19cIitlLmlkXT10aGlzLl9jYWxsYmFjay5iaW5kKHRoaXMpKSx0aGlzLl9wb3B1cC5mb2N1cygpLHRoaXMuX3BvcHVwLndpbmRvdy5sb2NhdGlvbj1lLnVybCk6KHRoaXMuX2Vycm9yKFwiUG9wdXBXaW5kb3cubmF2aWdhdGU6IG5vIHVybCBwcm92aWRlZFwiKSx0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKSk6dGhpcy5fZXJyb3IoXCJQb3B1cFdpbmRvdy5uYXZpZ2F0ZTogRXJyb3Igb3BlbmluZyBwb3B1cCB3aW5kb3dcIiksdGhpcy5wcm9taXNlfSx0LnByb3RvdHlwZS5fc3VjY2Vzcz1mdW5jdGlvbiB0KGUpe2kuTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY2FsbGJhY2s6IFN1Y2Nlc3NmdWwgcmVzcG9uc2UgZnJvbSBwb3B1cCB3aW5kb3dcIiksdGhpcy5fY2xlYW51cCgpLHRoaXMuX3Jlc29sdmUoZSl9LHQucHJvdG90eXBlLl9lcnJvcj1mdW5jdGlvbiB0KGUpe2kuTG9nLmVycm9yKFwiUG9wdXBXaW5kb3cuZXJyb3I6IFwiLGUpLHRoaXMuX2NsZWFudXAoKSx0aGlzLl9yZWplY3QobmV3IEVycm9yKGUpKX0sdC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24gdCgpe3RoaXMuX2NsZWFudXAoITEpfSx0LnByb3RvdHlwZS5fY2xlYW51cD1mdW5jdGlvbiB0KGUpe2kuTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY2xlYW51cFwiKSx3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIpLHRoaXMuX2NoZWNrRm9yUG9wdXBDbG9zZWRUaW1lcj1udWxsLGRlbGV0ZSB3aW5kb3dbXCJwb3B1cENhbGxiYWNrX1wiK3RoaXMuX2lkXSx0aGlzLl9wb3B1cCYmIWUmJnRoaXMuX3BvcHVwLmNsb3NlKCksdGhpcy5fcG9wdXA9bnVsbH0sdC5wcm90b3R5cGUuX2NoZWNrRm9yUG9wdXBDbG9zZWQ9ZnVuY3Rpb24gdCgpe3RoaXMuX3BvcHVwJiYhdGhpcy5fcG9wdXAuY2xvc2VkfHx0aGlzLl9lcnJvcihcIlBvcHVwIHdpbmRvdyBjbG9zZWRcIil9LHQucHJvdG90eXBlLl9jYWxsYmFjaz1mdW5jdGlvbiB0KGUscil7dGhpcy5fY2xlYW51cChyKSxlPyhpLkxvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrIHN1Y2Nlc3NcIiksdGhpcy5fc3VjY2Vzcyh7dXJsOmV9KSk6KGkuTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY2FsbGJhY2s6IEludmFsaWQgcmVzcG9uc2UgZnJvbSBwb3B1cFwiKSx0aGlzLl9lcnJvcihcIkludmFsaWQgcmVzcG9uc2UgZnJvbSBwb3B1cFwiKSl9LHQubm90aWZ5T3BlbmVyPWZ1bmN0aW9uIHQoZSxyLG4pe2lmKHdpbmRvdy5vcGVuZXIpe2lmKGU9ZXx8d2luZG93LmxvY2F0aW9uLmhyZWYpe3ZhciBzPW8uVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50KGUsbik7aWYocy5zdGF0ZSl7dmFyIGE9XCJwb3B1cENhbGxiYWNrX1wiK3Muc3RhdGUsdT13aW5kb3cub3BlbmVyW2FdO3U/KGkuTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyOiBwYXNzaW5nIHVybCBtZXNzYWdlIHRvIG9wZW5lclwiKSx1KGUscikpOmkuTG9nLndhcm4oXCJQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXI6IG5vIG1hdGNoaW5nIGNhbGxiYWNrIGZvdW5kIG9uIG9wZW5lclwiKX1lbHNlIGkuTG9nLndhcm4oXCJQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXI6IG5vIHN0YXRlIGZvdW5kIGluIHJlc3BvbnNlIHVybFwiKX19ZWxzZSBpLkxvZy53YXJuKFwiUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyOiBubyB3aW5kb3cub3BlbmVyLiBDYW4ndCBjb21wbGV0ZSBub3RpZmljYXRpb24uXCIpfSxuKHQsW3trZXk6XCJwcm9taXNlXCIsZ2V0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gdGhpcy5fcHJvbWlzZX19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuSUZyYW1lTmF2aWdhdG9yPXZvaWQgMDt2YXIgbj1yKDApLGk9cig0NCk7ZS5JRnJhbWVOYXZpZ2F0b3I9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uIGUodCxyKXtpZighKHQgaW5zdGFuY2VvZiByKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpfXJldHVybiB0LnByb3RvdHlwZS5wcmVwYXJlPWZ1bmN0aW9uIHQoZSl7dmFyIHI9bmV3IGkuSUZyYW1lV2luZG93KGUpO3JldHVybiBQcm9taXNlLnJlc29sdmUocil9LHQucHJvdG90eXBlLmNhbGxiYWNrPWZ1bmN0aW9uIHQoZSl7bi5Mb2cuZGVidWcoXCJJRnJhbWVOYXZpZ2F0b3IuY2FsbGJhY2tcIik7dHJ5e3JldHVybiBpLklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnQoZSksUHJvbWlzZS5yZXNvbHZlKCl9Y2F0Y2godCl7cmV0dXJuIFByb21pc2UucmVqZWN0KHQpfX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuSUZyYW1lV2luZG93PXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKTtlLklGcmFtZVdpbmRvdz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIHI9dGhpczshZnVuY3Rpb24gbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5fcHJvbWlzZT1uZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxlKXtyLl9yZXNvbHZlPXQsci5fcmVqZWN0PWV9KSksdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQ9dGhpcy5fbWVzc2FnZS5iaW5kKHRoaXMpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCExKSx0aGlzLl9mcmFtZT13aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKSx0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsdGhpcy5fZnJhbWUuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLHRoaXMuX2ZyYW1lLndpZHRoPTAsdGhpcy5fZnJhbWUuaGVpZ2h0PTAsd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZnJhbWUpfXJldHVybiB0LnByb3RvdHlwZS5uYXZpZ2F0ZT1mdW5jdGlvbiB0KGUpe2lmKGUmJmUudXJsKXt2YXIgcj1lLnNpbGVudFJlcXVlc3RUaW1lb3V0fHwxZTQ7aS5Mb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubmF2aWdhdGU6IFVzaW5nIHRpbWVvdXQgb2Y6XCIsciksdGhpcy5fdGltZXI9d2luZG93LnNldFRpbWVvdXQodGhpcy5fdGltZW91dC5iaW5kKHRoaXMpLHIpLHRoaXMuX2ZyYW1lLnNyYz1lLnVybH1lbHNlIHRoaXMuX2Vycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO3JldHVybiB0aGlzLnByb21pc2V9LHQucHJvdG90eXBlLl9zdWNjZXNzPWZ1bmN0aW9uIHQoZSl7dGhpcy5fY2xlYW51cCgpLGkuTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93OiBTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gZnJhbWUgd2luZG93XCIpLHRoaXMuX3Jlc29sdmUoZSl9LHQucHJvdG90eXBlLl9lcnJvcj1mdW5jdGlvbiB0KGUpe3RoaXMuX2NsZWFudXAoKSxpLkxvZy5lcnJvcihlKSx0aGlzLl9yZWplY3QobmV3IEVycm9yKGUpKX0sdC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24gdCgpe3RoaXMuX2NsZWFudXAoKX0sdC5wcm90b3R5cGUuX2NsZWFudXA9ZnVuY3Rpb24gdCgpe3RoaXMuX2ZyYW1lJiYoaS5Mb2cuZGVidWcoXCJJRnJhbWVXaW5kb3c6IGNsZWFudXBcIiksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQsITEpLHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fdGltZXIpLHdpbmRvdy5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuX2ZyYW1lKSx0aGlzLl90aW1lcj1udWxsLHRoaXMuX2ZyYW1lPW51bGwsdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQ9bnVsbCl9LHQucHJvdG90eXBlLl90aW1lb3V0PWZ1bmN0aW9uIHQoKXtpLkxvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdy50aW1lb3V0XCIpLHRoaXMuX2Vycm9yKFwiRnJhbWUgd2luZG93IHRpbWVkIG91dFwiKX0sdC5wcm90b3R5cGUuX21lc3NhZ2U9ZnVuY3Rpb24gdChlKXtpZihpLkxvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdy5tZXNzYWdlXCIpLHRoaXMuX3RpbWVyJiZlLm9yaWdpbj09PXRoaXMuX29yaWdpbiYmZS5zb3VyY2U9PT10aGlzLl9mcmFtZS5jb250ZW50V2luZG93JiZcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYoZS5kYXRhLnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpfHxlLmRhdGEuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSl7dmFyIHI9ZS5kYXRhO3I/dGhpcy5fc3VjY2Vzcyh7dXJsOnJ9KTp0aGlzLl9lcnJvcihcIkludmFsaWQgcmVzcG9uc2UgZnJvbSBmcmFtZVwiKX19LHQubm90aWZ5UGFyZW50PWZ1bmN0aW9uIHQoZSl7aS5Mb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50XCIpLChlPWV8fHdpbmRvdy5sb2NhdGlvbi5ocmVmKSYmKGkuTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93Lm5vdGlmeVBhcmVudDogcG9zdGluZyB1cmwgbWVzc2FnZSB0byBwYXJlbnRcIiksd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShlLGxvY2F0aW9uLnByb3RvY29sK1wiLy9cIitsb2NhdGlvbi5ob3N0KSl9LG4odCxbe2tleTpcInByb21pc2VcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9wcm9taXNlfX0se2tleTpcIl9vcmlnaW5cIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiBsb2NhdGlvbi5wcm90b2NvbCtcIi8vXCIrbG9jYXRpb24uaG9zdH19XSksdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuVXNlck1hbmFnZXJFdmVudHM9dm9pZCAwO3ZhciBuPXIoMCksaT1yKDE2KSxvPXIoMTcpO2UuVXNlck1hbmFnZXJFdmVudHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShyKXshZnVuY3Rpb24gbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSk7dmFyIGk9ZnVuY3Rpb24gcyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hZXx8XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/dDplfSh0aGlzLHQuY2FsbCh0aGlzLHIpKTtyZXR1cm4gaS5fdXNlckxvYWRlZD1uZXcgby5FdmVudChcIlVzZXIgbG9hZGVkXCIpLGkuX3VzZXJVbmxvYWRlZD1uZXcgby5FdmVudChcIlVzZXIgdW5sb2FkZWRcIiksaS5fc2lsZW50UmVuZXdFcnJvcj1uZXcgby5FdmVudChcIlNpbGVudCByZW5ldyBlcnJvclwiKSxpLl91c2VyU2lnbmVkSW49bmV3IG8uRXZlbnQoXCJVc2VyIHNpZ25lZCBpblwiKSxpLl91c2VyU2lnbmVkT3V0PW5ldyBvLkV2ZW50KFwiVXNlciBzaWduZWQgb3V0XCIpLGkuX3VzZXJTZXNzaW9uQ2hhbmdlZD1uZXcgby5FdmVudChcIlVzZXIgc2Vzc2lvbiBjaGFuZ2VkXCIpLGl9cmV0dXJuIGZ1bmN0aW9uIHIodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX0oZSx0KSxlLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uIGUocil7dmFyIGk9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtuLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLmxvYWRcIiksdC5wcm90b3R5cGUubG9hZC5jYWxsKHRoaXMsciksaSYmdGhpcy5fdXNlckxvYWRlZC5yYWlzZShyKX0sZS5wcm90b3R5cGUudW5sb2FkPWZ1bmN0aW9uIGUoKXtuLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLnVubG9hZFwiKSx0LnByb3RvdHlwZS51bmxvYWQuY2FsbCh0aGlzKSx0aGlzLl91c2VyVW5sb2FkZWQucmFpc2UoKX0sZS5wcm90b3R5cGUuYWRkVXNlckxvYWRlZD1mdW5jdGlvbiB0KGUpe3RoaXMuX3VzZXJMb2FkZWQuYWRkSGFuZGxlcihlKX0sZS5wcm90b3R5cGUucmVtb3ZlVXNlckxvYWRlZD1mdW5jdGlvbiB0KGUpe3RoaXMuX3VzZXJMb2FkZWQucmVtb3ZlSGFuZGxlcihlKX0sZS5wcm90b3R5cGUuYWRkVXNlclVubG9hZGVkPWZ1bmN0aW9uIHQoZSl7dGhpcy5fdXNlclVubG9hZGVkLmFkZEhhbmRsZXIoZSl9LGUucHJvdG90eXBlLnJlbW92ZVVzZXJVbmxvYWRlZD1mdW5jdGlvbiB0KGUpe3RoaXMuX3VzZXJVbmxvYWRlZC5yZW1vdmVIYW5kbGVyKGUpfSxlLnByb3RvdHlwZS5hZGRTaWxlbnRSZW5ld0Vycm9yPWZ1bmN0aW9uIHQoZSl7dGhpcy5fc2lsZW50UmVuZXdFcnJvci5hZGRIYW5kbGVyKGUpfSxlLnByb3RvdHlwZS5yZW1vdmVTaWxlbnRSZW5ld0Vycm9yPWZ1bmN0aW9uIHQoZSl7dGhpcy5fc2lsZW50UmVuZXdFcnJvci5yZW1vdmVIYW5kbGVyKGUpfSxlLnByb3RvdHlwZS5fcmFpc2VTaWxlbnRSZW5ld0Vycm9yPWZ1bmN0aW9uIHQoZSl7bi5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VTaWxlbnRSZW5ld0Vycm9yXCIsZS5tZXNzYWdlKSx0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLnJhaXNlKGUpfSxlLnByb3RvdHlwZS5hZGRVc2VyU2lnbmVkSW49ZnVuY3Rpb24gdChlKXt0aGlzLl91c2VyU2lnbmVkSW4uYWRkSGFuZGxlcihlKX0sZS5wcm90b3R5cGUucmVtb3ZlVXNlclNpZ25lZEluPWZ1bmN0aW9uIHQoZSl7dGhpcy5fdXNlclNpZ25lZEluLnJlbW92ZUhhbmRsZXIoZSl9LGUucHJvdG90eXBlLl9yYWlzZVVzZXJTaWduZWRJbj1mdW5jdGlvbiB0KCl7bi5Mb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkSW5cIiksdGhpcy5fdXNlclNpZ25lZEluLnJhaXNlKCl9LGUucHJvdG90eXBlLmFkZFVzZXJTaWduZWRPdXQ9ZnVuY3Rpb24gdChlKXt0aGlzLl91c2VyU2lnbmVkT3V0LmFkZEhhbmRsZXIoZSl9LGUucHJvdG90eXBlLnJlbW92ZVVzZXJTaWduZWRPdXQ9ZnVuY3Rpb24gdChlKXt0aGlzLl91c2VyU2lnbmVkT3V0LnJlbW92ZUhhbmRsZXIoZSl9LGUucHJvdG90eXBlLl9yYWlzZVVzZXJTaWduZWRPdXQ9ZnVuY3Rpb24gdCgpe24uTG9nLmRlYnVnKFwiVXNlck1hbmFnZXJFdmVudHMuX3JhaXNlVXNlclNpZ25lZE91dFwiKSx0aGlzLl91c2VyU2lnbmVkT3V0LnJhaXNlKCl9LGUucHJvdG90eXBlLmFkZFVzZXJTZXNzaW9uQ2hhbmdlZD1mdW5jdGlvbiB0KGUpe3RoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZC5hZGRIYW5kbGVyKGUpfSxlLnByb3RvdHlwZS5yZW1vdmVVc2VyU2Vzc2lvbkNoYW5nZWQ9ZnVuY3Rpb24gdChlKXt0aGlzLl91c2VyU2Vzc2lvbkNoYW5nZWQucmVtb3ZlSGFuZGxlcihlKX0sZS5wcm90b3R5cGUuX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkPWZ1bmN0aW9uIHQoKXtuLkxvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZFwiKSx0aGlzLl91c2VyU2Vzc2lvbkNoYW5nZWQucmFpc2UoKX0sZX0oaS5BY2Nlc3NUb2tlbkV2ZW50cyl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlRpbWVyPXZvaWQgMDt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbihlLHIsbil7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksbiYmdChlLG4pLGV9fSgpLGk9cigwKSxvPXIoMSkscz1yKDE3KTtmdW5jdGlvbiBhKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiB1KHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiFlfHxcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZT90OmV9ZS5UaW1lcj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpvLkdsb2JhbC50aW1lcixpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp2b2lkIDA7YSh0aGlzLGUpO3ZhciBzPXUodGhpcyx0LmNhbGwodGhpcyxyKSk7cmV0dXJuIHMuX3RpbWVyPW4scy5fbm93RnVuYz1pfHxmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLzFlM30sc31yZXR1cm4gZnVuY3Rpb24gcih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfShlLHQpLGUucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24gdChlKXtlPD0wJiYoZT0xKSxlPXBhcnNlSW50KGUpO3ZhciByPXRoaXMubm93K2U7aWYodGhpcy5leHBpcmF0aW9uPT09ciYmdGhpcy5fdGltZXJIYW5kbGUpaS5Mb2cuZGVidWcoXCJUaW1lci5pbml0IHRpbWVyIFwiK3RoaXMuX25hbWUrXCIgc2tpcHBpbmcgaW5pdGlhbGl6YXRpb24gc2luY2UgYWxyZWFkeSBpbml0aWFsaXplZCBmb3IgZXhwaXJhdGlvbjpcIix0aGlzLmV4cGlyYXRpb24pO2Vsc2V7dGhpcy5jYW5jZWwoKSxpLkxvZy5kZWJ1ZyhcIlRpbWVyLmluaXQgdGltZXIgXCIrdGhpcy5fbmFtZStcIiBmb3IgZHVyYXRpb246XCIsZSksdGhpcy5fZXhwaXJhdGlvbj1yO3ZhciBuPTU7ZTxuJiYobj1lKSx0aGlzLl90aW1lckhhbmRsZT10aGlzLl90aW1lci5zZXRJbnRlcnZhbCh0aGlzLl9jYWxsYmFjay5iaW5kKHRoaXMpLDFlMypuKX19LGUucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbiB0KCl7dGhpcy5fdGltZXJIYW5kbGUmJihpLkxvZy5kZWJ1ZyhcIlRpbWVyLmNhbmNlbDogXCIsdGhpcy5fbmFtZSksdGhpcy5fdGltZXIuY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lckhhbmRsZSksdGhpcy5fdGltZXJIYW5kbGU9bnVsbCl9LGUucHJvdG90eXBlLl9jYWxsYmFjaz1mdW5jdGlvbiBlKCl7dmFyIHI9dGhpcy5fZXhwaXJhdGlvbi10aGlzLm5vdztpLkxvZy5kZWJ1ZyhcIlRpbWVyLmNhbGxiYWNrOyBcIit0aGlzLl9uYW1lK1wiIHRpbWVyIGV4cGlyZXMgaW46XCIsciksdGhpcy5fZXhwaXJhdGlvbjw9dGhpcy5ub3cmJih0aGlzLmNhbmNlbCgpLHQucHJvdG90eXBlLnJhaXNlLmNhbGwodGhpcykpfSxuKGUsW3trZXk6XCJub3dcIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiBwYXJzZUludCh0aGlzLl9ub3dGdW5jKCkpfX0se2tleTpcImV4cGlyYXRpb25cIixnZXQ6ZnVuY3Rpb24gdCgpe3JldHVybiB0aGlzLl9leHBpcmF0aW9ufX1dKSxlfShzLkV2ZW50KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuU2lsZW50UmVuZXdTZXJ2aWNlPXZvaWQgMDt2YXIgbj1yKDApO2UuU2lsZW50UmVuZXdTZXJ2aWNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5fdXNlck1hbmFnZXI9ZX1yZXR1cm4gdC5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24gdCgpe3RoaXMuX2NhbGxiYWNrfHwodGhpcy5fY2FsbGJhY2s9dGhpcy5fdG9rZW5FeHBpcmluZy5iaW5kKHRoaXMpLHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKHRoaXMuX2NhbGxiYWNrKSx0aGlzLl91c2VyTWFuYWdlci5nZXRVc2VyKCkudGhlbigoZnVuY3Rpb24odCl7fSkpLmNhdGNoKChmdW5jdGlvbih0KXtuLkxvZy5lcnJvcihcIlNpbGVudFJlbmV3U2VydmljZS5zdGFydDogRXJyb3IgZnJvbSBnZXRVc2VyOlwiLHQubWVzc2FnZSl9KSkpfSx0LnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uIHQoKXt0aGlzLl9jYWxsYmFjayYmKHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5yZW1vdmVBY2Nlc3NUb2tlbkV4cGlyaW5nKHRoaXMuX2NhbGxiYWNrKSxkZWxldGUgdGhpcy5fY2FsbGJhY2spfSx0LnByb3RvdHlwZS5fdG9rZW5FeHBpcmluZz1mdW5jdGlvbiB0KCl7dmFyIGU9dGhpczt0aGlzLl91c2VyTWFuYWdlci5zaWduaW5TaWxlbnQoKS50aGVuKChmdW5jdGlvbih0KXtuLkxvZy5kZWJ1ZyhcIlNpbGVudFJlbmV3U2VydmljZS5fdG9rZW5FeHBpcmluZzogU2lsZW50IHRva2VuIHJlbmV3YWwgc3VjY2Vzc2Z1bFwiKX0pLChmdW5jdGlvbih0KXtuLkxvZy5lcnJvcihcIlNpbGVudFJlbmV3U2VydmljZS5fdG9rZW5FeHBpcmluZzogRXJyb3IgZnJvbSBzaWduaW5TaWxlbnQ6XCIsdC5tZXNzYWdlKSxlLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlU2lsZW50UmVuZXdFcnJvcih0KX0pKX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuQ29yZG92YVBvcHVwTmF2aWdhdG9yPXZvaWQgMDt2YXIgbj1yKDIxKTtlLkNvcmRvdmFQb3B1cE5hdmlnYXRvcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24gZSh0LHIpe2lmKCEodCBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCl9cmV0dXJuIHQucHJvdG90eXBlLnByZXBhcmU9ZnVuY3Rpb24gdChlKXt2YXIgcj1uZXcgbi5Db3Jkb3ZhUG9wdXBXaW5kb3coZSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShyKX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuQ29yZG92YUlGcmFtZU5hdmlnYXRvcj12b2lkIDA7dmFyIG49cigyMSk7ZS5Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbiBlKHQscil7aWYoISh0IGluc3RhbmNlb2YgcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX1yZXR1cm4gdC5wcm90b3R5cGUucHJlcGFyZT1mdW5jdGlvbiB0KGUpe2UucG9wdXBXaW5kb3dGZWF0dXJlcz1cImhpZGRlbj15ZXNcIjt2YXIgcj1uZXcgbi5Db3Jkb3ZhUG9wdXBXaW5kb3coZSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShyKX0sdH0oKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2UuVmVyc2lvbj1cIjEuMTEuNlwifV0pfSkpOyIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBmZXRjaCwgSGVhZGVycyB9IGZyb20gJ0BpbnJ1cHQvdW5pdmVyc2FsLWZldGNoJztcbmltcG9ydCB7IGp3dFZlcmlmeSwgaW1wb3J0SldLLCBleHBvcnRKV0ssIFNpZ25KV1QsIGdlbmVyYXRlS2V5UGFpciB9IGZyb20gJ2pvc2UnO1xuaW1wb3J0IHsgdjQgfSBmcm9tICd1dWlkJztcblxuY29uc3QgU09MSURfQ0xJRU5UX0FVVEhOX0tFWV9QUkVGSVggPSBcInNvbGlkQ2xpZW50QXV0aG46XCI7XG5jb25zdCBQUkVGRVJSRURfU0lHTklOR19BTEcgPSBbXCJFUzI1NlwiLCBcIlJTMjU2XCJdO1xuY29uc3QgRVZFTlRTID0ge1xuICAgIEVSUk9SOiBcImVycm9yXCIsXG4gICAgTE9HSU46IFwibG9naW5cIixcbiAgICBMT0dPVVQ6IFwibG9nb3V0XCIsXG4gICAgTkVXX1JFRlJFU0hfVE9LRU46IFwibmV3UmVmcmVzaFRva2VuXCIsXG4gICAgU0VTU0lPTl9FWFBJUkVEOiBcInNlc3Npb25FeHBpcmVkXCIsXG4gICAgU0VTU0lPTl9FWFRFTkRFRDogXCJzZXNzaW9uRXh0ZW5kZWRcIixcbiAgICBTRVNTSU9OX1JFU1RPUkVEOiBcInNlc3Npb25SZXN0b3JlXCIsXG4gICAgVElNRU9VVF9TRVQ6IFwidGltZW91dFNldFwiLFxufTtcbmNvbnN0IFJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EUyA9IDU7XG5jb25zdCBTQ09QRV9PUEVOSUQgPSBcIm9wZW5pZFwiO1xuY29uc3QgU0NPUEVfT0ZGTElORSA9IFwib2ZmbGluZV9hY2Nlc3NcIjtcbmNvbnN0IFNDT1BFX1dFQklEID0gXCJ3ZWJpZFwiO1xuY29uc3QgREVGQVVMVF9TQ09QRVMgPSBbU0NPUEVfT1BFTklELCBTQ09QRV9PRkZMSU5FLCBTQ09QRV9XRUJJRF0uam9pbihcIiBcIik7XG5cbmNvbnN0IGJ1aWxkUHJveHlIYW5kbGVyID0gKHRvRXhjbHVkZSwgZXJyb3JNZXNzYWdlKSA9PiAoe1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoRXZlbnRFbWl0dGVyKS5pbmNsdWRlcyhwcm9wKSAmJlxuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModG9FeGNsdWRlKS5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yTWVzc2FnZX06IFske3Byb3B9XSBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH0sXG59KTtcblxuY2xhc3MgQWdncmVnYXRlSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoaGFuZGxlYWJsZXMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVhYmxlcyA9IGhhbmRsZWFibGVzO1xuICAgIH1cbiAgICBhc3luYyBnZXRQcm9wZXJIYW5kbGVyKHBhcmFtcykge1xuICAgICAgICBjb25zdCBjYW5IYW5kbGVMaXN0ID0gYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5oYW5kbGVhYmxlcy5tYXAoKGhhbmRsZWFibGUpID0+IGhhbmRsZWFibGUuY2FuSGFuZGxlKC4uLnBhcmFtcykpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5IYW5kbGVMaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoY2FuSGFuZGxlTGlzdFtpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZWFibGVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBjYW5IYW5kbGUoLi4ucGFyYW1zKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRQcm9wZXJIYW5kbGVyKHBhcmFtcykpICE9PSBudWxsO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGUoLi4ucGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBhd2FpdCB0aGlzLmdldFByb3BlckhhbmRsZXIocGFyYW1zKTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZSguLi5wYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gY2Fubm90IGZpbmQgYSBzdWl0YWJsZSBoYW5kbGVyIGZvcjogJHtwYXJhbXNcbiAgICAgICAgICAgIC5tYXAoKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihcIiwgXCIpfWApO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hKd2tzKGp3a3NJcmksIGlzc3VlcklyaSkge1xuICAgIGNvbnN0IGp3a3NSZXNwb25zZSA9IGF3YWl0IGZldGNoKGp3a3NJcmkpO1xuICAgIGlmIChqd2tzUmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmV0Y2ggSldLUyBmb3IgWyR7aXNzdWVySXJpfV0gYXQgWyR7andrc0lyaX1dOiAke2p3a3NSZXNwb25zZS5zdGF0dXN9ICR7andrc1Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICAgIGxldCBqd2s7XG4gICAgdHJ5IHtcbiAgICAgICAgandrID0gKGF3YWl0IGp3a3NSZXNwb25zZS5qc29uKCkpLmtleXNbMF07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTWFsZm9ybWVkIEpXS1MgZm9yIFske2lzc3VlcklyaX1dIGF0IFske2p3a3NJcml9XTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIHJldHVybiBqd2s7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJpZEZyb21Ub2tlblBheWxvYWQoaWRUb2tlbiwgandrc0lyaSwgaXNzdWVySXJpLCBjbGllbnRJZCkge1xuICAgIGNvbnN0IGp3ayA9IGF3YWl0IGZldGNoSndrcyhqd2tzSXJpLCBpc3N1ZXJJcmkpO1xuICAgIGxldCBwYXlsb2FkO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgcGF5bG9hZDogdmVyaWZpZWRQYXlsb2FkIH0gPSBhd2FpdCBqd3RWZXJpZnkoaWRUb2tlbiwgYXdhaXQgaW1wb3J0SldLKGp3ayksIHtcbiAgICAgICAgICAgIGlzc3VlcjogaXNzdWVySXJpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGNsaWVudElkLFxuICAgICAgICB9KTtcbiAgICAgICAgcGF5bG9hZCA9IHZlcmlmaWVkUGF5bG9hZDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb2tlbiB2ZXJpZmljYXRpb24gZmFpbGVkOiAke2Uuc3RhY2t9YCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC53ZWJpZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcGF5bG9hZC53ZWJpZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkLnN1YiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSB0b2tlbiAke0pTT04uc3RyaW5naWZ5KHBheWxvYWQpfSBpcyBpbnZhbGlkOiBpdCBoYXMgbm8gJ3dlYmlkJyBjbGFpbSBhbmQgbm8gJ3N1YicgY2xhaW0uYCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIG5ldyBVUkwocGF5bG9hZC5zdWIpO1xuICAgICAgICByZXR1cm4gcGF5bG9hZC5zdWI7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHRva2VuIGhhcyBubyAnd2ViaWQnIGNsYWltLCBhbmQgaXRzICdzdWInIGNsYWltIG9mIFske3BheWxvYWQuc3VifV0gaXMgaW52YWxpZCBhcyBhIFVSTCAtIGVycm9yIFske2V9XS5gKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRSZWRpcmVjdFVybChyZWRpcmVjdFVybCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVybE9iamVjdCA9IG5ldyBVUkwocmVkaXJlY3RVcmwpO1xuICAgICAgICByZXR1cm4gdXJsT2JqZWN0Lmhhc2ggPT09IFwiXCI7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkVG9rZW5UeXBlKHRva2VuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIiAmJiBbXCJEUG9QXCIsIFwiQmVhcmVyXCJdLmluY2x1ZGVzKHRva2VuKTtcbn1cblxuY29uc3QgVVNFUl9TRVNTSU9OX1BSRUZJWCA9IFwic29saWRDbGllbnRBdXRoZW50aWNhdGlvblVzZXJcIjtcblxuZnVuY3Rpb24gaXNWYWxpZFVybCh1cmwpIHtcbiAgICB0cnkge1xuICAgICAgICBuZXcgVVJMKHVybCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZVNpZ25pbmdBbGcoc3VwcG9ydGVkLCBwcmVmZXJyZWQpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSBwcmVmZXJyZWQuZmluZCgoc2lnbmluZ0FsZykgPT4ge1xuICAgICAgICByZXR1cm4gc3VwcG9ydGVkLmluY2x1ZGVzKHNpZ25pbmdBbGcpO1xuICAgIH0pKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsKTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUNsaWVudFR5cGUob3B0aW9ucywgaXNzdWVyQ29uZmlnKSB7XG4gICAgaWYgKG9wdGlvbnMuY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiAhaXNWYWxpZFVybChvcHRpb25zLmNsaWVudElkKSkge1xuICAgICAgICByZXR1cm4gXCJzdGF0aWNcIjtcbiAgICB9XG4gICAgaWYgKGlzc3VlckNvbmZpZy5zY29wZXNTdXBwb3J0ZWQuaW5jbHVkZXMoXCJ3ZWJpZFwiKSAmJlxuICAgICAgICBvcHRpb25zLmNsaWVudElkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgaXNWYWxpZFVybChvcHRpb25zLmNsaWVudElkKSkge1xuICAgICAgICByZXR1cm4gXCJzb2xpZC1vaWRjXCI7XG4gICAgfVxuICAgIHJldHVybiBcImR5bmFtaWNcIjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJlZ2lzdHJhdGlvbihvcHRpb25zLCBpc3N1ZXJDb25maWcsIHN0b3JhZ2VVdGlsaXR5LCBjbGllbnRSZWdpc3RyYXIpIHtcbiAgICBjb25zdCBjbGllbnRUeXBlID0gZGV0ZXJtaW5lQ2xpZW50VHlwZShvcHRpb25zLCBpc3N1ZXJDb25maWcpO1xuICAgIGlmIChjbGllbnRUeXBlID09PSBcImR5bmFtaWNcIikge1xuICAgICAgICByZXR1cm4gY2xpZW50UmVnaXN0cmFyLmdldENsaWVudCh7XG4gICAgICAgICAgICBzZXNzaW9uSWQ6IG9wdGlvbnMuc2Vzc2lvbklkLFxuICAgICAgICAgICAgY2xpZW50TmFtZTogb3B0aW9ucy5jbGllbnROYW1lLFxuICAgICAgICAgICAgcmVkaXJlY3RVcmw6IG9wdGlvbnMucmVkaXJlY3RVcmwsXG4gICAgICAgIH0sIGlzc3VlckNvbmZpZyk7XG4gICAgfVxuICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIHtcbiAgICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgfSk7XG4gICAgaWYgKG9wdGlvbnMuY2xpZW50U2VjcmV0KSB7XG4gICAgICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIHtcbiAgICAgICAgICAgIGNsaWVudFNlY3JldDogb3B0aW9ucy5jbGllbnRTZWNyZXQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jbGllbnROYW1lKSB7XG4gICAgICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIob3B0aW9ucy5zZXNzaW9uSWQsIHtcbiAgICAgICAgICAgIGNsaWVudE5hbWU6IG9wdGlvbnMuY2xpZW50TmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkLFxuICAgICAgICBjbGllbnRTZWNyZXQ6IG9wdGlvbnMuY2xpZW50U2VjcmV0LFxuICAgICAgICBjbGllbnROYW1lOiBvcHRpb25zLmNsaWVudE5hbWUsXG4gICAgICAgIGNsaWVudFR5cGUsXG4gICAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U2Vzc2lvbklkRnJvbU9hdXRoU3RhdGUoc3RvcmFnZVV0aWxpdHksIG9hdXRoU3RhdGUpIHtcbiAgICByZXR1cm4gc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihvYXV0aFN0YXRlLCBcInNlc3Npb25JZFwiKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRPaWRjQ29udGV4dEZyb21TdG9yYWdlKHNlc3Npb25JZCwgc3RvcmFnZVV0aWxpdHksIGNvbmZpZ0ZldGNoZXIpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBbaXNzdWVySXJpLCBjb2RlVmVyaWZpZXIsIHN0b3JlZFJlZGlyZWN0SXJpLCBkcG9wXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoc2Vzc2lvbklkLCBcImlzc3VlclwiLCB7XG4gICAgICAgICAgICAgICAgZXJyb3JJZk51bGw6IHRydWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoc2Vzc2lvbklkLCBcImNvZGVWZXJpZmllclwiKSxcbiAgICAgICAgICAgIHN0b3JhZ2VVdGlsaXR5LmdldEZvclVzZXIoc2Vzc2lvbklkLCBcInJlZGlyZWN0VXJsXCIpLFxuICAgICAgICAgICAgc3RvcmFnZVV0aWxpdHkuZ2V0Rm9yVXNlcihzZXNzaW9uSWQsIFwiZHBvcFwiLCB7IGVycm9ySWZOdWxsOiB0cnVlIH0pLFxuICAgICAgICBdKTtcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuZGVsZXRlRm9yVXNlcihzZXNzaW9uSWQsIFwiY29kZVZlcmlmaWVyXCIpO1xuICAgICAgICBjb25zdCBpc3N1ZXJDb25maWcgPSBhd2FpdCBjb25maWdGZXRjaGVyLmZldGNoQ29uZmlnKGlzc3VlcklyaSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlVmVyaWZpZXIsXG4gICAgICAgICAgICByZWRpcmVjdFVybDogc3RvcmVkUmVkaXJlY3RJcmksXG4gICAgICAgICAgICBpc3N1ZXJDb25maWcsXG4gICAgICAgICAgICBkcG9wOiBkcG9wID09PSBcInRydWVcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgT0lEQyBjb250ZXh0IGZyb20gc3RvcmFnZSBhc3NvY2lhdGVkIHdpdGggc2Vzc2lvbiBbJHtzZXNzaW9uSWR9XTogJHtlfWApO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHNhdmVTZXNzaW9uSW5mb1RvU3RvcmFnZShzdG9yYWdlVXRpbGl0eSwgc2Vzc2lvbklkLCB3ZWJJZCwgaXNMb2dnZWRJbiwgcmVmcmVzaFRva2VuLCBzZWN1cmUsIGRwb3BLZXkpIHtcbiAgICBpZiAocmVmcmVzaFRva2VuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXdhaXQgc3RvcmFnZVV0aWxpdHkuc2V0Rm9yVXNlcihzZXNzaW9uSWQsIHsgcmVmcmVzaFRva2VuIH0sIHsgc2VjdXJlIH0pO1xuICAgIH1cbiAgICBpZiAod2ViSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKHNlc3Npb25JZCwgeyB3ZWJJZCB9LCB7IHNlY3VyZSB9KTtcbiAgICB9XG4gICAgaWYgKGlzTG9nZ2VkSW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBzdG9yYWdlVXRpbGl0eS5zZXRGb3JVc2VyKHNlc3Npb25JZCwgeyBpc0xvZ2dlZEluIH0sIHsgc2VjdXJlIH0pO1xuICAgIH1cbiAgICBpZiAoZHBvcEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGF3YWl0IHN0b3JhZ2VVdGlsaXR5LnNldEZvclVzZXIoc2Vzc2lvbklkLCB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IEpTT04uc3RyaW5naWZ5KGRwb3BLZXkucHVibGljS2V5KSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IEpTT04uc3RyaW5naWZ5KGF3YWl0IGV4cG9ydEpXSyhkcG9wS2V5LnByaXZhdGVLZXkpKSxcbiAgICAgICAgfSwgeyBzZWN1cmUgfSk7XG4gICAgfVxufVxuY2xhc3MgU3RvcmFnZVV0aWxpdHkge1xuICAgIGNvbnN0cnVjdG9yKHNlY3VyZVN0b3JhZ2UsIGluc2VjdXJlU3RvcmFnZSkge1xuICAgICAgICB0aGlzLnNlY3VyZVN0b3JhZ2UgPSBzZWN1cmVTdG9yYWdlO1xuICAgICAgICB0aGlzLmluc2VjdXJlU3RvcmFnZSA9IGluc2VjdXJlU3RvcmFnZTtcbiAgICB9XG4gICAgZ2V0S2V5KHVzZXJJZCkge1xuICAgICAgICByZXR1cm4gYHNvbGlkQ2xpZW50QXV0aGVudGljYXRpb25Vc2VyOiR7dXNlcklkfWA7XG4gICAgfVxuICAgIGFzeW5jIGdldFVzZXJEYXRhKHVzZXJJZCwgc2VjdXJlKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlZCA9IGF3YWl0IChzZWN1cmVcbiAgICAgICAgICAgID8gdGhpcy5zZWN1cmVTdG9yYWdlXG4gICAgICAgICAgICA6IHRoaXMuaW5zZWN1cmVTdG9yYWdlKS5nZXQodGhpcy5nZXRLZXkodXNlcklkKSk7XG4gICAgICAgIGlmIChzdG9yZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdG9yZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGF0YSBmb3IgdXNlciBbJHt1c2VySWR9XSBpbiBbJHtzZWN1cmUgPyBcInNlY3VyZVwiIDogXCJ1bnNlY3VyZVwifV0gc3RvcmFnZSBpcyBjb3JydXB0ZWQgLSBleHBlY3RlZCB2YWxpZCBKU09OLCBidXQgZ290OiAke3N0b3JlZH1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBzZXRVc2VyRGF0YSh1c2VySWQsIGRhdGEsIHNlY3VyZSkge1xuICAgICAgICBhd2FpdCAoc2VjdXJlID8gdGhpcy5zZWN1cmVTdG9yYWdlIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLnNldCh0aGlzLmdldEtleSh1c2VySWQpLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgfVxuICAgIGFzeW5jIGdldChrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpXG4gICAgICAgICAgICA/IHRoaXMuc2VjdXJlU3RvcmFnZVxuICAgICAgICAgICAgOiB0aGlzLmluc2VjdXJlU3RvcmFnZSkuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JJZk51bGwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske2tleX1dIGlzIG5vdCBzdG9yZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGFzeW5jIHNldChrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpID8gdGhpcy5zZWN1cmVTdG9yYWdlIDogdGhpcy5pbnNlY3VyZVN0b3JhZ2UpLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKGtleSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKSA/IHRoaXMuc2VjdXJlU3RvcmFnZSA6IHRoaXMuaW5zZWN1cmVTdG9yYWdlKS5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Rm9yVXNlcih1c2VySWQsIGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IGF3YWl0IHRoaXMuZ2V0VXNlckRhdGEodXNlcklkLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBpZiAoIXVzZXJEYXRhIHx8ICF1c2VyRGF0YVtrZXldKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHVzZXJEYXRhW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JJZk51bGwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIFske2tleX1dIGZvciB1c2VyIFske3VzZXJJZH1dIGlzIG5vdCBzdG9yZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhc3luYyBzZXRGb3JVc2VyKHVzZXJJZCwgdmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCB1c2VyRGF0YTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVzZXJEYXRhID0gYXdhaXQgdGhpcy5nZXRVc2VyRGF0YSh1c2VySWQsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgdXNlckRhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnNldFVzZXJEYXRhKHVzZXJJZCwgeyAuLi51c2VyRGF0YSwgLi4udmFsdWVzIH0sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVGb3JVc2VyKHVzZXJJZCwga2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgdGhpcy5nZXRVc2VyRGF0YSh1c2VySWQsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWN1cmUpO1xuICAgICAgICBkZWxldGUgdXNlckRhdGFba2V5XTtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRVc2VyRGF0YSh1c2VySWQsIHVzZXJEYXRhLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VjdXJlKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlQWxsVXNlckRhdGEodXNlcklkLCBvcHRpb25zKSB7XG4gICAgICAgIGF3YWl0ICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNlY3VyZSkgPyB0aGlzLnNlY3VyZVN0b3JhZ2UgOiB0aGlzLmluc2VjdXJlU3RvcmFnZSkuZGVsZXRlKHRoaXMuZ2V0S2V5KHVzZXJJZCkpO1xuICAgIH1cbn1cblxuY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXAgPSB7fTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXBba2V5XSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWFwW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5tYXBba2V5XTtcbiAgICB9XG59XG5cbmNsYXNzIENvbmZpZ3VyYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2ROYW1lKSB7XG4gICAgICAgIHN1cGVyKGBbJHttZXRob2ROYW1lfV0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgfVxufVxuXG5jbGFzcyBJbnZhbGlkUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtaXNzaW5nRmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIHJlc3BvbnNlIGZyb20gT0lEQyBwcm92aWRlcjogbWlzc2luZyBmaWVsZHMgJHttaXNzaW5nRmllbGRzfWApO1xuICAgICAgICB0aGlzLm1pc3NpbmdGaWVsZHMgPSBtaXNzaW5nRmllbGRzO1xuICAgIH1cbn1cblxuY2xhc3MgT2lkY1Byb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3IsIGVycm9yRGVzY3JpcHRpb24pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5lcnJvckRlc2NyaXB0aW9uID0gZXJyb3JEZXNjcmlwdGlvbjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhUVShhdWRpZW5jZSkge1xuICAgIGNvbnN0IGF1ZGllbmNlVXJsID0gbmV3IFVSTChhdWRpZW5jZSk7XG4gICAgcmV0dXJuIG5ldyBVUkwoYXVkaWVuY2VVcmwucGF0aG5hbWUsIGF1ZGllbmNlVXJsLm9yaWdpbikudG9TdHJpbmcoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURwb3BIZWFkZXIoYXVkaWVuY2UsIG1ldGhvZCwgZHBvcEtleSkge1xuICAgIHJldHVybiBuZXcgU2lnbkpXVCh7XG4gICAgICAgIGh0dTogbm9ybWFsaXplSFRVKGF1ZGllbmNlKSxcbiAgICAgICAgaHRtOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgICAganRpOiB2NCgpLFxuICAgIH0pXG4gICAgICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoe1xuICAgICAgICBhbGc6IFBSRUZFUlJFRF9TSUdOSU5HX0FMR1swXSxcbiAgICAgICAgandrOiBkcG9wS2V5LnB1YmxpY0tleSxcbiAgICAgICAgdHlwOiBcImRwb3Arand0XCIsXG4gICAgfSlcbiAgICAgICAgLnNldElzc3VlZEF0KClcbiAgICAgICAgLnNpZ24oZHBvcEtleS5wcml2YXRlS2V5LCB7fSk7XG59XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZURwb3BLZXlQYWlyKCkge1xuICAgIGNvbnN0IHsgcHJpdmF0ZUtleSwgcHVibGljS2V5IH0gPSBhd2FpdCBnZW5lcmF0ZUtleVBhaXIoUFJFRkVSUkVEX1NJR05JTkdfQUxHWzBdKTtcbiAgICBjb25zdCBkcG9wS2V5UGFpciA9IHtcbiAgICAgICAgcHJpdmF0ZUtleSxcbiAgICAgICAgcHVibGljS2V5OiBhd2FpdCBleHBvcnRKV0socHVibGljS2V5KSxcbiAgICB9O1xuICAgIFtkcG9wS2V5UGFpci5wdWJsaWNLZXkuYWxnXSA9IFBSRUZFUlJFRF9TSUdOSU5HX0FMRztcbiAgICByZXR1cm4gZHBvcEtleVBhaXI7XG59XG5cbmNvbnN0IERFRkFVTFRfRVhQSVJBVElPTl9USU1FX1NFQ09ORFMgPSA2MDA7XG5mdW5jdGlvbiBpc0V4cGVjdGVkQXV0aEVycm9yKHN0YXR1c0NvZGUpIHtcbiAgICByZXR1cm4gWzQwMSwgNDAzXS5pbmNsdWRlcyhzdGF0dXNDb2RlKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkRHBvcEZldGNoT3B0aW9ucyh0YXJnZXRVcmwsIGF1dGhUb2tlbiwgZHBvcEtleSwgZGVmYXVsdE9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKGRlZmF1bHRPcHRpb25zID09PSBudWxsIHx8IGRlZmF1bHRPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0T3B0aW9ucy5oZWFkZXJzKTtcbiAgICBoZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYERQb1AgJHthdXRoVG9rZW59YCk7XG4gICAgaGVhZGVycy5zZXQoXCJEUG9QXCIsIGF3YWl0IGNyZWF0ZURwb3BIZWFkZXIodGFyZ2V0VXJsLCAoX2EgPSBkZWZhdWx0T3B0aW9ucyA9PT0gbnVsbCB8fCBkZWZhdWx0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdE9wdGlvbnMubWV0aG9kKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcImdldFwiLCBkcG9wS2V5KSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkQXV0aGVudGljYXRlZEhlYWRlcnModGFyZ2V0VXJsLCBhdXRoVG9rZW4sIGRwb3BLZXksIGRlZmF1bHRPcHRpb25zKSB7XG4gICAgaWYgKGRwb3BLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYnVpbGREcG9wRmV0Y2hPcHRpb25zKHRhcmdldFVybCwgYXV0aFRva2VuLCBkcG9wS2V5LCBkZWZhdWx0T3B0aW9ucyk7XG4gICAgfVxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhkZWZhdWx0T3B0aW9ucyA9PT0gbnVsbCB8fCBkZWZhdWx0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdE9wdGlvbnMuaGVhZGVycyk7XG4gICAgaGVhZGVycy5zZXQoXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIG1ha2VBdXRoZW50aWNhdGVkUmVxdWVzdCh1bmF1dGhGZXRjaCwgYWNjZXNzVG9rZW4sIHVybCwgZGVmYXVsdFJlcXVlc3RJbml0LCBkcG9wS2V5KSB7XG4gICAgcmV0dXJuIHVuYXV0aEZldGNoKHVybCwgYXdhaXQgYnVpbGRBdXRoZW50aWNhdGVkSGVhZGVycyh1cmwudG9TdHJpbmcoKSwgYWNjZXNzVG9rZW4sIGRwb3BLZXksIGRlZmF1bHRSZXF1ZXN0SW5pdCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEFjY2Vzc1Rva2VuKHJlZnJlc2hPcHRpb25zLCBkcG9wS2V5LCBldmVudEVtaXR0ZXIpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgdG9rZW5TZXQgPSBhd2FpdCByZWZyZXNoT3B0aW9ucy50b2tlblJlZnJlc2hlci5yZWZyZXNoKHJlZnJlc2hPcHRpb25zLnNlc3Npb25JZCwgcmVmcmVzaE9wdGlvbnMucmVmcmVzaFRva2VuLCBkcG9wS2V5KTtcbiAgICBldmVudEVtaXR0ZXIgPT09IG51bGwgfHwgZXZlbnRFbWl0dGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudEVtaXR0ZXIuZW1pdChFVkVOVFMuU0VTU0lPTl9FWFRFTkRFRCwgKF9hID0gdG9rZW5TZXQuZXhwaXJlc0luKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX0VYUElSQVRJT05fVElNRV9TRUNPTkRTKTtcbiAgICBpZiAodHlwZW9mIHRva2VuU2V0LnJlZnJlc2hUb2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBldmVudEVtaXR0ZXIgPT09IG51bGwgfHwgZXZlbnRFbWl0dGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudEVtaXR0ZXIuZW1pdChFVkVOVFMuTkVXX1JFRlJFU0hfVE9LRU4sIHRva2VuU2V0LnJlZnJlc2hUb2tlbik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFjY2Vzc1Rva2VuOiB0b2tlblNldC5hY2Nlc3NUb2tlbixcbiAgICAgICAgcmVmcmVzaFRva2VuOiB0b2tlblNldC5yZWZyZXNoVG9rZW4sXG4gICAgICAgIGV4cGlyZXNJbjogdG9rZW5TZXQuZXhwaXJlc0luLFxuICAgIH07XG59XG5jb25zdCBjb21wdXRlUmVmcmVzaERlbGF5ID0gKGV4cGlyZXNJbikgPT4ge1xuICAgIGlmIChleHBpcmVzSW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZXhwaXJlc0luIC0gUkVGUkVTSF9CRUZPUkVfRVhQSVJBVElPTl9TRUNPTkRTID4gMFxuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIGV4cGlyZXNJbiAtIFJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EU1xuICAgICAgICAgICAgOiBleHBpcmVzSW47XG4gICAgfVxuICAgIHJldHVybiBERUZBVUxUX0VYUElSQVRJT05fVElNRV9TRUNPTkRTO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkQXV0aGVudGljYXRlZEZldGNoKHVuYXV0aEZldGNoLCBhY2Nlc3NUb2tlbiwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBsZXQgY3VycmVudEFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW47XG4gICAgbGV0IGxhdGVzdFRpbWVvdXQ7XG4gICAgY29uc3QgY3VycmVudFJlZnJlc2hPcHRpb25zID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZnJlc2hPcHRpb25zO1xuICAgIGlmIChjdXJyZW50UmVmcmVzaE9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBwcm9hY3RpdmVseVJlZnJlc2hUb2tlbiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NUb2tlbjogcmVmcmVzaGVkQWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbiwgZXhwaXJlc0luLCB9ID0gYXdhaXQgcmVmcmVzaEFjY2Vzc1Rva2VuKGN1cnJlbnRSZWZyZXNoT3B0aW9ucywgb3B0aW9ucy5kcG9wS2V5LCBvcHRpb25zLmV2ZW50RW1pdHRlcik7XG4gICAgICAgICAgICAgICAgY3VycmVudEFjY2Vzc1Rva2VuID0gcmVmcmVzaGVkQWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hUb2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZWZyZXNoT3B0aW9ucy5yZWZyZXNoVG9rZW4gPSByZWZyZXNoVG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChsYXRlc3RUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBsYXRlc3RUaW1lb3V0ID0gc2V0VGltZW91dChwcm9hY3RpdmVseVJlZnJlc2hUb2tlbiwgY29tcHV0ZVJlZnJlc2hEZWxheShleHBpcmVzSW4pICogMTAwMCk7XG4gICAgICAgICAgICAgICAgKF9hID0gb3B0aW9ucy5ldmVudEVtaXR0ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbWl0KEVWRU5UUy5USU1FT1VUX1NFVCwgbGF0ZXN0VGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgT2lkY1Byb3ZpZGVyRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV2ZW50RW1pdHRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVtaXQoRVZFTlRTLkVSUk9SLCBlLmVycm9yLCBlLmVycm9yRGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXZlbnRFbWl0dGVyKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZW1pdChFVkVOVFMuU0VTU0lPTl9FWFBJUkVEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnZhbGlkUmVzcG9uc2VFcnJvciAmJlxuICAgICAgICAgICAgICAgICAgICBlLm1pc3NpbmdGaWVsZHMuaW5jbHVkZXMoXCJhY2Nlc3NfdG9rZW5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9kID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV2ZW50RW1pdHRlcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmVtaXQoRVZFTlRTLlNFU1NJT05fRVhQSVJFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsYXRlc3RUaW1lb3V0ID0gc2V0VGltZW91dChwcm9hY3RpdmVseVJlZnJlc2hUb2tlbiwgY29tcHV0ZVJlZnJlc2hEZWxheShvcHRpb25zLmV4cGlyZXNJbikgKiAxMDAwKTtcbiAgICAgICAgKF9hID0gb3B0aW9ucy5ldmVudEVtaXR0ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbWl0KEVWRU5UUy5USU1FT1VUX1NFVCwgbGF0ZXN0VGltZW91dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmV2ZW50RW1pdHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGV4cGlyYXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBvcHRpb25zLmV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5TRVNTSU9OX0VYUElSRUQpO1xuICAgICAgICB9LCBjb21wdXRlUmVmcmVzaERlbGF5KG9wdGlvbnMuZXhwaXJlc0luKSAqIDEwMDApO1xuICAgICAgICBvcHRpb25zLmV2ZW50RW1pdHRlci5lbWl0KEVWRU5UUy5USU1FT1VUX1NFVCwgZXhwaXJhdGlvblRpbWVvdXQpO1xuICAgIH1cbiAgICByZXR1cm4gYXN5bmMgKHVybCwgcmVxdWVzdEluaXQpID0+IHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgbWFrZUF1dGhlbnRpY2F0ZWRSZXF1ZXN0KHVuYXV0aEZldGNoLCBjdXJyZW50QWNjZXNzVG9rZW4sIHVybCwgcmVxdWVzdEluaXQsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kcG9wS2V5KTtcbiAgICAgICAgY29uc3QgZmFpbGVkQnV0Tm90RXhwZWN0ZWRBdXRoRXJyb3IgPSAhcmVzcG9uc2Uub2sgJiYgIWlzRXhwZWN0ZWRBdXRoRXJyb3IocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rIHx8IGZhaWxlZEJ1dE5vdEV4cGVjdGVkQXV0aEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzQmVlblJlZGlyZWN0ZWQgPSByZXNwb25zZS51cmwgIT09IHVybDtcbiAgICAgICAgaWYgKGhhc0JlZW5SZWRpcmVjdGVkICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZHBvcEtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBtYWtlQXV0aGVudGljYXRlZFJlcXVlc3QodW5hdXRoRmV0Y2gsIGN1cnJlbnRBY2Nlc3NUb2tlbiwgcmVzcG9uc2UudXJsLCByZXF1ZXN0SW5pdCwgb3B0aW9ucy5kcG9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbn1cblxuY29uc3QgU3RvcmFnZVV0aWxpdHlHZXRSZXNwb25zZSA9IFwiZ2V0UmVzcG9uc2VcIjtcbmNvbnN0IFN0b3JhZ2VVdGlsaXR5TW9jayA9IHtcbiAgICBnZXQ6IGFzeW5jIChrZXksIG9wdGlvbnMpID0+IFN0b3JhZ2VVdGlsaXR5R2V0UmVzcG9uc2UsXG4gICAgc2V0OiBhc3luYyAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIH0sXG4gICAgZGVsZXRlOiBhc3luYyAoa2V5KSA9PiB7XG4gICAgfSxcbiAgICBnZXRGb3JVc2VyOiBhc3luYyAodXNlcklkLCBrZXksIG9wdGlvbnMpID0+IFN0b3JhZ2VVdGlsaXR5R2V0UmVzcG9uc2UsXG4gICAgc2V0Rm9yVXNlcjogYXN5bmMgKHVzZXJJZCwgdmFsdWVzLCBvcHRpb25zKSA9PiB7XG4gICAgfSxcbiAgICBkZWxldGVGb3JVc2VyOiBhc3luYyAodXNlcklkLCBrZXksIG9wdGlvbnMpID0+IHtcbiAgICB9LFxuICAgIGRlbGV0ZUFsbFVzZXJEYXRhOiBhc3luYyAodXNlcklkLCBvcHRpb25zKSA9PiB7XG4gICAgfSxcbn07XG5jb25zdCBtb2NrU3RvcmFnZSA9IChzdG9yZWQpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlZDtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQ6IGFzeW5jIChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChzdG9yZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZVtrZXldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RvcmVba2V5XSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogYXN5bmMgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIHN0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiBhc3luYyAoa2V5KSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgc3RvcmVba2V5XTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmNvbnN0IG1vY2tTdG9yYWdlVXRpbGl0eSA9IChzdG9yZWQsIGlzU2VjdXJlID0gZmFsc2UpID0+IHtcbiAgICBpZiAoaXNTZWN1cmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9yYWdlVXRpbGl0eShtb2NrU3RvcmFnZShzdG9yZWQpLCBtb2NrU3RvcmFnZSh7fSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VVdGlsaXR5KG1vY2tTdG9yYWdlKHt9KSwgbW9ja1N0b3JhZ2Uoc3RvcmVkKSk7XG59O1xuXG5leHBvcnQgeyBBZ2dyZWdhdGVIYW5kbGVyLCBDb25maWd1cmF0aW9uRXJyb3IsIERFRkFVTFRfU0NPUEVTLCBFVkVOVFMsIEluTWVtb3J5U3RvcmFnZSwgSW52YWxpZFJlc3BvbnNlRXJyb3IsIE5vdEltcGxlbWVudGVkRXJyb3IsIE9pZGNQcm92aWRlckVycm9yLCBQUkVGRVJSRURfU0lHTklOR19BTEcsIFJFRlJFU0hfQkVGT1JFX0VYUElSQVRJT05fU0VDT05EUywgU09MSURfQ0xJRU5UX0FVVEhOX0tFWV9QUkVGSVgsIFN0b3JhZ2VVdGlsaXR5LCBTdG9yYWdlVXRpbGl0eUdldFJlc3BvbnNlLCBTdG9yYWdlVXRpbGl0eU1vY2ssIFVTRVJfU0VTU0lPTl9QUkVGSVgsIGJ1aWxkQXV0aGVudGljYXRlZEZldGNoLCBidWlsZFByb3h5SGFuZGxlciwgY3JlYXRlRHBvcEhlYWRlciwgZGV0ZXJtaW5lU2lnbmluZ0FsZywgZmV0Y2hKd2tzLCBnZW5lcmF0ZURwb3BLZXlQYWlyLCBnZXRTZXNzaW9uSWRGcm9tT2F1dGhTdGF0ZSwgZ2V0V2ViaWRGcm9tVG9rZW5QYXlsb2FkLCBoYW5kbGVSZWdpc3RyYXRpb24sIGlzU3VwcG9ydGVkVG9rZW5UeXBlLCBpc1ZhbGlkUmVkaXJlY3RVcmwsIGxvYWRPaWRjQ29udGV4dEZyb21TdG9yYWdlLCBtb2NrU3RvcmFnZSwgbW9ja1N0b3JhZ2VVdGlsaXR5LCBzYXZlU2Vzc2lvbkluZm9Ub1N0b3JhZ2UgfTtcbiIsInZhciBpbmRleEJyb3dzZXIgPSBnbG9iYWxUaGlzLmZldGNoO1xyXG5jb25zdCB7IGZldGNoLCBSZXNwb25zZSwgUmVxdWVzdCwgSGVhZGVycyB9ID0gZ2xvYmFsVGhpcztcblxuZXhwb3J0IHsgSGVhZGVycywgUmVxdWVzdCwgUmVzcG9uc2UsIGluZGV4QnJvd3NlciBhcyBkZWZhdWx0LCBmZXRjaCB9O1xuIiwiZXhwb3J0IHsgY29tcGFjdERlY3J5cHQgfSBmcm9tICcuL2p3ZS9jb21wYWN0L2RlY3J5cHQuanMnO1xuZXhwb3J0IHsgZmxhdHRlbmVkRGVjcnlwdCB9IGZyb20gJy4vandlL2ZsYXR0ZW5lZC9kZWNyeXB0LmpzJztcbmV4cG9ydCB7IGdlbmVyYWxEZWNyeXB0IH0gZnJvbSAnLi9qd2UvZ2VuZXJhbC9kZWNyeXB0LmpzJztcbmV4cG9ydCB7IEdlbmVyYWxFbmNyeXB0IH0gZnJvbSAnLi9qd2UvZ2VuZXJhbC9lbmNyeXB0LmpzJztcbmV4cG9ydCB7IGNvbXBhY3RWZXJpZnkgfSBmcm9tICcuL2p3cy9jb21wYWN0L3ZlcmlmeS5qcyc7XG5leHBvcnQgeyBmbGF0dGVuZWRWZXJpZnkgfSBmcm9tICcuL2p3cy9mbGF0dGVuZWQvdmVyaWZ5LmpzJztcbmV4cG9ydCB7IGdlbmVyYWxWZXJpZnkgfSBmcm9tICcuL2p3cy9nZW5lcmFsL3ZlcmlmeS5qcyc7XG5leHBvcnQgeyBqd3RWZXJpZnkgfSBmcm9tICcuL2p3dC92ZXJpZnkuanMnO1xuZXhwb3J0IHsgand0RGVjcnlwdCB9IGZyb20gJy4vand0L2RlY3J5cHQuanMnO1xuZXhwb3J0IHsgQ29tcGFjdEVuY3J5cHQgfSBmcm9tICcuL2p3ZS9jb21wYWN0L2VuY3J5cHQuanMnO1xuZXhwb3J0IHsgRmxhdHRlbmVkRW5jcnlwdCB9IGZyb20gJy4vandlL2ZsYXR0ZW5lZC9lbmNyeXB0LmpzJztcbmV4cG9ydCB7IENvbXBhY3RTaWduIH0gZnJvbSAnLi9qd3MvY29tcGFjdC9zaWduLmpzJztcbmV4cG9ydCB7IEZsYXR0ZW5lZFNpZ24gfSBmcm9tICcuL2p3cy9mbGF0dGVuZWQvc2lnbi5qcyc7XG5leHBvcnQgeyBHZW5lcmFsU2lnbiB9IGZyb20gJy4vandzL2dlbmVyYWwvc2lnbi5qcyc7XG5leHBvcnQgeyBTaWduSldUIH0gZnJvbSAnLi9qd3Qvc2lnbi5qcyc7XG5leHBvcnQgeyBFbmNyeXB0SldUIH0gZnJvbSAnLi9qd3QvZW5jcnlwdC5qcyc7XG5leHBvcnQgeyBjYWxjdWxhdGVKd2tUaHVtYnByaW50LCBjYWxjdWxhdGVKd2tUaHVtYnByaW50VXJpIH0gZnJvbSAnLi9qd2svdGh1bWJwcmludC5qcyc7XG5leHBvcnQgeyBFbWJlZGRlZEpXSyB9IGZyb20gJy4vandrL2VtYmVkZGVkLmpzJztcbmV4cG9ydCB7IGNyZWF0ZUxvY2FsSldLU2V0IH0gZnJvbSAnLi9qd2tzL2xvY2FsLmpzJztcbmV4cG9ydCB7IGNyZWF0ZVJlbW90ZUpXS1NldCB9IGZyb20gJy4vandrcy9yZW1vdGUuanMnO1xuZXhwb3J0IHsgVW5zZWN1cmVkSldUIH0gZnJvbSAnLi9qd3QvdW5zZWN1cmVkLmpzJztcbmV4cG9ydCB7IGV4cG9ydFBLQ1M4LCBleHBvcnRTUEtJLCBleHBvcnRKV0sgfSBmcm9tICcuL2tleS9leHBvcnQuanMnO1xuZXhwb3J0IHsgaW1wb3J0U1BLSSwgaW1wb3J0UEtDUzgsIGltcG9ydFg1MDksIGltcG9ydEpXSyB9IGZyb20gJy4va2V5L2ltcG9ydC5qcyc7XG5leHBvcnQgeyBkZWNvZGVQcm90ZWN0ZWRIZWFkZXIgfSBmcm9tICcuL3V0aWwvZGVjb2RlX3Byb3RlY3RlZF9oZWFkZXIuanMnO1xuZXhwb3J0IHsgZGVjb2RlSnd0IH0gZnJvbSAnLi91dGlsL2RlY29kZV9qd3QuanMnO1xuaW1wb3J0ICogYXMgZXJyb3JzXzEgZnJvbSAnLi91dGlsL2Vycm9ycy5qcyc7XG5leHBvcnQgeyBlcnJvcnNfMSBhcyBlcnJvcnMgfTtcbmV4cG9ydCB7IGdlbmVyYXRlS2V5UGFpciB9IGZyb20gJy4va2V5L2dlbmVyYXRlX2tleV9wYWlyLmpzJztcbmV4cG9ydCB7IGdlbmVyYXRlU2VjcmV0IH0gZnJvbSAnLi9rZXkvZ2VuZXJhdGVfc2VjcmV0LmpzJztcbmltcG9ydCAqIGFzIGJhc2U2NHVybF8xIGZyb20gJy4vdXRpbC9iYXNlNjR1cmwuanMnO1xuZXhwb3J0IHsgYmFzZTY0dXJsXzEgYXMgYmFzZTY0dXJsIH07XG4iLCJpbXBvcnQgeyBmbGF0dGVuZWREZWNyeXB0IH0gZnJvbSAnLi4vZmxhdHRlbmVkL2RlY3J5cHQuanMnO1xuaW1wb3J0IHsgSldFSW52YWxpZCB9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCB7IGRlY29kZXIgfSBmcm9tICcuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wYWN0RGVjcnlwdChqd2UsIGtleSwgb3B0aW9ucykge1xuICAgIGlmIChqd2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGp3ZSA9IGRlY29kZXIuZGVjb2RlKGp3ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnQ29tcGFjdCBKV0UgbXVzdCBiZSBhIHN0cmluZyBvciBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgMDogcHJvdGVjdGVkSGVhZGVyLCAxOiBlbmNyeXB0ZWRLZXksIDI6IGl2LCAzOiBjaXBoZXJ0ZXh0LCA0OiB0YWcsIGxlbmd0aCwgfSA9IGp3ZS5zcGxpdCgnLicpO1xuICAgIGlmIChsZW5ndGggIT09IDUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0ludmFsaWQgQ29tcGFjdCBKV0UnKTtcbiAgICB9XG4gICAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgZmxhdHRlbmVkRGVjcnlwdCh7XG4gICAgICAgIGNpcGhlcnRleHQsXG4gICAgICAgIGl2OiAoaXYgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgcHJvdGVjdGVkOiBwcm90ZWN0ZWRIZWFkZXIgfHwgdW5kZWZpbmVkLFxuICAgICAgICB0YWc6ICh0YWcgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgZW5jcnlwdGVkX2tleTogZW5jcnlwdGVkS2V5IHx8IHVuZGVmaW5lZCxcbiAgICB9LCBrZXksIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGxhaW50ZXh0OiBkZWNyeXB0ZWQucGxhaW50ZXh0LCBwcm90ZWN0ZWRIZWFkZXI6IGRlY3J5cHRlZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogZGVjcnlwdGVkLmtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgRmxhdHRlbmVkRW5jcnlwdCB9IGZyb20gJy4uL2ZsYXR0ZW5lZC9lbmNyeXB0LmpzJztcbmV4cG9ydCBjbGFzcyBDb21wYWN0RW5jcnlwdCB7XG4gICAgY29uc3RydWN0b3IocGxhaW50ZXh0KSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZCA9IG5ldyBGbGF0dGVuZWRFbmNyeXB0KHBsYWludGV4dCk7XG4gICAgfVxuICAgIHNldENvbnRlbnRFbmNyeXB0aW9uS2V5KGNlaykge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQuc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEluaXRpYWxpemF0aW9uVmVjdG9yKGl2KSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRJbml0aWFsaXphdGlvblZlY3Rvcihpdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkLnNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgZW5jcnlwdChrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgandlID0gYXdhaXQgdGhpcy5fZmxhdHRlbmVkLmVuY3J5cHQoa2V5LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIFtqd2UucHJvdGVjdGVkLCBqd2UuZW5jcnlwdGVkX2tleSwgandlLml2LCBqd2UuY2lwaGVydGV4dCwgandlLnRhZ10uam9pbignLicpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGRlY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuLi8uLi9ydW50aW1lL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgZGVjcnlwdCBmcm9tICcuLi8uLi9ydW50aW1lL2RlY3J5cHQuanMnO1xuaW1wb3J0IHsgaW5mbGF0ZSB9IGZyb20gJy4uLy4uL3J1bnRpbWUvemxpYi5qcyc7XG5pbXBvcnQgeyBKT1NFQWxnTm90QWxsb3dlZCwgSk9TRU5vdFN1cHBvcnRlZCwgSldFSW52YWxpZCB9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCBpc0Rpc2pvaW50IGZyb20gJy4uLy4uL2xpYi9pc19kaXNqb2ludC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vLi4vbGliL2lzX29iamVjdC5qcyc7XG5pbXBvcnQgZGVjcnlwdEtleU1hbmFnZW1lbnQgZnJvbSAnLi4vLi4vbGliL2RlY3J5cHRfa2V5X21hbmFnZW1lbnQuanMnO1xuaW1wb3J0IHsgZW5jb2RlciwgZGVjb2RlciwgY29uY2F0IH0gZnJvbSAnLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgZ2VuZXJhdGVDZWsgZnJvbSAnLi4vLi4vbGliL2Nlay5qcyc7XG5pbXBvcnQgdmFsaWRhdGVDcml0IGZyb20gJy4uLy4uL2xpYi92YWxpZGF0ZV9jcml0LmpzJztcbmltcG9ydCB2YWxpZGF0ZUFsZ29yaXRobXMgZnJvbSAnLi4vLi4vbGliL3ZhbGlkYXRlX2FsZ29yaXRobXMuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZsYXR0ZW5lZERlY3J5cHQoandlLCBrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFpc09iamVjdChqd2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdGbGF0dGVuZWQgSldFIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmIChqd2UucHJvdGVjdGVkID09PSB1bmRlZmluZWQgJiYgandlLmhlYWRlciA9PT0gdW5kZWZpbmVkICYmIGp3ZS51bnByb3RlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKT1NFIEhlYWRlciBtaXNzaW5nJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandlLml2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIEluaXRpYWxpemF0aW9uIFZlY3RvciBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandlLmNpcGhlcnRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgQ2lwaGVydGV4dCBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandlLnRhZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBBdXRoZW50aWNhdGlvbiBUYWcgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoandlLnByb3RlY3RlZCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBqd2UucHJvdGVjdGVkICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFByb3RlY3RlZCBIZWFkZXIgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3ZS5lbmNyeXB0ZWRfa2V5ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGp3ZS5lbmNyeXB0ZWRfa2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIEVuY3J5cHRlZCBLZXkgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3ZS5hYWQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgandlLmFhZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBBQUQgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3ZS5oZWFkZXIgIT09IHVuZGVmaW5lZCAmJiAhaXNPYmplY3QoandlLmhlYWRlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBTaGFyZWQgVW5wcm90ZWN0ZWQgSGVhZGVyIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd2UudW5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiAhaXNPYmplY3QoandlLnVucHJvdGVjdGVkKSkge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFBlci1SZWNpcGllbnQgVW5wcm90ZWN0ZWQgSGVhZGVyIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGxldCBwYXJzZWRQcm90O1xuICAgIGlmIChqd2UucHJvdGVjdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm90ZWN0ZWRIZWFkZXIgPSBiYXNlNjR1cmwoandlLnByb3RlY3RlZCk7XG4gICAgICAgICAgICBwYXJzZWRQcm90ID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShwcm90ZWN0ZWRIZWFkZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgUHJvdGVjdGVkIEhlYWRlciBpcyBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc0Rpc2pvaW50KHBhcnNlZFByb3QsIGp3ZS5oZWFkZXIsIGp3ZS51bnByb3RlY3RlZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBQcm90ZWN0ZWQsIEpXRSBVbnByb3RlY3RlZCBIZWFkZXIsIGFuZCBKV0UgUGVyLVJlY2lwaWVudCBVbnByb3RlY3RlZCBIZWFkZXIgUGFyYW1ldGVyIG5hbWVzIG11c3QgYmUgZGlzam9pbnQnKTtcbiAgICB9XG4gICAgY29uc3Qgam9zZUhlYWRlciA9IHtcbiAgICAgICAgLi4ucGFyc2VkUHJvdCxcbiAgICAgICAgLi4uandlLmhlYWRlcixcbiAgICAgICAgLi4uandlLnVucHJvdGVjdGVkLFxuICAgIH07XG4gICAgdmFsaWRhdGVDcml0KEpXRUludmFsaWQsIG5ldyBNYXAoKSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyaXQsIHBhcnNlZFByb3QsIGpvc2VIZWFkZXIpO1xuICAgIGlmIChqb3NlSGVhZGVyLnppcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghcGFyc2VkUHJvdCB8fCAhcGFyc2VkUHJvdC56aXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgXCJ6aXBcIiAoQ29tcHJlc3Npb24gQWxnb3JpdGhtKSBIZWFkZXIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvc2VIZWFkZXIuemlwICE9PSAnREVGJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IGFsZywgZW5jIH0gPSBqb3NlSGVhZGVyO1xuICAgIGlmICh0eXBlb2YgYWxnICE9PSAnc3RyaW5nJyB8fCAhYWxnKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdtaXNzaW5nIEpXRSBBbGdvcml0aG0gKGFsZykgaW4gSldFIEhlYWRlcicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycgfHwgIWVuYykge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnbWlzc2luZyBKV0UgRW5jcnlwdGlvbiBBbGdvcml0aG0gKGVuYykgaW4gSldFIEhlYWRlcicpO1xuICAgIH1cbiAgICBjb25zdCBrZXlNYW5hZ2VtZW50QWxnb3JpdGhtcyA9IG9wdGlvbnMgJiYgdmFsaWRhdGVBbGdvcml0aG1zKCdrZXlNYW5hZ2VtZW50QWxnb3JpdGhtcycsIG9wdGlvbnMua2V5TWFuYWdlbWVudEFsZ29yaXRobXMpO1xuICAgIGNvbnN0IGNvbnRlbnRFbmNyeXB0aW9uQWxnb3JpdGhtcyA9IG9wdGlvbnMgJiZcbiAgICAgICAgdmFsaWRhdGVBbGdvcml0aG1zKCdjb250ZW50RW5jcnlwdGlvbkFsZ29yaXRobXMnLCBvcHRpb25zLmNvbnRlbnRFbmNyeXB0aW9uQWxnb3JpdGhtcyk7XG4gICAgaWYgKGtleU1hbmFnZW1lbnRBbGdvcml0aG1zICYmICFrZXlNYW5hZ2VtZW50QWxnb3JpdGhtcy5oYXMoYWxnKSkge1xuICAgICAgICB0aHJvdyBuZXcgSk9TRUFsZ05vdEFsbG93ZWQoJ1wiYWxnXCIgKEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciBub3QgYWxsb3dlZCcpO1xuICAgIH1cbiAgICBpZiAoY29udGVudEVuY3J5cHRpb25BbGdvcml0aG1zICYmICFjb250ZW50RW5jcnlwdGlvbkFsZ29yaXRobXMuaGFzKGVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpPU0VBbGdOb3RBbGxvd2VkKCdcImVuY1wiIChFbmNyeXB0aW9uIEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciBub3QgYWxsb3dlZCcpO1xuICAgIH1cbiAgICBsZXQgZW5jcnlwdGVkS2V5O1xuICAgIGlmIChqd2UuZW5jcnlwdGVkX2tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuY3J5cHRlZEtleSA9IGJhc2U2NHVybChqd2UuZW5jcnlwdGVkX2tleSk7XG4gICAgfVxuICAgIGxldCByZXNvbHZlZEtleSA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IGF3YWl0IGtleShwYXJzZWRQcm90LCBqd2UpO1xuICAgICAgICByZXNvbHZlZEtleSA9IHRydWU7XG4gICAgfVxuICAgIGxldCBjZWs7XG4gICAgdHJ5IHtcbiAgICAgICAgY2VrID0gYXdhaXQgZGVjcnlwdEtleU1hbmFnZW1lbnQoYWxnLCBrZXksIGVuY3J5cHRlZEtleSwgam9zZUhlYWRlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvciB8fCBlcnIgaW5zdGFuY2VvZiBKV0VJbnZhbGlkIHx8IGVyciBpbnN0YW5jZW9mIEpPU0VOb3RTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjZWsgPSBnZW5lcmF0ZUNlayhlbmMpO1xuICAgIH1cbiAgICBjb25zdCBpdiA9IGJhc2U2NHVybChqd2UuaXYpO1xuICAgIGNvbnN0IHRhZyA9IGJhc2U2NHVybChqd2UudGFnKTtcbiAgICBjb25zdCBwcm90ZWN0ZWRIZWFkZXIgPSBlbmNvZGVyLmVuY29kZSgoX2EgPSBqd2UucHJvdGVjdGVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyk7XG4gICAgbGV0IGFkZGl0aW9uYWxEYXRhO1xuICAgIGlmIChqd2UuYWFkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWRkaXRpb25hbERhdGEgPSBjb25jYXQocHJvdGVjdGVkSGVhZGVyLCBlbmNvZGVyLmVuY29kZSgnLicpLCBlbmNvZGVyLmVuY29kZShqd2UuYWFkKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhZGRpdGlvbmFsRGF0YSA9IHByb3RlY3RlZEhlYWRlcjtcbiAgICB9XG4gICAgbGV0IHBsYWludGV4dCA9IGF3YWl0IGRlY3J5cHQoZW5jLCBjZWssIGJhc2U2NHVybChqd2UuY2lwaGVydGV4dCksIGl2LCB0YWcsIGFkZGl0aW9uYWxEYXRhKTtcbiAgICBpZiAoam9zZUhlYWRlci56aXAgPT09ICdERUYnKSB7XG4gICAgICAgIHBsYWludGV4dCA9IGF3YWl0ICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmluZmxhdGVSYXcpIHx8IGluZmxhdGUpKHBsYWludGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGxhaW50ZXh0IH07XG4gICAgaWYgKGp3ZS5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQucHJvdGVjdGVkSGVhZGVyID0gcGFyc2VkUHJvdDtcbiAgICB9XG4gICAgaWYgKGp3ZS5hYWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQuYWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhID0gYmFzZTY0dXJsKGp3ZS5hYWQpO1xuICAgIH1cbiAgICBpZiAoandlLnVucHJvdGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnNoYXJlZFVucHJvdGVjdGVkSGVhZGVyID0gandlLnVucHJvdGVjdGVkO1xuICAgIH1cbiAgICBpZiAoandlLmhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC51bnByb3RlY3RlZEhlYWRlciA9IGp3ZS5oZWFkZXI7XG4gICAgfVxuICAgIGlmIChyZXNvbHZlZEtleSkge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgZW5jb2RlIGFzIGJhc2U2NHVybCB9IGZyb20gJy4uLy4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzJztcbmltcG9ydCBlbmNyeXB0IGZyb20gJy4uLy4uL3J1bnRpbWUvZW5jcnlwdC5qcyc7XG5pbXBvcnQgeyBkZWZsYXRlIH0gZnJvbSAnLi4vLi4vcnVudGltZS96bGliLmpzJztcbmltcG9ydCBnZW5lcmF0ZUl2IGZyb20gJy4uLy4uL2xpYi9pdi5qcyc7XG5pbXBvcnQgZW5jcnlwdEtleU1hbmFnZW1lbnQgZnJvbSAnLi4vLi4vbGliL2VuY3J5cHRfa2V5X21hbmFnZW1lbnQuanMnO1xuaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCwgSldFSW52YWxpZCB9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCBpc0Rpc2pvaW50IGZyb20gJy4uLy4uL2xpYi9pc19kaXNqb2ludC5qcyc7XG5pbXBvcnQgeyBlbmNvZGVyLCBkZWNvZGVyLCBjb25jYXQgfSBmcm9tICcuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmltcG9ydCB2YWxpZGF0ZUNyaXQgZnJvbSAnLi4vLi4vbGliL3ZhbGlkYXRlX2NyaXQuanMnO1xuZXhwb3J0IGNvbnN0IHVucHJvdGVjdGVkID0gU3ltYm9sKCk7XG5leHBvcnQgY2xhc3MgRmxhdHRlbmVkRW5jcnlwdCB7XG4gICAgY29uc3RydWN0b3IocGxhaW50ZXh0KSB7XG4gICAgICAgIGlmICghKHBsYWludGV4dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwbGFpbnRleHQgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGxhaW50ZXh0ID0gcGxhaW50ZXh0O1xuICAgIH1cbiAgICBzZXRLZXlNYW5hZ2VtZW50UGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIGlmICh0aGlzLl9rZXlNYW5hZ2VtZW50UGFyYW1ldGVycykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9rZXlNYW5hZ2VtZW50UGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldFByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlciA9IHByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFNoYXJlZFVucHJvdGVjdGVkSGVhZGVyKHNoYXJlZFVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaGFyZWRVbnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0U2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaGFyZWRVbnByb3RlY3RlZEhlYWRlciA9IHNoYXJlZFVucHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0VW5wcm90ZWN0ZWRIZWFkZXIodW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRVbnByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyID0gdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRBZGRpdGlvbmFsQXV0aGVudGljYXRlZERhdGEoYWFkKSB7XG4gICAgICAgIHRoaXMuX2FhZCA9IGFhZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldENvbnRlbnRFbmNyeXB0aW9uS2V5KGNlaykge1xuICAgICAgICBpZiAodGhpcy5fY2VrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRDb250ZW50RW5jcnlwdGlvbktleSBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NlayA9IGNlaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEluaXRpYWxpemF0aW9uVmVjdG9yKGl2KSB7XG4gICAgICAgIGlmICh0aGlzLl9pdikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pdiA9IGl2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgZW5jcnlwdChrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgJiYgIXRoaXMuX3VucHJvdGVjdGVkSGVhZGVyICYmICF0aGlzLl9zaGFyZWRVbnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ2VpdGhlciBzZXRQcm90ZWN0ZWRIZWFkZXIsIHNldFVucHJvdGVjdGVkSGVhZGVyLCBvciBzaGFyZWRVbnByb3RlY3RlZEhlYWRlciBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgI2VuY3J5cHQoKScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNEaXNqb2ludCh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyLCB0aGlzLl9zaGFyZWRVbnByb3RlY3RlZEhlYWRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgUHJvdGVjdGVkLCBKV0UgU2hhcmVkIFVucHJvdGVjdGVkIGFuZCBKV0UgUGVyLVJlY2lwaWVudCBIZWFkZXIgUGFyYW1ldGVyIG5hbWVzIG11c3QgYmUgZGlzam9pbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAgICAgLi4udGhpcy5fcHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICAgICAgLi4udGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAuLi50aGlzLl9zaGFyZWRVbnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgfTtcbiAgICAgICAgdmFsaWRhdGVDcml0KEpXRUludmFsaWQsIG5ldyBNYXAoKSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyaXQsIHRoaXMuX3Byb3RlY3RlZEhlYWRlciwgam9zZUhlYWRlcik7XG4gICAgICAgIGlmIChqb3NlSGVhZGVyLnppcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Byb3RlY3RlZEhlYWRlciB8fCAhdGhpcy5fcHJvdGVjdGVkSGVhZGVyLnppcCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgXCJ6aXBcIiAoQ29tcHJlc3Npb24gQWxnb3JpdGhtKSBIZWFkZXIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoam9zZUhlYWRlci56aXAgIT09ICdERUYnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFsZywgZW5jIH0gPSBqb3NlSGVhZGVyO1xuICAgICAgICBpZiAodHlwZW9mIGFsZyAhPT0gJ3N0cmluZycgfHwgIWFsZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBcImFsZ1wiIChBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbWlzc2luZyBvciBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlbmMgIT09ICdzdHJpbmcnIHx8ICFlbmMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgXCJlbmNcIiAoRW5jcnlwdGlvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbWlzc2luZyBvciBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVuY3J5cHRlZEtleTtcbiAgICAgICAgaWYgKGFsZyA9PT0gJ2RpcicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRDb250ZW50RW5jcnlwdGlvbktleSBjYW5ub3QgYmUgY2FsbGVkIHdoZW4gdXNpbmcgRGlyZWN0IEVuY3J5cHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGcgPT09ICdFQ0RILUVTJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nlaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldENvbnRlbnRFbmNyeXB0aW9uS2V5IGNhbm5vdCBiZSBjYWxsZWQgd2hlbiB1c2luZyBEaXJlY3QgS2V5IEFncmVlbWVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjZWs7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzO1xuICAgICAgICAgICAgKHsgY2VrLCBlbmNyeXB0ZWRLZXksIHBhcmFtZXRlcnMgfSA9IGF3YWl0IGVuY3J5cHRLZXlNYW5hZ2VtZW50KGFsZywgZW5jLCBrZXksIHRoaXMuX2NlaywgdGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMpKTtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgdW5wcm90ZWN0ZWQgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFVucHJvdGVjdGVkSGVhZGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3VucHJvdGVjdGVkSGVhZGVyLCAuLi5wYXJhbWV0ZXJzIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFByb3RlY3RlZEhlYWRlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlciA9IHsgLi4udGhpcy5fcHJvdGVjdGVkSGVhZGVyLCAuLi5wYXJhbWV0ZXJzIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXYgfHwgKHRoaXMuX2l2ID0gZ2VuZXJhdGVJdihlbmMpKTtcbiAgICAgICAgbGV0IGFkZGl0aW9uYWxEYXRhO1xuICAgICAgICBsZXQgcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICBsZXQgYWFkTWVtYmVyO1xuICAgICAgICBpZiAodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICBwcm90ZWN0ZWRIZWFkZXIgPSBlbmNvZGVyLmVuY29kZShiYXNlNjR1cmwoSlNPTi5zdHJpbmdpZnkodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvdGVjdGVkSGVhZGVyID0gZW5jb2Rlci5lbmNvZGUoJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hYWQpIHtcbiAgICAgICAgICAgIGFhZE1lbWJlciA9IGJhc2U2NHVybCh0aGlzLl9hYWQpO1xuICAgICAgICAgICAgYWRkaXRpb25hbERhdGEgPSBjb25jYXQocHJvdGVjdGVkSGVhZGVyLCBlbmNvZGVyLmVuY29kZSgnLicpLCBlbmNvZGVyLmVuY29kZShhYWRNZW1iZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFkZGl0aW9uYWxEYXRhID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjaXBoZXJ0ZXh0O1xuICAgICAgICBsZXQgdGFnO1xuICAgICAgICBpZiAoam9zZUhlYWRlci56aXAgPT09ICdERUYnKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZsYXRlZCA9IGF3YWl0ICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRlZmxhdGVSYXcpIHx8IGRlZmxhdGUpKHRoaXMuX3BsYWludGV4dCk7XG4gICAgICAgICAgICAoeyBjaXBoZXJ0ZXh0LCB0YWcgfSA9IGF3YWl0IGVuY3J5cHQoZW5jLCBkZWZsYXRlZCwgY2VrLCB0aGlzLl9pdiwgYWRkaXRpb25hbERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgICh7IGNpcGhlcnRleHQsIHRhZyB9ID0gYXdhaXQgZW5jcnlwdChlbmMsIHRoaXMuX3BsYWludGV4dCwgY2VrLCB0aGlzLl9pdiwgYWRkaXRpb25hbERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBqd2UgPSB7XG4gICAgICAgICAgICBjaXBoZXJ0ZXh0OiBiYXNlNjR1cmwoY2lwaGVydGV4dCksXG4gICAgICAgICAgICBpdjogYmFzZTY0dXJsKHRoaXMuX2l2KSxcbiAgICAgICAgICAgIHRhZzogYmFzZTY0dXJsKHRhZyksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlbmNyeXB0ZWRLZXkpIHtcbiAgICAgICAgICAgIGp3ZS5lbmNyeXB0ZWRfa2V5ID0gYmFzZTY0dXJsKGVuY3J5cHRlZEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFhZE1lbWJlcikge1xuICAgICAgICAgICAgandlLmFhZCA9IGFhZE1lbWJlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICBqd2UucHJvdGVjdGVkID0gZGVjb2Rlci5kZWNvZGUocHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIGp3ZS51bnByb3RlY3RlZCA9IHRoaXMuX3NoYXJlZFVucHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl91bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgandlLmhlYWRlciA9IHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqd2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZmxhdHRlbmVkRGVjcnlwdCB9IGZyb20gJy4uL2ZsYXR0ZW5lZC9kZWNyeXB0LmpzJztcbmltcG9ydCB7IEpXRURlY3J5cHRpb25GYWlsZWQsIEpXRUludmFsaWQgfSBmcm9tICcuLi8uLi91dGlsL2Vycm9ycy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vLi4vbGliL2lzX29iamVjdC5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhbERlY3J5cHQoandlLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGp3ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0dlbmVyYWwgSldFIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShqd2UucmVjaXBpZW50cykgfHwgIWp3ZS5yZWNpcGllbnRzLmV2ZXJ5KGlzT2JqZWN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFJlY2lwaWVudHMgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoIWp3ZS5yZWNpcGllbnRzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFJlY2lwaWVudHMgaGFzIG5vIG1lbWJlcnMnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCByZWNpcGllbnQgb2YgandlLnJlY2lwaWVudHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbGF0dGVuZWREZWNyeXB0KHtcbiAgICAgICAgICAgICAgICBhYWQ6IGp3ZS5hYWQsXG4gICAgICAgICAgICAgICAgY2lwaGVydGV4dDogandlLmNpcGhlcnRleHQsXG4gICAgICAgICAgICAgICAgZW5jcnlwdGVkX2tleTogcmVjaXBpZW50LmVuY3J5cHRlZF9rZXksXG4gICAgICAgICAgICAgICAgaGVhZGVyOiByZWNpcGllbnQuaGVhZGVyLFxuICAgICAgICAgICAgICAgIGl2OiBqd2UuaXYsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkOiBqd2UucHJvdGVjdGVkLFxuICAgICAgICAgICAgICAgIHRhZzogandlLnRhZyxcbiAgICAgICAgICAgICAgICB1bnByb3RlY3RlZDogandlLnVucHJvdGVjdGVkLFxuICAgICAgICAgICAgfSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgSldFRGVjcnlwdGlvbkZhaWxlZCgpO1xufVxuIiwiaW1wb3J0IHsgRmxhdHRlbmVkRW5jcnlwdCwgdW5wcm90ZWN0ZWQgfSBmcm9tICcuLi9mbGF0dGVuZWQvZW5jcnlwdC5qcyc7XG5pbXBvcnQgeyBKV0VJbnZhbGlkIH0gZnJvbSAnLi4vLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IGdlbmVyYXRlQ2VrIGZyb20gJy4uLy4uL2xpYi9jZWsuanMnO1xuaW1wb3J0IGlzRGlzam9pbnQgZnJvbSAnLi4vLi4vbGliL2lzX2Rpc2pvaW50LmpzJztcbmltcG9ydCBlbmNyeXB0S2V5TWFuYWdlbWVudCBmcm9tICcuLi8uLi9saWIvZW5jcnlwdF9rZXlfbWFuYWdlbWVudC5qcyc7XG5pbXBvcnQgeyBlbmNvZGUgYXMgYmFzZTY0dXJsIH0gZnJvbSAnLi4vLi4vcnVudGltZS9iYXNlNjR1cmwuanMnO1xuaW1wb3J0IHZhbGlkYXRlQ3JpdCBmcm9tICcuLi8uLi9saWIvdmFsaWRhdGVfY3JpdC5qcyc7XG5jbGFzcyBJbmRpdmlkdWFsUmVjaXBpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihlbmMsIGtleSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnBhcmVudCA9IGVuYztcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIHNldFVucHJvdGVjdGVkSGVhZGVyKHVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLnVucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRVbnByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5wcm90ZWN0ZWRIZWFkZXIgPSB1bnByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZFJlY2lwaWVudCguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5hZGRSZWNpcGllbnQoLi4uYXJncyk7XG4gICAgfVxuICAgIGVuY3J5cHQoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZW5jcnlwdCguLi5hcmdzKTtcbiAgICB9XG4gICAgZG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBHZW5lcmFsRW5jcnlwdCB7XG4gICAgY29uc3RydWN0b3IocGxhaW50ZXh0KSB7XG4gICAgICAgIHRoaXMuX3JlY2lwaWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcGxhaW50ZXh0ID0gcGxhaW50ZXh0O1xuICAgIH1cbiAgICBhZGRSZWNpcGllbnQoa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlY2lwaWVudCA9IG5ldyBJbmRpdmlkdWFsUmVjaXBpZW50KHRoaXMsIGtleSwgeyBjcml0OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3JpdCB9KTtcbiAgICAgICAgdGhpcy5fcmVjaXBpZW50cy5wdXNoKHJlY2lwaWVudCk7XG4gICAgICAgIHJldHVybiByZWNpcGllbnQ7XG4gICAgfVxuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0U2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIoc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRTaGFyZWRVbnByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyID0gc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRBZGRpdGlvbmFsQXV0aGVudGljYXRlZERhdGEoYWFkKSB7XG4gICAgICAgIHRoaXMuX2FhZCA9IGFhZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIGVuY3J5cHQob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNpcGllbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ2F0IGxlYXN0IG9uZSByZWNpcGllbnQgbXVzdCBiZSBhZGRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSB7IGRlZmxhdGVSYXc6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZWZsYXRlUmF3IH07XG4gICAgICAgIGlmICh0aGlzLl9yZWNpcGllbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgW3JlY2lwaWVudF0gPSB0aGlzLl9yZWNpcGllbnRzO1xuICAgICAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gYXdhaXQgbmV3IEZsYXR0ZW5lZEVuY3J5cHQodGhpcy5fcGxhaW50ZXh0KVxuICAgICAgICAgICAgICAgIC5zZXRBZGRpdGlvbmFsQXV0aGVudGljYXRlZERhdGEodGhpcy5fYWFkKVxuICAgICAgICAgICAgICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIodGhpcy5fcHJvdGVjdGVkSGVhZGVyKVxuICAgICAgICAgICAgICAgIC5zZXRTaGFyZWRVbnByb3RlY3RlZEhlYWRlcih0aGlzLl91bnByb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAuc2V0VW5wcm90ZWN0ZWRIZWFkZXIocmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyKVxuICAgICAgICAgICAgICAgIC5lbmNyeXB0KHJlY2lwaWVudC5rZXksIHsgLi4ucmVjaXBpZW50Lm9wdGlvbnMsIC4uLm9wdGlvbnMgfSk7XG4gICAgICAgICAgICBsZXQgandlID0ge1xuICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IGZsYXR0ZW5lZC5jaXBoZXJ0ZXh0LFxuICAgICAgICAgICAgICAgIGl2OiBmbGF0dGVuZWQuaXYsXG4gICAgICAgICAgICAgICAgcmVjaXBpZW50czogW3t9XSxcbiAgICAgICAgICAgICAgICB0YWc6IGZsYXR0ZW5lZC50YWcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5hYWQpXG4gICAgICAgICAgICAgICAgandlLmFhZCA9IGZsYXR0ZW5lZC5hYWQ7XG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkLnByb3RlY3RlZClcbiAgICAgICAgICAgICAgICBqd2UucHJvdGVjdGVkID0gZmxhdHRlbmVkLnByb3RlY3RlZDtcbiAgICAgICAgICAgIGlmIChmbGF0dGVuZWQudW5wcm90ZWN0ZWQpXG4gICAgICAgICAgICAgICAgandlLnVucHJvdGVjdGVkID0gZmxhdHRlbmVkLnVucHJvdGVjdGVkO1xuICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5lbmNyeXB0ZWRfa2V5KVxuICAgICAgICAgICAgICAgIGp3ZS5yZWNpcGllbnRzWzBdLmVuY3J5cHRlZF9rZXkgPSBmbGF0dGVuZWQuZW5jcnlwdGVkX2tleTtcbiAgICAgICAgICAgIGlmIChmbGF0dGVuZWQuaGVhZGVyKVxuICAgICAgICAgICAgICAgIGp3ZS5yZWNpcGllbnRzWzBdLmhlYWRlciA9IGZsYXR0ZW5lZC5oZWFkZXI7XG4gICAgICAgICAgICByZXR1cm4gandlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbmM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcmVjaXBpZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcmVjaXBpZW50ID0gdGhpcy5fcmVjaXBpZW50c1tpXTtcbiAgICAgICAgICAgIGlmICghaXNEaXNqb2ludCh0aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyLCByZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBQcm90ZWN0ZWQsIEpXRSBTaGFyZWQgVW5wcm90ZWN0ZWQgYW5kIEpXRSBQZXItUmVjaXBpZW50IEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgam9zZUhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgLi4ucmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgYWxnIH0gPSBqb3NlSGVhZGVyO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbGcgIT09ICdzdHJpbmcnIHx8ICFhbGcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFwiYWxnXCIgKEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciBtaXNzaW5nIG9yIGludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGcgPT09ICdkaXInIHx8IGFsZyA9PT0gJ0VDREgtRVMnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ1wiZGlyXCIgYW5kIFwiRUNESC1FU1wiIGFsZyBtYXkgb25seSBiZSB1c2VkIHdpdGggYSBzaW5nbGUgcmVjaXBpZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIuZW5jICE9PSAnc3RyaW5nJyB8fCAham9zZUhlYWRlci5lbmMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFwiZW5jXCIgKEVuY3J5cHRpb24gQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG1pc3Npbmcgb3IgaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbmMpIHtcbiAgICAgICAgICAgICAgICBlbmMgPSBqb3NlSGVhZGVyLmVuYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuYyAhPT0gam9zZUhlYWRlci5lbmMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFwiZW5jXCIgKEVuY3J5cHRpb24gQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgdGhlIHNhbWUgZm9yIGFsbCByZWNpcGllbnRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxpZGF0ZUNyaXQoSldFSW52YWxpZCwgbmV3IE1hcCgpLCByZWNpcGllbnQub3B0aW9ucy5jcml0LCB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIGpvc2VIZWFkZXIpO1xuICAgICAgICAgICAgaWYgKGpvc2VIZWFkZXIuemlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Byb3RlY3RlZEhlYWRlciB8fCAhdGhpcy5fcHJvdGVjdGVkSGVhZGVyLnppcCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZCgnSldFIFwiemlwXCIgKENvbXByZXNzaW9uIEFsZ29yaXRobSkgSGVhZGVyIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZWsgPSBnZW5lcmF0ZUNlayhlbmMpO1xuICAgICAgICBsZXQgandlID0ge1xuICAgICAgICAgICAgY2lwaGVydGV4dDogJycsXG4gICAgICAgICAgICBpdjogJycsXG4gICAgICAgICAgICByZWNpcGllbnRzOiBbXSxcbiAgICAgICAgICAgIHRhZzogJycsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcmVjaXBpZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcmVjaXBpZW50ID0gdGhpcy5fcmVjaXBpZW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgICAgICAgICAgandlLnJlY2lwaWVudHMucHVzaCh0YXJnZXQpO1xuICAgICAgICAgICAgY29uc3Qgam9zZUhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgLi4ucmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHAyYyA9IGpvc2VIZWFkZXIuYWxnLnN0YXJ0c1dpdGgoJ1BCRVMyJykgPyAyMDQ4ICsgaSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gYXdhaXQgbmV3IEZsYXR0ZW5lZEVuY3J5cHQodGhpcy5fcGxhaW50ZXh0KVxuICAgICAgICAgICAgICAgICAgICAuc2V0QWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhKHRoaXMuX2FhZClcbiAgICAgICAgICAgICAgICAgICAgLnNldENvbnRlbnRFbmNyeXB0aW9uS2V5KGNlaylcbiAgICAgICAgICAgICAgICAgICAgLnNldFByb3RlY3RlZEhlYWRlcih0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRTaGFyZWRVbnByb3RlY3RlZEhlYWRlcih0aGlzLl91bnByb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgLnNldFVucHJvdGVjdGVkSGVhZGVyKHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgLnNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKHsgcDJjIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lbmNyeXB0KHJlY2lwaWVudC5rZXksIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVjaXBpZW50Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIFt1bnByb3RlY3RlZF06IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgandlLmNpcGhlcnRleHQgPSBmbGF0dGVuZWQuY2lwaGVydGV4dDtcbiAgICAgICAgICAgICAgICBqd2UuaXYgPSBmbGF0dGVuZWQuaXY7XG4gICAgICAgICAgICAgICAgandlLnRhZyA9IGZsYXR0ZW5lZC50YWc7XG4gICAgICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5hYWQpXG4gICAgICAgICAgICAgICAgICAgIGp3ZS5hYWQgPSBmbGF0dGVuZWQuYWFkO1xuICAgICAgICAgICAgICAgIGlmIChmbGF0dGVuZWQucHJvdGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICBqd2UucHJvdGVjdGVkID0gZmxhdHRlbmVkLnByb3RlY3RlZDtcbiAgICAgICAgICAgICAgICBpZiAoZmxhdHRlbmVkLnVucHJvdGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICBqd2UudW5wcm90ZWN0ZWQgPSBmbGF0dGVuZWQudW5wcm90ZWN0ZWQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmVuY3J5cHRlZF9rZXkgPSBmbGF0dGVuZWQuZW5jcnlwdGVkX2tleTtcbiAgICAgICAgICAgICAgICBpZiAoZmxhdHRlbmVkLmhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmhlYWRlciA9IGZsYXR0ZW5lZC5oZWFkZXI7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGVuY3J5cHRlZEtleSwgcGFyYW1ldGVycyB9ID0gYXdhaXQgZW5jcnlwdEtleU1hbmFnZW1lbnQoKChfYSA9IHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFsZykgfHxcbiAgICAgICAgICAgICAgICAoKF9iID0gdGhpcy5fcHJvdGVjdGVkSGVhZGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYWxnKSB8fFxuICAgICAgICAgICAgICAgICgoX2MgPSB0aGlzLl91bnByb3RlY3RlZEhlYWRlcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFsZyksIGVuYywgcmVjaXBpZW50LmtleSwgY2VrLCB7IHAyYyB9KTtcbiAgICAgICAgICAgIHRhcmdldC5lbmNyeXB0ZWRfa2V5ID0gYmFzZTY0dXJsKGVuY3J5cHRlZEtleSk7XG4gICAgICAgICAgICBpZiAocmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyIHx8IHBhcmFtZXRlcnMpXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmhlYWRlciA9IHsgLi4ucmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyLCAuLi5wYXJhbWV0ZXJzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpbXBvcnRKV0sgfSBmcm9tICcuLi9rZXkvaW1wb3J0LmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi9saWIvaXNfb2JqZWN0LmpzJztcbmltcG9ydCB7IEpXU0ludmFsaWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gRW1iZWRkZWRKV0socHJvdGVjdGVkSGVhZGVyLCB0b2tlbikge1xuICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgIC4uLnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgLi4udG9rZW4gPT09IG51bGwgfHwgdG9rZW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRva2VuLmhlYWRlcixcbiAgICB9O1xuICAgIGlmICghaXNPYmplY3Qoam9zZUhlYWRlci5qd2spKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdcImp3a1wiIChKU09OIFdlYiBLZXkpIEhlYWRlciBQYXJhbWV0ZXIgbXVzdCBiZSBhIEpTT04gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGF3YWl0IGltcG9ydEpXSyh7IC4uLmpvc2VIZWFkZXIuandrLCBleHQ6IHRydWUgfSwgam9zZUhlYWRlci5hbGcsIHRydWUpO1xuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGtleS50eXBlICE9PSAncHVibGljJykge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnXCJqd2tcIiAoSlNPTiBXZWIgS2V5KSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgYSBwdWJsaWMga2V5Jyk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG4iLCJpbXBvcnQgZGlnZXN0IGZyb20gJy4uL3J1bnRpbWUvZGlnZXN0LmpzJztcbmltcG9ydCB7IGVuY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuLi9ydW50aW1lL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyBKT1NFTm90U3VwcG9ydGVkLCBKV0tJbnZhbGlkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgZW5jb2RlciB9IGZyb20gJy4uL2xpYi9idWZmZXJfdXRpbHMuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL2xpYi9pc19vYmplY3QuanMnO1xuY29uc3QgY2hlY2sgPSAodmFsdWUsIGRlc2NyaXB0aW9uKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgIXZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0tJbnZhbGlkKGAke2Rlc2NyaXB0aW9ufSBtaXNzaW5nIG9yIGludmFsaWRgKTtcbiAgICB9XG59O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGN1bGF0ZUp3a1RodW1icHJpbnQoandrLCBkaWdlc3RBbGdvcml0aG0pIHtcbiAgICBpZiAoIWlzT2JqZWN0KGp3aykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSldLIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGRpZ2VzdEFsZ29yaXRobSAhPT0gbnVsbCAmJiBkaWdlc3RBbGdvcml0aG0gIT09IHZvaWQgMCA/IGRpZ2VzdEFsZ29yaXRobSA6IChkaWdlc3RBbGdvcml0aG0gPSAnc2hhMjU2Jyk7XG4gICAgaWYgKGRpZ2VzdEFsZ29yaXRobSAhPT0gJ3NoYTI1NicgJiZcbiAgICAgICAgZGlnZXN0QWxnb3JpdGhtICE9PSAnc2hhMzg0JyAmJlxuICAgICAgICBkaWdlc3RBbGdvcml0aG0gIT09ICdzaGE1MTInKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RpZ2VzdEFsZ29yaXRobSBtdXN0IG9uZSBvZiBcInNoYTI1NlwiLCBcInNoYTM4NFwiLCBvciBcInNoYTUxMlwiJyk7XG4gICAgfVxuICAgIGxldCBjb21wb25lbnRzO1xuICAgIHN3aXRjaCAoandrLmt0eSkge1xuICAgICAgICBjYXNlICdFQyc6XG4gICAgICAgICAgICBjaGVjayhqd2suY3J2LCAnXCJjcnZcIiAoQ3VydmUpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY2hlY2soandrLngsICdcInhcIiAoWCBDb29yZGluYXRlKSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNoZWNrKGp3ay55LCAnXCJ5XCIgKFkgQ29vcmRpbmF0ZSkgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjb21wb25lbnRzID0geyBjcnY6IGp3ay5jcnYsIGt0eTogandrLmt0eSwgeDogandrLngsIHk6IGp3ay55IH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnT0tQJzpcbiAgICAgICAgICAgIGNoZWNrKGp3ay5jcnYsICdcImNydlwiIChTdWJ0eXBlIG9mIEtleSBQYWlyKSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNoZWNrKGp3ay54LCAnXCJ4XCIgKFB1YmxpYyBLZXkpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IHsgY3J2OiBqd2suY3J2LCBrdHk6IGp3ay5rdHksIHg6IGp3ay54IH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUlNBJzpcbiAgICAgICAgICAgIGNoZWNrKGp3ay5lLCAnXCJlXCIgKEV4cG9uZW50KSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNoZWNrKGp3ay5uLCAnXCJuXCIgKE1vZHVsdXMpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IHsgZTogandrLmUsIGt0eTogandrLmt0eSwgbjogandrLm4gfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvY3QnOlxuICAgICAgICAgICAgY2hlY2soandrLmssICdcImtcIiAoS2V5IFZhbHVlKSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMgPSB7IGs6IGp3ay5rLCBrdHk6IGp3ay5rdHkgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ1wia3R5XCIgKEtleSBUeXBlKSBQYXJhbWV0ZXIgbWlzc2luZyBvciB1bnN1cHBvcnRlZCcpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50cykpO1xuICAgIHJldHVybiBiYXNlNjR1cmwoYXdhaXQgZGlnZXN0KGRpZ2VzdEFsZ29yaXRobSwgZGF0YSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGN1bGF0ZUp3a1RodW1icHJpbnRVcmkoandrLCBkaWdlc3RBbGdvcml0aG0pIHtcbiAgICBkaWdlc3RBbGdvcml0aG0gIT09IG51bGwgJiYgZGlnZXN0QWxnb3JpdGhtICE9PSB2b2lkIDAgPyBkaWdlc3RBbGdvcml0aG0gOiAoZGlnZXN0QWxnb3JpdGhtID0gJ3NoYTI1NicpO1xuICAgIGNvbnN0IHRodW1icHJpbnQgPSBhd2FpdCBjYWxjdWxhdGVKd2tUaHVtYnByaW50KGp3aywgZGlnZXN0QWxnb3JpdGhtKTtcbiAgICByZXR1cm4gYHVybjppZXRmOnBhcmFtczpvYXV0aDpqd2stdGh1bWJwcmludDpzaGEtJHtkaWdlc3RBbGdvcml0aG0uc2xpY2UoLTMpfToke3RodW1icHJpbnR9YDtcbn1cbiIsImltcG9ydCB7IGltcG9ydEpXSyB9IGZyb20gJy4uL2tleS9pbXBvcnQuanMnO1xuaW1wb3J0IHsgSldLU0ludmFsaWQsIEpPU0VOb3RTdXBwb3J0ZWQsIEpXS1NOb01hdGNoaW5nS2V5LCBKV0tTTXVsdGlwbGVNYXRjaGluZ0tleXMsIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL2xpYi9pc19vYmplY3QuanMnO1xuZnVuY3Rpb24gZ2V0S3R5RnJvbUFsZyhhbGcpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBhbGcgPT09ICdzdHJpbmcnICYmIGFsZy5zbGljZSgwLCAyKSkge1xuICAgICAgICBjYXNlICdSUyc6XG4gICAgICAgIGNhc2UgJ1BTJzpcbiAgICAgICAgICAgIHJldHVybiAnUlNBJztcbiAgICAgICAgY2FzZSAnRVMnOlxuICAgICAgICAgICAgcmV0dXJuICdFQyc7XG4gICAgICAgIGNhc2UgJ0VkJzpcbiAgICAgICAgICAgIHJldHVybiAnT0tQJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBcImFsZ1wiIHZhbHVlIGZvciBhIEpTT04gV2ViIEtleSBTZXQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKV0tTTGlrZShqd2tzKSB7XG4gICAgcmV0dXJuIChqd2tzICYmXG4gICAgICAgIHR5cGVvZiBqd2tzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KGp3a3Mua2V5cykgJiZcbiAgICAgICAgandrcy5rZXlzLmV2ZXJ5KGlzSldLTGlrZSkpO1xufVxuZnVuY3Rpb24gaXNKV0tMaWtlKGtleSkge1xuICAgIHJldHVybiBpc09iamVjdChrZXkpO1xufVxuZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJ1Y3R1cmVkQ2xvbmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZShvYmopO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn1cbmV4cG9ydCBjbGFzcyBMb2NhbEpXS1NldCB7XG4gICAgY29uc3RydWN0b3Ioandrcykge1xuICAgICAgICB0aGlzLl9jYWNoZWQgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICBpZiAoIWlzSldLU0xpa2UoandrcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0tTSW52YWxpZCgnSlNPTiBXZWIgS2V5IFNldCBtYWxmb3JtZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9qd2tzID0gY2xvbmUoandrcyk7XG4gICAgfVxuICAgIGFzeW5jIGdldEtleShwcm90ZWN0ZWRIZWFkZXIsIHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHsgYWxnLCBraWQgfSA9IHsgLi4ucHJvdGVjdGVkSGVhZGVyLCAuLi50b2tlbiA9PT0gbnVsbCB8fCB0b2tlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdG9rZW4uaGVhZGVyIH07XG4gICAgICAgIGNvbnN0IGt0eSA9IGdldEt0eUZyb21BbGcoYWxnKTtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IHRoaXMuX2p3a3Mua2V5cy5maWx0ZXIoKGp3aykgPT4ge1xuICAgICAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IGt0eSA9PT0gandrLmt0eTtcbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUgJiYgdHlwZW9mIGtpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBraWQgPT09IGp3ay5raWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlICYmIHR5cGVvZiBqd2suYWxnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGFsZyA9PT0gandrLmFsZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUgJiYgdHlwZW9mIGp3ay51c2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLnVzZSA9PT0gJ3NpZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlICYmIEFycmF5LmlzQXJyYXkoandrLmtleV9vcHMpKSB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLmtleV9vcHMuaW5jbHVkZXMoJ3ZlcmlmeScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSAmJiBhbGcgPT09ICdFZERTQScpIHtcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2suY3J2ID09PSAnRWQyNTUxOScgfHwgandrLmNydiA9PT0gJ0VkNDQ4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2suY3J2ID09PSAnUC0yNTYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VTMjU2Syc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2suY3J2ID09PSAnc2VjcDI1NmsxJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdFUzM4NCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2suY3J2ID09PSAnUC0zODQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay5jcnYgPT09ICdQLTUyMSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyAwOiBqd2ssIGxlbmd0aCB9ID0gY2FuZGlkYXRlcztcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXS1NOb01hdGNoaW5nS2V5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBKV0tTTXVsdGlwbGVNYXRjaGluZ0tleXMoKTtcbiAgICAgICAgICAgIGNvbnN0IHsgX2NhY2hlZCB9ID0gdGhpcztcbiAgICAgICAgICAgIGVycm9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGFzeW5jIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBqd2sgb2YgY2FuZGlkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgYXdhaXQgaW1wb3J0V2l0aEFsZ0NhY2hlKF9jYWNoZWQsIGp3aywgYWxnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbXBvcnRXaXRoQWxnQ2FjaGUodGhpcy5fY2FjaGVkLCBqd2ssIGFsZyk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gaW1wb3J0V2l0aEFsZ0NhY2hlKGNhY2hlLCBqd2ssIGFsZykge1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChqd2spIHx8IGNhY2hlLnNldChqd2ssIHt9KS5nZXQoandrKTtcbiAgICBpZiAoY2FjaGVkW2FsZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBpbXBvcnRKV0soeyAuLi5qd2ssIGV4dDogdHJ1ZSB9LCBhbGcpO1xuICAgICAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBrZXkudHlwZSAhPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0tTSW52YWxpZCgnSlNPTiBXZWIgS2V5IFNldCBtZW1iZXJzIG11c3QgYmUgcHVibGljIGtleXMnKTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZWRbYWxnXSA9IGtleTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZFthbGddO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvY2FsSldLU2V0KGp3a3MpIHtcbiAgICBjb25zdCBzZXQgPSBuZXcgTG9jYWxKV0tTZXQoandrcyk7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChwcm90ZWN0ZWRIZWFkZXIsIHRva2VuKSB7XG4gICAgICAgIHJldHVybiBzZXQuZ2V0S2V5KHByb3RlY3RlZEhlYWRlciwgdG9rZW4pO1xuICAgIH07XG59XG4iLCJpbXBvcnQgZmV0Y2hKd2tzIGZyb20gJy4uL3J1bnRpbWUvZmV0Y2hfandrcy5qcyc7XG5pbXBvcnQgeyBpc0Nsb3VkZmxhcmVXb3JrZXJzIH0gZnJvbSAnLi4vcnVudGltZS9lbnYuanMnO1xuaW1wb3J0IHsgSldLU0ludmFsaWQsIEpXS1NOb01hdGNoaW5nS2V5IH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgaXNKV0tTTGlrZSwgTG9jYWxKV0tTZXQgfSBmcm9tICcuL2xvY2FsLmpzJztcbmNsYXNzIFJlbW90ZUpXS1NldCBleHRlbmRzIExvY2FsSldLU2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBrZXlzOiBbXSB9KTtcbiAgICAgICAgdGhpcy5fandrcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCEodXJsIGluc3RhbmNlb2YgVVJMKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndXJsIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVVJMJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXJsID0gbmV3IFVSTCh1cmwuaHJlZik7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7IGFnZW50OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWdlbnQsIGhlYWRlcnM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzIH07XG4gICAgICAgIHRoaXMuX3RpbWVvdXREdXJhdGlvbiA9XG4gICAgICAgICAgICB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50aW1lb3V0RHVyYXRpb24pID09PSAnbnVtYmVyJyA/IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50aW1lb3V0RHVyYXRpb24gOiA1MDAwO1xuICAgICAgICB0aGlzLl9jb29sZG93bkR1cmF0aW9uID1cbiAgICAgICAgICAgIHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvb2xkb3duRHVyYXRpb24pID09PSAnbnVtYmVyJyA/IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb29sZG93bkR1cmF0aW9uIDogMzAwMDA7XG4gICAgICAgIHRoaXMuX2NhY2hlTWF4QWdlID0gdHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FjaGVNYXhBZ2UpID09PSAnbnVtYmVyJyA/IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYWNoZU1heEFnZSA6IDYwMDAwMDtcbiAgICB9XG4gICAgY29vbGluZ0Rvd24oKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fandrc1RpbWVzdGFtcCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gRGF0ZS5ub3coKSA8IHRoaXMuX2p3a3NUaW1lc3RhbXAgKyB0aGlzLl9jb29sZG93bkR1cmF0aW9uXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIH1cbiAgICBmcmVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9qd2tzVGltZXN0YW1wID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBEYXRlLm5vdygpIDwgdGhpcy5fandrc1RpbWVzdGFtcCArIHRoaXMuX2NhY2hlTWF4QWdlXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBnZXRLZXkocHJvdGVjdGVkSGVhZGVyLCB0b2tlbikge1xuICAgICAgICBpZiAoIXRoaXMuX2p3a3MgfHwgIXRoaXMuZnJlc2goKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmdldEtleShwcm90ZWN0ZWRIZWFkZXIsIHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgSldLU05vTWF0Y2hpbmdLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb29saW5nRG93bigpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuZ2V0S2V5KHByb3RlY3RlZEhlYWRlciwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZWxvYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nRmV0Y2ggJiYgaXNDbG91ZGZsYXJlV29ya2VycygpKSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nRmV0Y2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGVuZGluZ0ZldGNoIHx8ICh0aGlzLl9wZW5kaW5nRmV0Y2ggPSBmZXRjaEp3a3ModGhpcy5fdXJsLCB0aGlzLl90aW1lb3V0RHVyYXRpb24sIHRoaXMuX29wdGlvbnMpXG4gICAgICAgICAgICAudGhlbigoanNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc0pXS1NMaWtlKGpzb24pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXS1NJbnZhbGlkKCdKU09OIFdlYiBLZXkgU2V0IG1hbGZvcm1lZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fandrcyA9IHsga2V5czoganNvbi5rZXlzIH07XG4gICAgICAgICAgICB0aGlzLl9qd2tzVGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdGZXRjaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nRmV0Y2ggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0pKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGVuZGluZ0ZldGNoO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVKV0tTZXQodXJsLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc2V0ID0gbmV3IFJlbW90ZUpXS1NldCh1cmwsIG9wdGlvbnMpO1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAocHJvdGVjdGVkSGVhZGVyLCB0b2tlbikge1xuICAgICAgICByZXR1cm4gc2V0LmdldEtleShwcm90ZWN0ZWRIZWFkZXIsIHRva2VuKTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgRmxhdHRlbmVkU2lnbiB9IGZyb20gJy4uL2ZsYXR0ZW5lZC9zaWduLmpzJztcbmV4cG9ydCBjbGFzcyBDb21wYWN0U2lnbiB7XG4gICAgY29uc3RydWN0b3IocGF5bG9hZCkge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQgPSBuZXcgRmxhdHRlbmVkU2lnbihwYXlsb2FkKTtcbiAgICB9XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQuc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBzaWduKGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBqd3MgPSBhd2FpdCB0aGlzLl9mbGF0dGVuZWQuc2lnbihrZXksIG9wdGlvbnMpO1xuICAgICAgICBpZiAoandzLnBheWxvYWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndXNlIHRoZSBmbGF0dGVuZWQgbW9kdWxlIGZvciBjcmVhdGluZyBKV1Mgd2l0aCBiNjQ6IGZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2p3cy5wcm90ZWN0ZWR9LiR7andzLnBheWxvYWR9LiR7andzLnNpZ25hdHVyZX1gO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGZsYXR0ZW5lZFZlcmlmeSB9IGZyb20gJy4uL2ZsYXR0ZW5lZC92ZXJpZnkuanMnO1xuaW1wb3J0IHsgSldTSW52YWxpZCB9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCB7IGRlY29kZXIgfSBmcm9tICcuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wYWN0VmVyaWZ5KGp3cywga2V5LCBvcHRpb25zKSB7XG4gICAgaWYgKGp3cyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgandzID0gZGVjb2Rlci5kZWNvZGUoandzKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqd3MgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdDb21wYWN0IEpXUyBtdXN0IGJlIGEgc3RyaW5nIG9yIFVpbnQ4QXJyYXknKTtcbiAgICB9XG4gICAgY29uc3QgeyAwOiBwcm90ZWN0ZWRIZWFkZXIsIDE6IHBheWxvYWQsIDI6IHNpZ25hdHVyZSwgbGVuZ3RoIH0gPSBqd3Muc3BsaXQoJy4nKTtcbiAgICBpZiAobGVuZ3RoICE9PSAzKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdJbnZhbGlkIENvbXBhY3QgSldTJyk7XG4gICAgfVxuICAgIGNvbnN0IHZlcmlmaWVkID0gYXdhaXQgZmxhdHRlbmVkVmVyaWZ5KHsgcGF5bG9hZCwgcHJvdGVjdGVkOiBwcm90ZWN0ZWRIZWFkZXIsIHNpZ25hdHVyZSB9LCBrZXksIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZDogdmVyaWZpZWQucGF5bG9hZCwgcHJvdGVjdGVkSGVhZGVyOiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogdmVyaWZpZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBlbmNvZGUgYXMgYmFzZTY0dXJsIH0gZnJvbSAnLi4vLi4vcnVudGltZS9iYXNlNjR1cmwuanMnO1xuaW1wb3J0IHNpZ24gZnJvbSAnLi4vLi4vcnVudGltZS9zaWduLmpzJztcbmltcG9ydCBpc0Rpc2pvaW50IGZyb20gJy4uLy4uL2xpYi9pc19kaXNqb2ludC5qcyc7XG5pbXBvcnQgeyBKV1NJbnZhbGlkIH0gZnJvbSAnLi4vLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgZW5jb2RlciwgZGVjb2RlciwgY29uY2F0IH0gZnJvbSAnLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgY2hlY2tLZXlUeXBlIGZyb20gJy4uLy4uL2xpYi9jaGVja19rZXlfdHlwZS5qcyc7XG5pbXBvcnQgdmFsaWRhdGVDcml0IGZyb20gJy4uLy4uL2xpYi92YWxpZGF0ZV9jcml0LmpzJztcbmV4cG9ydCBjbGFzcyBGbGF0dGVuZWRTaWduIHtcbiAgICBjb25zdHJ1Y3RvcihwYXlsb2FkKSB7XG4gICAgICAgIGlmICghKHBheWxvYWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF5bG9hZCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB9XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5fcHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRQcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRVbnByb3RlY3RlZEhlYWRlcih1bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldFVucHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIgPSB1bnByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJvdGVjdGVkSGVhZGVyICYmICF0aGlzLl91bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ2VpdGhlciBzZXRQcm90ZWN0ZWRIZWFkZXIgb3Igc2V0VW5wcm90ZWN0ZWRIZWFkZXIgbXVzdCBiZSBjYWxsZWQgYmVmb3JlICNzaWduKCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRGlzam9pbnQodGhpcy5fcHJvdGVjdGVkSGVhZGVyLCB0aGlzLl91bnByb3RlY3RlZEhlYWRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdKV1MgUHJvdGVjdGVkIGFuZCBKV1MgVW5wcm90ZWN0ZWQgSGVhZGVyIFBhcmFtZXRlciBuYW1lcyBtdXN0IGJlIGRpc2pvaW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgam9zZUhlYWRlciA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgIC4uLnRoaXMuX3VucHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBleHRlbnNpb25zID0gdmFsaWRhdGVDcml0KEpXU0ludmFsaWQsIG5ldyBNYXAoW1snYjY0JywgdHJ1ZV1dKSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyaXQsIHRoaXMuX3Byb3RlY3RlZEhlYWRlciwgam9zZUhlYWRlcik7XG4gICAgICAgIGxldCBiNjQgPSB0cnVlO1xuICAgICAgICBpZiAoZXh0ZW5zaW9ucy5oYXMoJ2I2NCcpKSB7XG4gICAgICAgICAgICBiNjQgPSB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIuYjY0O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiNjQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdUaGUgXCJiNjRcIiAoYmFzZTY0dXJsLWVuY29kZSBwYXlsb2FkKSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBhbGcgfSA9IGpvc2VIZWFkZXI7XG4gICAgICAgIGlmICh0eXBlb2YgYWxnICE9PSAnc3RyaW5nJyB8fCAhYWxnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFwiYWxnXCIgKEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciBtaXNzaW5nIG9yIGludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja0tleVR5cGUoYWxnLCBrZXksICdzaWduJyk7XG4gICAgICAgIGxldCBwYXlsb2FkID0gdGhpcy5fcGF5bG9hZDtcbiAgICAgICAgaWYgKGI2NCkge1xuICAgICAgICAgICAgcGF5bG9hZCA9IGVuY29kZXIuZW5jb2RlKGJhc2U2NHVybChwYXlsb2FkKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgcHJvdGVjdGVkSGVhZGVyID0gZW5jb2Rlci5lbmNvZGUoYmFzZTY0dXJsKEpTT04uc3RyaW5naWZ5KHRoaXMuX3Byb3RlY3RlZEhlYWRlcikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb3RlY3RlZEhlYWRlciA9IGVuY29kZXIuZW5jb2RlKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gY29uY2F0KHByb3RlY3RlZEhlYWRlciwgZW5jb2Rlci5lbmNvZGUoJy4nKSwgcGF5bG9hZCk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNpZ24oYWxnLCBrZXksIGRhdGEpO1xuICAgICAgICBjb25zdCBqd3MgPSB7XG4gICAgICAgICAgICBzaWduYXR1cmU6IGJhc2U2NHVybChzaWduYXR1cmUpLFxuICAgICAgICAgICAgcGF5bG9hZDogJycsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChiNjQpIHtcbiAgICAgICAgICAgIGp3cy5wYXlsb2FkID0gZGVjb2Rlci5kZWNvZGUocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICBqd3MuaGVhZGVyID0gdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgandzLnByb3RlY3RlZCA9IGRlY29kZXIuZGVjb2RlKHByb3RlY3RlZEhlYWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3cztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBkZWNvZGUgYXMgYmFzZTY0dXJsIH0gZnJvbSAnLi4vLi4vcnVudGltZS9iYXNlNjR1cmwuanMnO1xuaW1wb3J0IHZlcmlmeSBmcm9tICcuLi8uLi9ydW50aW1lL3ZlcmlmeS5qcyc7XG5pbXBvcnQgeyBKT1NFQWxnTm90QWxsb3dlZCwgSldTSW52YWxpZCwgSldTU2lnbmF0dXJlVmVyaWZpY2F0aW9uRmFpbGVkIH0gZnJvbSAnLi4vLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgY29uY2F0LCBlbmNvZGVyLCBkZWNvZGVyIH0gZnJvbSAnLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgaXNEaXNqb2ludCBmcm9tICcuLi8uLi9saWIvaXNfZGlzam9pbnQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uLy4uL2xpYi9pc19vYmplY3QuanMnO1xuaW1wb3J0IGNoZWNrS2V5VHlwZSBmcm9tICcuLi8uLi9saWIvY2hlY2tfa2V5X3R5cGUuanMnO1xuaW1wb3J0IHZhbGlkYXRlQ3JpdCBmcm9tICcuLi8uLi9saWIvdmFsaWRhdGVfY3JpdC5qcyc7XG5pbXBvcnQgdmFsaWRhdGVBbGdvcml0aG1zIGZyb20gJy4uLy4uL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmbGF0dGVuZWRWZXJpZnkoandzLCBrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFpc09iamVjdChqd3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdGbGF0dGVuZWQgSldTIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmIChqd3MucHJvdGVjdGVkID09PSB1bmRlZmluZWQgJiYgandzLmhlYWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdGbGF0dGVuZWQgSldTIG11c3QgaGF2ZSBlaXRoZXIgb2YgdGhlIFwicHJvdGVjdGVkXCIgb3IgXCJoZWFkZXJcIiBtZW1iZXJzJyk7XG4gICAgfVxuICAgIGlmIChqd3MucHJvdGVjdGVkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGp3cy5wcm90ZWN0ZWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdKV1MgUHJvdGVjdGVkIEhlYWRlciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoandzLnBheWxvYWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFBheWxvYWQgbWlzc2luZycpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGp3cy5zaWduYXR1cmUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdKV1MgU2lnbmF0dXJlIG1pc3Npbmcgb3IgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3cy5oZWFkZXIgIT09IHVuZGVmaW5lZCAmJiAhaXNPYmplY3QoandzLmhlYWRlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBVbnByb3RlY3RlZCBIZWFkZXIgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgbGV0IHBhcnNlZFByb3QgPSB7fTtcbiAgICBpZiAoandzLnByb3RlY3RlZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcHJvdGVjdGVkSGVhZGVyID0gYmFzZTY0dXJsKGp3cy5wcm90ZWN0ZWQpO1xuICAgICAgICAgICAgcGFyc2VkUHJvdCA9IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUocHJvdGVjdGVkSGVhZGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9iKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBIZWFkZXIgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNEaXNqb2ludChwYXJzZWRQcm90LCBqd3MuaGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBhbmQgSldTIFVucHJvdGVjdGVkIEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgIH1cbiAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAuLi5wYXJzZWRQcm90LFxuICAgICAgICAuLi5qd3MuaGVhZGVyLFxuICAgIH07XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHZhbGlkYXRlQ3JpdChKV1NJbnZhbGlkLCBuZXcgTWFwKFtbJ2I2NCcsIHRydWVdXSksIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcml0LCBwYXJzZWRQcm90LCBqb3NlSGVhZGVyKTtcbiAgICBsZXQgYjY0ID0gdHJ1ZTtcbiAgICBpZiAoZXh0ZW5zaW9ucy5oYXMoJ2I2NCcpKSB7XG4gICAgICAgIGI2NCA9IHBhcnNlZFByb3QuYjY0O1xuICAgICAgICBpZiAodHlwZW9mIGI2NCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnVGhlIFwiYjY0XCIgKGJhc2U2NHVybC1lbmNvZGUgcGF5bG9hZCkgSGVhZGVyIFBhcmFtZXRlciBtdXN0IGJlIGEgYm9vbGVhbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsgYWxnIH0gPSBqb3NlSGVhZGVyO1xuICAgIGlmICh0eXBlb2YgYWxnICE9PSAnc3RyaW5nJyB8fCAhYWxnKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdKV1MgXCJhbGdcIiAoQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG1pc3Npbmcgb3IgaW52YWxpZCcpO1xuICAgIH1cbiAgICBjb25zdCBhbGdvcml0aG1zID0gb3B0aW9ucyAmJiB2YWxpZGF0ZUFsZ29yaXRobXMoJ2FsZ29yaXRobXMnLCBvcHRpb25zLmFsZ29yaXRobXMpO1xuICAgIGlmIChhbGdvcml0aG1zICYmICFhbGdvcml0aG1zLmhhcyhhbGcpKSB7XG4gICAgICAgIHRocm93IG5ldyBKT1NFQWxnTm90QWxsb3dlZCgnXCJhbGdcIiAoQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuICAgIGlmIChiNjQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBqd3MucGF5bG9hZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdKV1MgUGF5bG9hZCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGp3cy5wYXlsb2FkICE9PSAnc3RyaW5nJyAmJiAhKGp3cy5wYXlsb2FkIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBQYXlsb2FkIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gVWludDhBcnJheSBpbnN0YW5jZScpO1xuICAgIH1cbiAgICBsZXQgcmVzb2x2ZWRLZXkgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBrZXkgPSBhd2FpdCBrZXkocGFyc2VkUHJvdCwgandzKTtcbiAgICAgICAgcmVzb2x2ZWRLZXkgPSB0cnVlO1xuICAgIH1cbiAgICBjaGVja0tleVR5cGUoYWxnLCBrZXksICd2ZXJpZnknKTtcbiAgICBjb25zdCBkYXRhID0gY29uY2F0KGVuY29kZXIuZW5jb2RlKChfYSA9IGp3cy5wcm90ZWN0ZWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKSwgZW5jb2Rlci5lbmNvZGUoJy4nKSwgdHlwZW9mIGp3cy5wYXlsb2FkID09PSAnc3RyaW5nJyA/IGVuY29kZXIuZW5jb2RlKGp3cy5wYXlsb2FkKSA6IGp3cy5wYXlsb2FkKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBiYXNlNjR1cmwoandzLnNpZ25hdHVyZSk7XG4gICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCB2ZXJpZnkoYWxnLCBrZXksIHNpZ25hdHVyZSwgZGF0YSk7XG4gICAgaWYgKCF2ZXJpZmllZCkge1xuICAgICAgICB0aHJvdyBuZXcgSldTU2lnbmF0dXJlVmVyaWZpY2F0aW9uRmFpbGVkKCk7XG4gICAgfVxuICAgIGxldCBwYXlsb2FkO1xuICAgIGlmIChiNjQpIHtcbiAgICAgICAgcGF5bG9hZCA9IGJhc2U2NHVybChqd3MucGF5bG9hZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBqd3MucGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF5bG9hZCA9IGVuY29kZXIuZW5jb2RlKGp3cy5wYXlsb2FkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBheWxvYWQgPSBqd3MucGF5bG9hZDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0geyBwYXlsb2FkIH07XG4gICAgaWYgKGp3cy5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQucHJvdGVjdGVkSGVhZGVyID0gcGFyc2VkUHJvdDtcbiAgICB9XG4gICAgaWYgKGp3cy5oZWFkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQudW5wcm90ZWN0ZWRIZWFkZXIgPSBqd3MuaGVhZGVyO1xuICAgIH1cbiAgICBpZiAocmVzb2x2ZWRLZXkpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IEZsYXR0ZW5lZFNpZ24gfSBmcm9tICcuLi9mbGF0dGVuZWQvc2lnbi5qcyc7XG5pbXBvcnQgeyBKV1NJbnZhbGlkIH0gZnJvbSAnLi4vLi4vdXRpbC9lcnJvcnMuanMnO1xuY2xhc3MgSW5kaXZpZHVhbFNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnLCBrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBzaWc7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRVbnByb3RlY3RlZEhlYWRlcih1bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy51bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0VW5wcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVucHJvdGVjdGVkSGVhZGVyID0gdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRTaWduYXR1cmUoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuYWRkU2lnbmF0dXJlKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBzaWduKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnNpZ24oLi4uYXJncyk7XG4gICAgfVxuICAgIGRvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgR2VuZXJhbFNpZ24ge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fc2lnbmF0dXJlcyA9IFtdO1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB9XG4gICAgYWRkU2lnbmF0dXJlKGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBuZXcgSW5kaXZpZHVhbFNpZ25hdHVyZSh0aGlzLCBrZXksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zaWduYXR1cmVzLnB1c2goc2lnbmF0dXJlKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZTtcbiAgICB9XG4gICAgYXN5bmMgc2lnbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zaWduYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ2F0IGxlYXN0IG9uZSBzaWduYXR1cmUgbXVzdCBiZSBhZGRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGp3cyA9IHtcbiAgICAgICAgICAgIHNpZ25hdHVyZXM6IFtdLFxuICAgICAgICAgICAgcGF5bG9hZDogJycsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2lnbmF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gdGhpcy5fc2lnbmF0dXJlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGZsYXR0ZW5lZCA9IG5ldyBGbGF0dGVuZWRTaWduKHRoaXMuX3BheWxvYWQpO1xuICAgICAgICAgICAgZmxhdHRlbmVkLnNldFByb3RlY3RlZEhlYWRlcihzaWduYXR1cmUucHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgICAgIGZsYXR0ZW5lZC5zZXRVbnByb3RlY3RlZEhlYWRlcihzaWduYXR1cmUudW5wcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICAgICAgY29uc3QgeyBwYXlsb2FkLCAuLi5yZXN0IH0gPSBhd2FpdCBmbGF0dGVuZWQuc2lnbihzaWduYXR1cmUua2V5LCBzaWduYXR1cmUub3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGp3cy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGp3cy5wYXlsb2FkICE9PSBwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ2luY29uc2lzdGVudCB1c2Ugb2YgSldTIFVuZW5jb2RlZCBQYXlsb2FkIE9wdGlvbiAoUkZDNzc5NyknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGp3cy5zaWduYXR1cmVzLnB1c2gocmVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3cztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBmbGF0dGVuZWRWZXJpZnkgfSBmcm9tICcuLi9mbGF0dGVuZWQvdmVyaWZ5LmpzJztcbmltcG9ydCB7IEpXU0ludmFsaWQsIEpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCB9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi8uLi9saWIvaXNfb2JqZWN0LmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmFsVmVyaWZ5KGp3cywga2V5LCBvcHRpb25zKSB7XG4gICAgaWYgKCFpc09iamVjdChqd3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdHZW5lcmFsIEpXUyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoandzLnNpZ25hdHVyZXMpIHx8ICFqd3Muc2lnbmF0dXJlcy5ldmVyeShpc09iamVjdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBTaWduYXR1cmVzIG1pc3Npbmcgb3IgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBzaWduYXR1cmUgb2YgandzLnNpZ25hdHVyZXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbGF0dGVuZWRWZXJpZnkoe1xuICAgICAgICAgICAgICAgIGhlYWRlcjogc2lnbmF0dXJlLmhlYWRlcixcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBqd3MucGF5bG9hZCxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQ6IHNpZ25hdHVyZS5wcm90ZWN0ZWQsXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUuc2lnbmF0dXJlLFxuICAgICAgICAgICAgfSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgSldTU2lnbmF0dXJlVmVyaWZpY2F0aW9uRmFpbGVkKCk7XG59XG4iLCJpbXBvcnQgeyBjb21wYWN0RGVjcnlwdCB9IGZyb20gJy4uL2p3ZS9jb21wYWN0L2RlY3J5cHQuanMnO1xuaW1wb3J0IGp3dFBheWxvYWQgZnJvbSAnLi4vbGliL2p3dF9jbGFpbXNfc2V0LmpzJztcbmltcG9ydCB7IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBqd3REZWNyeXB0KGp3dCwga2V5LCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgY29tcGFjdERlY3J5cHQoand0LCBrZXksIG9wdGlvbnMpO1xuICAgIGNvbnN0IHBheWxvYWQgPSBqd3RQYXlsb2FkKGRlY3J5cHRlZC5wcm90ZWN0ZWRIZWFkZXIsIGRlY3J5cHRlZC5wbGFpbnRleHQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHsgcHJvdGVjdGVkSGVhZGVyIH0gPSBkZWNyeXB0ZWQ7XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5pc3MgIT09IHVuZGVmaW5lZCAmJiBwcm90ZWN0ZWRIZWFkZXIuaXNzICE9PSBwYXlsb2FkLmlzcykge1xuICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdyZXBsaWNhdGVkIFwiaXNzXCIgY2xhaW0gaGVhZGVyIHBhcmFtZXRlciBtaXNtYXRjaCcsICdpc3MnLCAnbWlzbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5zdWIgIT09IHVuZGVmaW5lZCAmJiBwcm90ZWN0ZWRIZWFkZXIuc3ViICE9PSBwYXlsb2FkLnN1Yikge1xuICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdyZXBsaWNhdGVkIFwic3ViXCIgY2xhaW0gaGVhZGVyIHBhcmFtZXRlciBtaXNtYXRjaCcsICdzdWInLCAnbWlzbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5hdWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBKU09OLnN0cmluZ2lmeShwcm90ZWN0ZWRIZWFkZXIuYXVkKSAhPT0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZC5hdWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3JlcGxpY2F0ZWQgXCJhdWRcIiBjbGFpbSBoZWFkZXIgcGFyYW1ldGVyIG1pc21hdGNoJywgJ2F1ZCcsICdtaXNtYXRjaCcpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQsIHByb3RlY3RlZEhlYWRlciB9O1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwga2V5OiBkZWNyeXB0ZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBDb21wYWN0RW5jcnlwdCB9IGZyb20gJy4uL2p3ZS9jb21wYWN0L2VuY3J5cHQuanMnO1xuaW1wb3J0IHsgZW5jb2RlciB9IGZyb20gJy4uL2xpYi9idWZmZXJfdXRpbHMuanMnO1xuaW1wb3J0IHsgUHJvZHVjZUpXVCB9IGZyb20gJy4vcHJvZHVjZS5qcyc7XG5leHBvcnQgY2xhc3MgRW5jcnlwdEpXVCBleHRlbmRzIFByb2R1Y2VKV1Qge1xuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgICAgICBpZiAodGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKSB7XG4gICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldENvbnRlbnRFbmNyeXB0aW9uS2V5IGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2VrID0gY2VrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IoaXYpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRJbml0aWFsaXphdGlvblZlY3RvciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2l2ID0gaXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXBsaWNhdGVJc3N1ZXJBc0hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwbGljYXRlSXNzdWVyQXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVwbGljYXRlU3ViamVjdEFzSGVhZGVyKCkge1xuICAgICAgICB0aGlzLl9yZXBsaWNhdGVTdWJqZWN0QXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlciA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBlbmMgPSBuZXcgQ29tcGFjdEVuY3J5cHQoZW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodGhpcy5fcGF5bG9hZCkpKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlcGxpY2F0ZUlzc3VlckFzSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlciwgaXNzOiB0aGlzLl9wYXlsb2FkLmlzcyB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZXBsaWNhdGVTdWJqZWN0QXNIZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlciA9IHsgLi4udGhpcy5fcHJvdGVjdGVkSGVhZGVyLCBzdWI6IHRoaXMuX3BheWxvYWQuc3ViIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlcGxpY2F0ZUF1ZGllbmNlQXNIZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlciA9IHsgLi4udGhpcy5fcHJvdGVjdGVkSGVhZGVyLCBhdWQ6IHRoaXMuX3BheWxvYWQuYXVkIH07XG4gICAgICAgIH1cbiAgICAgICAgZW5jLnNldFByb3RlY3RlZEhlYWRlcih0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICBpZiAodGhpcy5faXYpIHtcbiAgICAgICAgICAgIGVuYy5zZXRJbml0aWFsaXphdGlvblZlY3Rvcih0aGlzLl9pdik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2Nlaykge1xuICAgICAgICAgICAgZW5jLnNldENvbnRlbnRFbmNyeXB0aW9uS2V5KHRoaXMuX2Nlayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2tleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBlbmMuc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnModGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmMuZW5jcnlwdChrZXksIG9wdGlvbnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCBlcG9jaCBmcm9tICcuLi9saWIvZXBvY2guanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL2xpYi9pc19vYmplY3QuanMnO1xuaW1wb3J0IHNlY3MgZnJvbSAnLi4vbGliL3NlY3MuanMnO1xuZXhwb3J0IGNsYXNzIFByb2R1Y2VKV1Qge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwYXlsb2FkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSldUIENsYWltcyBTZXQgTVVTVCBiZSBhbiBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB9XG4gICAgc2V0SXNzdWVyKGlzc3Vlcikge1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBpc3M6IGlzc3VlciB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0U3ViamVjdChzdWJqZWN0KSB7XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIHN1Yjogc3ViamVjdCB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0QXVkaWVuY2UoYXVkaWVuY2UpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgYXVkOiBhdWRpZW5jZSB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SnRpKGp3dElkKSB7XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGp0aTogand0SWQgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldE5vdEJlZm9yZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgbmJmOiBpbnB1dCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgbmJmOiBlcG9jaChuZXcgRGF0ZSgpKSArIHNlY3MoaW5wdXQpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEV4cGlyYXRpb25UaW1lKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBleHA6IGlucHV0IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBleHA6IGVwb2NoKG5ldyBEYXRlKCkpICsgc2VjcyhpbnB1dCkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SXNzdWVkQXQoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGlhdDogZXBvY2gobmV3IERhdGUoKSkgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGlhdDogaW5wdXQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21wYWN0U2lnbiB9IGZyb20gJy4uL2p3cy9jb21wYWN0L3NpZ24uanMnO1xuaW1wb3J0IHsgSldUSW52YWxpZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCB7IGVuY29kZXIgfSBmcm9tICcuLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmltcG9ydCB7IFByb2R1Y2VKV1QgfSBmcm9tICcuL3Byb2R1Y2UuanMnO1xuZXhwb3J0IGNsYXNzIFNpZ25KV1QgZXh0ZW5kcyBQcm9kdWNlSldUIHtcbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlciA9IHByb3RlY3RlZEhlYWRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgc2lnID0gbmV3IENvbXBhY3RTaWduKGVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHRoaXMuX3BheWxvYWQpKSk7XG4gICAgICAgIHNpZy5zZXRQcm90ZWN0ZWRIZWFkZXIodGhpcy5fcHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoKF9hID0gdGhpcy5fcHJvdGVjdGVkSGVhZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JpdCkgJiZcbiAgICAgICAgICAgIHRoaXMuX3Byb3RlY3RlZEhlYWRlci5jcml0LmluY2x1ZGVzKCdiNjQnKSAmJlxuICAgICAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyLmI2NCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdKV1RzIE1VU1QgTk9UIHVzZSB1bmVuY29kZWQgcGF5bG9hZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWcuc2lnbihrZXksIG9wdGlvbnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIGJhc2U2NHVybCBmcm9tICcuLi9ydW50aW1lL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVyIH0gZnJvbSAnLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgeyBKV1RJbnZhbGlkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IGp3dFBheWxvYWQgZnJvbSAnLi4vbGliL2p3dF9jbGFpbXNfc2V0LmpzJztcbmltcG9ydCB7IFByb2R1Y2VKV1QgfSBmcm9tICcuL3Byb2R1Y2UuanMnO1xuZXhwb3J0IGNsYXNzIFVuc2VjdXJlZEpXVCBleHRlbmRzIFByb2R1Y2VKV1Qge1xuICAgIGVuY29kZSgpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gYmFzZTY0dXJsLmVuY29kZShKU09OLnN0cmluZ2lmeSh7IGFsZzogJ25vbmUnIH0pKTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGJhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodGhpcy5fcGF5bG9hZCkpO1xuICAgICAgICByZXR1cm4gYCR7aGVhZGVyfS4ke3BheWxvYWR9LmA7XG4gICAgfVxuICAgIHN0YXRpYyBkZWNvZGUoand0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygand0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXVEludmFsaWQoJ1Vuc2VjdXJlZCBKV1QgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgMDogZW5jb2RlZEhlYWRlciwgMTogZW5jb2RlZFBheWxvYWQsIDI6IHNpZ25hdHVyZSwgbGVuZ3RoIH0gPSBqd3Quc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKGxlbmd0aCAhPT0gMyB8fCBzaWduYXR1cmUgIT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldUSW52YWxpZCgnSW52YWxpZCBVbnNlY3VyZWQgSldUJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhlYWRlcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhlYWRlciA9IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUoYmFzZTY0dXJsLmRlY29kZShlbmNvZGVkSGVhZGVyKSkpO1xuICAgICAgICAgICAgaWYgKGhlYWRlci5hbGcgIT09ICdub25lJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdJbnZhbGlkIFVuc2VjdXJlZCBKV1QnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gand0UGF5bG9hZChoZWFkZXIsIGJhc2U2NHVybC5kZWNvZGUoZW5jb2RlZFBheWxvYWQpLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHsgcGF5bG9hZCwgaGVhZGVyIH07XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY29tcGFjdFZlcmlmeSB9IGZyb20gJy4uL2p3cy9jb21wYWN0L3ZlcmlmeS5qcyc7XG5pbXBvcnQgand0UGF5bG9hZCBmcm9tICcuLi9saWIvand0X2NsYWltc19zZXQuanMnO1xuaW1wb3J0IHsgSldUSW52YWxpZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBqd3RWZXJpZnkoand0LCBrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCBjb21wYWN0VmVyaWZ5KGp3dCwga2V5LCBvcHRpb25zKTtcbiAgICBpZiAoKChfYSA9IHZlcmlmaWVkLnByb3RlY3RlZEhlYWRlci5jcml0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMoJ2I2NCcpKSAmJiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIuYjY0ID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgSldUSW52YWxpZCgnSldUcyBNVVNUIE5PVCB1c2UgdW5lbmNvZGVkIHBheWxvYWQnKTtcbiAgICB9XG4gICAgY29uc3QgcGF5bG9hZCA9IGp3dFBheWxvYWQodmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyLCB2ZXJpZmllZC5wYXlsb2FkLCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQsIHByb3RlY3RlZEhlYWRlcjogdmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyIH07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXk6IHZlcmlmaWVkLmtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgdG9TUEtJIGFzIGV4cG9ydFB1YmxpYyB9IGZyb20gJy4uL3J1bnRpbWUvYXNuMS5qcyc7XG5pbXBvcnQgeyB0b1BLQ1M4IGFzIGV4cG9ydFByaXZhdGUgfSBmcm9tICcuLi9ydW50aW1lL2FzbjEuanMnO1xuaW1wb3J0IGtleVRvSldLIGZyb20gJy4uL3J1bnRpbWUva2V5X3RvX2p3ay5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0U1BLSShrZXkpIHtcbiAgICByZXR1cm4gZXhwb3J0UHVibGljKGtleSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0UEtDUzgoa2V5KSB7XG4gICAgcmV0dXJuIGV4cG9ydFByaXZhdGUoa2V5KTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHBvcnRKV0soa2V5KSB7XG4gICAgcmV0dXJuIGtleVRvSldLKGtleSk7XG59XG4iLCJpbXBvcnQgeyBnZW5lcmF0ZUtleVBhaXIgYXMgZ2VuZXJhdGUgfSBmcm9tICcuLi9ydW50aW1lL2dlbmVyYXRlLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoYWxnLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlKGFsZywgb3B0aW9ucyk7XG59XG4iLCJpbXBvcnQgeyBnZW5lcmF0ZVNlY3JldCBhcyBnZW5lcmF0ZSB9IGZyb20gJy4uL3J1bnRpbWUvZ2VuZXJhdGUuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlU2VjcmV0KGFsZywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZW5lcmF0ZShhbGcsIG9wdGlvbnMpO1xufVxuIiwiaW1wb3J0IHsgZGVjb2RlIGFzIGRlY29kZUJhc2U2NFVSTCB9IGZyb20gJy4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzJztcbmltcG9ydCB7IGZyb21TUEtJLCBmcm9tUEtDUzgsIGZyb21YNTA5IH0gZnJvbSAnLi4vcnVudGltZS9hc24xLmpzJztcbmltcG9ydCBhc0tleU9iamVjdCBmcm9tICcuLi9ydW50aW1lL2p3a190b19rZXkuanMnO1xuaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi9saWIvaXNfb2JqZWN0LmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRTUEtJKHNwa2ksIGFsZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygc3BraSAhPT0gJ3N0cmluZycgfHwgc3BraS5pbmRleE9mKCctLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLScpICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic3BraVwiIG11c3QgYmUgU1BLSSBmb3JtYXR0ZWQgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tU1BLSShzcGtpLCBhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcG9ydFg1MDkoeDUwOSwgYWxnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiB4NTA5ICE9PSAnc3RyaW5nJyB8fCB4NTA5LmluZGV4T2YoJy0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLScpICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wieDUwOVwiIG11c3QgYmUgWC41MDkgZm9ybWF0dGVkIHN0cmluZycpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbVg1MDkoeDUwOSwgYWxnLCBvcHRpb25zKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRQS0NTOChwa2NzOCwgYWxnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBwa2NzOCAhPT0gJ3N0cmluZycgfHwgcGtjczguaW5kZXhPZignLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tJykgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJwa2NzOFwiIG11c3QgYmUgUEtDUyM4IGZvcm1hdHRlZCBzdHJpbmcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21QS0NTOChwa2NzOCwgYWxnLCBvcHRpb25zKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRKV0soandrLCBhbGcsIG9jdEFzS2V5T2JqZWN0KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghaXNPYmplY3QoandrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKV0sgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgYWxnIHx8IChhbGcgPSBqd2suYWxnKTtcbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnb2N0JzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgandrLmsgIT09ICdzdHJpbmcnIHx8ICFqd2suaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgXCJrXCIgKEtleSBWYWx1ZSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvY3RBc0tleU9iamVjdCAhPT0gbnVsbCAmJiBvY3RBc0tleU9iamVjdCAhPT0gdm9pZCAwID8gb2N0QXNLZXlPYmplY3QgOiAob2N0QXNLZXlPYmplY3QgPSBqd2suZXh0ICE9PSB0cnVlKTtcbiAgICAgICAgICAgIGlmIChvY3RBc0tleU9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhc0tleU9iamVjdCh7IC4uLmp3aywgYWxnLCBleHQ6IChfYSA9IGp3ay5leHQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZUJhc2U2NFVSTChqd2suayk7XG4gICAgICAgIGNhc2UgJ1JTQSc6XG4gICAgICAgICAgICBpZiAoandrLm90aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ1JTQSBKV0sgXCJvdGhcIiAoT3RoZXIgUHJpbWVzIEluZm8pIFBhcmFtZXRlciB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VDJzpcbiAgICAgICAgY2FzZSAnT0tQJzpcbiAgICAgICAgICAgIHJldHVybiBhc0tleU9iamVjdCh7IC4uLmp3aywgYWxnIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIFwia3R5XCIgKEtleSBUeXBlKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgZW5jcnlwdCBmcm9tICcuLi9ydW50aW1lL2VuY3J5cHQuanMnO1xuaW1wb3J0IGRlY3J5cHQgZnJvbSAnLi4vcnVudGltZS9kZWNyeXB0LmpzJztcbmltcG9ydCBnZW5lcmF0ZUl2IGZyb20gJy4vaXYuanMnO1xuaW1wb3J0IHsgZW5jb2RlIGFzIGJhc2U2NHVybCB9IGZyb20gJy4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3cmFwKGFsZywga2V5LCBjZWssIGl2KSB7XG4gICAgY29uc3QgandlQWxnb3JpdGhtID0gYWxnLnNsaWNlKDAsIDcpO1xuICAgIGl2IHx8IChpdiA9IGdlbmVyYXRlSXYoandlQWxnb3JpdGhtKSk7XG4gICAgY29uc3QgeyBjaXBoZXJ0ZXh0OiBlbmNyeXB0ZWRLZXksIHRhZyB9ID0gYXdhaXQgZW5jcnlwdChqd2VBbGdvcml0aG0sIGNlaywga2V5LCBpdiwgbmV3IFVpbnQ4QXJyYXkoMCkpO1xuICAgIHJldHVybiB7IGVuY3J5cHRlZEtleSwgaXY6IGJhc2U2NHVybChpdiksIHRhZzogYmFzZTY0dXJsKHRhZykgfTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1bndyYXAoYWxnLCBrZXksIGVuY3J5cHRlZEtleSwgaXYsIHRhZykge1xuICAgIGNvbnN0IGp3ZUFsZ29yaXRobSA9IGFsZy5zbGljZSgwLCA3KTtcbiAgICByZXR1cm4gZGVjcnlwdChqd2VBbGdvcml0aG0sIGtleSwgZW5jcnlwdGVkS2V5LCBpdiwgdGFnLCBuZXcgVWludDhBcnJheSgwKSk7XG59XG4iLCJpbXBvcnQgZGlnZXN0IGZyb20gJy4uL3J1bnRpbWUvZGlnZXN0LmpzJztcbmV4cG9ydCBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5leHBvcnQgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuY29uc3QgTUFYX0lOVDMyID0gMiAqKiAzMjtcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoLi4uYnVmZmVycykge1xuICAgIGNvbnN0IHNpemUgPSBidWZmZXJzLnJlZHVjZSgoYWNjLCB7IGxlbmd0aCB9KSA9PiBhY2MgKyBsZW5ndGgsIDApO1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIGxldCBpID0gMDtcbiAgICBidWZmZXJzLmZvckVhY2goKGJ1ZmZlcikgPT4ge1xuICAgICAgICBidWYuc2V0KGJ1ZmZlciwgaSk7XG4gICAgICAgIGkgKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9KTtcbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHAycyhhbGcsIHAyc0lucHV0KSB7XG4gICAgcmV0dXJuIGNvbmNhdChlbmNvZGVyLmVuY29kZShhbGcpLCBuZXcgVWludDhBcnJheShbMF0pLCBwMnNJbnB1dCk7XG59XG5mdW5jdGlvbiB3cml0ZVVJbnQzMkJFKGJ1ZiwgdmFsdWUsIG9mZnNldCkge1xuICAgIGlmICh2YWx1ZSA8IDAgfHwgdmFsdWUgPj0gTUFYX0lOVDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB2YWx1ZSBtdXN0IGJlID49IDAgYW5kIDw9ICR7TUFYX0lOVDMyIC0gMX0uIFJlY2VpdmVkICR7dmFsdWV9YCk7XG4gICAgfVxuICAgIGJ1Zi5zZXQoW3ZhbHVlID4+PiAyNCwgdmFsdWUgPj4+IDE2LCB2YWx1ZSA+Pj4gOCwgdmFsdWUgJiAweGZmXSwgb2Zmc2V0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1aW50NjRiZSh2YWx1ZSkge1xuICAgIGNvbnN0IGhpZ2ggPSBNYXRoLmZsb29yKHZhbHVlIC8gTUFYX0lOVDMyKTtcbiAgICBjb25zdCBsb3cgPSB2YWx1ZSAlIE1BWF9JTlQzMjtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGlnaCwgMCk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIGxvdywgNCk7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1aW50MzJiZSh2YWx1ZSkge1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCB2YWx1ZSk7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGhBbmRJbnB1dChpbnB1dCkge1xuICAgIHJldHVybiBjb25jYXQodWludDMyYmUoaW5wdXQubGVuZ3RoKSwgaW5wdXQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmNhdEtkZihzZWNyZXQsIGJpdHMsIHZhbHVlKSB7XG4gICAgY29uc3QgaXRlcmF0aW9ucyA9IE1hdGguY2VpbCgoYml0cyA+PiAzKSAvIDMyKTtcbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShpdGVyYXRpb25zICogMzIpO1xuICAgIGZvciAobGV0IGl0ZXIgPSAwOyBpdGVyIDwgaXRlcmF0aW9uczsgaXRlcisrKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQgKyBzZWNyZXQubGVuZ3RoICsgdmFsdWUubGVuZ3RoKTtcbiAgICAgICAgYnVmLnNldCh1aW50MzJiZShpdGVyICsgMSkpO1xuICAgICAgICBidWYuc2V0KHNlY3JldCwgNCk7XG4gICAgICAgIGJ1Zi5zZXQodmFsdWUsIDQgKyBzZWNyZXQubGVuZ3RoKTtcbiAgICAgICAgcmVzLnNldChhd2FpdCBkaWdlc3QoJ3NoYTI1NicsIGJ1ZiksIGl0ZXIgKiAzMik7XG4gICAgfVxuICAgIHJldHVybiByZXMuc2xpY2UoMCwgYml0cyA+PiAzKTtcbn1cbiIsImltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5pbXBvcnQgcmFuZG9tIGZyb20gJy4uL3J1bnRpbWUvcmFuZG9tLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBiaXRMZW5ndGgoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgICAgICByZXR1cm4gMTI4O1xuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgICAgIHJldHVybiAxOTI7XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAyNTY7XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICAgICAgcmV0dXJuIDM4NDtcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gNTEyO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoYFVuc3VwcG9ydGVkIEpXRSBBbGdvcml0aG06ICR7YWxnfWApO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IChhbGcpID0+IHJhbmRvbShuZXcgVWludDhBcnJheShiaXRMZW5ndGgoYWxnKSA+PiAzKSk7XG4iLCJpbXBvcnQgeyBKV0VJbnZhbGlkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgYml0TGVuZ3RoIH0gZnJvbSAnLi9pdi5qcyc7XG5jb25zdCBjaGVja0l2TGVuZ3RoID0gKGVuYywgaXYpID0+IHtcbiAgICBpZiAoaXYubGVuZ3RoIDw8IDMgIT09IGJpdExlbmd0aChlbmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdJbnZhbGlkIEluaXRpYWxpemF0aW9uIFZlY3RvciBsZW5ndGgnKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tJdkxlbmd0aDtcbiIsImltcG9ydCB7IHdpdGhBbGcgYXMgaW52YWxpZEtleUlucHV0IH0gZnJvbSAnLi9pbnZhbGlkX2tleV9pbnB1dC5qcyc7XG5pbXBvcnQgaXNLZXlMaWtlLCB7IHR5cGVzIH0gZnJvbSAnLi4vcnVudGltZS9pc19rZXlfbGlrZS5qcyc7XG5jb25zdCBzeW1tZXRyaWNUeXBlQ2hlY2sgPSAoYWxnLCBrZXkpID0+IHtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICghaXNLZXlMaWtlKGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihpbnZhbGlkS2V5SW5wdXQoYWxnLCBrZXksIC4uLnR5cGVzLCAnVWludDhBcnJheScpKTtcbiAgICB9XG4gICAgaWYgKGtleS50eXBlICE9PSAnc2VjcmV0Jykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke3R5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBzeW1tZXRyaWMgYWxnb3JpdGhtcyBtdXN0IGJlIG9mIHR5cGUgXCJzZWNyZXRcImApO1xuICAgIH1cbn07XG5jb25zdCBhc3ltbWV0cmljVHlwZUNoZWNrID0gKGFsZywga2V5LCB1c2FnZSkgPT4ge1xuICAgIGlmICghaXNLZXlMaWtlKGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihpbnZhbGlkS2V5SW5wdXQoYWxnLCBrZXksIC4uLnR5cGVzKSk7XG4gICAgfVxuICAgIGlmIChrZXkudHlwZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG1zIG11c3Qgbm90IGJlIG9mIHR5cGUgXCJzZWNyZXRcImApO1xuICAgIH1cbiAgICBpZiAodXNhZ2UgPT09ICdzaWduJyAmJiBrZXkudHlwZSA9PT0gJ3B1YmxpYycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gc2lnbmluZyBtdXN0IGJlIG9mIHR5cGUgXCJwcml2YXRlXCJgKTtcbiAgICB9XG4gICAgaWYgKHVzYWdlID09PSAnZGVjcnlwdCcgJiYga2V5LnR5cGUgPT09ICdwdWJsaWMnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIGRlY3J5cHRpb24gbXVzdCBiZSBvZiB0eXBlIFwicHJpdmF0ZVwiYCk7XG4gICAgfVxuICAgIGlmIChrZXkuYWxnb3JpdGhtICYmIHVzYWdlID09PSAndmVyaWZ5JyAmJiBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIHZlcmlmeWluZyBtdXN0IGJlIG9mIHR5cGUgXCJwdWJsaWNcImApO1xuICAgIH1cbiAgICBpZiAoa2V5LmFsZ29yaXRobSAmJiB1c2FnZSA9PT0gJ2VuY3J5cHQnICYmIGtleS50eXBlID09PSAncHJpdmF0ZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gZW5jcnlwdGlvbiBtdXN0IGJlIG9mIHR5cGUgXCJwdWJsaWNcImApO1xuICAgIH1cbn07XG5jb25zdCBjaGVja0tleVR5cGUgPSAoYWxnLCBrZXksIHVzYWdlKSA9PiB7XG4gICAgY29uc3Qgc3ltbWV0cmljID0gYWxnLnN0YXJ0c1dpdGgoJ0hTJykgfHxcbiAgICAgICAgYWxnID09PSAnZGlyJyB8fFxuICAgICAgICBhbGcuc3RhcnRzV2l0aCgnUEJFUzInKSB8fFxuICAgICAgICAvXkFcXGR7M30oPzpHQ00pP0tXJC8udGVzdChhbGcpO1xuICAgIGlmIChzeW1tZXRyaWMpIHtcbiAgICAgICAgc3ltbWV0cmljVHlwZUNoZWNrKGFsZywga2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFzeW1tZXRyaWNUeXBlQ2hlY2soYWxnLCBrZXksIHVzYWdlKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tLZXlUeXBlO1xuIiwiaW1wb3J0IHsgSldFSW52YWxpZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoZWNrUDJzKHAycykge1xuICAgIGlmICghKHAycyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHx8IHAycy5sZW5ndGggPCA4KSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdQQkVTMiBTYWx0IElucHV0IG11c3QgYmUgOCBvciBtb3JlIG9jdGV0cycpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzQ2xvdWRmbGFyZVdvcmtlcnMgfSBmcm9tICcuLi9ydW50aW1lL2Vudi5qcyc7XG5mdW5jdGlvbiB1bnVzYWJsZShuYW1lLCBwcm9wID0gJ2FsZ29yaXRobS5uYW1lJykge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGBDcnlwdG9LZXkgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIG9wZXJhdGlvbiwgaXRzICR7cHJvcH0gbXVzdCBiZSAke25hbWV9YCk7XG59XG5mdW5jdGlvbiBpc0FsZ29yaXRobShhbGdvcml0aG0sIG5hbWUpIHtcbiAgICByZXR1cm4gYWxnb3JpdGhtLm5hbWUgPT09IG5hbWU7XG59XG5mdW5jdGlvbiBnZXRIYXNoTGVuZ3RoKGhhc2gpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoaGFzaC5uYW1lLnNsaWNlKDQpLCAxMCk7XG59XG5mdW5jdGlvbiBnZXROYW1lZEN1cnZlKGFsZykge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAnUC0yNTYnO1xuICAgICAgICBjYXNlICdFUzM4NCc6XG4gICAgICAgICAgICByZXR1cm4gJ1AtMzg0JztcbiAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgcmV0dXJuICdQLTUyMSc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVhY2hhYmxlJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tVc2FnZShrZXksIHVzYWdlcykge1xuICAgIGlmICh1c2FnZXMubGVuZ3RoICYmICF1c2FnZXMuc29tZSgoZXhwZWN0ZWQpID0+IGtleS51c2FnZXMuaW5jbHVkZXMoZXhwZWN0ZWQpKSkge1xuICAgICAgICBsZXQgbXNnID0gJ0NyeXB0b0tleSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgb3BlcmF0aW9uLCBpdHMgdXNhZ2VzIG11c3QgaW5jbHVkZSAnO1xuICAgICAgICBpZiAodXNhZ2VzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB1c2FnZXMucG9wKCk7XG4gICAgICAgICAgICBtc2cgKz0gYG9uZSBvZiAke3VzYWdlcy5qb2luKCcsICcpfSwgb3IgJHtsYXN0fS5gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVzYWdlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIG1zZyArPSBgb25lIG9mICR7dXNhZ2VzWzBdfSBvciAke3VzYWdlc1sxXX0uYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1zZyArPSBgJHt1c2FnZXNbMF19LmA7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1NpZ0NyeXB0b0tleShrZXksIGFsZywgLi4udXNhZ2VzKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnSFMyNTYnOlxuICAgICAgICBjYXNlICdIUzM4NCc6XG4gICAgICAgIGNhc2UgJ0hTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnSE1BQycpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdITUFDJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSgyKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsID0gZ2V0SGFzaExlbmd0aChrZXkuYWxnb3JpdGhtLmhhc2gpO1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoYFNIQS0ke2V4cGVjdGVkfWAsICdhbGdvcml0aG0uaGFzaCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ1JTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnUlNBU1NBLVBLQ1MxLXYxXzUnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnUlNBU1NBLVBLQ1MxLXYxXzUnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDIpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdQUzI1Nic6XG4gICAgICAgIGNhc2UgJ1BTMzg0JzpcbiAgICAgICAgY2FzZSAnUFM1MTInOiB7XG4gICAgICAgICAgICBpZiAoIWlzQWxnb3JpdGhtKGtleS5hbGdvcml0aG0sICdSU0EtUFNTJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ1JTQS1QU1MnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDIpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFZERTQSc6IHtcbiAgICAgICAgICAgIGlmIChrZXkuYWxnb3JpdGhtLm5hbWUgIT09ICdFZDI1NTE5JyAmJiBrZXkuYWxnb3JpdGhtLm5hbWUgIT09ICdFZDQ0OCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNDbG91ZGZsYXJlV29ya2VycygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnTk9ERS1FRDI1NTE5JykpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0VkMjU1MTksIEVkNDQ4LCBvciBOT0RFLUVEMjU1MTknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0VkMjU1MTkgb3IgRWQ0NDgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICBjYXNlICdFUzUxMic6IHtcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ0VDRFNBJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0VDRFNBJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IGdldE5hbWVkQ3VydmUoYWxnKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbCA9IGtleS5hbGdvcml0aG0ubmFtZWRDdXJ2ZTtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKGV4cGVjdGVkLCAnYWxnb3JpdGhtLm5hbWVkQ3VydmUnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDcnlwdG9LZXkgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIG9wZXJhdGlvbicpO1xuICAgIH1cbiAgICBjaGVja1VzYWdlKGtleSwgdXNhZ2VzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0VuY0NyeXB0b0tleShrZXksIGFsZywgLi4udXNhZ2VzKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnQUVTLUdDTScpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdBRVMtR0NNJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSgxLCA0KSwgMTApO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsID0ga2V5LmFsZ29yaXRobS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShleHBlY3RlZCwgJ2FsZ29yaXRobS5sZW5ndGgnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZLVyc6IHtcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ0FFUy1LVycpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdBRVMtS1cnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBrZXkuYWxnb3JpdGhtLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKGV4cGVjdGVkLCAnYWxnb3JpdGhtLmxlbmd0aCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnRUNESCc6IHtcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5LmFsZ29yaXRobS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnWDI1NTE5JzpcbiAgICAgICAgICAgICAgICBjYXNlICdYNDQ4JzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0VDREgsIFgyNTUxOSwgb3IgWDQ0OCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUEJFUzItSFMyNTYrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFMzODQrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFM1MTIrQTI1NktXJzpcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ1BCS0RGMicpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdQQktERjInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSU0EtT0FFUCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6IHtcbiAgICAgICAgICAgIGlmICghaXNBbGdvcml0aG0oa2V5LmFsZ29yaXRobSwgJ1JTQS1PQUVQJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ1JTQS1PQUVQJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSg5KSwgMTApIHx8IDE7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBvcGVyYXRpb24nKTtcbiAgICB9XG4gICAgY2hlY2tVc2FnZShrZXksIHVzYWdlcyk7XG59XG4iLCJpbXBvcnQgeyB1bndyYXAgYXMgYWVzS3cgfSBmcm9tICcuLi9ydW50aW1lL2Flc2t3LmpzJztcbmltcG9ydCAqIGFzIEVDREggZnJvbSAnLi4vcnVudGltZS9lY2RoZXMuanMnO1xuaW1wb3J0IHsgZGVjcnlwdCBhcyBwYmVzMkt3IH0gZnJvbSAnLi4vcnVudGltZS9wYmVzMmt3LmpzJztcbmltcG9ydCB7IGRlY3J5cHQgYXMgcnNhRXMgfSBmcm9tICcuLi9ydW50aW1lL3JzYWVzLmpzJztcbmltcG9ydCB7IGRlY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuLi9ydW50aW1lL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyBKT1NFTm90U3VwcG9ydGVkLCBKV0VJbnZhbGlkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgYml0TGVuZ3RoIGFzIGNla0xlbmd0aCB9IGZyb20gJy4uL2xpYi9jZWsuanMnO1xuaW1wb3J0IHsgaW1wb3J0SldLIH0gZnJvbSAnLi4va2V5L2ltcG9ydC5qcyc7XG5pbXBvcnQgY2hlY2tLZXlUeXBlIGZyb20gJy4vY2hlY2tfa2V5X3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNfb2JqZWN0LmpzJztcbmltcG9ydCB7IHVud3JhcCBhcyBhZXNHY21LdyB9IGZyb20gJy4vYWVzZ2Nta3cuanMnO1xuYXN5bmMgZnVuY3Rpb24gZGVjcnlwdEtleU1hbmFnZW1lbnQoYWxnLCBrZXksIGVuY3J5cHRlZEtleSwgam9zZUhlYWRlciwgb3B0aW9ucykge1xuICAgIGNoZWNrS2V5VHlwZShhbGcsIGtleSwgJ2RlY3J5cHQnKTtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdkaXInOiB7XG4gICAgICAgICAgICBpZiAoZW5jcnlwdGVkS2V5ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0VuY291bnRlcmVkIHVuZXhwZWN0ZWQgSldFIEVuY3J5cHRlZCBLZXknKTtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnRUNESC1FUyc6XG4gICAgICAgICAgICBpZiAoZW5jcnlwdGVkS2V5ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0VuY291bnRlcmVkIHVuZXhwZWN0ZWQgSldFIEVuY3J5cHRlZCBLZXknKTtcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMTI4S1cnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTI1NktXJzoge1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChqb3NlSGVhZGVyLmVwaykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoYEpPU0UgSGVhZGVyIFwiZXBrXCIgKEVwaGVtZXJhbCBQdWJsaWMgS2V5KSBtaXNzaW5nIG9yIGludmFsaWRgKTtcbiAgICAgICAgICAgIGlmICghRUNESC5lY2RoQWxsb3dlZChrZXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdFQ0RIIHdpdGggdGhlIHByb3ZpZGVkIGtleSBpcyBub3QgYWxsb3dlZCBvciBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgamF2YXNjcmlwdCBydW50aW1lJyk7XG4gICAgICAgICAgICBjb25zdCBlcGsgPSBhd2FpdCBpbXBvcnRKV0soam9zZUhlYWRlci5lcGssIGFsZyk7XG4gICAgICAgICAgICBsZXQgcGFydHlVSW5mbztcbiAgICAgICAgICAgIGxldCBwYXJ0eVZJbmZvO1xuICAgICAgICAgICAgaWYgKGpvc2VIZWFkZXIuYXB1ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIuYXB1ICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoYEpPU0UgSGVhZGVyIFwiYXB1XCIgKEFncmVlbWVudCBQYXJ0eVVJbmZvKSBpbnZhbGlkYCk7XG4gICAgICAgICAgICAgICAgcGFydHlVSW5mbyA9IGJhc2U2NHVybChqb3NlSGVhZGVyLmFwdSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoam9zZUhlYWRlci5hcHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci5hcHYgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZChgSk9TRSBIZWFkZXIgXCJhcHZcIiAoQWdyZWVtZW50IFBhcnR5VkluZm8pIGludmFsaWRgKTtcbiAgICAgICAgICAgICAgICBwYXJ0eVZJbmZvID0gYmFzZTY0dXJsKGpvc2VIZWFkZXIuYXB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNoYXJlZFNlY3JldCA9IGF3YWl0IEVDREguZGVyaXZlS2V5KGVwaywga2V5LCBhbGcgPT09ICdFQ0RILUVTJyA/IGpvc2VIZWFkZXIuZW5jIDogYWxnLCBhbGcgPT09ICdFQ0RILUVTJyA/IGNla0xlbmd0aChqb3NlSGVhZGVyLmVuYykgOiBwYXJzZUludChhbGcuc2xpY2UoLTUsIC0yKSwgMTApLCBwYXJ0eVVJbmZvLCBwYXJ0eVZJbmZvKTtcbiAgICAgICAgICAgIGlmIChhbGcgPT09ICdFQ0RILUVTJylcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hhcmVkU2VjcmV0O1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gYWVzS3coYWxnLnNsaWNlKC02KSwgc2hhcmVkU2VjcmV0LCBlbmNyeXB0ZWRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzoge1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gcnNhRXMoYWxnLCBrZXksIGVuY3J5cHRlZEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUEJFUzItSFMyNTYrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFMzODQrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFM1MTIrQTI1NktXJzoge1xuICAgICAgICAgICAgaWYgKGVuY3J5cHRlZEtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKCdKV0UgRW5jcnlwdGVkIEtleSBtaXNzaW5nJyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpvc2VIZWFkZXIucDJjICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSldFSW52YWxpZChgSk9TRSBIZWFkZXIgXCJwMmNcIiAoUEJFUzIgQ291bnQpIG1pc3Npbmcgb3IgaW52YWxpZGApO1xuICAgICAgICAgICAgY29uc3QgcDJjTGltaXQgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1heFBCRVMyQ291bnQpIHx8IDEwMDAwO1xuICAgICAgICAgICAgaWYgKGpvc2VIZWFkZXIucDJjID4gcDJjTGltaXQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoYEpPU0UgSGVhZGVyIFwicDJjXCIgKFBCRVMyIENvdW50KSBvdXQgaXMgb2YgYWNjZXB0YWJsZSBib3VuZHNgKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci5wMnMgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKGBKT1NFIEhlYWRlciBcInAyc1wiIChQQkVTMiBTYWx0KSBtaXNzaW5nIG9yIGludmFsaWRgKTtcbiAgICAgICAgICAgIHJldHVybiBwYmVzMkt3KGFsZywga2V5LCBlbmNyeXB0ZWRLZXksIGpvc2VIZWFkZXIucDJjLCBiYXNlNjR1cmwoam9zZUhlYWRlci5wMnMpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdBMTI4S1cnOlxuICAgICAgICBjYXNlICdBMTkyS1cnOlxuICAgICAgICBjYXNlICdBMjU2S1cnOiB7XG4gICAgICAgICAgICBpZiAoZW5jcnlwdGVkS2V5ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBFbmNyeXB0ZWQgS2V5IG1pc3NpbmcnKTtcbiAgICAgICAgICAgIHJldHVybiBhZXNLdyhhbGcsIGtleSwgZW5jcnlwdGVkS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdBMTI4R0NNS1cnOlxuICAgICAgICBjYXNlICdBMTkyR0NNS1cnOlxuICAgICAgICBjYXNlICdBMjU2R0NNS1cnOiB7XG4gICAgICAgICAgICBpZiAoZW5jcnlwdGVkS2V5ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoJ0pXRSBFbmNyeXB0ZWQgS2V5IG1pc3NpbmcnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci5pdiAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpXRUludmFsaWQoYEpPU0UgSGVhZGVyIFwiaXZcIiAoSW5pdGlhbGl6YXRpb24gVmVjdG9yKSBtaXNzaW5nIG9yIGludmFsaWRgKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci50YWcgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKGBKT1NFIEhlYWRlciBcInRhZ1wiIChBdXRoZW50aWNhdGlvbiBUYWcpIG1pc3Npbmcgb3IgaW52YWxpZGApO1xuICAgICAgICAgICAgY29uc3QgaXYgPSBiYXNlNjR1cmwoam9zZUhlYWRlci5pdik7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSBiYXNlNjR1cmwoam9zZUhlYWRlci50YWcpO1xuICAgICAgICAgICAgcmV0dXJuIGFlc0djbUt3KGFsZywga2V5LCBlbmNyeXB0ZWRLZXksIGl2LCB0YWcpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIFwiYWxnXCIgKEpXRSBBbGdvcml0aG0pIGhlYWRlciB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZGVjcnlwdEtleU1hbmFnZW1lbnQ7XG4iLCJpbXBvcnQgeyB3cmFwIGFzIGFlc0t3IH0gZnJvbSAnLi4vcnVudGltZS9hZXNrdy5qcyc7XG5pbXBvcnQgKiBhcyBFQ0RIIGZyb20gJy4uL3J1bnRpbWUvZWNkaGVzLmpzJztcbmltcG9ydCB7IGVuY3J5cHQgYXMgcGJlczJLdyB9IGZyb20gJy4uL3J1bnRpbWUvcGJlczJrdy5qcyc7XG5pbXBvcnQgeyBlbmNyeXB0IGFzIHJzYUVzIH0gZnJvbSAnLi4vcnVudGltZS9yc2Flcy5qcyc7XG5pbXBvcnQgeyBlbmNvZGUgYXMgYmFzZTY0dXJsIH0gZnJvbSAnLi4vcnVudGltZS9iYXNlNjR1cmwuanMnO1xuaW1wb3J0IGdlbmVyYXRlQ2VrLCB7IGJpdExlbmd0aCBhcyBjZWtMZW5ndGggfSBmcm9tICcuLi9saWIvY2VrLmpzJztcbmltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBleHBvcnRKV0sgfSBmcm9tICcuLi9rZXkvZXhwb3J0LmpzJztcbmltcG9ydCBjaGVja0tleVR5cGUgZnJvbSAnLi9jaGVja19rZXlfdHlwZS5qcyc7XG5pbXBvcnQgeyB3cmFwIGFzIGFlc0djbUt3IH0gZnJvbSAnLi9hZXNnY21rdy5qcyc7XG5hc3luYyBmdW5jdGlvbiBlbmNyeXB0S2V5TWFuYWdlbWVudChhbGcsIGVuYywga2V5LCBwcm92aWRlZENlaywgcHJvdmlkZWRQYXJhbWV0ZXJzID0ge30pIHtcbiAgICBsZXQgZW5jcnlwdGVkS2V5O1xuICAgIGxldCBwYXJhbWV0ZXJzO1xuICAgIGxldCBjZWs7XG4gICAgY2hlY2tLZXlUeXBlKGFsZywga2V5LCAnZW5jcnlwdCcpO1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ2Rpcic6IHtcbiAgICAgICAgICAgIGNlayA9IGtleTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VDREgtRVMnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMjU2S1cnOiB7XG4gICAgICAgICAgICBpZiAoIUVDREguZWNkaEFsbG93ZWQoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdFQ0RIIHdpdGggdGhlIHByb3ZpZGVkIGtleSBpcyBub3QgYWxsb3dlZCBvciBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgamF2YXNjcmlwdCBydW50aW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGFwdSwgYXB2IH0gPSBwcm92aWRlZFBhcmFtZXRlcnM7XG4gICAgICAgICAgICBsZXQgeyBlcGs6IGVwaGVtZXJhbEtleSB9ID0gcHJvdmlkZWRQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgZXBoZW1lcmFsS2V5IHx8IChlcGhlbWVyYWxLZXkgPSAoYXdhaXQgRUNESC5nZW5lcmF0ZUVwayhrZXkpKS5wcml2YXRlS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSwgY3J2LCBrdHkgfSA9IGF3YWl0IGV4cG9ydEpXSyhlcGhlbWVyYWxLZXkpO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkU2VjcmV0ID0gYXdhaXQgRUNESC5kZXJpdmVLZXkoa2V5LCBlcGhlbWVyYWxLZXksIGFsZyA9PT0gJ0VDREgtRVMnID8gZW5jIDogYWxnLCBhbGcgPT09ICdFQ0RILUVTJyA/IGNla0xlbmd0aChlbmMpIDogcGFyc2VJbnQoYWxnLnNsaWNlKC01LCAtMiksIDEwKSwgYXB1LCBhcHYpO1xuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHsgZXBrOiB7IHgsIGNydiwga3R5IH0gfTtcbiAgICAgICAgICAgIGlmIChrdHkgPT09ICdFQycpXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5lcGsueSA9IHk7XG4gICAgICAgICAgICBpZiAoYXB1KVxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYXB1ID0gYmFzZTY0dXJsKGFwdSk7XG4gICAgICAgICAgICBpZiAoYXB2KVxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYXB2ID0gYmFzZTY0dXJsKGFwdik7XG4gICAgICAgICAgICBpZiAoYWxnID09PSAnRUNESC1FUycpIHtcbiAgICAgICAgICAgICAgICBjZWsgPSBzaGFyZWRTZWNyZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWsgPSBwcm92aWRlZENlayB8fCBnZW5lcmF0ZUNlayhlbmMpO1xuICAgICAgICAgICAgY29uc3Qga3dBbGcgPSBhbGcuc2xpY2UoLTYpO1xuICAgICAgICAgICAgZW5jcnlwdGVkS2V5ID0gYXdhaXQgYWVzS3coa3dBbGcsIHNoYXJlZFNlY3JldCwgY2VrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzoge1xuICAgICAgICAgICAgY2VrID0gcHJvdmlkZWRDZWsgfHwgZ2VuZXJhdGVDZWsoZW5jKTtcbiAgICAgICAgICAgIGVuY3J5cHRlZEtleSA9IGF3YWl0IHJzYUVzKGFsZywga2V5LCBjZWspO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUEJFUzItSFMyNTYrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFMzODQrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnUEJFUzItSFM1MTIrQTI1NktXJzoge1xuICAgICAgICAgICAgY2VrID0gcHJvdmlkZWRDZWsgfHwgZ2VuZXJhdGVDZWsoZW5jKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcDJjLCBwMnMgfSA9IHByb3ZpZGVkUGFyYW1ldGVycztcbiAgICAgICAgICAgICh7IGVuY3J5cHRlZEtleSwgLi4ucGFyYW1ldGVycyB9ID0gYXdhaXQgcGJlczJLdyhhbGcsIGtleSwgY2VrLCBwMmMsIHAycykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnQTE5MktXJzpcbiAgICAgICAgY2FzZSAnQTI1NktXJzoge1xuICAgICAgICAgICAgY2VrID0gcHJvdmlkZWRDZWsgfHwgZ2VuZXJhdGVDZWsoZW5jKTtcbiAgICAgICAgICAgIGVuY3J5cHRlZEtleSA9IGF3YWl0IGFlc0t3KGFsZywga2V5LCBjZWspO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQTEyOEdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTUtXJzoge1xuICAgICAgICAgICAgY2VrID0gcHJvdmlkZWRDZWsgfHwgZ2VuZXJhdGVDZWsoZW5jKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaXYgfSA9IHByb3ZpZGVkUGFyYW1ldGVycztcbiAgICAgICAgICAgICh7IGVuY3J5cHRlZEtleSwgLi4ucGFyYW1ldGVycyB9ID0gYXdhaXQgYWVzR2NtS3coYWxnLCBrZXksIGNlaywgaXYpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIFwiYWxnXCIgKEpXRSBBbGdvcml0aG0pIGhlYWRlciB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGNlaywgZW5jcnlwdGVkS2V5LCBwYXJhbWV0ZXJzIH07XG59XG5leHBvcnQgZGVmYXVsdCBlbmNyeXB0S2V5TWFuYWdlbWVudDtcbiIsImV4cG9ydCBkZWZhdWx0IChkYXRlKSA9PiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4iLCJleHBvcnQgZGVmYXVsdCAoYjY0LCBkZXNjcmlwdG9yKSA9PiB7XG4gICAgY29uc3QgbmV3bGluZWQgPSAoYjY0Lm1hdGNoKC8uezEsNjR9L2cpIHx8IFtdKS5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gYC0tLS0tQkVHSU4gJHtkZXNjcmlwdG9yfS0tLS0tXFxuJHtuZXdsaW5lZH1cXG4tLS0tLUVORCAke2Rlc2NyaXB0b3J9LS0tLS1gO1xufTtcbiIsImZ1bmN0aW9uIG1lc3NhZ2UobXNnLCBhY3R1YWwsIC4uLnR5cGVzKSB7XG4gICAgaWYgKHR5cGVzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHR5cGVzLnBvcCgpO1xuICAgICAgICBtc2cgKz0gYG9uZSBvZiB0eXBlICR7dHlwZXMuam9pbignLCAnKX0sIG9yICR7bGFzdH0uYDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIG1zZyArPSBgb25lIG9mIHR5cGUgJHt0eXBlc1swXX0gb3IgJHt0eXBlc1sxXX0uYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1zZyArPSBgb2YgdHlwZSAke3R5cGVzWzBdfS5gO1xuICAgIH1cbiAgICBpZiAoYWN0dWFsID09IG51bGwpIHtcbiAgICAgICAgbXNnICs9IGAgUmVjZWl2ZWQgJHthY3R1YWx9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFjdHVhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhY3R1YWwubmFtZSkge1xuICAgICAgICBtc2cgKz0gYCBSZWNlaXZlZCBmdW5jdGlvbiAke2FjdHVhbC5uYW1lfWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhY3R1YWwgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhY3R1YWwuY29uc3RydWN0b3IgJiYgYWN0dWFsLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgICAgIG1zZyArPSBgIFJlY2VpdmVkIGFuIGluc3RhbmNlIG9mICR7YWN0dWFsLmNvbnN0cnVjdG9yLm5hbWV9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbXNnO1xufVxuZXhwb3J0IGRlZmF1bHQgKGFjdHVhbCwgLi4udHlwZXMpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZSgnS2V5IG11c3QgYmUgJywgYWN0dWFsLCAuLi50eXBlcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBbGcoYWxnLCBhY3R1YWwsIC4uLnR5cGVzKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UoYEtleSBmb3IgdGhlICR7YWxnfSBhbGdvcml0aG0gbXVzdCBiZSBgLCBhY3R1YWwsIC4uLnR5cGVzKTtcbn1cbiIsImNvbnN0IGlzRGlzam9pbnQgPSAoLi4uaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IHNvdXJjZXMgPSBoZWFkZXJzLmZpbHRlcihCb29sZWFuKTtcbiAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDAgfHwgc291cmNlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBhY2M7XG4gICAgZm9yIChjb25zdCBoZWFkZXIgb2Ygc291cmNlcykge1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gT2JqZWN0LmtleXMoaGVhZGVyKTtcbiAgICAgICAgaWYgKCFhY2MgfHwgYWNjLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGFjYyA9IG5ldyBTZXQocGFyYW1ldGVycyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoYWNjLmhhcyhwYXJhbWV0ZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjLmFkZChwYXJhbWV0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmV4cG9ydCBkZWZhdWx0IGlzRGlzam9pbnQ7XG4iLCJmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgaWYgKCFpc09iamVjdExpa2UoaW5wdXQpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnB1dCkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBwcm90byA9IGlucHV0O1xuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnB1dCkgPT09IHByb3RvO1xufVxuIiwiaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCByYW5kb20gZnJvbSAnLi4vcnVudGltZS9yYW5kb20uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGJpdExlbmd0aChhbGcpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgY2FzZSAnQTEyOEdDTUtXJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNS1cnOlxuICAgICAgICAgICAgcmV0dXJuIDk2O1xuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgIGNhc2UgJ0EyNTZDQkMtSFM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIDEyODtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKGBVbnN1cHBvcnRlZCBKV0UgQWxnb3JpdGhtOiAke2FsZ31gKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCAoYWxnKSA9PiByYW5kb20obmV3IFVpbnQ4QXJyYXkoYml0TGVuZ3RoKGFsZykgPj4gMykpO1xuIiwiaW1wb3J0IHsgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkLCBKV1RFeHBpcmVkLCBKV1RJbnZhbGlkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgZGVjb2RlciB9IGZyb20gJy4vYnVmZmVyX3V0aWxzLmpzJztcbmltcG9ydCBlcG9jaCBmcm9tICcuL2Vwb2NoLmpzJztcbmltcG9ydCBzZWNzIGZyb20gJy4vc2Vjcy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc19vYmplY3QuanMnO1xuY29uc3Qgbm9ybWFsaXplVHlwID0gKHZhbHVlKSA9PiB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL15hcHBsaWNhdGlvblxcLy8sICcnKTtcbmNvbnN0IGNoZWNrQXVkaWVuY2VQcmVzZW5jZSA9IChhdWRQYXlsb2FkLCBhdWRPcHRpb24pID0+IHtcbiAgICBpZiAodHlwZW9mIGF1ZFBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhdWRPcHRpb24uaW5jbHVkZXMoYXVkUGF5bG9hZCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGF1ZFBheWxvYWQpKSB7XG4gICAgICAgIHJldHVybiBhdWRPcHRpb24uc29tZShTZXQucHJvdG90eXBlLmhhcy5iaW5kKG5ldyBTZXQoYXVkUGF5bG9hZCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCBkZWZhdWx0IChwcm90ZWN0ZWRIZWFkZXIsIGVuY29kZWRQYXlsb2FkLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7IHR5cCB9ID0gb3B0aW9ucztcbiAgICBpZiAodHlwICYmXG4gICAgICAgICh0eXBlb2YgcHJvdGVjdGVkSGVhZGVyLnR5cCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIG5vcm1hbGl6ZVR5cChwcm90ZWN0ZWRIZWFkZXIudHlwKSAhPT0gbm9ybWFsaXplVHlwKHR5cCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJ0eXBcIiBKV1QgaGVhZGVyIHZhbHVlJywgJ3R5cCcsICdjaGVja19mYWlsZWQnKTtcbiAgICB9XG4gICAgbGV0IHBheWxvYWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcGF5bG9hZCA9IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUoZW5jb2RlZFBheWxvYWQpKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgfVxuICAgIGlmICghaXNPYmplY3QocGF5bG9hZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXVEludmFsaWQoJ0pXVCBDbGFpbXMgU2V0IG11c3QgYmUgYSB0b3AtbGV2ZWwgSlNPTiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBpc3N1ZXIgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGlzc3VlciAmJiAhKEFycmF5LmlzQXJyYXkoaXNzdWVyKSA/IGlzc3VlciA6IFtpc3N1ZXJdKS5pbmNsdWRlcyhwYXlsb2FkLmlzcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgndW5leHBlY3RlZCBcImlzc1wiIGNsYWltIHZhbHVlJywgJ2lzcycsICdjaGVja19mYWlsZWQnKTtcbiAgICB9XG4gICAgY29uc3QgeyBzdWJqZWN0IH0gPSBvcHRpb25zO1xuICAgIGlmIChzdWJqZWN0ICYmIHBheWxvYWQuc3ViICE9PSBzdWJqZWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJzdWJcIiBjbGFpbSB2YWx1ZScsICdzdWInLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgYXVkaWVuY2UgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGF1ZGllbmNlICYmXG4gICAgICAgICFjaGVja0F1ZGllbmNlUHJlc2VuY2UocGF5bG9hZC5hdWQsIHR5cGVvZiBhdWRpZW5jZSA9PT0gJ3N0cmluZycgPyBbYXVkaWVuY2VdIDogYXVkaWVuY2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJhdWRcIiBjbGFpbSB2YWx1ZScsICdhdWQnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGxldCB0b2xlcmFuY2U7XG4gICAgc3dpdGNoICh0eXBlb2Ygb3B0aW9ucy5jbG9ja1RvbGVyYW5jZSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgdG9sZXJhbmNlID0gc2VjcyhvcHRpb25zLmNsb2NrVG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgdG9sZXJhbmNlID0gb3B0aW9ucy5jbG9ja1RvbGVyYW5jZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgdG9sZXJhbmNlID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjbG9ja1RvbGVyYW5jZSBvcHRpb24gdHlwZScpO1xuICAgIH1cbiAgICBjb25zdCB7IGN1cnJlbnREYXRlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG5vdyA9IGVwb2NoKGN1cnJlbnREYXRlIHx8IG5ldyBEYXRlKCkpO1xuICAgIGlmICgocGF5bG9hZC5pYXQgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLm1heFRva2VuQWdlKSAmJiB0eXBlb2YgcGF5bG9hZC5pYXQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ1wiaWF0XCIgY2xhaW0gbXVzdCBiZSBhIG51bWJlcicsICdpYXQnLCAnaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZC5uYmYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQubmJmICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJuYmZcIiBjbGFpbSBtdXN0IGJlIGEgbnVtYmVyJywgJ25iZicsICdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQubmJmID4gbm93ICsgdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcIm5iZlwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQnLCAnbmJmJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYXlsb2FkLmV4cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcImV4cFwiIGNsYWltIG11c3QgYmUgYSBudW1iZXInLCAnZXhwJywgJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5leHAgPD0gbm93IC0gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldURXhwaXJlZCgnXCJleHBcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkJywgJ2V4cCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5tYXhUb2tlbkFnZSkge1xuICAgICAgICBjb25zdCBhZ2UgPSBub3cgLSBwYXlsb2FkLmlhdDtcbiAgICAgICAgY29uc3QgbWF4ID0gdHlwZW9mIG9wdGlvbnMubWF4VG9rZW5BZ2UgPT09ICdudW1iZXInID8gb3B0aW9ucy5tYXhUb2tlbkFnZSA6IHNlY3Mob3B0aW9ucy5tYXhUb2tlbkFnZSk7XG4gICAgICAgIGlmIChhZ2UgLSB0b2xlcmFuY2UgPiBtYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1RFeHBpcmVkKCdcImlhdFwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQgKHRvbyBmYXIgaW4gdGhlIHBhc3QpJywgJ2lhdCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWdlIDwgMCAtIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJpYXRcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkIChpdCBzaG91bGQgYmUgaW4gdGhlIHBhc3QpJywgJ2lhdCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbn07XG4iLCJjb25zdCBtaW51dGUgPSA2MDtcbmNvbnN0IGhvdXIgPSBtaW51dGUgKiA2MDtcbmNvbnN0IGRheSA9IGhvdXIgKiAyNDtcbmNvbnN0IHdlZWsgPSBkYXkgKiA3O1xuY29uc3QgeWVhciA9IGRheSAqIDM2NS4yNTtcbmNvbnN0IFJFR0VYID0gL14oXFxkK3xcXGQrXFwuXFxkKykgPyhzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpJC9pO1xuZXhwb3J0IGRlZmF1bHQgKHN0cikgPT4ge1xuICAgIGNvbnN0IG1hdGNoZWQgPSBSRUdFWC5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGltZSBwZXJpb2QgZm9ybWF0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChtYXRjaGVkWzFdKTtcbiAgICBjb25zdCB1bml0ID0gbWF0Y2hlZFsyXS50b0xvd2VyQ2FzZSgpO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICBjYXNlICdzZWMnOlxuICAgICAgICBjYXNlICdzZWNzJzpcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICBjYXNlICdtaW51dGVzJzpcbiAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgY2FzZSAnbWlucyc6XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBtaW51dGUpO1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgY2FzZSAnaG91cnMnOlxuICAgICAgICBjYXNlICdocic6XG4gICAgICAgIGNhc2UgJ2hycyc6XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBob3VyKTtcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgY2FzZSAnZGF5cyc6XG4gICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBkYXkpO1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnd2Vla3MnOlxuICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogd2Vlayk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHllYXIpO1xuICAgIH1cbn07XG4iLCJjb25zdCB2YWxpZGF0ZUFsZ29yaXRobXMgPSAob3B0aW9uLCBhbGdvcml0aG1zKSA9PiB7XG4gICAgaWYgKGFsZ29yaXRobXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAoIUFycmF5LmlzQXJyYXkoYWxnb3JpdGhtcykgfHwgYWxnb3JpdGhtcy5zb21lKChzKSA9PiB0eXBlb2YgcyAhPT0gJ3N0cmluZycpKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBcIiR7b3B0aW9ufVwiIG9wdGlvbiBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3NgKTtcbiAgICB9XG4gICAgaWYgKCFhbGdvcml0aG1zKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KGFsZ29yaXRobXMpO1xufTtcbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlQWxnb3JpdGhtcztcbiIsImltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5mdW5jdGlvbiB2YWxpZGF0ZUNyaXQoRXJyLCByZWNvZ25pemVkRGVmYXVsdCwgcmVjb2duaXplZE9wdGlvbiwgcHJvdGVjdGVkSGVhZGVyLCBqb3NlSGVhZGVyKSB7XG4gICAgaWYgKGpvc2VIZWFkZXIuY3JpdCAhPT0gdW5kZWZpbmVkICYmIHByb3RlY3RlZEhlYWRlci5jcml0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycignXCJjcml0XCIgKENyaXRpY2FsKSBIZWFkZXIgUGFyYW1ldGVyIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZCcpO1xuICAgIH1cbiAgICBpZiAoIXByb3RlY3RlZEhlYWRlciB8fCBwcm90ZWN0ZWRIZWFkZXIuY3JpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KCk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm90ZWN0ZWRIZWFkZXIuY3JpdCkgfHxcbiAgICAgICAgcHJvdGVjdGVkSGVhZGVyLmNyaXQubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIHByb3RlY3RlZEhlYWRlci5jcml0LnNvbWUoKGlucHV0KSA9PiB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnIHx8IGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycignXCJjcml0XCIgKENyaXRpY2FsKSBIZWFkZXIgUGFyYW1ldGVyIE1VU1QgYmUgYW4gYXJyYXkgb2Ygbm9uLWVtcHR5IHN0cmluZ3Mgd2hlbiBwcmVzZW50Jyk7XG4gICAgfVxuICAgIGxldCByZWNvZ25pemVkO1xuICAgIGlmIChyZWNvZ25pemVkT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVjb2duaXplZCA9IG5ldyBNYXAoWy4uLk9iamVjdC5lbnRyaWVzKHJlY29nbml6ZWRPcHRpb24pLCAuLi5yZWNvZ25pemVkRGVmYXVsdC5lbnRyaWVzKCldKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlY29nbml6ZWQgPSByZWNvZ25pemVkRGVmYXVsdDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcHJvdGVjdGVkSGVhZGVyLmNyaXQpIHtcbiAgICAgICAgaWYgKCFyZWNvZ25pemVkLmhhcyhwYXJhbWV0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZChgRXh0ZW5zaW9uIEhlYWRlciBQYXJhbWV0ZXIgXCIke3BhcmFtZXRlcn1cIiBpcyBub3QgcmVjb2duaXplZGApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb3NlSGVhZGVyW3BhcmFtZXRlcl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycihgRXh0ZW5zaW9uIEhlYWRlciBQYXJhbWV0ZXIgXCIke3BhcmFtZXRlcn1cIiBpcyBtaXNzaW5nYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjb2duaXplZC5nZXQocGFyYW1ldGVyKSAmJiBwcm90ZWN0ZWRIZWFkZXJbcGFyYW1ldGVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyKGBFeHRlbnNpb24gSGVhZGVyIFBhcmFtZXRlciBcIiR7cGFyYW1ldGVyfVwiIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KHByb3RlY3RlZEhlYWRlci5jcml0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlQ3JpdDtcbiIsImltcG9ydCBib2d1c1dlYkNyeXB0byBmcm9tICcuL2JvZ3VzLmpzJztcbmltcG9ydCBjcnlwdG8sIHsgaXNDcnlwdG9LZXkgfSBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5pbXBvcnQgeyBjaGVja0VuY0NyeXB0b0tleSB9IGZyb20gJy4uL2xpYi9jcnlwdG9fa2V5LmpzJztcbmltcG9ydCBpbnZhbGlkS2V5SW5wdXQgZnJvbSAnLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzJztcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAnLi9pc19rZXlfbGlrZS5qcyc7XG5mdW5jdGlvbiBjaGVja0tleVNpemUoa2V5LCBhbGcpIHtcbiAgICBpZiAoa2V5LmFsZ29yaXRobS5sZW5ndGggIT09IHBhcnNlSW50KGFsZy5zbGljZSgxLCA0KSwgMTApKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQga2V5IHNpemUgZm9yIGFsZzogJHthbGd9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Q3J5cHRvS2V5KGtleSwgYWxnLCB1c2FnZSkge1xuICAgIGlmIChpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIGNoZWNrRW5jQ3J5cHRvS2V5KGtleSwgYWxnLCB1c2FnZSk7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3Jywga2V5LCAnQUVTLUtXJywgdHJ1ZSwgW3VzYWdlXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMsICdVaW50OEFycmF5JykpO1xufVxuZXhwb3J0IGNvbnN0IHdyYXAgPSBhc3luYyAoYWxnLCBrZXksIGNlaykgPT4ge1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGdldENyeXB0b0tleShrZXksIGFsZywgJ3dyYXBLZXknKTtcbiAgICBjaGVja0tleVNpemUoY3J5cHRvS2V5LCBhbGcpO1xuICAgIGNvbnN0IGNyeXB0b0tleUNlayA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBjZWssIC4uLmJvZ3VzV2ViQ3J5cHRvKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS53cmFwS2V5KCdyYXcnLCBjcnlwdG9LZXlDZWssIGNyeXB0b0tleSwgJ0FFUy1LVycpKTtcbn07XG5leHBvcnQgY29uc3QgdW53cmFwID0gYXN5bmMgKGFsZywga2V5LCBlbmNyeXB0ZWRLZXkpID0+IHtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBnZXRDcnlwdG9LZXkoa2V5LCBhbGcsICd1bndyYXBLZXknKTtcbiAgICBjaGVja0tleVNpemUoY3J5cHRvS2V5LCBhbGcpO1xuICAgIGNvbnN0IGNyeXB0b0tleUNlayA9IGF3YWl0IGNyeXB0by5zdWJ0bGUudW53cmFwS2V5KCdyYXcnLCBlbmNyeXB0ZWRLZXksIGNyeXB0b0tleSwgJ0FFUy1LVycsIC4uLmJvZ3VzV2ViQ3J5cHRvKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ3JhdycsIGNyeXB0b0tleUNlaykpO1xufTtcbiIsImltcG9ydCB7IGlzQ2xvdWRmbGFyZVdvcmtlcnMgfSBmcm9tICcuL2Vudi5qcyc7XG5pbXBvcnQgY3J5cHRvLCB7IGlzQ3J5cHRvS2V5IH0gZnJvbSAnLi93ZWJjcnlwdG8uanMnO1xuaW1wb3J0IGludmFsaWRLZXlJbnB1dCBmcm9tICcuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanMnO1xuaW1wb3J0IHsgZW5jb2RlQmFzZTY0LCBkZWNvZGVCYXNlNjQgfSBmcm9tICcuL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgZm9ybWF0UEVNIGZyb20gJy4uL2xpYi9mb3JtYXRfcGVtLmpzJztcbmltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyB0eXBlcyB9IGZyb20gJy4vaXNfa2V5X2xpa2UuanMnO1xuY29uc3QgZ2VuZXJpY0V4cG9ydCA9IGFzeW5jIChrZXlUeXBlLCBrZXlGb3JtYXQsIGtleSkgPT4ge1xuICAgIGlmICghaXNDcnlwdG9LZXkoa2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChrZXksIC4uLnR5cGVzKSk7XG4gICAgfVxuICAgIGlmICgha2V5LmV4dHJhY3RhYmxlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NyeXB0b0tleSBpcyBub3QgZXh0cmFjdGFibGUnKTtcbiAgICB9XG4gICAgaWYgKGtleS50eXBlICE9PSBrZXlUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGtleSBpcyBub3QgYSAke2tleVR5cGV9IGtleWApO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0UEVNKGVuY29kZUJhc2U2NChuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmV4cG9ydEtleShrZXlGb3JtYXQsIGtleSkpKSwgYCR7a2V5VHlwZS50b1VwcGVyQ2FzZSgpfSBLRVlgKTtcbn07XG5leHBvcnQgY29uc3QgdG9TUEtJID0gKGtleSkgPT4ge1xuICAgIHJldHVybiBnZW5lcmljRXhwb3J0KCdwdWJsaWMnLCAnc3BraScsIGtleSk7XG59O1xuZXhwb3J0IGNvbnN0IHRvUEtDUzggPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIGdlbmVyaWNFeHBvcnQoJ3ByaXZhdGUnLCAncGtjczgnLCBrZXkpO1xufTtcbmNvbnN0IGZpbmRPaWQgPSAoa2V5RGF0YSwgb2lkLCBmcm9tID0gMCkgPT4ge1xuICAgIGlmIChmcm9tID09PSAwKSB7XG4gICAgICAgIG9pZC51bnNoaWZ0KG9pZC5sZW5ndGgpO1xuICAgICAgICBvaWQudW5zaGlmdCgweDA2KTtcbiAgICB9XG4gICAgbGV0IGkgPSBrZXlEYXRhLmluZGV4T2Yob2lkWzBdLCBmcm9tKTtcbiAgICBpZiAoaSA9PT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBzdWIgPSBrZXlEYXRhLnN1YmFycmF5KGksIGkgKyBvaWQubGVuZ3RoKTtcbiAgICBpZiAoc3ViLmxlbmd0aCAhPT0gb2lkLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdWIuZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gdmFsdWUgPT09IG9pZFtpbmRleF0pIHx8IGZpbmRPaWQoa2V5RGF0YSwgb2lkLCBpICsgMSk7XG59O1xuY29uc3QgZ2V0TmFtZWRDdXJ2ZSA9IChrZXlEYXRhKSA9PiB7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgIGNhc2UgZmluZE9pZChrZXlEYXRhLCBbMHgyYSwgMHg4NiwgMHg0OCwgMHhjZSwgMHgzZCwgMHgwMywgMHgwMSwgMHgwN10pOlxuICAgICAgICAgICAgcmV0dXJuICdQLTI1Nic7XG4gICAgICAgIGNhc2UgZmluZE9pZChrZXlEYXRhLCBbMHgyYiwgMHg4MSwgMHgwNCwgMHgwMCwgMHgyMl0pOlxuICAgICAgICAgICAgcmV0dXJuICdQLTM4NCc7XG4gICAgICAgIGNhc2UgZmluZE9pZChrZXlEYXRhLCBbMHgyYiwgMHg4MSwgMHgwNCwgMHgwMCwgMHgyM10pOlxuICAgICAgICAgICAgcmV0dXJuICdQLTUyMSc7XG4gICAgICAgIGNhc2UgZmluZE9pZChrZXlEYXRhLCBbMHgyYiwgMHg2NSwgMHg2ZV0pOlxuICAgICAgICAgICAgcmV0dXJuICdYMjU1MTknO1xuICAgICAgICBjYXNlIGZpbmRPaWQoa2V5RGF0YSwgWzB4MmIsIDB4NjUsIDB4NmZdKTpcbiAgICAgICAgICAgIHJldHVybiAnWDQ0OCc7XG4gICAgICAgIGNhc2UgZmluZE9pZChrZXlEYXRhLCBbMHgyYiwgMHg2NSwgMHg3MF0pOlxuICAgICAgICAgICAgcmV0dXJuICdFZDI1NTE5JztcbiAgICAgICAgY2FzZSBmaW5kT2lkKGtleURhdGEsIFsweDJiLCAweDY1LCAweDcxXSk6XG4gICAgICAgICAgICByZXR1cm4gJ0VkNDQ4JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIEVDIEtleSBDdXJ2ZSBvciBPS1AgS2V5IFN1YiBUeXBlJyk7XG4gICAgfVxufTtcbmNvbnN0IGdlbmVyaWNJbXBvcnQgPSBhc3luYyAocmVwbGFjZSwga2V5Rm9ybWF0LCBwZW0sIGFsZywgb3B0aW9ucykgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgbGV0IGFsZ29yaXRobTtcbiAgICBsZXQga2V5VXNhZ2VzO1xuICAgIGNvbnN0IGtleURhdGEgPSBuZXcgVWludDhBcnJheShhdG9iKHBlbS5yZXBsYWNlKHJlcGxhY2UsICcnKSlcbiAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAubWFwKChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbiAgICBjb25zdCBpc1B1YmxpYyA9IGtleUZvcm1hdCA9PT0gJ3Nwa2knO1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ1BTMjU2JzpcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdQUzUxMic6XG4gICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdSU0EtUFNTJywgaGFzaDogYFNIQS0ke2FsZy5zbGljZSgtMyl9YCB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gaXNQdWJsaWMgPyBbJ3ZlcmlmeSddIDogWydzaWduJ107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ1JTNTEyJzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JywgaGFzaDogYFNIQS0ke2FsZy5zbGljZSgtMyl9YCB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gaXNQdWJsaWMgPyBbJ3ZlcmlmeSddIDogWydzaWduJ107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAnOlxuICAgICAgICBjYXNlICdSU0EtT0FFUC0yNTYnOlxuICAgICAgICBjYXNlICdSU0EtT0FFUC0zODQnOlxuICAgICAgICBjYXNlICdSU0EtT0FFUC01MTInOlxuICAgICAgICAgICAgYWxnb3JpdGhtID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXG4gICAgICAgICAgICAgICAgaGFzaDogYFNIQS0ke3BhcnNlSW50KGFsZy5zbGljZSgtMyksIDEwKSB8fCAxfWAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gaXNQdWJsaWMgPyBbJ2VuY3J5cHQnLCAnd3JhcEtleSddIDogWydkZWNyeXB0JywgJ3Vud3JhcEtleSddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtMjU2JyB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gaXNQdWJsaWMgPyBbJ3ZlcmlmeSddIDogWydzaWduJ107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnRUNEU0EnLCBuYW1lZEN1cnZlOiAnUC0zODQnIH07XG4gICAgICAgICAgICBrZXlVc2FnZXMgPSBpc1B1YmxpYyA/IFsndmVyaWZ5J10gOiBbJ3NpZ24nXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFUzUxMic6XG4gICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdFQ0RTQScsIG5hbWVkQ3VydmU6ICdQLTUyMScgfTtcbiAgICAgICAgICAgIGtleVVzYWdlcyA9IGlzUHVibGljID8gWyd2ZXJpZnknXSA6IFsnc2lnbiddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VDREgtRVMnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTE5MktXJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMjU2S1cnOiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lZEN1cnZlID0gZ2V0TmFtZWRDdXJ2ZShrZXlEYXRhKTtcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IG5hbWVkQ3VydmUuc3RhcnRzV2l0aCgnUC0nKSA/IHsgbmFtZTogJ0VDREgnLCBuYW1lZEN1cnZlIH0gOiB7IG5hbWU6IG5hbWVkQ3VydmUgfTtcbiAgICAgICAgICAgIGtleVVzYWdlcyA9IGlzUHVibGljID8gW10gOiBbJ2Rlcml2ZUJpdHMnXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VkRFNBJzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogZ2V0TmFtZWRDdXJ2ZShrZXlEYXRhKSB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gaXNQdWJsaWMgPyBbJ3ZlcmlmeSddIDogWydzaWduJ107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIFwiYWxnXCIgKEFsZ29yaXRobSkgdmFsdWUnKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KGtleUZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXh0cmFjdGFibGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlLCBrZXlVc2FnZXMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChhbGdvcml0aG0ubmFtZSA9PT0gJ0VkMjU1MTknICYmXG4gICAgICAgICAgICAoZXJyID09PSBudWxsIHx8IGVyciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyLm5hbWUpID09PSAnTm90U3VwcG9ydGVkRXJyb3InICYmXG4gICAgICAgICAgICBpc0Nsb3VkZmxhcmVXb3JrZXJzKCkpIHtcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ05PREUtRUQyNTUxOScsIG5hbWVkQ3VydmU6ICdOT0RFLUVEMjU1MTknIH07XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoa2V5Rm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5leHRyYWN0YWJsZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsIGtleVVzYWdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgZnJvbVBLQ1M4ID0gKHBlbSwgYWxnLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGdlbmVyaWNJbXBvcnQoLyg/Oi0tLS0tKD86QkVHSU58RU5EKSBQUklWQVRFIEtFWS0tLS0tfFxccykvZywgJ3BrY3M4JywgcGVtLCBhbGcsIG9wdGlvbnMpO1xufTtcbmV4cG9ydCBjb25zdCBmcm9tU1BLSSA9IChwZW0sIGFsZywgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBnZW5lcmljSW1wb3J0KC8oPzotLS0tLSg/OkJFR0lOfEVORCkgUFVCTElDIEtFWS0tLS0tfFxccykvZywgJ3Nwa2knLCBwZW0sIGFsZywgb3B0aW9ucyk7XG59O1xuZnVuY3Rpb24gZ2V0RWxlbWVudChzZXEpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgbGV0IG5leHQgPSAwO1xuICAgIHdoaWxlIChuZXh0IDwgc2VxLmxlbmd0aCkge1xuICAgICAgICBsZXQgbmV4dFBhcnQgPSBwYXJzZUVsZW1lbnQoc2VxLnN1YmFycmF5KG5leHQpKTtcbiAgICAgICAgcmVzdWx0LnB1c2gobmV4dFBhcnQpO1xuICAgICAgICBuZXh0ICs9IG5leHRQYXJ0LmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYXJzZUVsZW1lbnQoYnl0ZXMpIHtcbiAgICBsZXQgcG9zaXRpb24gPSAwO1xuICAgIGxldCB0YWcgPSBieXRlc1swXSAmIDB4MWY7XG4gICAgcG9zaXRpb24rKztcbiAgICBpZiAodGFnID09PSAweDFmKSB7XG4gICAgICAgIHRhZyA9IDA7XG4gICAgICAgIHdoaWxlIChieXRlc1twb3NpdGlvbl0gPj0gMHg4MCkge1xuICAgICAgICAgICAgdGFnID0gdGFnICogMTI4ICsgYnl0ZXNbcG9zaXRpb25dIC0gMHg4MDtcbiAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgIH1cbiAgICAgICAgdGFnID0gdGFnICogMTI4ICsgYnl0ZXNbcG9zaXRpb25dIC0gMHg4MDtcbiAgICAgICAgcG9zaXRpb24rKztcbiAgICB9XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgaWYgKGJ5dGVzW3Bvc2l0aW9uXSA8IDB4ODApIHtcbiAgICAgICAgbGVuZ3RoID0gYnl0ZXNbcG9zaXRpb25dO1xuICAgICAgICBwb3NpdGlvbisrO1xuICAgIH1cbiAgICBlbHNlIGlmIChsZW5ndGggPT09IDB4ODApIHtcbiAgICAgICAgbGVuZ3RoID0gMDtcbiAgICAgICAgd2hpbGUgKGJ5dGVzW3Bvc2l0aW9uICsgbGVuZ3RoXSAhPT0gMCB8fCBieXRlc1twb3NpdGlvbiArIGxlbmd0aCArIDFdICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gYnl0ZXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaW5kZWZpbml0ZSBmb3JtIGxlbmd0aCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuZ3RoKys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnl0ZUxlbmd0aCA9IHBvc2l0aW9uICsgbGVuZ3RoICsgMjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBjb250ZW50czogYnl0ZXMuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgbGVuZ3RoKSxcbiAgICAgICAgICAgIHJhdzogYnl0ZXMuc3ViYXJyYXkoMCwgYnl0ZUxlbmd0aCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgbnVtYmVyT2ZEaWdpdHMgPSBieXRlc1twb3NpdGlvbl0gJiAweDdmO1xuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRGlnaXRzOyBpKyspIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aCAqIDI1NiArIGJ5dGVzW3Bvc2l0aW9uXTtcbiAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYnl0ZUxlbmd0aCA9IHBvc2l0aW9uICsgbGVuZ3RoO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgIGNvbnRlbnRzOiBieXRlcy5zdWJhcnJheShwb3NpdGlvbiwgYnl0ZUxlbmd0aCksXG4gICAgICAgIHJhdzogYnl0ZXMuc3ViYXJyYXkoMCwgYnl0ZUxlbmd0aCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNwa2lGcm9tWDUwOShidWYpIHtcbiAgICBjb25zdCB0YnNDZXJ0aWZpY2F0ZSA9IGdldEVsZW1lbnQoZ2V0RWxlbWVudChwYXJzZUVsZW1lbnQoYnVmKS5jb250ZW50cylbMF0uY29udGVudHMpO1xuICAgIHJldHVybiBlbmNvZGVCYXNlNjQodGJzQ2VydGlmaWNhdGVbdGJzQ2VydGlmaWNhdGVbMF0ucmF3WzBdID09PSAweGEwID8gNiA6IDVdLnJhdyk7XG59XG5mdW5jdGlvbiBnZXRTUEtJKHg1MDkpIHtcbiAgICBjb25zdCBwZW0gPSB4NTA5LnJlcGxhY2UoLyg/Oi0tLS0tKD86QkVHSU58RU5EKSBDRVJUSUZJQ0FURS0tLS0tfFxccykvZywgJycpO1xuICAgIGNvbnN0IHJhdyA9IGRlY29kZUJhc2U2NChwZW0pO1xuICAgIHJldHVybiBmb3JtYXRQRU0oc3BraUZyb21YNTA5KHJhdyksICdQVUJMSUMgS0VZJyk7XG59XG5leHBvcnQgY29uc3QgZnJvbVg1MDkgPSAocGVtLCBhbGcsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgc3BraTtcbiAgICB0cnkge1xuICAgICAgICBzcGtpID0gZ2V0U1BLSShwZW0pO1xuICAgIH1cbiAgICBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmFpbGVkIHRvIHBhcnNlIHRoZSBYLjUwOSBjZXJ0aWZpY2F0ZScsIHsgY2F1c2UgfSk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tU1BLSShzcGtpLCBhbGcsIG9wdGlvbnMpO1xufTtcbiIsImltcG9ydCB7IGVuY29kZXIsIGRlY29kZXIgfSBmcm9tICcuLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmV4cG9ydCBjb25zdCBlbmNvZGVCYXNlNjQgPSAoaW5wdXQpID0+IHtcbiAgICBsZXQgdW5lbmNvZGVkID0gaW5wdXQ7XG4gICAgaWYgKHR5cGVvZiB1bmVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHVuZW5jb2RlZCA9IGVuY29kZXIuZW5jb2RlKHVuZW5jb2RlZCk7XG4gICAgfVxuICAgIGNvbnN0IENIVU5LX1NJWkUgPSAweDgwMDA7XG4gICAgY29uc3QgYXJyID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmVuY29kZWQubGVuZ3RoOyBpICs9IENIVU5LX1NJWkUpIHtcbiAgICAgICAgYXJyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB1bmVuY29kZWQuc3ViYXJyYXkoaSwgaSArIENIVU5LX1NJWkUpKSk7XG4gICAgfVxuICAgIHJldHVybiBidG9hKGFyci5qb2luKCcnKSk7XG59O1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IChpbnB1dCkgPT4ge1xuICAgIHJldHVybiBlbmNvZGVCYXNlNjQoaW5wdXQpLnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xufTtcbmV4cG9ydCBjb25zdCBkZWNvZGVCYXNlNjQgPSAoZW5jb2RlZCkgPT4ge1xuICAgIGNvbnN0IGJpbmFyeSA9IGF0b2IoZW5jb2RlZCk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShiaW5hcnkubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmFyeS5sZW5ndGg7IGkrKykge1xuICAgICAgICBieXRlc1tpXSA9IGJpbmFyeS5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG59O1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IChpbnB1dCkgPT4ge1xuICAgIGxldCBlbmNvZGVkID0gaW5wdXQ7XG4gICAgaWYgKGVuY29kZWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGVuY29kZWQgPSBkZWNvZGVyLmRlY29kZShlbmNvZGVkKTtcbiAgICB9XG4gICAgZW5jb2RlZCA9IGVuY29kZWQucmVwbGFjZSgvLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVCYXNlNjQoZW5jb2RlZCk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgaW5wdXQgdG8gYmUgZGVjb2RlZCBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQuJyk7XG4gICAgfVxufTtcbiIsImNvbnN0IGJvZ3VzV2ViQ3J5cHRvID0gW1xuICAgIHsgaGFzaDogJ1NIQS0yNTYnLCBuYW1lOiAnSE1BQycgfSxcbiAgICB0cnVlLFxuICAgIFsnc2lnbiddLFxuXTtcbmV4cG9ydCBkZWZhdWx0IGJvZ3VzV2ViQ3J5cHRvO1xuIiwiaW1wb3J0IHsgSldFSW52YWxpZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmNvbnN0IGNoZWNrQ2VrTGVuZ3RoID0gKGNlaywgZXhwZWN0ZWQpID0+IHtcbiAgICBjb25zdCBhY3R1YWwgPSBjZWsuYnl0ZUxlbmd0aCA8PCAzO1xuICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VJbnZhbGlkKGBJbnZhbGlkIENvbnRlbnQgRW5jcnlwdGlvbiBLZXkgbGVuZ3RoLiBFeHBlY3RlZCAke2V4cGVjdGVkfSBiaXRzLCBnb3QgJHthY3R1YWx9IGJpdHNgKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tDZWtMZW5ndGg7XG4iLCJleHBvcnQgZGVmYXVsdCAoYWxnLCBrZXkpID0+IHtcbiAgICBpZiAoYWxnLnN0YXJ0c1dpdGgoJ1JTJykgfHwgYWxnLnN0YXJ0c1dpdGgoJ1BTJykpIHtcbiAgICAgICAgY29uc3QgeyBtb2R1bHVzTGVuZ3RoIH0gPSBrZXkuYWxnb3JpdGhtO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsdXNMZW5ndGggIT09ICdudW1iZXInIHx8IG1vZHVsdXNMZW5ndGggPCAyMDQ4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2FsZ30gcmVxdWlyZXMga2V5IG1vZHVsdXNMZW5ndGggdG8gYmUgMjA0OCBiaXRzIG9yIGxhcmdlcmApO1xuICAgICAgICB9XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGNvbmNhdCwgdWludDY0YmUgfSBmcm9tICcuLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmltcG9ydCBjaGVja0l2TGVuZ3RoIGZyb20gJy4uL2xpYi9jaGVja19pdl9sZW5ndGguanMnO1xuaW1wb3J0IGNoZWNrQ2VrTGVuZ3RoIGZyb20gJy4vY2hlY2tfY2VrX2xlbmd0aC5qcyc7XG5pbXBvcnQgdGltaW5nU2FmZUVxdWFsIGZyb20gJy4vdGltaW5nX3NhZmVfZXF1YWwuanMnO1xuaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCwgSldFRGVjcnlwdGlvbkZhaWxlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCBjcnlwdG8sIHsgaXNDcnlwdG9LZXkgfSBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5pbXBvcnQgeyBjaGVja0VuY0NyeXB0b0tleSB9IGZyb20gJy4uL2xpYi9jcnlwdG9fa2V5LmpzJztcbmltcG9ydCBpbnZhbGlkS2V5SW5wdXQgZnJvbSAnLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzJztcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAnLi9pc19rZXlfbGlrZS5qcyc7XG5hc3luYyBmdW5jdGlvbiBjYmNEZWNyeXB0KGVuYywgY2VrLCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpIHtcbiAgICBpZiAoIShjZWsgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChjZWssICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBjb25zdCBrZXlTaXplID0gcGFyc2VJbnQoZW5jLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgY29uc3QgZW5jS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGNlay5zdWJhcnJheShrZXlTaXplID4+IDMpLCAnQUVTLUNCQycsIGZhbHNlLCBbJ2RlY3J5cHQnXSk7XG4gICAgY29uc3QgbWFjS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGNlay5zdWJhcnJheSgwLCBrZXlTaXplID4+IDMpLCB7XG4gICAgICAgIGhhc2g6IGBTSEEtJHtrZXlTaXplIDw8IDF9YCxcbiAgICAgICAgbmFtZTogJ0hNQUMnLFxuICAgIH0sIGZhbHNlLCBbJ3NpZ24nXSk7XG4gICAgY29uc3QgbWFjRGF0YSA9IGNvbmNhdChhYWQsIGl2LCBjaXBoZXJ0ZXh0LCB1aW50NjRiZShhYWQubGVuZ3RoIDw8IDMpKTtcbiAgICBjb25zdCBleHBlY3RlZFRhZyA9IG5ldyBVaW50OEFycmF5KChhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBtYWNLZXksIG1hY0RhdGEpKS5zbGljZSgwLCBrZXlTaXplID4+IDMpKTtcbiAgICBsZXQgbWFjQ2hlY2tQYXNzZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgbWFjQ2hlY2tQYXNzZWQgPSB0aW1pbmdTYWZlRXF1YWwodGFnLCBleHBlY3RlZFRhZyk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgIH1cbiAgICBpZiAoIW1hY0NoZWNrUGFzc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VEZWNyeXB0aW9uRmFpbGVkKCk7XG4gICAgfVxuICAgIGxldCBwbGFpbnRleHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcGxhaW50ZXh0ID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHsgaXYsIG5hbWU6ICdBRVMtQ0JDJyB9LCBlbmNLZXksIGNpcGhlcnRleHQpKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9iKSB7XG4gICAgfVxuICAgIGlmICghcGxhaW50ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VEZWNyeXB0aW9uRmFpbGVkKCk7XG4gICAgfVxuICAgIHJldHVybiBwbGFpbnRleHQ7XG59XG5hc3luYyBmdW5jdGlvbiBnY21EZWNyeXB0KGVuYywgY2VrLCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpIHtcbiAgICBsZXQgZW5jS2V5O1xuICAgIGlmIChjZWsgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGVuY0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBjZWssICdBRVMtR0NNJywgZmFsc2UsIFsnZGVjcnlwdCddKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoZWNrRW5jQ3J5cHRvS2V5KGNlaywgZW5jLCAnZGVjcnlwdCcpO1xuICAgICAgICBlbmNLZXkgPSBjZWs7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmRlY3J5cHQoe1xuICAgICAgICAgICAgYWRkaXRpb25hbERhdGE6IGFhZCxcbiAgICAgICAgICAgIGl2LFxuICAgICAgICAgICAgbmFtZTogJ0FFUy1HQ00nLFxuICAgICAgICAgICAgdGFnTGVuZ3RoOiAxMjgsXG4gICAgICAgIH0sIGVuY0tleSwgY29uY2F0KGNpcGhlcnRleHQsIHRhZykpKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHRocm93IG5ldyBKV0VEZWNyeXB0aW9uRmFpbGVkKCk7XG4gICAgfVxufVxuY29uc3QgZGVjcnlwdCA9IGFzeW5jIChlbmMsIGNlaywgY2lwaGVydGV4dCwgaXYsIHRhZywgYWFkKSA9PiB7XG4gICAgaWYgKCFpc0NyeXB0b0tleShjZWspICYmICEoY2VrIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihpbnZhbGlkS2V5SW5wdXQoY2VrLCAuLi50eXBlcywgJ1VpbnQ4QXJyYXknKSk7XG4gICAgfVxuICAgIGNoZWNrSXZMZW5ndGgoZW5jLCBpdik7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgICAgY2FzZSAnQTEyOENCQy1IUzI1Nic6XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICBjYXNlICdBMjU2Q0JDLUhTNTEyJzpcbiAgICAgICAgICAgIGlmIChjZWsgaW5zdGFuY2VvZiBVaW50OEFycmF5KVxuICAgICAgICAgICAgICAgIGNoZWNrQ2VrTGVuZ3RoKGNlaywgcGFyc2VJbnQoZW5jLnNsaWNlKC0zKSwgMTApKTtcbiAgICAgICAgICAgIHJldHVybiBjYmNEZWNyeXB0KGVuYywgY2VrLCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpO1xuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTSc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICAgICAgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgY2hlY2tDZWtMZW5ndGgoY2VrLCBwYXJzZUludChlbmMuc2xpY2UoMSwgNCksIDEwKSk7XG4gICAgICAgICAgICByZXR1cm4gZ2NtRGVjcnlwdChlbmMsIGNlaywgY2lwaGVydGV4dCwgaXYsIHRhZywgYWFkKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBKV0UgQ29udGVudCBFbmNyeXB0aW9uIEFsZ29yaXRobScpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWNyeXB0O1xuIiwiaW1wb3J0IGNyeXB0byBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5jb25zdCBkaWdlc3QgPSBhc3luYyAoYWxnb3JpdGhtLCBkYXRhKSA9PiB7XG4gICAgY29uc3Qgc3VidGxlRGlnZXN0ID0gYFNIQS0ke2FsZ29yaXRobS5zbGljZSgtMyl9YDtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3Qoc3VidGxlRGlnZXN0LCBkYXRhKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZGlnZXN0O1xuIiwiaW1wb3J0IHsgZW5jb2RlciwgY29uY2F0LCB1aW50MzJiZSwgbGVuZ3RoQW5kSW5wdXQsIGNvbmNhdEtkZiB9IGZyb20gJy4uL2xpYi9idWZmZXJfdXRpbHMuanMnO1xuaW1wb3J0IGNyeXB0bywgeyBpc0NyeXB0b0tleSB9IGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmltcG9ydCB7IGNoZWNrRW5jQ3J5cHRvS2V5IH0gZnJvbSAnLi4vbGliL2NyeXB0b19rZXkuanMnO1xuaW1wb3J0IGludmFsaWRLZXlJbnB1dCBmcm9tICcuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanMnO1xuaW1wb3J0IHsgdHlwZXMgfSBmcm9tICcuL2lzX2tleV9saWtlLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZXJpdmVLZXkocHVibGljS2V5LCBwcml2YXRlS2V5LCBhbGdvcml0aG0sIGtleUxlbmd0aCwgYXB1ID0gbmV3IFVpbnQ4QXJyYXkoMCksIGFwdiA9IG5ldyBVaW50OEFycmF5KDApKSB7XG4gICAgaWYgKCFpc0NyeXB0b0tleShwdWJsaWNLZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KHB1YmxpY0tleSwgLi4udHlwZXMpKTtcbiAgICB9XG4gICAgY2hlY2tFbmNDcnlwdG9LZXkocHVibGljS2V5LCAnRUNESCcpO1xuICAgIGlmICghaXNDcnlwdG9LZXkocHJpdmF0ZUtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihpbnZhbGlkS2V5SW5wdXQocHJpdmF0ZUtleSwgLi4udHlwZXMpKTtcbiAgICB9XG4gICAgY2hlY2tFbmNDcnlwdG9LZXkocHJpdmF0ZUtleSwgJ0VDREgnLCAnZGVyaXZlQml0cycpO1xuICAgIGNvbnN0IHZhbHVlID0gY29uY2F0KGxlbmd0aEFuZElucHV0KGVuY29kZXIuZW5jb2RlKGFsZ29yaXRobSkpLCBsZW5ndGhBbmRJbnB1dChhcHUpLCBsZW5ndGhBbmRJbnB1dChhcHYpLCB1aW50MzJiZShrZXlMZW5ndGgpKTtcbiAgICBsZXQgbGVuZ3RoO1xuICAgIGlmIChwdWJsaWNLZXkuYWxnb3JpdGhtLm5hbWUgPT09ICdYMjU1MTknKSB7XG4gICAgICAgIGxlbmd0aCA9IDI1NjtcbiAgICB9XG4gICAgZWxzZSBpZiAocHVibGljS2V5LmFsZ29yaXRobS5uYW1lID09PSAnWDQ0OCcpIHtcbiAgICAgICAgbGVuZ3RoID0gNDQ4O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID1cbiAgICAgICAgICAgIE1hdGguY2VpbChwYXJzZUludChwdWJsaWNLZXkuYWxnb3JpdGhtLm5hbWVkQ3VydmUuc3Vic3RyKC0zKSwgMTApIC8gOCkgPDwgMztcbiAgICB9XG4gICAgY29uc3Qgc2hhcmVkU2VjcmV0ID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgICAgbmFtZTogcHVibGljS2V5LmFsZ29yaXRobS5uYW1lLFxuICAgICAgICBwdWJsaWM6IHB1YmxpY0tleSxcbiAgICB9LCBwcml2YXRlS2V5LCBsZW5ndGgpKTtcbiAgICByZXR1cm4gY29uY2F0S2RmKHNoYXJlZFNlY3JldCwga2V5TGVuZ3RoLCB2YWx1ZSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVFcGsoa2V5KSB7XG4gICAgaWYgKCFpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoa2V5LmFsZ29yaXRobSwgdHJ1ZSwgWydkZXJpdmVCaXRzJ10pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVjZGhBbGxvd2VkKGtleSkge1xuICAgIGlmICghaXNDcnlwdG9LZXkoa2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChrZXksIC4uLnR5cGVzKSk7XG4gICAgfVxuICAgIHJldHVybiAoWydQLTI1NicsICdQLTM4NCcsICdQLTUyMSddLmluY2x1ZGVzKGtleS5hbGdvcml0aG0ubmFtZWRDdXJ2ZSkgfHxcbiAgICAgICAga2V5LmFsZ29yaXRobS5uYW1lID09PSAnWDI1NTE5JyB8fFxuICAgICAgICBrZXkuYWxnb3JpdGhtLm5hbWUgPT09ICdYNDQ4Jyk7XG59XG4iLCJpbXBvcnQgeyBjb25jYXQsIHVpbnQ2NGJlIH0gZnJvbSAnLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgY2hlY2tJdkxlbmd0aCBmcm9tICcuLi9saWIvY2hlY2tfaXZfbGVuZ3RoLmpzJztcbmltcG9ydCBjaGVja0Nla0xlbmd0aCBmcm9tICcuL2NoZWNrX2Nla19sZW5ndGguanMnO1xuaW1wb3J0IGNyeXB0bywgeyBpc0NyeXB0b0tleSB9IGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmltcG9ydCB7IGNoZWNrRW5jQ3J5cHRvS2V5IH0gZnJvbSAnLi4vbGliL2NyeXB0b19rZXkuanMnO1xuaW1wb3J0IGludmFsaWRLZXlJbnB1dCBmcm9tICcuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanMnO1xuaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAnLi9pc19rZXlfbGlrZS5qcyc7XG5hc3luYyBmdW5jdGlvbiBjYmNFbmNyeXB0KGVuYywgcGxhaW50ZXh0LCBjZWssIGl2LCBhYWQpIHtcbiAgICBpZiAoIShjZWsgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChjZWssICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBjb25zdCBrZXlTaXplID0gcGFyc2VJbnQoZW5jLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgY29uc3QgZW5jS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGNlay5zdWJhcnJheShrZXlTaXplID4+IDMpLCAnQUVTLUNCQycsIGZhbHNlLCBbJ2VuY3J5cHQnXSk7XG4gICAgY29uc3QgbWFjS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGNlay5zdWJhcnJheSgwLCBrZXlTaXplID4+IDMpLCB7XG4gICAgICAgIGhhc2g6IGBTSEEtJHtrZXlTaXplIDw8IDF9YCxcbiAgICAgICAgbmFtZTogJ0hNQUMnLFxuICAgIH0sIGZhbHNlLCBbJ3NpZ24nXSk7XG4gICAgY29uc3QgY2lwaGVydGV4dCA9IG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZW5jcnlwdCh7XG4gICAgICAgIGl2LFxuICAgICAgICBuYW1lOiAnQUVTLUNCQycsXG4gICAgfSwgZW5jS2V5LCBwbGFpbnRleHQpKTtcbiAgICBjb25zdCBtYWNEYXRhID0gY29uY2F0KGFhZCwgaXYsIGNpcGhlcnRleHQsIHVpbnQ2NGJlKGFhZC5sZW5ndGggPDwgMykpO1xuICAgIGNvbnN0IHRhZyA9IG5ldyBVaW50OEFycmF5KChhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBtYWNLZXksIG1hY0RhdGEpKS5zbGljZSgwLCBrZXlTaXplID4+IDMpKTtcbiAgICByZXR1cm4geyBjaXBoZXJ0ZXh0LCB0YWcgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdjbUVuY3J5cHQoZW5jLCBwbGFpbnRleHQsIGNlaywgaXYsIGFhZCkge1xuICAgIGxldCBlbmNLZXk7XG4gICAgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgZW5jS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGNlaywgJ0FFUy1HQ00nLCBmYWxzZSwgWydlbmNyeXB0J10pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hlY2tFbmNDcnlwdG9LZXkoY2VrLCBlbmMsICdlbmNyeXB0Jyk7XG4gICAgICAgIGVuY0tleSA9IGNlaztcbiAgICB9XG4gICAgY29uc3QgZW5jcnlwdGVkID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5lbmNyeXB0KHtcbiAgICAgICAgYWRkaXRpb25hbERhdGE6IGFhZCxcbiAgICAgICAgaXYsXG4gICAgICAgIG5hbWU6ICdBRVMtR0NNJyxcbiAgICAgICAgdGFnTGVuZ3RoOiAxMjgsXG4gICAgfSwgZW5jS2V5LCBwbGFpbnRleHQpKTtcbiAgICBjb25zdCB0YWcgPSBlbmNyeXB0ZWQuc2xpY2UoLTE2KTtcbiAgICBjb25zdCBjaXBoZXJ0ZXh0ID0gZW5jcnlwdGVkLnNsaWNlKDAsIC0xNik7XG4gICAgcmV0dXJuIHsgY2lwaGVydGV4dCwgdGFnIH07XG59XG5jb25zdCBlbmNyeXB0ID0gYXN5bmMgKGVuYywgcGxhaW50ZXh0LCBjZWssIGl2LCBhYWQpID0+IHtcbiAgICBpZiAoIWlzQ3J5cHRvS2V5KGNlaykgJiYgIShjZWsgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChjZWssIC4uLnR5cGVzLCAnVWludDhBcnJheScpKTtcbiAgICB9XG4gICAgY2hlY2tJdkxlbmd0aChlbmMsIGl2KTtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgIGNhc2UgJ0EyNTZDQkMtSFM1MTInOlxuICAgICAgICAgICAgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgY2hlY2tDZWtMZW5ndGgoY2VrLCBwYXJzZUludChlbmMuc2xpY2UoLTMpLCAxMCkpO1xuICAgICAgICAgICAgcmV0dXJuIGNiY0VuY3J5cHQoZW5jLCBwbGFpbnRleHQsIGNlaywgaXYsIGFhZCk7XG4gICAgICAgIGNhc2UgJ0ExMjhHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTSc6XG4gICAgICAgICAgICBpZiAoY2VrIGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgICAgICAgICBjaGVja0Nla0xlbmd0aChjZWssIHBhcnNlSW50KGVuYy5zbGljZSgxLCA0KSwgMTApKTtcbiAgICAgICAgICAgIHJldHVybiBnY21FbmNyeXB0KGVuYywgcGxhaW50ZXh0LCBjZWssIGl2LCBhYWQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBDb250ZW50IEVuY3J5cHRpb24gQWxnb3JpdGhtJyk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGVuY3J5cHQ7XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNDbG91ZGZsYXJlV29ya2VycygpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBXZWJTb2NrZXRQYWlyICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCA9PT0gJ0Nsb3VkZmxhcmUtV29ya2VycycpIHx8XG4gICAgICAgICh0eXBlb2YgRWRnZVJ1bnRpbWUgIT09ICd1bmRlZmluZWQnICYmIEVkZ2VSdW50aW1lID09PSAndmVyY2VsJykpO1xufVxuIiwiaW1wb3J0IHsgSk9TRUVycm9yLCBKV0tTVGltZW91dCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmNvbnN0IGZldGNoSndrcyA9IGFzeW5jICh1cmwsIHRpbWVvdXQsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgY29udHJvbGxlcjtcbiAgICBsZXQgaWQ7XG4gICAgbGV0IHRpbWVkT3V0ID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRpbWVkT3V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLmhyZWYsIHtcbiAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyID8gY29udHJvbGxlci5zaWduYWwgOiB1bmRlZmluZWQsXG4gICAgICAgIHJlZGlyZWN0OiAnbWFudWFsJyxcbiAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgaWYgKHRpbWVkT3V0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEpXS1NUaW1lb3V0KCk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9KTtcbiAgICBpZiAoaWQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEpPU0VFcnJvcignRXhwZWN0ZWQgMjAwIE9LIGZyb20gdGhlIEpTT04gV2ViIEtleSBTZXQgSFRUUCByZXNwb25zZScpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpPU0VFcnJvcignRmFpbGVkIHRvIHBhcnNlIHRoZSBKU09OIFdlYiBLZXkgU2V0IEhUVFAgcmVzcG9uc2UgYXMgSlNPTicpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmZXRjaEp3a3M7XG4iLCJpbXBvcnQgeyBpc0Nsb3VkZmxhcmVXb3JrZXJzIH0gZnJvbSAnLi9lbnYuanMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5pbXBvcnQgeyBKT1NFTm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHJhbmRvbSBmcm9tICcuL3JhbmRvbS5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTZWNyZXQoYWxnLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBsZW5ndGg7XG4gICAgbGV0IGFsZ29yaXRobTtcbiAgICBsZXQga2V5VXNhZ2VzO1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ0hTMjU2JzpcbiAgICAgICAgY2FzZSAnSFMzODQnOlxuICAgICAgICBjYXNlICdIUzUxMic6XG4gICAgICAgICAgICBsZW5ndGggPSBwYXJzZUludChhbGcuc2xpY2UoLTMpLCAxMCk7XG4gICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdITUFDJywgaGFzaDogYFNIQS0ke2xlbmd0aH1gLCBsZW5ndGggfTtcbiAgICAgICAgICAgIGtleVVzYWdlcyA9IFsnc2lnbicsICd2ZXJpZnknXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgIGNhc2UgJ0EyNTZDQkMtSFM1MTInOlxuICAgICAgICAgICAgbGVuZ3RoID0gcGFyc2VJbnQoYWxnLnNsaWNlKC0zKSwgMTApO1xuICAgICAgICAgICAgcmV0dXJuIHJhbmRvbShuZXcgVWludDhBcnJheShsZW5ndGggPj4gMykpO1xuICAgICAgICBjYXNlICdBMTI4S1cnOlxuICAgICAgICBjYXNlICdBMTkyS1cnOlxuICAgICAgICBjYXNlICdBMjU2S1cnOlxuICAgICAgICAgICAgbGVuZ3RoID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdBRVMtS1cnLCBsZW5ndGggfTtcbiAgICAgICAgICAgIGtleVVzYWdlcyA9IFsnd3JhcEtleScsICd1bndyYXBLZXknXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBMTI4R0NNS1cnOlxuICAgICAgICBjYXNlICdBMTkyR0NNS1cnOlxuICAgICAgICBjYXNlICdBMjU2R0NNS1cnOlxuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTSc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICAgICAgbGVuZ3RoID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdBRVMtR0NNJywgbGVuZ3RoIH07XG4gICAgICAgICAgICBrZXlVc2FnZXMgPSBbJ2VuY3J5cHQnLCAnZGVjcnlwdCddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBKV0sgXCJhbGdcIiAoQWxnb3JpdGhtKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoYWxnb3JpdGhtLCAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXh0cmFjdGFibGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlLCBrZXlVc2FnZXMpO1xufVxuZnVuY3Rpb24gZ2V0TW9kdWx1c0xlbmd0aE9wdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IG1vZHVsdXNMZW5ndGggPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubW9kdWx1c0xlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMjA0ODtcbiAgICBpZiAodHlwZW9mIG1vZHVsdXNMZW5ndGggIT09ICdudW1iZXInIHx8IG1vZHVsdXNMZW5ndGggPCAyMDQ4KSB7XG4gICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIG1vZHVsdXNMZW5ndGggb3B0aW9uIHByb3ZpZGVkLCAyMDQ4IGJpdHMgb3IgbGFyZ2VyIGtleXMgbXVzdCBiZSB1c2VkJyk7XG4gICAgfVxuICAgIHJldHVybiBtb2R1bHVzTGVuZ3RoO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpcihhbGcsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgbGV0IGFsZ29yaXRobTtcbiAgICBsZXQga2V5VXNhZ2VzO1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ1BTMjU2JzpcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdQUzUxMic6XG4gICAgICAgICAgICBhbGdvcml0aG0gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JTQS1QU1MnLFxuICAgICAgICAgICAgICAgIGhhc2g6IGBTSEEtJHthbGcuc2xpY2UoLTMpfWAsXG4gICAgICAgICAgICAgICAgcHVibGljRXhwb25lbnQ6IG5ldyBVaW50OEFycmF5KFsweDAxLCAweDAwLCAweDAxXSksXG4gICAgICAgICAgICAgICAgbW9kdWx1c0xlbmd0aDogZ2V0TW9kdWx1c0xlbmd0aE9wdGlvbihvcHRpb25zKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBrZXlVc2FnZXMgPSBbJ3NpZ24nLCAndmVyaWZ5J107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ1JTNTEyJzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLFxuICAgICAgICAgICAgICAgIGhhc2g6IGBTSEEtJHthbGcuc2xpY2UoLTMpfWAsXG4gICAgICAgICAgICAgICAgcHVibGljRXhwb25lbnQ6IG5ldyBVaW50OEFycmF5KFsweDAxLCAweDAwLCAweDAxXSksXG4gICAgICAgICAgICAgICAgbW9kdWx1c0xlbmd0aDogZ2V0TW9kdWx1c0xlbmd0aE9wdGlvbihvcHRpb25zKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBrZXlVc2FnZXMgPSBbJ3NpZ24nLCAndmVyaWZ5J107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAnOlxuICAgICAgICBjYXNlICdSU0EtT0FFUC0yNTYnOlxuICAgICAgICBjYXNlICdSU0EtT0FFUC0zODQnOlxuICAgICAgICBjYXNlICdSU0EtT0FFUC01MTInOlxuICAgICAgICAgICAgYWxnb3JpdGhtID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXG4gICAgICAgICAgICAgICAgaGFzaDogYFNIQS0ke3BhcnNlSW50KGFsZy5zbGljZSgtMyksIDEwKSB8fCAxfWAsXG4gICAgICAgICAgICAgICAgcHVibGljRXhwb25lbnQ6IG5ldyBVaW50OEFycmF5KFsweDAxLCAweDAwLCAweDAxXSksXG4gICAgICAgICAgICAgICAgbW9kdWx1c0xlbmd0aDogZ2V0TW9kdWx1c0xlbmd0aE9wdGlvbihvcHRpb25zKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBrZXlVc2FnZXMgPSBbJ2RlY3J5cHQnLCAndW53cmFwS2V5JywgJ2VuY3J5cHQnLCAnd3JhcEtleSddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtMjU2JyB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gWydzaWduJywgJ3ZlcmlmeSddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtMzg0JyB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gWydzaWduJywgJ3ZlcmlmeSddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtNTIxJyB9O1xuICAgICAgICAgICAga2V5VXNhZ2VzID0gWydzaWduJywgJ3ZlcmlmeSddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VkRFNBJzpcbiAgICAgICAgICAgIGtleVVzYWdlcyA9IFsnc2lnbicsICd2ZXJpZnknXTtcbiAgICAgICAgICAgIGNvbnN0IGNydiA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcnYpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdFZDI1NTE5JztcbiAgICAgICAgICAgIHN3aXRjaCAoY3J2KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRWQyNTUxOSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRWQ0NDgnOlxuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6IGNydiB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBjcnYgb3B0aW9uIHByb3ZpZGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRUNESC1FUyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMTkyS1cnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0EyNTZLVyc6IHtcbiAgICAgICAgICAgIGtleVVzYWdlcyA9IFsnZGVyaXZlS2V5JywgJ2Rlcml2ZUJpdHMnXTtcbiAgICAgICAgICAgIGNvbnN0IGNydiA9IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcnYpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdQLTI1Nic7XG4gICAgICAgICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1AtMjU2JzpcbiAgICAgICAgICAgICAgICBjYXNlICdQLTM4NCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUC01MjEnOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDREgnLCBuYW1lZEN1cnZlOiBjcnYgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ1gyNTUxOSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnWDQ0OCc6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogY3J2IH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIGNydiBvcHRpb24gcHJvdmlkZWQsIHN1cHBvcnRlZCB2YWx1ZXMgYXJlIFAtMjU2LCBQLTM4NCwgUC01MjEsIFgyNTUxOSwgYW5kIFg0NDgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBKV0sgXCJhbGdcIiAoQWxnb3JpdGhtKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCBjcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KGFsZ29yaXRobSwgKF9jID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV4dHJhY3RhYmxlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBmYWxzZSwga2V5VXNhZ2VzKSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGFsZ29yaXRobS5uYW1lID09PSAnRWQyNTUxOScgJiZcbiAgICAgICAgICAgIChlcnIgPT09IG51bGwgfHwgZXJyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnIubmFtZSkgPT09ICdOb3RTdXBwb3J0ZWRFcnJvcicgJiZcbiAgICAgICAgICAgIGlzQ2xvdWRmbGFyZVdvcmtlcnMoKSkge1xuICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnTk9ERS1FRDI1NTE5JywgbmFtZWRDdXJ2ZTogJ05PREUtRUQyNTUxOScgfTtcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgY3J5cHRvLnN1YnRsZS5nZW5lcmF0ZUtleShhbGdvcml0aG0sIChfZCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5leHRyYWN0YWJsZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZmFsc2UsIGtleVVzYWdlcykpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59XG4iLCJpbXBvcnQgY3J5cHRvLCB7IGlzQ3J5cHRvS2V5IH0gZnJvbSAnLi93ZWJjcnlwdG8uanMnO1xuaW1wb3J0IHsgY2hlY2tTaWdDcnlwdG9LZXkgfSBmcm9tICcuLi9saWIvY3J5cHRvX2tleS5qcyc7XG5pbXBvcnQgaW52YWxpZEtleUlucHV0IGZyb20gJy4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qcyc7XG5pbXBvcnQgeyB0eXBlcyB9IGZyb20gJy4vaXNfa2V5X2xpa2UuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q3J5cHRvS2V5KGFsZywga2V5LCB1c2FnZSkge1xuICAgIGlmIChpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIGNoZWNrU2lnQ3J5cHRvS2V5KGtleSwgYWxnLCB1c2FnZSk7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGlmICghYWxnLnN0YXJ0c1dpdGgoJ0hTJykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGtleSwgeyBoYXNoOiBgU0hBLSR7YWxnLnNsaWNlKC0zKX1gLCBuYW1lOiAnSE1BQycgfSwgZmFsc2UsIFt1c2FnZV0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChrZXksIC4uLnR5cGVzLCAnVWludDhBcnJheScpKTtcbn1cbiIsImltcG9ydCB7IGlzQ3J5cHRvS2V5IH0gZnJvbSAnLi93ZWJjcnlwdG8uanMnO1xuZXhwb3J0IGRlZmF1bHQgKGtleSkgPT4ge1xuICAgIHJldHVybiBpc0NyeXB0b0tleShrZXkpO1xufTtcbmV4cG9ydCBjb25zdCB0eXBlcyA9IFsnQ3J5cHRvS2V5J107XG4iLCJpbXBvcnQgeyBpc0Nsb3VkZmxhcmVXb3JrZXJzIH0gZnJvbSAnLi9lbnYuanMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5pbXBvcnQgeyBKT1NFTm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgZGVjb2RlIGFzIGJhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLmpzJztcbmZ1bmN0aW9uIHN1YnRsZU1hcHBpbmcoandrKSB7XG4gICAgbGV0IGFsZ29yaXRobTtcbiAgICBsZXQga2V5VXNhZ2VzO1xuICAgIHN3aXRjaCAoandrLmt0eSkge1xuICAgICAgICBjYXNlICdvY3QnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGp3ay5hbGcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdIUzI1Nic6XG4gICAgICAgICAgICAgICAgY2FzZSAnSFMzODQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0hTNTEyJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnSE1BQycsIGhhc2g6IGBTSEEtJHtqd2suYWxnLnNsaWNlKC0zKX1gIH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IFsnc2lnbicsICd2ZXJpZnknXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQTEyOENCQy1IUzI1Nic6XG4gICAgICAgICAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKGAke2p3ay5hbGd9IGtleXMgY2Fubm90IGJlIGltcG9ydGVkIGFzIENyeXB0b0tleSBpbnN0YW5jZXNgKTtcbiAgICAgICAgICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdBMjU2R0NNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdBMTI4R0NNS1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0ExOTJHQ01LVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnQTI1NkdDTUtXJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnQUVTLUdDTScgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gWydlbmNyeXB0JywgJ2RlY3J5cHQnXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQTEyOEtXJzpcbiAgICAgICAgICAgICAgICBjYXNlICdBMTkyS1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0EyNTZLVyc6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0FFUy1LVycgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gWyd3cmFwS2V5JywgJ3Vud3JhcEtleSddO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdQQkVTMi1IUzI1NitBMTI4S1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1BCRVMyLUhTMzg0K0ExOTJLVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUEJFUzItSFM1MTIrQTI1NktXJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnUEJLREYyJyB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBbJ2Rlcml2ZUJpdHMnXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdSU0EnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGp3ay5hbGcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdQUzI1Nic6XG4gICAgICAgICAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1BTNTEyJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnUlNBLVBTUycsIGhhc2g6IGBTSEEtJHtqd2suYWxnLnNsaWNlKC0zKX1gIH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IGp3ay5kID8gWydzaWduJ10gOiBbJ3ZlcmlmeSddO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgICAgICAgICAgY2FzZSAnUlMzODQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1JTNTEyJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLCBoYXNoOiBgU0hBLSR7andrLmFsZy5zbGljZSgtMyl9YCB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnc2lnbiddIDogWyd2ZXJpZnknXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnUlNBLU9BRVAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgICAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdSU0EtT0FFUC01MTInOlxuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogYFNIQS0ke3BhcnNlSW50KGp3ay5hbGcuc2xpY2UoLTMpLCAxMCkgfHwgMX1gLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnZGVjcnlwdCcsICd1bndyYXBLZXknXSA6IFsnZW5jcnlwdCcsICd3cmFwS2V5J107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIEpXSyBcImFsZ1wiIChBbGdvcml0aG0pIFBhcmFtZXRlciB2YWx1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnRUMnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGp3ay5hbGcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtMjU2JyB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnc2lnbiddIDogWyd2ZXJpZnknXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdFQ0RTQScsIG5hbWVkQ3VydmU6ICdQLTM4NCcgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gandrLmQgPyBbJ3NpZ24nXSA6IFsndmVyaWZ5J107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnRUNEU0EnLCBuYW1lZEN1cnZlOiAnUC01MjEnIH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IGp3ay5kID8gWydzaWduJ10gOiBbJ3ZlcmlmeSddO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RILUVTJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RILUVTK0ExMjhLVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESC1FUytBMTkyS1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0VDREgtRVMrQTI1NktXJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnRUNESCcsIG5hbWVkQ3VydmU6IGp3ay5jcnYgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gandrLmQgPyBbJ2Rlcml2ZUJpdHMnXSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBKV0sgXCJhbGdcIiAoQWxnb3JpdGhtKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ09LUCc6IHtcbiAgICAgICAgICAgIHN3aXRjaCAoandrLmFsZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VkRFNBJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiBqd2suY3J2IH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IGp3ay5kID8gWydzaWduJ10gOiBbJ3ZlcmlmeSddO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RILUVTJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RILUVTK0ExMjhLVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESC1FUytBMTkyS1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0VDREgtRVMrQTI1NktXJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiBqd2suY3J2IH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IGp3ay5kID8gWydkZXJpdmVCaXRzJ10gOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwia3R5XCIgKEtleSBUeXBlKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgYWxnb3JpdGhtLCBrZXlVc2FnZXMgfTtcbn1cbmNvbnN0IHBhcnNlID0gYXN5bmMgKGp3aykgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKCFqd2suYWxnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYWxnXCIgYXJndW1lbnQgaXMgcmVxdWlyZWQgd2hlbiBcImp3ay5hbGdcIiBpcyBub3QgcHJlc2VudCcpO1xuICAgIH1cbiAgICBjb25zdCB7IGFsZ29yaXRobSwga2V5VXNhZ2VzIH0gPSBzdWJ0bGVNYXBwaW5nKGp3ayk7XG4gICAgY29uc3QgcmVzdCA9IFtcbiAgICAgICAgYWxnb3JpdGhtLFxuICAgICAgICAoX2EgPSBqd2suZXh0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcbiAgICAgICAgKF9iID0gandrLmtleV9vcHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGtleVVzYWdlcyxcbiAgICBdO1xuICAgIGlmIChhbGdvcml0aG0ubmFtZSA9PT0gJ1BCS0RGMicpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBiYXNlNjR1cmwoandrLmspLCAuLi5yZXN0KTtcbiAgICB9XG4gICAgY29uc3Qga2V5RGF0YSA9IHsgLi4uandrIH07XG4gICAgZGVsZXRlIGtleURhdGEuYWxnO1xuICAgIGRlbGV0ZSBrZXlEYXRhLnVzZTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ2p3aycsIGtleURhdGEsIC4uLnJlc3QpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChhbGdvcml0aG0ubmFtZSA9PT0gJ0VkMjU1MTknICYmXG4gICAgICAgICAgICAoZXJyID09PSBudWxsIHx8IGVyciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyLm5hbWUpID09PSAnTm90U3VwcG9ydGVkRXJyb3InICYmXG4gICAgICAgICAgICBpc0Nsb3VkZmxhcmVXb3JrZXJzKCkpIHtcbiAgICAgICAgICAgIHJlc3RbMF0gPSB7IG5hbWU6ICdOT0RFLUVEMjU1MTknLCBuYW1lZEN1cnZlOiAnTk9ERS1FRDI1NTE5JyB9O1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdqd2snLCBrZXlEYXRhLCAuLi5yZXN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHBhcnNlO1xuIiwiaW1wb3J0IGNyeXB0bywgeyBpc0NyeXB0b0tleSB9IGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmltcG9ydCBpbnZhbGlkS2V5SW5wdXQgZnJvbSAnLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzJztcbmltcG9ydCB7IGVuY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyB0eXBlcyB9IGZyb20gJy4vaXNfa2V5X2xpa2UuanMnO1xuY29uc3Qga2V5VG9KV0sgPSBhc3luYyAoa2V5KSA9PiB7XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGt0eTogJ29jdCcsXG4gICAgICAgICAgICBrOiBiYXNlNjR1cmwoa2V5KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMsICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBpZiAoIWtleS5leHRyYWN0YWJsZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub24tZXh0cmFjdGFibGUgQ3J5cHRvS2V5IGNhbm5vdCBiZSBleHBvcnRlZCBhcyBhIEpXSycpO1xuICAgIH1cbiAgICBjb25zdCB7IGV4dCwga2V5X29wcywgYWxnLCB1c2UsIC4uLmp3ayB9ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ2p3aycsIGtleSk7XG4gICAgcmV0dXJuIGp3aztcbn07XG5leHBvcnQgZGVmYXVsdCBrZXlUb0pXSztcbiIsImltcG9ydCByYW5kb20gZnJvbSAnLi9yYW5kb20uanMnO1xuaW1wb3J0IHsgcDJzIGFzIGNvbmNhdFNhbHQgfSBmcm9tICcuLi9saWIvYnVmZmVyX3V0aWxzLmpzJztcbmltcG9ydCB7IGVuY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyB3cmFwLCB1bndyYXAgfSBmcm9tICcuL2Flc2t3LmpzJztcbmltcG9ydCBjaGVja1AycyBmcm9tICcuLi9saWIvY2hlY2tfcDJzLmpzJztcbmltcG9ydCBjcnlwdG8sIHsgaXNDcnlwdG9LZXkgfSBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5pbXBvcnQgeyBjaGVja0VuY0NyeXB0b0tleSB9IGZyb20gJy4uL2xpYi9jcnlwdG9fa2V5LmpzJztcbmltcG9ydCBpbnZhbGlkS2V5SW5wdXQgZnJvbSAnLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzJztcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAnLi9pc19rZXlfbGlrZS5qcyc7XG5mdW5jdGlvbiBnZXRDcnlwdG9LZXkoa2V5LCBhbGcpIHtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGtleSwgJ1BCS0RGMicsIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnXSk7XG4gICAgfVxuICAgIGlmIChpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIGNoZWNrRW5jQ3J5cHRvS2V5KGtleSwgYWxnLCAnZGVyaXZlQml0cycsICdkZXJpdmVLZXknKTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihpbnZhbGlkS2V5SW5wdXQoa2V5LCAuLi50eXBlcywgJ1VpbnQ4QXJyYXknKSk7XG59XG5hc3luYyBmdW5jdGlvbiBkZXJpdmVLZXkocDJzLCBhbGcsIHAyYywga2V5KSB7XG4gICAgY2hlY2tQMnMocDJzKTtcbiAgICBjb25zdCBzYWx0ID0gY29uY2F0U2FsdChhbGcsIHAycyk7XG4gICAgY29uc3Qga2V5bGVuID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEzLCAxNiksIDEwKTtcbiAgICBjb25zdCBzdWJ0bGVBbGcgPSB7XG4gICAgICAgIGhhc2g6IGBTSEEtJHthbGcuc2xpY2UoOCwgMTEpfWAsXG4gICAgICAgIGl0ZXJhdGlvbnM6IHAyYyxcbiAgICAgICAgbmFtZTogJ1BCS0RGMicsXG4gICAgICAgIHNhbHQsXG4gICAgfTtcbiAgICBjb25zdCB3cmFwQWxnID0ge1xuICAgICAgICBsZW5ndGg6IGtleWxlbixcbiAgICAgICAgbmFtZTogJ0FFUy1LVycsXG4gICAgfTtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBnZXRDcnlwdG9LZXkoa2V5LCBhbGcpO1xuICAgIGlmIChjcnlwdG9LZXkudXNhZ2VzLmluY2x1ZGVzKCdkZXJpdmVCaXRzJykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGVyaXZlQml0cyhzdWJ0bGVBbGcsIGNyeXB0b0tleSwga2V5bGVuKSk7XG4gICAgfVxuICAgIGlmIChjcnlwdG9LZXkudXNhZ2VzLmluY2x1ZGVzKCdkZXJpdmVLZXknKSkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5kZXJpdmVLZXkoc3VidGxlQWxnLCBjcnlwdG9LZXksIHdyYXBBbGcsIGZhbHNlLCBbJ3dyYXBLZXknLCAndW53cmFwS2V5J10pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQQktERjIga2V5IFwidXNhZ2VzXCIgbXVzdCBpbmNsdWRlIFwiZGVyaXZlQml0c1wiIG9yIFwiZGVyaXZlS2V5XCInKTtcbn1cbmV4cG9ydCBjb25zdCBlbmNyeXB0ID0gYXN5bmMgKGFsZywga2V5LCBjZWssIHAyYyA9IDIwNDgsIHAycyA9IHJhbmRvbShuZXcgVWludDhBcnJheSgxNikpKSA9PiB7XG4gICAgY29uc3QgZGVyaXZlZCA9IGF3YWl0IGRlcml2ZUtleShwMnMsIGFsZywgcDJjLCBrZXkpO1xuICAgIGNvbnN0IGVuY3J5cHRlZEtleSA9IGF3YWl0IHdyYXAoYWxnLnNsaWNlKC02KSwgZGVyaXZlZCwgY2VrKTtcbiAgICByZXR1cm4geyBlbmNyeXB0ZWRLZXksIHAyYywgcDJzOiBiYXNlNjR1cmwocDJzKSB9O1xufTtcbmV4cG9ydCBjb25zdCBkZWNyeXB0ID0gYXN5bmMgKGFsZywga2V5LCBlbmNyeXB0ZWRLZXksIHAyYywgcDJzKSA9PiB7XG4gICAgY29uc3QgZGVyaXZlZCA9IGF3YWl0IGRlcml2ZUtleShwMnMsIGFsZywgcDJjLCBrZXkpO1xuICAgIHJldHVybiB1bndyYXAoYWxnLnNsaWNlKC02KSwgZGVyaXZlZCwgZW5jcnlwdGVkS2V5KTtcbn07XG4iLCJpbXBvcnQgY3J5cHRvIGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pO1xuIiwiaW1wb3J0IHN1YnRsZUFsZ29yaXRobSBmcm9tICcuL3N1YnRsZV9yc2Flcy5qcyc7XG5pbXBvcnQgYm9ndXNXZWJDcnlwdG8gZnJvbSAnLi9ib2d1cy5qcyc7XG5pbXBvcnQgY3J5cHRvLCB7IGlzQ3J5cHRvS2V5IH0gZnJvbSAnLi93ZWJjcnlwdG8uanMnO1xuaW1wb3J0IHsgY2hlY2tFbmNDcnlwdG9LZXkgfSBmcm9tICcuLi9saWIvY3J5cHRvX2tleS5qcyc7XG5pbXBvcnQgY2hlY2tLZXlMZW5ndGggZnJvbSAnLi9jaGVja19rZXlfbGVuZ3RoLmpzJztcbmltcG9ydCBpbnZhbGlkS2V5SW5wdXQgZnJvbSAnLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzJztcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAnLi9pc19rZXlfbGlrZS5qcyc7XG5leHBvcnQgY29uc3QgZW5jcnlwdCA9IGFzeW5jIChhbGcsIGtleSwgY2VrKSA9PiB7XG4gICAgaWYgKCFpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMpKTtcbiAgICB9XG4gICAgY2hlY2tFbmNDcnlwdG9LZXkoa2V5LCBhbGcsICdlbmNyeXB0JywgJ3dyYXBLZXknKTtcbiAgICBjaGVja0tleUxlbmd0aChhbGcsIGtleSk7XG4gICAgaWYgKGtleS51c2FnZXMuaW5jbHVkZXMoJ2VuY3J5cHQnKSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5lbmNyeXB0KHN1YnRsZUFsZ29yaXRobShhbGcpLCBrZXksIGNlaykpO1xuICAgIH1cbiAgICBpZiAoa2V5LnVzYWdlcy5pbmNsdWRlcygnd3JhcEtleScpKSB7XG4gICAgICAgIGNvbnN0IGNyeXB0b0tleUNlayA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBjZWssIC4uLmJvZ3VzV2ViQ3J5cHRvKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUud3JhcEtleSgncmF3JywgY3J5cHRvS2V5Q2VrLCBrZXksIHN1YnRsZUFsZ29yaXRobShhbGcpKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JTQS1PQUVQIGtleSBcInVzYWdlc1wiIG11c3QgaW5jbHVkZSBcImVuY3J5cHRcIiBvciBcIndyYXBLZXlcIiBmb3IgdGhpcyBvcGVyYXRpb24nKTtcbn07XG5leHBvcnQgY29uc3QgZGVjcnlwdCA9IGFzeW5jIChhbGcsIGtleSwgZW5jcnlwdGVkS2V5KSA9PiB7XG4gICAgaWYgKCFpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMpKTtcbiAgICB9XG4gICAgY2hlY2tFbmNDcnlwdG9LZXkoa2V5LCBhbGcsICdkZWNyeXB0JywgJ3Vud3JhcEtleScpO1xuICAgIGNoZWNrS2V5TGVuZ3RoKGFsZywga2V5KTtcbiAgICBpZiAoa2V5LnVzYWdlcy5pbmNsdWRlcygnZGVjcnlwdCcpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmRlY3J5cHQoc3VidGxlQWxnb3JpdGhtKGFsZyksIGtleSwgZW5jcnlwdGVkS2V5KSk7XG4gICAgfVxuICAgIGlmIChrZXkudXNhZ2VzLmluY2x1ZGVzKCd1bndyYXBLZXknKSkge1xuICAgICAgICBjb25zdCBjcnlwdG9LZXlDZWsgPSBhd2FpdCBjcnlwdG8uc3VidGxlLnVud3JhcEtleSgncmF3JywgZW5jcnlwdGVkS2V5LCBrZXksIHN1YnRsZUFsZ29yaXRobShhbGcpLCAuLi5ib2d1c1dlYkNyeXB0byk7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmV4cG9ydEtleSgncmF3JywgY3J5cHRvS2V5Q2VrKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JTQS1PQUVQIGtleSBcInVzYWdlc1wiIG11c3QgaW5jbHVkZSBcImRlY3J5cHRcIiBvciBcInVud3JhcEtleVwiIGZvciB0aGlzIG9wZXJhdGlvbicpO1xufTtcbiIsImltcG9ydCBzdWJ0bGVBbGdvcml0aG0gZnJvbSAnLi9zdWJ0bGVfZHNhLmpzJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnLi93ZWJjcnlwdG8uanMnO1xuaW1wb3J0IGNoZWNrS2V5TGVuZ3RoIGZyb20gJy4vY2hlY2tfa2V5X2xlbmd0aC5qcyc7XG5pbXBvcnQgZ2V0U2lnbktleSBmcm9tICcuL2dldF9zaWduX3ZlcmlmeV9rZXkuanMnO1xuY29uc3Qgc2lnbiA9IGFzeW5jIChhbGcsIGtleSwgZGF0YSkgPT4ge1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGdldFNpZ25LZXkoYWxnLCBrZXksICdzaWduJyk7XG4gICAgY2hlY2tLZXlMZW5ndGgoYWxnLCBjcnlwdG9LZXkpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbihzdWJ0bGVBbGdvcml0aG0oYWxnLCBjcnlwdG9LZXkuYWxnb3JpdGhtKSwgY3J5cHRvS2V5LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKTtcbn07XG5leHBvcnQgZGVmYXVsdCBzaWduO1xuIiwiaW1wb3J0IHsgaXNDbG91ZGZsYXJlV29ya2VycyB9IGZyb20gJy4vZW52LmpzJztcbmltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJ0bGVEc2EoYWxnLCBhbGdvcml0aG0pIHtcbiAgICBjb25zdCBoYXNoID0gYFNIQS0ke2FsZy5zbGljZSgtMyl9YDtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdIUzI1Nic6XG4gICAgICAgIGNhc2UgJ0hTMzg0JzpcbiAgICAgICAgY2FzZSAnSFM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzaCwgbmFtZTogJ0hNQUMnIH07XG4gICAgICAgIGNhc2UgJ1BTMjU2JzpcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdQUzUxMic6XG4gICAgICAgICAgICByZXR1cm4geyBoYXNoLCBuYW1lOiAnUlNBLVBTUycsIHNhbHRMZW5ndGg6IGFsZy5zbGljZSgtMykgPj4gMyB9O1xuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ1JTMzg0JzpcbiAgICAgICAgY2FzZSAnUlM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzaCwgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyB9O1xuICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzaCwgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogYWxnb3JpdGhtLm5hbWVkQ3VydmUgfTtcbiAgICAgICAgY2FzZSAnRWREU0EnOlxuICAgICAgICAgICAgaWYgKGlzQ2xvdWRmbGFyZVdvcmtlcnMoKSAmJiBhbGdvcml0aG0ubmFtZSA9PT0gJ05PREUtRUQyNTUxOScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBuYW1lOiAnTk9ERS1FRDI1NTE5JywgbmFtZWRDdXJ2ZTogJ05PREUtRUQyNTUxOScgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IGFsZ29yaXRobS5uYW1lIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7YWxnfSBpcyBub3Qgc3VwcG9ydGVkIGVpdGhlciBieSBKT1NFIG9yIHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1YnRsZVJzYUVzKGFsZykge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnUlNBLU9BRVAnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoYGFsZyAke2FsZ30gaXMgbm90IHN1cHBvcnRlZCBlaXRoZXIgYnkgSk9TRSBvciB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbn1cbiIsImNvbnN0IHRpbWluZ1NhZmVFcXVhbCA9IChhLCBiKSA9PiB7XG4gICAgaWYgKCEoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBidWZmZXInKTtcbiAgICB9XG4gICAgaWYgKCEoYiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgYnVmZmVyJyk7XG4gICAgfVxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5wdXQgYnVmZmVycyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoJyk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IGEubGVuZ3RoO1xuICAgIGxldCBvdXQgPSAwO1xuICAgIGxldCBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgICBvdXQgfD0gYVtpXSBeIGJbaV07XG4gICAgfVxuICAgIHJldHVybiBvdXQgPT09IDA7XG59O1xuZXhwb3J0IGRlZmF1bHQgdGltaW5nU2FmZUVxdWFsO1xuIiwiaW1wb3J0IHN1YnRsZUFsZ29yaXRobSBmcm9tICcuL3N1YnRsZV9kc2EuanMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICcuL3dlYmNyeXB0by5qcyc7XG5pbXBvcnQgY2hlY2tLZXlMZW5ndGggZnJvbSAnLi9jaGVja19rZXlfbGVuZ3RoLmpzJztcbmltcG9ydCBnZXRWZXJpZnlLZXkgZnJvbSAnLi9nZXRfc2lnbl92ZXJpZnlfa2V5LmpzJztcbmNvbnN0IHZlcmlmeSA9IGFzeW5jIChhbGcsIGtleSwgc2lnbmF0dXJlLCBkYXRhKSA9PiB7XG4gICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgZ2V0VmVyaWZ5S2V5KGFsZywga2V5LCAndmVyaWZ5Jyk7XG4gICAgY2hlY2tLZXlMZW5ndGgoYWxnLCBjcnlwdG9LZXkpO1xuICAgIGNvbnN0IGFsZ29yaXRobSA9IHN1YnRsZUFsZ29yaXRobShhbGcsIGNyeXB0b0tleS5hbGdvcml0aG0pO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBjcnlwdG8uc3VidGxlLnZlcmlmeShhbGdvcml0aG0sIGNyeXB0b0tleSwgc2lnbmF0dXJlLCBkYXRhKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgdmVyaWZ5O1xuIiwiZXhwb3J0IGRlZmF1bHQgY3J5cHRvO1xuZXhwb3J0IGNvbnN0IGlzQ3J5cHRvS2V5ID0gKGtleSkgPT4ga2V5IGluc3RhbmNlb2YgQ3J5cHRvS2V5O1xuIiwiaW1wb3J0IHsgSk9TRU5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmV4cG9ydCBjb25zdCBpbmZsYXRlID0gYXN5bmMgKCkgPT4ge1xuICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdKV0UgXCJ6aXBcIiAoQ29tcHJlc3Npb24gQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWUuIFlvdSBuZWVkIHRvIHVzZSB0aGUgYGluZmxhdGVSYXdgIGRlY3J5cHQgb3B0aW9uIHRvIHByb3ZpZGUgSW5mbGF0ZSBSYXcgaW1wbGVtZW50YXRpb24uJyk7XG59O1xuZXhwb3J0IGNvbnN0IGRlZmxhdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ0pXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGphdmFzY3JpcHQgcnVudGltZS4gWW91IG5lZWQgdG8gdXNlIHRoZSBgZGVmbGF0ZVJhd2AgZW5jcnlwdCBvcHRpb24gdG8gcHJvdmlkZSBEZWZsYXRlIFJhdyBpbXBsZW1lbnRhdGlvbi4nKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBiYXNlNjR1cmwgZnJvbSAnLi4vcnVudGltZS9iYXNlNjR1cmwuanMnO1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IGJhc2U2NHVybC5lbmNvZGU7XG5leHBvcnQgY29uc3QgZGVjb2RlID0gYmFzZTY0dXJsLmRlY29kZTtcbiIsImltcG9ydCB7IGRlY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVyIH0gZnJvbSAnLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vbGliL2lzX29iamVjdC5qcyc7XG5pbXBvcnQgeyBKV1RJbnZhbGlkIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUp3dChqd3QpIHtcbiAgICBpZiAodHlwZW9mIGp3dCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdKV1RzIG11c3QgdXNlIENvbXBhY3QgSldTIHNlcmlhbGl6YXRpb24sIEpXVCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgY29uc3QgeyAxOiBwYXlsb2FkLCBsZW5ndGggfSA9IGp3dC5zcGxpdCgnLicpO1xuICAgIGlmIChsZW5ndGggPT09IDUpXG4gICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdPbmx5IEpXVHMgdXNpbmcgQ29tcGFjdCBKV1Mgc2VyaWFsaXphdGlvbiBjYW4gYmUgZGVjb2RlZCcpO1xuICAgIGlmIChsZW5ndGggIT09IDMpXG4gICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdJbnZhbGlkIEpXVCcpO1xuICAgIGlmICghcGF5bG9hZClcbiAgICAgICAgdGhyb3cgbmV3IEpXVEludmFsaWQoJ0pXVHMgbXVzdCBjb250YWluIGEgcGF5bG9hZCcpO1xuICAgIGxldCBkZWNvZGVkO1xuICAgIHRyeSB7XG4gICAgICAgIGRlY29kZWQgPSBiYXNlNjR1cmwocGF5bG9hZCk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICB0aHJvdyBuZXcgSldUSW52YWxpZCgnRmFpbGVkIHRvIHBhcnNlIHRoZSBiYXNlNjR1cmwgZW5jb2RlZCBwYXlsb2FkJyk7XG4gICAgfVxuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShkZWNvZGVkKSk7XG4gICAgfVxuICAgIGNhdGNoIChfYikge1xuICAgICAgICB0aHJvdyBuZXcgSldUSW52YWxpZCgnRmFpbGVkIHRvIHBhcnNlIHRoZSBkZWNvZGVkIHBheWxvYWQgYXMgSlNPTicpO1xuICAgIH1cbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdJbnZhbGlkIEpXVCBDbGFpbXMgU2V0Jyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IGRlY29kZSBhcyBiYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVyIH0gZnJvbSAnLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vbGliL2lzX29iamVjdC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlUHJvdGVjdGVkSGVhZGVyKHRva2VuKSB7XG4gICAgbGV0IHByb3RlY3RlZEI2NHU7XG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAzIHx8IHBhcnRzLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgW3Byb3RlY3RlZEI2NHVdID0gcGFydHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRva2VuID09PSAnb2JqZWN0JyAmJiB0b2tlbikge1xuICAgICAgICBpZiAoJ3Byb3RlY3RlZCcgaW4gdG9rZW4pIHtcbiAgICAgICAgICAgIHByb3RlY3RlZEI2NHUgPSB0b2tlbi5wcm90ZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUb2tlbiBkb2VzIG5vdCBjb250YWluIGEgUHJvdGVjdGVkIEhlYWRlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvdGVjdGVkQjY0dSAhPT0gJ3N0cmluZycgfHwgIXByb3RlY3RlZEI2NHUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUoYmFzZTY0dXJsKHByb3RlY3RlZEI2NHUpKSk7XG4gICAgICAgIGlmICghaXNPYmplY3QocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgVG9rZW4gb3IgUHJvdGVjdGVkIEhlYWRlciBmb3JtYXR0aW5nJyk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEpPU0VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pPU0VfR0VORVJJQyc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KT1NFX0dFTkVSSUMnO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIChfYSA9IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChFcnJvciwgdGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV1RfQ0xBSU1fVkFMSURBVElPTl9GQUlMRUQnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjbGFpbSA9ICd1bnNwZWNpZmllZCcsIHJlYXNvbiA9ICd1bnNwZWNpZmllZCcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldUX0NMQUlNX1ZBTElEQVRJT05fRkFJTEVEJztcbiAgICAgICAgdGhpcy5jbGFpbSA9IGNsYWltO1xuICAgICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSldURXhwaXJlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV1RfRVhQSVJFRCc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNsYWltID0gJ3Vuc3BlY2lmaWVkJywgcmVhc29uID0gJ3Vuc3BlY2lmaWVkJykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV1RfRVhQSVJFRCc7XG4gICAgICAgIHRoaXMuY2xhaW0gPSBjbGFpbTtcbiAgICAgICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpPU0VBbGdOb3RBbGxvd2VkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KT1NFX0FMR19OT1RfQUxMT1dFRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSk9TRV9BTEdfTk9UX0FMTE9XRUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKT1NFTm90U3VwcG9ydGVkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KT1NFX05PVF9TVVBQT1JURUQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pPU0VfTk9UX1NVUFBPUlRFRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXRURlY3J5cHRpb25GYWlsZWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXRV9ERUNSWVBUSU9OX0ZBSUxFRCc7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdkZWNyeXB0aW9uIG9wZXJhdGlvbiBmYWlsZWQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXRV9ERUNSWVBUSU9OX0ZBSUxFRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXRUludmFsaWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXRV9JTlZBTElEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0VfSU5WQUxJRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXU0ludmFsaWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXU19JTlZBTElEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV1NfSU5WQUxJRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXVEludmFsaWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXVF9JTlZBTElEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV1RfSU5WQUxJRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXS0ludmFsaWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXS19JTlZBTElEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0tfSU5WQUxJRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXS1NJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tTX0lOVkFMSUQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXS1NfSU5WQUxJRCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXS1NOb01hdGNoaW5nS2V5IGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tTX05PX01BVENISU5HX0tFWSc7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdubyBhcHBsaWNhYmxlIGtleSBmb3VuZCBpbiB0aGUgSlNPTiBXZWIgS2V5IFNldCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldLU19OT19NQVRDSElOR19LRVknO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV0tTTXVsdGlwbGVNYXRjaGluZ0tleXMgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXS1NfTVVMVElQTEVfTUFUQ0hJTkdfS0VZUyc7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdtdWx0aXBsZSBtYXRjaGluZyBrZXlzIGZvdW5kIGluIHRoZSBKU09OIFdlYiBLZXkgU2V0JztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0tTX01VTFRJUExFX01BVENISU5HX0tFWVMnO1xuICAgIH1cbn1cblN5bWJvbC5hc3luY0l0ZXJhdG9yO1xuZXhwb3J0IGNsYXNzIEpXS1NUaW1lb3V0IGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tTX1RJTUVPVVQnO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAncmVxdWVzdCB0aW1lZCBvdXQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXS1NfVElNRU9VVCc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldTX1NJR05BVFVSRV9WRVJJRklDQVRJT05fRkFJTEVEJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ3NpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV1NfU0lHTkFUVVJFX1ZFUklGSUNBVElPTl9GQUlMRUQnO1xuICAgIH1cbn1cbiIsInZhciBpbmRleEJyb3dzZXIgPSBnbG9iYWxUaGlzLmZldGNoO1xyXG5jb25zdCB7IGZldGNoLCBSZXNwb25zZSwgUmVxdWVzdCwgSGVhZGVycyB9ID0gZ2xvYmFsVGhpcztcblxuZXhwb3J0IHsgSGVhZGVycywgUmVxdWVzdCwgUmVzcG9uc2UsIGluZGV4QnJvd3NlciBhcyBkZWZhdWx0LCBmZXRjaCB9O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LmJyb3dzZXIudHNcIik7XG4iLCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=